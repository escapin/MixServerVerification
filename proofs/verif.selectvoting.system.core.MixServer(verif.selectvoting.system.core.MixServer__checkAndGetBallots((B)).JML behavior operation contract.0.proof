\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jul 13 23:50:45 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Jul 13 23:50:45 CEST 2017
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:checkAndGetBallots([B)].JML behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:checkAndGetBallots([B)].JML behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "60987")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "data,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "12") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "12") (term "1,1") (newnames "heapBefore_checkAndGetBallots,savedHeapBefore_checkAndGetBallots") (userinteraction))
(builtin "One Step Simplification" (formula "12"))
(rule "variableDeclarationAssign" (formula "12") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "tagged_payload") (userinteraction))
(builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_checkAndRemoveSignature,result_0,exc_0,heapAfter_checkAndRemoveSignature,anon_heap_checkAndRemoveSignature") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::checkAndRemoveSignature([B)].JML behavior operation contract.0"))
(branch "Post (checkAndRemoveSignature)"
   (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "11") (userinteraction))
   (builtin "One Step Simplification" (formula "14"))
   (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "11") (userinteraction))
   (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "13") (userinteraction))
   (rule "andLeft" (formula "14") (userinteraction))
   (rule "notLeft" (formula "15") (userinteraction))
   (builtin "One Step Simplification" (formula "20"))
   (rule "assignment" (formula "20") (term "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "20") (term "1,1") (userinteraction))
   (rule "variableDeclaration" (formula "20") (term "1,1") (newnames "payload") (userinteraction))
   (builtin "One Step Simplification" (formula "20"))
   (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_checkAndRemoveTag,result_1,exc_1,heapAfter_checkAndRemoveTag,anon_heap_checkAndRemoveTag") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::checkAndRemoveTag([B)].JML behavior operation contract.0"))
   (branch "Post (checkAndRemoveTag)"
      (builtin "One Step Simplification" (formula "17"))
      (rule "assignment" (formula "22") (term "1,1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "22") (term "1,1,1") (userinteraction))
      (rule "variableDeclaration" (formula "22") (term "1,1,1") (newnames "ballotsAsAMessage") (userinteraction))
      (builtin "One Step Simplification" (formula "22"))
      (builtin "Use Operation Contract" (formula "22") (newnames "heapBefore_checkAndRemoveElectionId,result_2,exc_2,heapAfter_checkAndRemoveElectionId,anon_heap_checkAndRemoveElectionId") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::checkAndRemoveElectionId([B)].JML behavior operation contract.0"))
      (branch
         (rule "assignment" (formula "24") (term "1,1") (userinteraction))
         (rule "methodCallReturn" (formula "24") (term "1,1,1") (userinteraction))
         (rule "assignment" (formula "24") (term "1,1,1") (userinteraction))
         (rule "methodCallEmpty" (formula "24") (term "1,1,1,1") (userinteraction))
         (rule "tryEmpty" (formula "24") (term "1,1,1,1") (userinteraction))
         (rule "emptyModality" (formula "24") (term "1,1,1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "24"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "15"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "25"))
         (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "23") (userinteraction))
         (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "23") (userinteraction))
         (builtin "One Step Simplification" (formula "25"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "17") (userinteraction))
         (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "17") (userinteraction))
         (builtin "One Step Simplification" (formula "19"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "25"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "28"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "30"))
         (rule "notLeft" (formula "22"))
         (rule "andRight" (formula "35"))
         (branch "Case 1"
            (rule "andRight" (formula "35"))
            (branch
               (rule "applyEq" (formula "35") (term "0") (ifseqformula "27") (userinteraction))
               (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndRemoveElectionId,
            result_1)
= array2seq(heapAfter_checkAndRemoveTag, result_1)") (userinteraction))
               (branch "CUT: array2seq(heapAfter_checkAndRemoveElectionId, result_1) = array2seq(heapAfter_checkAndRemoveTag, result_1) TRUE"
                  (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "1") (userinteraction))
                  (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "21") (userinteraction))
                  (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndRemoveTag, result_0)
= array2seq(heapAfter_checkAndRemoveSignature,
            result_0)") (userinteraction))
                  (branch "CUT: array2seq(heapAfter_checkAndRemoveTag, result_0) = array2seq(heapAfter_checkAndRemoveSignature, result_0) TRUE"
                     (rule "applyEq" (formula "37") (term "0,0,0") (ifseqformula "1") (userinteraction))
                     (rule "applyEq" (formula "37") (term "0,0,0") (ifseqformula "15") (userinteraction))
                     (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndRemoveSignature,
            byte[]::select(heapAfter_checkAndRemoveSignature,
                           self,
                           verif.selectvoting.system.core.MixServer::$unsigned))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$unsigned))") (userinteraction))
                     (branch "CUT: array2seq(heapAfter_checkAndRemoveSignature, self.unsigned@heapAfter_checkAndRemoveSignature) = array2seq(heap, self.unsigned) TRUE"
                        (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "1") (userinteraction))
                        (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "10") (userinteraction))
                        (rule "mSecondofmConcat" (formula "38") (term "0,0") (userinteraction))
                        (rule "mSecondofmConcat" (formula "38") (term "0") (userinteraction))
                        (rule "array2seqDef" (formula "38") (term "0") (inst "u=u") (userinteraction))
                        (rule "array2seqDef" (formula "38") (term "1") (inst "u=u") (userinteraction))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "38") (inst "iv=iv") (userinteraction))
                        (rule "andRight" (formula "38") (userinteraction))
                        (branch "Case 1"
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1") (ifseqformula "13"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "1") (ifseqformula "26"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1") (ifseqformula "13"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,1") (ifseqformula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,1") (ifseqformula "13"))
                           (rule "eqSymm" (formula "38"))
                           (rule "eqSymm" (formula "29"))
                           (rule "eqSymm" (formula "16"))
                           (rule "eqSymm" (formula "3"))
                           (rule "eqSymm" (formula "10"))
                           (rule "eqSymm" (formula "22"))
                           (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "36"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "lenOfSeqDef" (formula "38") (term "1"))
                           (rule "polySimp_elimSub" (formula "38") (term "1,1"))
                           (rule "times_zero_2" (formula "38") (term "1,1,1"))
                           (rule "add_zero_right" (formula "38") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "38") (term "0"))
                           (rule "polySimp_elimSub" (formula "38") (term "1,0"))
                           (rule "times_zero_2" (formula "38") (term "1,1,0"))
                           (rule "add_zero_right" (formula "38") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0,1"))
                           (rule "add_zero_right" (formula "38") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0"))
                           (rule "add_zero_right" (formula "38") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "23"))
                           (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "2"))
                           (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "2"))
                           (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,0,0"))
                           (rule "array2seqDef" (formula "30") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "30") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "23") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "29") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "16"))
                           (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "3"))
                           (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "4") (ifseqformula "37"))
                           (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "10"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "10"))
                           (rule "array2seqDef" (formula "22") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "22") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "23") (term "1") (inst "u=u"))
                           (rule "eqSeqDef" (formula "2") (inst "iv=iv"))
                           (rule "andLeft" (formula "2"))
                           (rule "lenOfSeqDef" (formula "2") (term "1"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "1,1,1"))
                           (rule "add_zero_right" (formula "2") (term "1,1"))
                           (rule "getOfSeqDef" (formula "3") (term "1,1,0"))
                           (rule "castDel" (formula "3") (term "2,1,1,0"))
                           (rule "castDel" (formula "3") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "3") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "2") (term "0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,0"))
                           (rule "add_zero_right" (formula "2") (term "1,0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                           (rule "castDel" (formula "2") (term "1,0,1,0"))
                           (rule "castDel" (formula "2") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "16"))
                           (rule "array2seqDef" (formula "3") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "3"))
                           (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "1") (term "1,1,1") (inst "u=u"))
                           (rule "eqSeqDef2" (formula "30") (inst "iv=iv") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "eqSeqDef" (formula "23") (inst "iv=iv"))
                           (rule "andLeft" (formula "23"))
                           (rule "getOfSeqDef" (formula "24") (term "0,1,0"))
                           (rule "castDel" (formula "24") (term "2,0,1,0"))
                           (rule "castDel" (formula "24") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "24") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "24") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "24") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "24") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "23") (term "0"))
                           (rule "eqSymm" (formula "23"))
                           (rule "polySimp_elimSub" (formula "23") (term "1,1"))
                           (rule "times_zero_2" (formula "23") (term "1,1,1"))
                           (rule "add_zero_right" (formula "23") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "24") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "24") (term "0,1,0"))
                           (rule "castDel" (formula "24") (term "1,0,1,0"))
                           (rule "castDel" (formula "24") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "24") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "24") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "24") (term "1,0"))
                           (rule "lenOfSeqDef" (formula "23") (term "0"))
                           (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                           (rule "mul_literals" (formula "23") (term "1,1,0"))
                           (rule "add_zero_right" (formula "23") (term "1,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "23") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "23") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "23") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "23") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "23") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "37") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_21"))
                           (rule "applyEq" (formula "38") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                           (rule "eqSymm" (formula "38"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "6")))
                           (rule "eqSeqDef2" (formula "30") (inst "iv=iv") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "eqSeqDef" (formula "17") (inst "iv=iv"))
                           (rule "andLeft" (formula "17"))
                           (rule "lenOfSeqDef" (formula "17") (term "1"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                           (rule "times_zero_2" (formula "17") (term "1,1,1"))
                           (rule "add_zero_right" (formula "17") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "18") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "18") (term "1,1,0"))
                           (rule "castDel" (formula "18") (term "2,1,1,0"))
                           (rule "castDel" (formula "18") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "18") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "18") (term "0,1,0"))
                           (rule "castDel" (formula "18") (term "2,0,1,0"))
                           (rule "castDel" (formula "18") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "18") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "17") (term "0"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                           (rule "mul_literals" (formula "17") (term "1,1,0"))
                           (rule "add_zero_right" (formula "17") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1"))
                           (rule "add_zero_right" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                           (rule "add_zero_right" (formula "17") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                           (rule "apply_eq_monomials" (formula "18") (term "1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "polySimp_rightDist" (formula "18") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "18") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                           (rule "eqSeqDef" (formula "4") (inst "iv=iv"))
                           (rule "andLeft" (formula "4"))
                           (rule "getOfSeqDef" (formula "5") (term "1,1,0"))
                           (rule "castDel" (formula "5") (term "2,1,1,0"))
                           (rule "castDel" (formula "5") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "5") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "5") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "4") (term "1"))
                           (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "1,1,1"))
                           (rule "add_zero_right" (formula "4") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                           (rule "add_zero_right" (formula "4") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,1,0"))
                           (rule "apply_eq_monomials" (formula "5") (term "1,0,1,0,0") (ifseqformula "4"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "5") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "5") (term "1,1,1,0,1,0,0"))
                           (rule "times_zero_1" (formula "5") (term "1,1,0,1,0,0"))
                           (rule "add_zero_right" (formula "5") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                           (rule "eqSeqDef2" (formula "25") (inst "iv=iv") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "pullOutSelect" (formula "2") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_33"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "20") (term "1,1,0,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "2"))
                           (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "36")) (ifInst ""  (formula "8")))
                           (rule "elementOfUnion" (formula "1") (term "0,0"))
                           (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                           (rule "applyEqReverse" (formula "39") (term "0,1,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "39") (term "0,0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "39"))
                           (rule "closeTrue" (formula "39"))
                        )
                        (branch
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "1") (ifseqformula "26"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1") (ifseqformula "13"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1") (ifseqformula "13"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,1") (ifseqformula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,1") (ifseqformula "13"))
                           (rule "allRight" (formula "38") (inst "sk=iv_11"))
                           (rule "impRight" (formula "38"))
                           (rule "andLeft" (formula "1"))
                           (rule "eqSymm" (formula "5"))
                           (rule "eqSymm" (formula "31"))
                           (rule "eqSymm" (formula "12"))
                           (rule "eqSymm" (formula "24"))
                           (rule "eqSymm" (formula "18"))
                           (rule "eqSymm" (formula "40"))
                           (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "38"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "36"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "lenOfSeqDef" (formula "2") (term "1"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1"))
                           (rule "add_zero_right" (formula "2") (term "1,1"))
                           (rule "getOfSeqDef" (formula "40") (term "1"))
                           (rule "castDel" (formula "40") (term "2,1"))
                           (rule "castDel" (formula "40") (term "1,1"))
                           (rule "add_zero_right" (formula "40") (term "0,2,1,1"))
                           (rule "replace_known_left" (formula "40") (term "0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "40"))
                           (rule "polySimp_elimSub" (formula "40") (term "1,0,1"))
                           (rule "times_zero_2" (formula "40") (term "1,1,0,1"))
                           (rule "add_zero_right" (formula "40") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "40") (term "0"))
                           (rule "castDel" (formula "40") (term "1,0"))
                           (rule "castDel" (formula "40") (term "2,0"))
                           (rule "add_zero_right" (formula "40") (term "0,2,1,0"))
                           (rule "replace_known_left" (formula "40") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "40"))
                           (rule "polySimp_elimSub" (formula "40") (term "1,0,0"))
                           (rule "mul_literals" (formula "40") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "40") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                           (rule "add_zero_right" (formula "2") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "40") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "40") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "4"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "25"))
                           (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "4"))
                           (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "25") (term "1") (ifseqformula "5"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "40") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "40") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "3"))
                           (rule "array2seqDef" (formula "32") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "32"))
                           (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "4"))
                           (rule "array2seqDef" (formula "25") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "5") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "5"))
                           (rule "array2seqDef" (formula "31") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "31") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "12"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "3"))
                           (rule "eqSymm" (formula "12"))
                           (rule "array2seqDef" (formula "24") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "18") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "24") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "25") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "3"))
                           (rule "array2seqDef" (formula "32") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "32"))
                           (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "4"))
                           (rule "array2seqDef" (formula "5") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "5"))
                           (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "12"))
                           (rule "eqSeqDef" (formula "18") (inst "iv=iv"))
                           (rule "andLeft" (formula "18"))
                           (rule "getOfSeqDef" (formula "19") (term "1,1,0"))
                           (rule "castDel" (formula "19") (term "2,1,1,0"))
                           (rule "castDel" (formula "19") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "19") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "18") (term "0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                           (rule "times_zero_2" (formula "18") (term "1,1,1"))
                           (rule "add_zero_right" (formula "18") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "19") (term "0,1,0"))
                           (rule "castDel" (formula "19") (term "2,0,1,0"))
                           (rule "castDel" (formula "19") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "19") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "19") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "18") (term "0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                           (rule "times_zero_2" (formula "18") (term "1,1,1"))
                           (rule "add_zero_right" (formula "18") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
                           (rule "apply_eq_monomials" (formula "19") (term "1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,0,1"))
                           (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,0,1"))
                           (rule "apply_eq_monomials" (formula "19") (term "1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                           (rule "eqSeqDef" (formula "26") (inst "iv=iv"))
                           (rule "andLeft" (formula "26"))
                           (rule "lenOfSeqDef" (formula "26") (term "0"))
                           (rule "eqSymm" (formula "26"))
                           (rule "polySimp_elimSub" (formula "26") (term "1,1"))
                           (rule "times_zero_2" (formula "26") (term "1,1,1"))
                           (rule "add_zero_right" (formula "26") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "27") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "27") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "27") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "27") (term "0,1,0"))
                           (rule "castDel" (formula "27") (term "2,0,1,0"))
                           (rule "castDel" (formula "27") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "27") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "27") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "26") (term "0"))
                           (rule "polySimp_elimSub" (formula "26") (term "1,0"))
                           (rule "times_zero_2" (formula "26") (term "1,1,0"))
                           (rule "add_zero_right" (formula "26") (term "1,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "getOfSeqDef" (formula "26") (term "0,1,0"))
                           (rule "castDel" (formula "26") (term "1,0,1,0"))
                           (rule "castDel" (formula "26") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "26") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "26") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "26") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "26") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "26") (term "1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                           (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
                           (rule "andLeft" (formula "3"))
                           (rule "lenOfSeqDef" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                           (rule "castDel" (formula "4") (term "2,0,1,0"))
                           (rule "castDel" (formula "4") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "4") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "4") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "3") (term "0"))
                           (rule "eqSymm" (formula "3"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                           (rule "times_zero_2" (formula "3") (term "1,1,1"))
                           (rule "add_zero_right" (formula "3") (term "1,1"))
                           (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                           (rule "castDel" (formula "4") (term "2,0,1,0"))
                           (rule "castDel" (formula "4") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "4") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "4") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "3") (term "0"))
                           (rule "eqSymm" (formula "3"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                           (rule "times_zero_2" (formula "3") (term "1,1,1"))
                           (rule "add_zero_right" (formula "3") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "4") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                           (rule "add_zero_right" (formula "3") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "4") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
                           (rule "apply_eq_monomials" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "4") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "4") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1,0,0"))
                           (rule "eqSeqDef" (formula "5") (inst "iv=iv"))
                           (rule "andLeft" (formula "5"))
                           (rule "lenOfSeqDef" (formula "5") (term "0"))
                           (rule "eqSymm" (formula "5"))
                           (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                           (rule "times_zero_2" (formula "5") (term "1,1,1"))
                           (rule "add_zero_right" (formula "5") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "6") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "6") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "6") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "6") (term "1,1,0"))
                           (rule "castDel" (formula "6") (term "2,1,1,0"))
                           (rule "castDel" (formula "6") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "6") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "6") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "6") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "6") (term "1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "6") (term "0,1,0"))
                           (rule "castDel" (formula "6") (term "2,0,1,0"))
                           (rule "castDel" (formula "6") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "6") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "6") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "5") (term "0"))
                           (rule "polySimp_elimSub" (formula "5") (term "1,0"))
                           (rule "times_zero_2" (formula "5") (term "1,1,0"))
                           (rule "add_zero_right" (formula "5") (term "1,0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "5") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "5") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "5") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "5") (term "1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                           (rule "eqSeqDef" (formula "6") (inst "iv=iv"))
                           (rule "andLeft" (formula "6"))
                           (rule "getOfSeqDef" (formula "7") (term "1,1,0"))
                           (rule "castDel" (formula "7") (term "2,1,1,0"))
                           (rule "castDel" (formula "7") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "7") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "7") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "7") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "6") (term "1"))
                           (rule "polySimp_elimSub" (formula "6") (term "1,1"))
                           (rule "mul_literals" (formula "6") (term "1,1,1"))
                           (rule "add_zero_right" (formula "6") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1"))
                           (rule "add_zero_right" (formula "6") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,1,0"))
                           (rule "apply_eq_monomials" (formula "7") (term "1,0,1,0,0") (ifseqformula "6"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "7") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "7") (term "1,1,1,0,1,0,0"))
                           (rule "times_zero_1" (formula "7") (term "1,1,0,1,0,0"))
                           (rule "add_zero_right" (formula "7") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,0,0"))
                           (rule "eqSeqDef2" (formula "34") (inst "iv=iv") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "array2seqDef" (formula "14") (term "0,1,1") (inst "u=u"))
                           (rule "eqSeqDef2" (formula "27") (inst "iv=iv") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "array2seqDef" (formula "14") (term "0,1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "14") (term "2,0,1") (ifseqformula "8") (ifseqformula "40"))
                           (rule "pullOutSelect" (formula "41") (term "1,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_22"))
                           (rule "applyEq" (formula "42") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "18"))
                           (rule "eqSymm" (formula "42"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "18"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "10")))
                           (rule "pullOutSelect" (formula "15") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_34"))
                           (rule "applyEq" (formula "23") (term "1,1,0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "22") (term "0,0,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "5") (term "1,1,0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "16") (term "0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "23") (term "0,1,1,1,0,0,1,0") (ifseqformula "15"))
                           (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "40")) (ifInst ""  (formula "10")))
                           (rule "eqSymm" (formula "5") (term "1,0"))
                           (rule "eqSymm" (formula "4"))
                           (rule "applyEq" (formula "5") (term "1,1,1,0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "5") (term "1,1,1,0,0") (ifseqformula "22"))
                           (rule "applyEq" (formula "4") (term "1") (ifseqformula "22"))
                           (rule "eqSeqDef2" (formula "35") (inst "iv=iv") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "elementOfUnion" (formula "1") (term "0,0"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                           (rule "applyEqReverse" (formula "42") (term "1,1,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "42") (term "0,0,0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "41"))
                           (rule "elementOfUnion" (formula "14") (term "0,0"))
                           (rule "elementOfSingleton" (formula "14") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "38")))
                           (rule "elementOfSingleton" (formula "14") (term "0,0"))
                           (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "38")))
                           (rule "applyEqReverse" (formula "21") (term "0,1,0") (ifseqformula "14"))
                           (rule "applyEqReverse" (formula "15") (term "1,2,0") (ifseqformula "14"))
                           (rule "applyEqReverse" (formula "21") (term "0,0,0,0") (ifseqformula "14"))
                           (rule "applyEqReverse" (formula "15") (term "0,1,0") (ifseqformula "14"))
                           (rule "applyEqReverse" (formula "4") (term "1,1,1,1,0") (ifseqformula "14"))
                           (rule "applyEqReverse" (formula "21") (term "1,1,0,1,0") (ifseqformula "14"))
                           (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0,1,0") (ifseqformula "14"))
                           (rule "applyEqReverse" (formula "4") (term "0,1,1,1,0,1,1,0") (ifseqformula "14"))
                           (rule "hideAuxiliaryEq" (formula "14"))
                           (rule "eqSymm" (formula "4") (term "1,0"))
                           (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "pullOutSelect" (formula "38") (term "1,0") (inst "selectSK=arr_115"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "23"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                           (rule "eqSymm" (formula "39"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_116"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_117"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "Contract_axiom_for_signerPre_in_MixServer" (formula "16") (term "0"))
                           (rule "eqSymm" (formula "16") (term "1,0,1,1"))
                           (rule "eqSymm" (formula "16") (term "1"))
                           (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "11"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "39")))
                           (rule "applyEq" (formula "16") (term "1") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "17"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "17"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "16"))
                           (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "17"))
                           (rule "narrowSelectArrayType" (formula "17") (term "2,0") (ifseqformula "11") (ifseqformula "39"))
                           (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "17"))
                           (rule "eqSeqDef" (formula "17") (inst "iv=iv"))
                           (rule "andLeft" (formula "17"))
                           (rule "lenOfSeqDef" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                           (rule "lenOfSeqDef" (formula "17") (term "0"))
                           (rule "eqSymm" (formula "17"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                           (rule "times_zero_2" (formula "17") (term "1,1,1"))
                           (rule "add_zero_right" (formula "17") (term "1,1"))
                           (rule "getOfSeqDef" (formula "18") (term "1,1,0"))
                           (rule "castDel" (formula "18") (term "1,1,1,0"))
                           (rule "castDel" (formula "18") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "18") (term "0,1,0"))
                           (rule "castDel" (formula "18") (term "2,0,1,0"))
                           (rule "castDel" (formula "18") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "18") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "17") (term "0"))
                           (rule "eqSymm" (formula "17"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                           (rule "times_zero_2" (formula "17") (term "1,1,1"))
                           (rule "add_zero_right" (formula "17") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                           (rule "add_zero_right" (formula "17") (term "0,0,0"))
                           (rule "eqSymm" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                           (rule "add_zero_right" (formula "17") (term "0,0,0"))
                           (rule "eqSymm" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                           (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                           (rule "eqSymm" (formula "17"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,0,1"))
                           (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "17") (term "1") (ifseqformula "6"))
                           (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                           (rule "Definition_axiom_for_signerPre_in_verif_selectvoting_system_core_MixServer" (formula "19") (term "0"))
                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "38")) (ifInst ""  (formula "16")) (ifInst ""  (formula "39")) (ifInst ""  (formula "40")))
                           (rule "eqSymm" (formula "19"))
                           (rule "array2seqDef" (formula "19") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "19") (term "2,1") (ifseqformula "11") (ifseqformula "40"))
                           (rule "eqSeqDef" (formula "19") (inst "iv=iv"))
                           (rule "andLeft" (formula "19"))
                           (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "20") (term "1,1,0"))
                           (rule "castDel" (formula "20") (term "2,1,1,0"))
                           (rule "castDel" (formula "20") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "19") (term "0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "1,1,1"))
                           (rule "add_zero_right" (formula "19") (term "1,1"))
                           (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                           (rule "castDel" (formula "20") (term "2,0,1,0"))
                           (rule "castDel" (formula "20") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "19") (term "0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "1,1,1"))
                           (rule "add_zero_right" (formula "19") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                           (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                           (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "6"))
                           (rule "eqSymm" (formula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                           (rule "commute_or_2" (formula "35"))
                           (rule "nnf_imp2or" (formula "30") (term "0"))
                           (rule "nnf_imp2or" (formula "8") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "nnf_imp2or" (formula "7") (term "0"))
                           (rule "ifthenelse_split" (formula "5") (term "0"))
                           (branch "self.concatenated.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "6")))
                              (rule "cut_direct" (formula "24") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "cut_direct" (formula "30") (term "0,0"))
                                 (branch "CUT: result_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "14"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "19") (term "1,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "narrowSelectArrayType" (formula "8") (term "1,1,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "narrowSelectArrayType" (formula "54") (term "0") (ifseqformula "12") (ifseqformula "41"))
                                    (rule "eqSymm" (formula "54"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "35") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "12") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "23") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "29") (ifseqformula "41"))
                                    (rule "nonNull" (formula "22") (inst "i=i"))
                                    (rule "greater_literals" (formula "22") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "sub_literals" (formula "22") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "21") (inst "i=i"))
                                    (rule "greater_literals" (formula "21") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "sub_literals" (formula "21") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "20") (inst "i=i"))
                                    (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "greater_literals" (formula "20") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "39") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet100000000_0" (formula "39") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "39") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "41"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "notLeft" (formula "39"))
                                    (rule "nonNull" (formula "41") (inst "i=i"))
                                    (rule "greater_literals" (formula "41") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "sub_literals" (formula "41") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "notLeft" (formula "41"))
                                    (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "40") (inst "i=i"))
                                    (rule "sub_literals" (formula "40") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "greater_literals" (formula "40") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "andLeft" (formula "40"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "39") (inst "i=i"))
                                    (rule "sub_literals" (formula "39") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "greater_literals" (formula "39") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "39"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_22"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")) (ifInst ""  (formula "14")))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "32"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "26"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "15")))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_38"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "33"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "replaceKnownSelect_taclet100000000_3" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_5" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "elementOfUnion" (formula "2") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "2") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "63")))
                                    (rule "elementOfSingleton" (formula "2") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "63")))
                                    (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "pullOutSelect" (formula "42") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_36"))
                                    (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                    (rule "applyEq" (formula "46") (term "0") (ifseqformula "42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "42") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "42") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "62")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                    (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_36"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "40"))
                                    (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "61")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "30"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "61")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "40") (term "0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "61")) (ifInst ""  (formula "13")))
                                    (rule "pullOutSelect" (formula "39") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_36"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "39"))
                                    (rule "applyEq" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "30"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "62")) (ifInst ""  (formula "13")))
                                    (rule "elementOfUnion" (formula "43") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "43") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "62")))
                                    (rule "elementOfSingleton" (formula "43") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "62")))
                                    (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "43"))
                                    (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,0") (ifseqformula "43"))
                                    (rule "applyEqReverse" (formula "44") (term "1,0,0,1,0") (ifseqformula "43"))
                                    (rule "hideAuxiliaryEq" (formula "43"))
                                    (rule "elementOfUnion" (formula "41") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "41") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "60")))
                                    (rule "elementOfSingleton" (formula "41") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "60")))
                                    (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                    (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "41"))
                                    (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                                    (rule "hideAuxiliaryEq" (formula "41"))
                                    (rule "elementOfUnion" (formula "39") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "39") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "58")))
                                    (rule "elementOfSingleton" (formula "39") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "58")))
                                    (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "39"))
                                    (rule "applyEqReverse" (formula "40") (term "1,0,0,1,0") (ifseqformula "39"))
                                    (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                    (rule "hideAuxiliaryEq" (formula "39"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet000100000000_11" (formula "28") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_12" (formula "28") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet000100000000_15" (formula "28") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_16" (formula "28") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_19" (formula "28") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_26" (formula "28") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_22" (formula "28") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_29" (formula "28") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_30" (formula "28") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_37" (formula "28") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_33" (formula "28") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_36" (formula "28") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_38" (formula "28") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_39" (formula "28") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_3" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_2" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_5" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "nonNull" (formula "30") (inst "i=i"))
                                    (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "46")))
                                    (rule "greater_literals" (formula "30") (term "0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "29") (inst "i=i"))
                                    (rule "greater_literals" (formula "29") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "45")))
                                    (rule "sub_literals" (formula "29") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "28") (inst "i=i"))
                                    (rule "greater_literals" (formula "28") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "44")))
                                    (rule "sub_literals" (formula "28") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "36") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet000100000000_10" (formula "36") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_12" (formula "36") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet000100000000_14" (formula "36") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_16" (formula "36") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_18" (formula "36") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_26" (formula "36") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_28" (formula "36") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_21" (formula "36") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_37" (formula "36") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_30" (formula "36") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_32" (formula "36") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_35" (formula "36") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_38" (formula "36") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_39" (formula "36") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_1" (formula "36") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000100000000_24" (formula "36") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "36") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100000000_25" (formula "36") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "notLeft" (formula "36"))
                                    (rule "nonNull" (formula "38") (inst "i=i"))
                                    (rule "sub_literals" (formula "38") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "48")))
                                    (rule "greater_literals" (formula "38") (term "0"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "37") (inst "i=i"))
                                    (rule "greater_literals" (formula "37") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "47")))
                                    (rule "sub_literals" (formula "37") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "36") (inst "i=i"))
                                    (rule "sub_literals" (formula "36") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "46")))
                                    (rule "greater_literals" (formula "36") (term "0"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "ifthenelse_split" (formula "10") (term "1"))
                                    (branch "result_1.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "12") (term "0,1,1,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "replace_known_left" (formula "36") (term "0,1,1,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "ifthenelse_split" (formula "7") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "29") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "replace_known_left" (formula "21") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "commute_or_2" (formula "44") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "12") (term "0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "lenNonNegative" (formula "12") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "ifthenelse_split" (formula "8") (term "0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
                                             (rule "eqSymm" (formula "22") (term "1,0"))
                                             (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
                                             (rule "eqSymm" (formula "9") (term "1,0"))
                                             (rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
                                             (rule "eqSymm" (formula "9") (term "1,0"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "nnf_imp2or" (formula "47") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "33") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0"))
                                             (rule "nnf_imp2or" (formula "41") (term "0"))
                                             (rule "nnf_imp2or" (formula "40") (term "0"))
                                             (rule "nnf_imp2or" (formula "39") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "nnf_notAnd" (formula "49") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "49") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0"))
                                             (rule "mul_literals" (formula "49") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "49") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                             (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "48") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                             (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "47") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "47") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                                             (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "67") (term "0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "66"))
                                                (rule "closeTrue" (formula "66"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "50") (ifseqformula "55"))
                                                (rule "close" (formula "50") (ifseqformula "16"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "8"))
                                             (rule "inEqSimp_geqRight" (formula "49"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "15") (term "1,0,0,0,1,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "15") (term "0,0,0,1,0"))
                                             (rule "eqSymm" (formula "15") (term "1,0"))
                                             (rule "applyEq" (formula "13") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "13") (term "0,0,0"))
                                             (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "14") (term "0,0,0"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "8"))
                                             (rule "closeFalse" (formula "8"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_right" (formula "8") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "28") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_geqRight" (formula "47"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "8") (term "0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "21") (term "0,0"))
                                          (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
                                          (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "9") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
                                          (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "9") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "commute_or_2" (formula "40") (term "0"))
                                          (rule "lenNonNegative" (formula "10") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10"))
                                          (rule "arrayLengthNotNegative" (formula "11") (term "1,0,0,0"))
                                          (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                                          (rule "applyEq" (formula "10") (term "1,0,0,0") (ifseqformula "11"))
                                          (rule "seqDef_lower_equals_upper" (formula "10") (term "0,0,0"))
                                          (rule "applyEq" (formula "13") (term "1,0,0,0") (ifseqformula "11"))
                                          (rule "seqDef_lower_equals_upper" (formula "13") (term "0,0,0"))
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                                          (rule "qeq_literals" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "12") (term "1,0,0,0,1,0") (ifseqformula "10"))
                                          (rule "seqDef_lower_equals_upper" (formula "12") (term "0,0,0,1,0"))
                                          (rule "eqSymm" (formula "12") (term "1,0"))
                                          (rule "applyEq" (formula "9") (term "0") (ifseqformula "11"))
                                          (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
                                          (rule "leq_literals" (formula "9") (term "0"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "nnf_imp2or" (formula "43") (term "0"))
                                          (rule "nnf_imp2or" (formula "42") (term "0"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "nnf_imp2or" (formula "28") (term "0"))
                                          (rule "nnf_imp2or" (formula "27") (term "0"))
                                          (rule "nnf_imp2or" (formula "26") (term "0"))
                                          (rule "nnf_imp2or" (formula "36") (term "0"))
                                          (rule "nnf_imp2or" (formula "35") (term "0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "7") (term "0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.concatenated.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "61"))
                                             (rule "closeTrue" (formula "61"))
                                          )
                                          (branch "self.concatenated.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "50"))
                                             (rule "close" (formula "45") (ifseqformula "13"))
                                          )
                                       )
                                    )
                                    (branch "result_1.length ≥ 1 FALSE"
                                       (rule "replace_known_right" (formula "11") (term "0,1,1,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "replace_known_right" (formula "35") (term "0,1,1,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "inEqSimp_geqRight" (formula "46"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "12") (term "0,0"))
                                       (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "12") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "35") (term "0,0"))
                                       (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "35") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "ifthenelse_split" (formula "8") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_left" (formula "20") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "replace_known_left" (formula "11") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "commute_or_2" (formula "42") (term "0"))
                                          (rule "lenNonNegative" (formula "12") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "arrayLengthNotNegative" (formula "13") (term "1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "8"))
                                          (rule "leq_literals" (formula "13") (term "0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "ifthenelse_split" (formula "9") (term "0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "21") (term "1,0"))
                                             (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "10") (term "1,0"))
                                             (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "10") (term "1,0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "45") (term "0"))
                                             (rule "nnf_imp2or" (formula "44") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0"))
                                             (rule "nnf_imp2or" (formula "30") (term "0"))
                                             (rule "nnf_imp2or" (formula "39") (term "0"))
                                             (rule "nnf_imp2or" (formula "38") (term "0"))
                                             (rule "nnf_imp2or" (formula "37") (term "0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                             (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "64"))
                                                (rule "closeTrue" (formula "64"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "48") (ifseqformula "53"))
                                                (rule "close" (formula "48") (ifseqformula "15"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "9"))
                                             (rule "inEqSimp_geqRight" (formula "47"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "12") (term "1,0"))
                                             (rule "applyEq" (formula "13") (term "1,0,0,0") (ifseqformula "10"))
                                             (rule "seqDef_lower_equals_upper" (formula "13") (term "0,0,0"))
                                             (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "10"))
                                             (rule "seqDef_lower_equals_upper" (formula "14") (term "0,0,0"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                             (rule "qeq_literals" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_right" (formula "10") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_right" (formula "27") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "replace_known_right" (formula "19") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "9") (term "0"))
                                          (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "9") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "9") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                          (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                          (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "26") (term "0,0"))
                                          (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "26") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "18") (term "0,0"))
                                          (rule "add_zero_right" (formula "18") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "18") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "inEqSimp_notGeq" (formula "17") (term "0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "17") (term "0,0"))
                                          (rule "commute_or_2" (formula "38") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "10") (term "1,0,0,0"))
                                          (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                          (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                                          (rule "qeq_literals" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "10") (term "1,0,0,0") (ifseqformula "9"))
                                          (rule "seqDef_lower_equals_upper" (formula "10") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "nnf_imp2or" (formula "40") (term "0"))
                                          (rule "nnf_imp2or" (formula "39") (term "0"))
                                          (rule "nnf_imp2or" (formula "27") (term "0"))
                                          (rule "nnf_imp2or" (formula "26") (term "0"))
                                          (rule "nnf_imp2or" (formula "25") (term "0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "33") (term "0"))
                                          (rule "nnf_imp2or" (formula "32") (term "0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.concatenated.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "59"))
                                             (rule "closeTrue" (formula "59"))
                                          )
                                          (branch "self.concatenated.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "48"))
                                             (rule "close" (formula "43") (ifseqformula "12"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "37") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet100000000_0" (formula "37") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "37") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "notLeft" (formula "39"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "notLeft" (formula "39"))
                                    (rule "notLeft" (formula "38"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "notLeft" (formula "38"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "notLeft" (formula "38"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "56") (term "0") (ifseqformula "12") (ifseqformula "41"))
                                    (rule "eqSymm" (formula "56"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "27") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "33") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "21") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "12") (ifseqformula "41"))
                                    (rule "nonNull" (formula "39") (inst "i=i"))
                                    (rule "sub_literals" (formula "39") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "greater_literals" (formula "39") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "39"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "38") (inst "i=i"))
                                    (rule "sub_literals" (formula "38") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "greater_literals" (formula "38") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "andLeft" (formula "38"))
                                    (rule "notLeft" (formula "38"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "37") (inst "i=i"))
                                    (rule "sub_literals" (formula "37") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "greater_literals" (formula "37") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_21"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "23"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                    (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_36"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "23"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "14")))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_36"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "30"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "15")))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_36"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")) (ifInst ""  (formula "16")))
                                    (rule "elementOfUnion" (formula "3") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "59")))
                                    (rule "elementOfSingleton" (formula "3") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "59")))
                                    (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "pullOutSelect" (formula "45") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                                    (rule "replaceKnownSelect_taclet100000000_3" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_5" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "21") (term "1,0,1,0") (ifseqformula "14") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "10") (term "1,1,1,0") (ifseqformula "14") (ifseqformula "45"))
                                    (rule "elementOfUnion" (formula "2") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "2") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "57")))
                                    (rule "elementOfSingleton" (formula "2") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "57")))
                                    (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_35"))
                                    (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                    (rule "applyEq" (formula "44") (term "0") (ifseqformula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "57")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "29"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "23"))
                                    (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "57")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "23"))
                                    (rule "replace_known_left" (formula "40") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "57")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                    (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "38") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_35"))
                                    (rule "applyEq" (formula "43") (term "0") (ifseqformula "38"))
                                    (rule "applyEq" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                    (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "57")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "28"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0,0") (ifseqformula "22"))
                                    (rule "replace_known_left" (formula "38") (term "0,0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "57")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "22"))
                                    (rule "replace_known_left" (formula "38") (term "0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "57")) (ifInst ""  (formula "13")))
                                    (rule "pullOutSelect" (formula "37") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_35"))
                                    (rule "applyEq" (formula "43") (term "0") (ifseqformula "37"))
                                    (rule "applyEq" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "58")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "28"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0") (ifseqformula "22"))
                                    (rule "replace_known_left" (formula "37") (term "0,0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "58")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "22"))
                                    (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "58")) (ifInst ""  (formula "13")))
                                    (rule "elementOfUnion" (formula "41") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "41") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "58")))
                                    (rule "elementOfSingleton" (formula "41") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "58")))
                                    (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                                    (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                    (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "41"))
                                    (rule "hideAuxiliaryEq" (formula "41"))
                                    (rule "elementOfUnion" (formula "39") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "39") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "57")))
                                    (rule "elementOfSingleton" (formula "39") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "57")))
                                    (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "39"))
                                    (rule "applyEqReverse" (formula "40") (term "1,0,0,1,0") (ifseqformula "39"))
                                    (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                    (rule "hideAuxiliaryEq" (formula "39"))
                                    (rule "elementOfUnion" (formula "37") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "37") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "56")))
                                    (rule "elementOfSingleton" (formula "37") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "56")))
                                    (rule "applyEqReverse" (formula "38") (term "1,0,0,1,0") (ifseqformula "37"))
                                    (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                    (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "37"))
                                    (rule "hideAuxiliaryEq" (formula "37"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "32") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet100100000000_10" (formula "32") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_12" (formula "32") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet100100000000_14" (formula "32") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_22" (formula "32") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_17" (formula "32") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_26" (formula "32") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_28" (formula "32") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_20" (formula "32") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_37" (formula "32") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_30" (formula "32") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_32" (formula "32") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_35" (formula "32") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_38" (formula "32") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_39" (formula "32") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_24" (formula "32") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_1" (formula "32") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_25" (formula "32") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "32") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "32"))
                                    (rule "notLeft" (formula "32"))
                                    (rule "nonNull" (formula "34") (inst "i=i"))
                                    (rule "greater_literals" (formula "34") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "44")))
                                    (rule "sub_literals" (formula "34") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "33") (inst "i=i"))
                                    (rule "greater_literals" (formula "33") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "43")))
                                    (rule "sub_literals" (formula "33") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "32") (inst "i=i"))
                                    (rule "greater_literals" (formula "32") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "42")))
                                    (rule "sub_literals" (formula "32") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "26") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet100100000000_11" (formula "26") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_12" (formula "26") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet100100000000_15" (formula "26") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_22" (formula "26") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_18" (formula "26") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_26" (formula "26") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_21" (formula "26") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_29" (formula "26") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_30" (formula "26") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_37" (formula "26") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_33" (formula "26") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100100000000_36" (formula "26") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_38" (formula "26") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100000000_39" (formula "26") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_3" (formula "26") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_2" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_5" (formula "26") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "notLeft" (formula "27"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "notLeft" (formula "27"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "notLeft" (formula "26"))
                                    (rule "notLeft" (formula "26"))
                                    (rule "nonNull" (formula "28") (inst "i=i"))
                                    (rule "greater_literals" (formula "28") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "46")))
                                    (rule "sub_literals" (formula "28") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "27") (inst "i=i"))
                                    (rule "greater_literals" (formula "27") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "45")))
                                    (rule "sub_literals" (formula "27") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "26") (inst "i=i"))
                                    (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "44")))
                                    (rule "greater_literals" (formula "26") (term "0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "14"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "nonNull" (formula "22") (inst "i=i"))
                                    (rule "greater_literals" (formula "22") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "48")))
                                    (rule "sub_literals" (formula "22") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "48"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "21") (inst "i=i"))
                                    (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "47")))
                                    (rule "greater_literals" (formula "21") (term "0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "47"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "20") (inst "i=i"))
                                    (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "46")))
                                    (rule "greater_literals" (formula "20") (term "0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "46"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "ifthenelse_split" (formula "10") (term "1"))
                                    (branch "result_1.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "12") (term "0,1,1,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "replace_known_left" (formula "36") (term "0,1,1,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "ifthenelse_split" (formula "7") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_left" (formula "21") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_left" (formula "29") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "commute_or_2" (formula "44") (term "0"))
                                          (rule "lenNonNegative" (formula "12") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "arrayLengthNotNegative" (formula "13") (term "1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "13") (term "0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "ifthenelse_split" (formula "8") (term "0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "23") (term "1,0"))
                                             (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "10") (term "1,0"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
                                             (rule "eqSymm" (formula "9") (term "1,0"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "nnf_imp2or" (formula "47") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "41") (term "0"))
                                             (rule "nnf_imp2or" (formula "40") (term "0"))
                                             (rule "nnf_imp2or" (formula "39") (term "0"))
                                             (rule "nnf_imp2or" (formula "33") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "nnf_imp2or" (formula "24") (term "0"))
                                             (rule "nnf_imp2or" (formula "23") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "nnf_notAnd" (formula "49") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "49") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0"))
                                             (rule "mul_literals" (formula "49") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "49") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                             (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "48") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                             (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                                             (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "47") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "42") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "42") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                             (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "41") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
                                             (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "40") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0"))
                                             (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "40") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
                                             (rule "mul_literals" (formula "40") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "40") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "67") (term "0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "67"))
                                                (rule "closeTrue" (formula "67"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "50") (ifseqformula "55"))
                                                (rule "close" (formula "50") (ifseqformula "16"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "8"))
                                             (rule "inEqSimp_geqRight" (formula "49"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "13") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "13") (term "0,0,0"))
                                             (rule "applyEq" (formula "15") (term "1,0,0,0,1,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "15") (term "0,0,0,1,0"))
                                             (rule "eqSymm" (formula "15") (term "1,0"))
                                             (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "14") (term "0,0,0"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "8"))
                                             (rule "closeFalse" (formula "8"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_right" (formula "8") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_right" (formula "28") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "inEqSimp_geqRight" (formula "47"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "8") (term "0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
                                          (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "9") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
                                          (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "9") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "19") (term "0,0"))
                                          (rule "add_zero_right" (formula "19") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "19") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "commute_or_2" (formula "40") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "10") (term "1,0,0,0"))
                                          (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                          (rule "applyEq" (formula "12") (term "1,0,0,0") (ifseqformula "10"))
                                          (rule "seqDef_lower_equals_upper" (formula "12") (term "0,0,0"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "12") (term "1,0,0,0,1,0") (ifseqformula "9"))
                                          (rule "seqDef_lower_equals_upper" (formula "12") (term "0,0,0,1,0"))
                                          (rule "eqSymm" (formula "12") (term "1,0"))
                                          (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                          (rule "qeq_literals" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "nnf_imp2or" (formula "43") (term "0"))
                                          (rule "nnf_imp2or" (formula "42") (term "0"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "nnf_imp2or" (formula "36") (term "0"))
                                          (rule "nnf_imp2or" (formula "35") (term "0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "28") (term "0"))
                                          (rule "nnf_imp2or" (formula "27") (term "0"))
                                          (rule "nnf_imp2or" (formula "26") (term "0"))
                                          (rule "nnf_imp2or" (formula "21") (term "0"))
                                          (rule "nnf_imp2or" (formula "20") (term "0"))
                                          (rule "nnf_imp2or" (formula "19") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "7") (term "0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.concatenated.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "62") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "closeTrue" (formula "62"))
                                          )
                                          (branch "self.concatenated.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "50"))
                                             (rule "close" (formula "45") (ifseqformula "13"))
                                          )
                                       )
                                    )
                                    (branch "result_1.length ≥ 1 FALSE"
                                       (rule "replace_known_right" (formula "35") (term "0,1,1,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "replace_known_right" (formula "11") (term "0,1,1,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_geqRight" (formula "46"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0"))
                                       (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "36") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "true_left" (formula "36"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "12") (term "0,0"))
                                       (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "12") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "ifthenelse_split" (formula "8") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_left" (formula "20") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_left" (formula "11") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "commute_or_2" (formula "42") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "8"))
                                          (rule "leq_literals" (formula "12") (term "0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "lenNonNegative" (formula "12") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "ifthenelse_split" (formula "9") (term "0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "eqSymm" (formula "22") (term "1,0"))
                                             (rule "applyEq" (formula "11") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "eqSymm" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "10") (term "1,0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "45") (term "0"))
                                             (rule "nnf_imp2or" (formula "44") (term "0"))
                                             (rule "nnf_imp2or" (formula "39") (term "0"))
                                             (rule "nnf_imp2or" (formula "38") (term "0"))
                                             (rule "nnf_imp2or" (formula "37") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0"))
                                             (rule "nnf_imp2or" (formula "30") (term "0"))
                                             (rule "nnf_imp2or" (formula "24") (term "0"))
                                             (rule "nnf_imp2or" (formula "23") (term "0"))
                                             (rule "nnf_imp2or" (formula "22") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                                             (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "47") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "65") (term "0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "65"))
                                                (rule "closeTrue" (formula "65"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "48") (ifseqformula "53"))
                                                (rule "close" (formula "48") (ifseqformula "15"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "9"))
                                             (rule "inEqSimp_geqRight" (formula "47"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "10"))
                                             (rule "seqDef_lower_equals_upper" (formula "14") (term "0,0,0"))
                                             (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                             (rule "qeq_literals" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "replace_known_right" (formula "10") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_right" (formula "27") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "replace_known_right" (formula "19") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "9") (term "0"))
                                          (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "9") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "9") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
                                          (rule "add_zero_right" (formula "11") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "11") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "19") (term "0,0"))
                                          (rule "add_zero_right" (formula "19") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "19") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                          (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "commute_or_2" (formula "38") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "10") (term "1,0,0,0"))
                                          (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                          (rule "applyEq" (formula "12") (term "1,0,0,0") (ifseqformula "10"))
                                          (rule "seqDef_lower_equals_upper" (formula "12") (term "0,0,0"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                          (rule "qeq_literals" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "nnf_imp2or" (formula "40") (term "0"))
                                          (rule "nnf_imp2or" (formula "39") (term "0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "33") (term "0"))
                                          (rule "nnf_imp2or" (formula "32") (term "0"))
                                          (rule "nnf_imp2or" (formula "27") (term "0"))
                                          (rule "nnf_imp2or" (formula "26") (term "0"))
                                          (rule "nnf_imp2or" (formula "25") (term "0"))
                                          (rule "nnf_imp2or" (formula "20") (term "0"))
                                          (rule "nnf_imp2or" (formula "19") (term "0"))
                                          (rule "nnf_imp2or" (formula "18") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.concatenated.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "60"))
                                             (rule "closeTrue" (formula "60"))
                                          )
                                          (branch "self.concatenated.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "48"))
                                             (rule "close" (formula "43") (ifseqformula "12"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "cut_direct" (formula "30") (term "0,0"))
                                 (branch "CUT: result_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "14"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "55") (term "0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "eqSymm" (formula "55"))
                                    (rule "narrowSelectArrayType" (formula "8") (term "1,1,1,0") (ifseqformula "12") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "19") (term "1,0,1,0") (ifseqformula "12") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "29") (ifseqformula "40"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "35") (ifseqformula "40"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "23") (ifseqformula "40"))
                                    (rule "nonNull" (formula "22") (inst "i=i"))
                                    (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "greater_literals" (formula "22") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "21") (inst "i=i"))
                                    (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "greater_literals" (formula "21") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "20") (inst "i=i"))
                                    (rule "greater_literals" (formula "20") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "sub_literals" (formula "20") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "39") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet100000000_0" (formula "39") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "39") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "41"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "41"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "41"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "notLeft" (formula "39"))
                                    (rule "nonNull" (formula "41") (inst "i=i"))
                                    (rule "greater_literals" (formula "41") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "sub_literals" (formula "41") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "notLeft" (formula "41"))
                                    (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "40") (inst "i=i"))
                                    (rule "greater_literals" (formula "40") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "sub_literals" (formula "40") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "andLeft" (formula "40"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "39") (inst "i=i"))
                                    (rule "sub_literals" (formula "39") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "greater_literals" (formula "39") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "39"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_20"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_35"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_35"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "14")))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_35"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "32"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "26"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")) (ifInst ""  (formula "15")))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_36"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "33"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "replaceKnownSelect_taclet100000000_3" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_5" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "elementOfUnion" (formula "2") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "64")))
                                    (rule "elementOfSingleton" (formula "2") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "64")))
                                    (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "pullOutSelect" (formula "42") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_34"))
                                    (rule "applyEq" (formula "46") (term "0") (ifseqformula "42"))
                                    (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "63")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "42") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "63")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "42") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "63")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                    (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_34"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "40"))
                                    (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "30"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "40") (term "0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "62")) (ifInst ""  (formula "13")))
                                    (rule "pullOutSelect" (formula "39") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_34"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "39"))
                                    (rule "applyEq" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "63")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "30"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "63")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "63")) (ifInst ""  (formula "13")))
                                    (rule "elementOfUnion" (formula "43") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "43") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "63")))
                                    (rule "elementOfSingleton" (formula "43") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "63")))
                                    (rule "applyEqReverse" (formula "44") (term "1,0,0,1,0") (ifseqformula "43"))
                                    (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "43"))
                                    (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,0") (ifseqformula "43"))
                                    (rule "hideAuxiliaryEq" (formula "43"))
                                    (rule "elementOfUnion" (formula "41") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "41") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "61")))
                                    (rule "elementOfSingleton" (formula "41") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "61")))
                                    (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                                    (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "41"))
                                    (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                    (rule "hideAuxiliaryEq" (formula "41"))
                                    (rule "elementOfUnion" (formula "39") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "39") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "59")))
                                    (rule "elementOfSingleton" (formula "39") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "59")))
                                    (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "39"))
                                    (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                    (rule "applyEqReverse" (formula "40") (term "1,0,0,1,0") (ifseqformula "39"))
                                    (rule "hideAuxiliaryEq" (formula "39"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "34") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet010100000000_10" (formula "34") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_12" (formula "34") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet010100000000_14" (formula "34") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_16" (formula "34") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_18" (formula "34") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_26" (formula "34") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_21" (formula "34") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_28" (formula "34") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_30" (formula "34") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_37" (formula "34") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_32" (formula "34") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_35" (formula "34") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_38" (formula "34") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_39" (formula "34") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_1" (formula "34") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_24" (formula "34") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "34") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_25" (formula "34") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "notLeft" (formula "35"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "notLeft" (formula "35"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "notLeft" (formula "35"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "notLeft" (formula "35"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "notLeft" (formula "35"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "nonNull" (formula "36") (inst "i=i"))
                                    (rule "greater_literals" (formula "36") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "46")))
                                    (rule "sub_literals" (formula "36") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "35") (inst "i=i"))
                                    (rule "greater_literals" (formula "35") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "45")))
                                    (rule "sub_literals" (formula "35") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "34") (inst "i=i"))
                                    (rule "sub_literals" (formula "34") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "44")))
                                    (rule "greater_literals" (formula "34") (term "0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet010100000000_11" (formula "28") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_12" (formula "28") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet010100000000_15" (formula "28") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_16" (formula "28") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_19" (formula "28") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_26" (formula "28") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_22" (formula "28") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_29" (formula "28") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_30" (formula "28") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_37" (formula "28") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_33" (formula "28") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010100000000_36" (formula "28") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_38" (formula "28") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010100000000_39" (formula "28") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_2" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_3" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_5" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "nonNull" (formula "30") (inst "i=i"))
                                    (rule "greater_literals" (formula "30") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "48")))
                                    (rule "sub_literals" (formula "30") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "29") (inst "i=i"))
                                    (rule "greater_literals" (formula "29") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "47")))
                                    (rule "sub_literals" (formula "29") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "28") (inst "i=i"))
                                    (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "46")))
                                    (rule "greater_literals" (formula "28") (term "0"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "ifthenelse_split" (formula "10") (term "1"))
                                    (branch "result_1.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "12") (term "0,1,1,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "replace_known_left" (formula "36") (term "0,1,1,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "ifthenelse_split" (formula "7") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "21") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_left" (formula "29") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "commute_or_2" (formula "44") (term "0"))
                                          (rule "lenNonNegative" (formula "12") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "arrayLengthNotNegative" (formula "13") (term "1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "13") (term "0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "ifthenelse_split" (formula "8") (term "0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "10") (term "1,0"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
                                             (rule "eqSymm" (formula "22") (term "1,0"))
                                             (rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
                                             (rule "eqSymm" (formula "9") (term "1,0"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "nnf_imp2or" (formula "47") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "41") (term "0"))
                                             (rule "nnf_imp2or" (formula "40") (term "0"))
                                             (rule "nnf_imp2or" (formula "39") (term "0"))
                                             (rule "nnf_imp2or" (formula "33") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "nnf_notAnd" (formula "49") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "49") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "49") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0"))
                                             (rule "mul_literals" (formula "49") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "48") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                             (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "47") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                                             (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "47") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "42") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "42") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                             (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "41") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
                                             (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "68") (term "0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "67") (term "0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "67"))
                                                (rule "closeTrue" (formula "67"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "50") (ifseqformula "54"))
                                                (rule "close" (formula "50") (ifseqformula "16"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "8"))
                                             (rule "inEqSimp_geqRight" (formula "49"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "11") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "add_zero_right" (formula "11") (term "1,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "14") (term "0,0,0"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "8"))
                                             (rule "closeFalse" (formula "8"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_right" (formula "28") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "replace_known_right" (formula "8") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "inEqSimp_geqRight" (formula "47"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "8") (term "0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "21") (term "0,0"))
                                          (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                          (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "9") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "commute_or_2" (formula "40") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "10") (term "1,0,0,0"))
                                          (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                          (rule "applyEq" (formula "13") (term "1,0,0,0,1,0") (ifseqformula "10"))
                                          (rule "seqDef_lower_equals_upper" (formula "13") (term "0,0,0,1,0"))
                                          (rule "eqSymm" (formula "13") (term "1,0"))
                                          (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                                          (rule "qeq_literals" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "10") (term "1,0,0,0") (ifseqformula "9"))
                                          (rule "seqDef_lower_equals_upper" (formula "10") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "43") (term "0"))
                                          (rule "nnf_imp2or" (formula "42") (term "0"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "nnf_imp2or" (formula "36") (term "0"))
                                          (rule "nnf_imp2or" (formula "35") (term "0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "28") (term "0"))
                                          (rule "nnf_imp2or" (formula "27") (term "0"))
                                          (rule "nnf_imp2or" (formula "26") (term "0"))
                                          (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "7") (term "0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.concatenated.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "62") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "closeTrue" (formula "62"))
                                          )
                                          (branch "self.concatenated.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "49"))
                                             (rule "close" (formula "45") (ifseqformula "13"))
                                          )
                                       )
                                    )
                                    (branch "result_1.length ≥ 1 FALSE"
                                       (rule "replace_known_right" (formula "35") (term "0,1,1,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "replace_known_right" (formula "11") (term "0,1,1,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_geqRight" (formula "46"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0"))
                                       (rule "add_zero_right" (formula "36") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "36") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "true_left" (formula "36"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "12") (term "0,0"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "12") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "ifthenelse_split" (formula "8") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_left" (formula "11") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "replace_known_left" (formula "20") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "commute_or_2" (formula "42") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "8"))
                                          (rule "leq_literals" (formula "12") (term "0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "arrayLengthIsAShort" (formula "12") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "lenNonNegative" (formula "12") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "ifthenelse_split" (formula "9") (term "0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "11") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "eqSymm" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "eqSymm" (formula "22") (term "1,0"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "10") (term "1,0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "45") (term "0"))
                                             (rule "nnf_imp2or" (formula "44") (term "0"))
                                             (rule "nnf_imp2or" (formula "39") (term "0"))
                                             (rule "nnf_imp2or" (formula "38") (term "0"))
                                             (rule "nnf_imp2or" (formula "37") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0"))
                                             (rule "nnf_imp2or" (formula "30") (term "0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                             (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "65") (term "0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "65"))
                                                (rule "closeTrue" (formula "65"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "48") (ifseqformula "52"))
                                                (rule "close" (formula "48") (ifseqformula "15"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "9"))
                                             (rule "inEqSimp_geqRight" (formula "47"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "13") (term "1,0,0,0") (ifseqformula "10"))
                                             (rule "seqDef_lower_equals_upper" (formula "13") (term "0,0,0"))
                                             (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "12") (term "1,0"))
                                             (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                             (rule "qeq_literals" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "19") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_right" (formula "27") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "replace_known_right" (formula "10") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "9") (term "0"))
                                          (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "9") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "9") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "20") (term "0,0"))
                                          (rule "add_literals" (formula "20") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
                                          (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "11") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "inEqSimp_notGeq" (formula "18") (term "0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                          (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "commute_or_2" (formula "38") (term "0"))
                                          (rule "lenNonNegative" (formula "10") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10"))
                                          (rule "arrayLengthNotNegative" (formula "11") (term "1,0,0,0"))
                                          (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                                          (rule "qeq_literals" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "9") (term "1,0,0,0") (ifseqformula "10"))
                                          (rule "seqDef_lower_equals_upper" (formula "9") (term "0,0,0"))
                                          (rule "applyEq" (formula "11") (term "1,0,0,0") (ifseqformula "10"))
                                          (rule "seqDef_lower_equals_upper" (formula "11") (term "0,0,0"))
                                          (rule "applyEq" (formula "9") (term "0") (ifseqformula "11"))
                                          (rule "qeq_literals" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "nnf_imp2or" (formula "40") (term "0"))
                                          (rule "nnf_imp2or" (formula "39") (term "0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "33") (term "0"))
                                          (rule "nnf_imp2or" (formula "32") (term "0"))
                                          (rule "nnf_imp2or" (formula "27") (term "0"))
                                          (rule "nnf_imp2or" (formula "26") (term "0"))
                                          (rule "nnf_imp2or" (formula "25") (term "0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.concatenated.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "60"))
                                             (rule "closeTrue" (formula "60"))
                                          )
                                          (branch "self.concatenated.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "47"))
                                             (rule "close" (formula "43") (ifseqformula "12"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "14"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "8") (term "1,1,1,0") (ifseqformula "12") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "56") (term "0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "eqSymm" (formula "56"))
                                    (rule "narrowSelectArrayType" (formula "19") (term "1,0,1,0") (ifseqformula "12") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "35") (ifseqformula "40"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "23") (ifseqformula "40"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "29") (ifseqformula "40"))
                                    (rule "nonNull" (formula "22") (inst "i=i"))
                                    (rule "greater_literals" (formula "22") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "sub_literals" (formula "22") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "21") (inst "i=i"))
                                    (rule "greater_literals" (formula "21") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "sub_literals" (formula "21") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "20") (inst "i=i"))
                                    (rule "greater_literals" (formula "20") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "sub_literals" (formula "20") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "39") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet100000000_0" (formula "39") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "39") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "notLeft" (formula "39"))
                                    (rule "nonNull" (formula "41") (inst "i=i"))
                                    (rule "greater_literals" (formula "41") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "sub_literals" (formula "41") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "notLeft" (formula "41"))
                                    (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "40") (inst "i=i"))
                                    (rule "greater_literals" (formula "40") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "sub_literals" (formula "40") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "andLeft" (formula "40"))
                                    (rule "notLeft" (formula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "39") (inst "i=i"))
                                    (rule "greater_literals" (formula "39") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "sub_literals" (formula "39") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "notLeft" (formula "39"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_19"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                    (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_34"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_34"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")) (ifInst ""  (formula "14")))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_34"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "32"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "26"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")) (ifInst ""  (formula "15")))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_35"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "33"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                    (rule "replaceKnownSelect_taclet100000000_3" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_5" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "elementOfUnion" (formula "2") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "65")))
                                    (rule "elementOfSingleton" (formula "2") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "65")))
                                    (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "pullOutSelect" (formula "42") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_33"))
                                    (rule "applyEq" (formula "46") (term "0") (ifseqformula "42"))
                                    (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "42") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "42") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "64")) (ifInst ""  (formula "14")))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_33"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "40"))
                                    (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "63")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "30"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "63")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "40") (term "0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "63")) (ifInst ""  (formula "13")))
                                    (rule "pullOutSelect" (formula "39") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_33"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "39"))
                                    (rule "applyEq" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "30"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "24"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "64")) (ifInst ""  (formula "13")))
                                    (rule "elementOfUnion" (formula "43") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "43") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "64")))
                                    (rule "elementOfSingleton" (formula "43") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "64")))
                                    (rule "applyEqReverse" (formula "44") (term "1,0,0,1,0") (ifseqformula "43"))
                                    (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,0") (ifseqformula "43"))
                                    (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "43"))
                                    (rule "hideAuxiliaryEq" (formula "43"))
                                    (rule "elementOfUnion" (formula "41") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "41") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "62")))
                                    (rule "elementOfSingleton" (formula "41") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "62")))
                                    (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                                    (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "41"))
                                    (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                    (rule "hideAuxiliaryEq" (formula "41"))
                                    (rule "elementOfUnion" (formula "39") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "39") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "60")))
                                    (rule "elementOfSingleton" (formula "39") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "60")))
                                    (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                    (rule "applyEqReverse" (formula "40") (term "1,0,0,1,0") (ifseqformula "39"))
                                    (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "39"))
                                    (rule "hideAuxiliaryEq" (formula "39"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet110100000000_11" (formula "28") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_12" (formula "28") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet110100000000_15" (formula "28") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_16" (formula "28") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_19" (formula "28") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_26" (formula "28") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_29" (formula "28") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_22" (formula "28") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_37" (formula "28") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_30" (formula "28") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_33" (formula "28") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_36" (formula "28") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_38" (formula "28") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_39" (formula "28") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_2" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_3" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_5" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "nonNull" (formula "30") (inst "i=i"))
                                    (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "46")))
                                    (rule "greater_literals" (formula "30") (term "0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "29") (inst "i=i"))
                                    (rule "sub_literals" (formula "29") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "45")))
                                    (rule "greater_literals" (formula "29") (term "0"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "28") (inst "i=i"))
                                    (rule "greater_literals" (formula "28") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "44")))
                                    (rule "sub_literals" (formula "28") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "36") (ifseqformula "14"))
                                    (rule "replaceKnownSelect_taclet110100000000_10" (formula "36") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_12" (formula "36") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet110100000000_14" (formula "36") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_16" (formula "36") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_18" (formula "36") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_26" (formula "36") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_28" (formula "36") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_21" (formula "36") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_37" (formula "36") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_30" (formula "36") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_32" (formula "36") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_35" (formula "36") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_38" (formula "36") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_39" (formula "36") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000000_24" (formula "36") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet100000000_1" (formula "36") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000000_25" (formula "36") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100000000_4" (formula "36") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "notLeft" (formula "36"))
                                    (rule "nonNull" (formula "38") (inst "i=i"))
                                    (rule "sub_literals" (formula "38") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "48")))
                                    (rule "greater_literals" (formula "38") (term "0"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "37") (inst "i=i"))
                                    (rule "greater_literals" (formula "37") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "47")))
                                    (rule "sub_literals" (formula "37") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "36") (inst "i=i"))
                                    (rule "greater_literals" (formula "36") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "46")))
                                    (rule "sub_literals" (formula "36") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "ifthenelse_split" (formula "10") (term "1"))
                                    (branch "result_1.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "12") (term "0,1,1,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "replace_known_left" (formula "36") (term "0,1,1,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "ifthenelse_split" (formula "7") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_left" (formula "29") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_left" (formula "21") (term "0,1,1,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "commute_or_2" (formula "44") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "12") (term "0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "arrayLengthIsAShort" (formula "12") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "lenNonNegative" (formula "12") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "ifthenelse_split" (formula "8") (term "0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "10") (term "1,0"))
                                             (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
                                             (rule "eqSymm" (formula "22") (term "1,0"))
                                             (rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
                                             (rule "eqSymm" (formula "9") (term "1,0"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "nnf_imp2or" (formula "47") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "33") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0"))
                                             (rule "nnf_imp2or" (formula "41") (term "0"))
                                             (rule "nnf_imp2or" (formula "40") (term "0"))
                                             (rule "nnf_imp2or" (formula "39") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "nnf_notAnd" (formula "49") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0"))
                                             (rule "mul_literals" (formula "49") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "49") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0"))
                                             (rule "mul_literals" (formula "49") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "49") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "48") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                             (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                                             (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "47") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "69") (term "0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "68") (term "0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "68"))
                                                (rule "closeTrue" (formula "68"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "50") (ifseqformula "54"))
                                                (rule "close" (formula "50") (ifseqformula "16"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "8"))
                                             (rule "inEqSimp_geqRight" (formula "49"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "11") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "14") (term "0,0,0"))
                                             (rule "applyEq" (formula "15") (term "1,0,0,0,1,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "15") (term "0,0,0,1,0"))
                                             (rule "eqSymm" (formula "15") (term "1,0"))
                                             (rule "applyEq" (formula "13") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "seqDef_lower_equals_upper" (formula "13") (term "0,0,0"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "8"))
                                             (rule "closeFalse" (formula "8"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_right" (formula "28") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "replace_known_right" (formula "8") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "47"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_geqRight" (formula "47"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "8") (term "0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "21") (term "0,0"))
                                          (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "28") (term "0,0"))
                                          (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "28") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
                                          (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "9") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
                                          (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "9") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "inEqSimp_notGeq" (formula "18") (term "0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0"))
                                          (rule "commute_or_2" (formula "40") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "10") (term "1,0,0,0"))
                                          (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "12") (term "1,0,0,0,1,0") (ifseqformula "9"))
                                          (rule "seqDef_lower_equals_upper" (formula "12") (term "0,0,0,1,0"))
                                          (rule "eqSymm" (formula "12") (term "1,0"))
                                          (rule "applyEq" (formula "11") (term "1,0,0,0") (ifseqformula "9"))
                                          (rule "seqDef_lower_equals_upper" (formula "11") (term "0,0,0"))
                                          (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                          (rule "qeq_literals" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "nnf_imp2or" (formula "43") (term "0"))
                                          (rule "nnf_imp2or" (formula "42") (term "0"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "nnf_imp2or" (formula "28") (term "0"))
                                          (rule "nnf_imp2or" (formula "27") (term "0"))
                                          (rule "nnf_imp2or" (formula "26") (term "0"))
                                          (rule "nnf_imp2or" (formula "36") (term "0"))
                                          (rule "nnf_imp2or" (formula "35") (term "0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "7") (term "0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.concatenated.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "63") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "closeTrue" (formula "63"))
                                          )
                                          (branch "self.concatenated.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "49"))
                                             (rule "close" (formula "45") (ifseqformula "13"))
                                          )
                                       )
                                    )
                                    (branch "result_1.length ≥ 1 FALSE"
                                       (rule "replace_known_right" (formula "11") (term "0,1,1,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "replace_known_right" (formula "35") (term "0,1,1,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "inEqSimp_geqRight" (formula "46"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "12") (term "0,0"))
                                       (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "12") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "35") (term "0,0"))
                                       (rule "add_zero_right" (formula "35") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "35") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "ifthenelse_split" (formula "8") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_left" (formula "11") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "replace_known_left" (formula "20") (term "0,1,1,0,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "commute_or_2" (formula "42") (term "0"))
                                          (rule "lenNonNegative" (formula "12") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "12"))
                                          (rule "arrayLengthNotNegative" (formula "13") (term "1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "8"))
                                          (rule "leq_literals" (formula "13") (term "0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "ifthenelse_split" (formula "9") (term "0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "eqSymm" (formula "22") (term "1,0"))
                                             (rule "applyEq" (formula "11") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "eqSymm" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "10") (term "1,0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "45") (term "0"))
                                             (rule "nnf_imp2or" (formula "44") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0"))
                                             (rule "nnf_imp2or" (formula "30") (term "0"))
                                             (rule "nnf_imp2or" (formula "39") (term "0"))
                                             (rule "nnf_imp2or" (formula "38") (term "0"))
                                             (rule "nnf_imp2or" (formula "37") (term "0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                             (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                             (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "67") (term "0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "66"))
                                                (rule "closeTrue" (formula "66"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "48") (ifseqformula "52"))
                                                (rule "close" (formula "48") (ifseqformula "15"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "9"))
                                             (rule "inEqSimp_geqRight" (formula "47"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                                             (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "12") (term "1,0"))
                                             (rule "applyEq" (formula "13") (term "1,0,0,0") (ifseqformula "10"))
                                             (rule "seqDef_lower_equals_upper" (formula "13") (term "0,0,0"))
                                             (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "10"))
                                             (rule "seqDef_lower_equals_upper" (formula "14") (term "0,0,0"))
                                             (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                             (rule "qeq_literals" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "10") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "replace_known_right" (formula "19") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_right" (formula "27") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "9") (term "0"))
                                          (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "9") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "9") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
                                          (rule "add_zero_right" (formula "11") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "11") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "inEqSimp_notGeq" (formula "18") (term "0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "19") (term "0,0"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "19") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "26") (term "0,0"))
                                          (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "26") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                          (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "commute_or_2" (formula "38") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "10") (term "1,0,0,0"))
                                          (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                          (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                                          (rule "qeq_literals" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "10") (term "1,0,0,0") (ifseqformula "9"))
                                          (rule "seqDef_lower_equals_upper" (formula "10") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "nnf_imp2or" (formula "40") (term "0"))
                                          (rule "nnf_imp2or" (formula "39") (term "0"))
                                          (rule "nnf_imp2or" (formula "27") (term "0"))
                                          (rule "nnf_imp2or" (formula "26") (term "0"))
                                          (rule "nnf_imp2or" (formula "25") (term "0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "33") (term "0"))
                                          (rule "nnf_imp2or" (formula "32") (term "0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "8") (term "0"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.concatenated.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "61"))
                                             (rule "closeTrue" (formula "61"))
                                          )
                                          (branch "self.concatenated.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "47"))
                                             (rule "close" (formula "43") (ifseqformula "12"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "self.concatenated.length ≥ 1 FALSE"
                              (rule "inEqSimp_geqRight" (formula "37"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "times_zero_2" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "6") (term "0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "closeFalse" (formula "6"))
                           )
                        )
                     )
                     (branch "CUT: array2seq(heapAfter_checkAndRemoveSignature, self.unsigned@heapAfter_checkAndRemoveSignature) = array2seq(heap, self.unsigned) FALSE"
                        (rule "hide_right" (formula "38") (userinteraction))
                        (rule "array2seqDef" (formula "31") (term "0") (inst "u=u") (userinteraction))
                        (rule "array2seqDef" (formula "31") (term "1") (inst "u=u") (userinteraction))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "12"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1") (ifseqformula "25"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1") (ifseqformula "18"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "12"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,1") (ifseqformula "12"))
                        (rule "eqSymm" (formula "9"))
                        (rule "eqSymm" (formula "2"))
                        (rule "eqSymm" (formula "15"))
                        (rule "eqSymm" (formula "21"))
                        (rule "eqSymm" (formula "28"))
                        (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "36"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "32"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                        (rule "eqSymm" (formula "22"))
                        (rule "eqSeqDef" (formula "31") (inst "iv=iv"))
                        (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                        (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                        (rule "eqSymm" (formula "31") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "times_zero_2" (formula "31") (term "1,1,1,0,1,1,0,1"))
                        (rule "add_zero_right" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "lenOfSeqDef" (formula "31") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,1,0"))
                        (rule "times_zero_2" (formula "31") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "31") (term "1,1,0"))
                        (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,0,0"))
                        (rule "mul_literals" (formula "31") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "1,0,0"))
                        (rule "lenOfSeqDef" (formula "31") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "31") (term "1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "31") (term "1,1,1,0,0,1"))
                        (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                        (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                        (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                        (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                        (rule "eqSymm" (formula "31") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "times_zero_2" (formula "31") (term "1,1,1,0,1,1,0,1"))
                        (rule "add_zero_right" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "31") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1"))
                        (rule "eqSymm" (formula "31") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,1,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1"))
                        (rule "eqSymm" (formula "31") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,1,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,1,1,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1"))
                        (rule "eqSymm" (formula "31") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1"))
                        (rule "eqSymm" (formula "31") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0,1"))
                        (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "29"))
                        (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "1"))
                        (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "9"))
                        (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "2"))
                        (rule "array2seqDef" (formula "15") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                        (rule "array2seqDef" (formula "21") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "28") (term "0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "28"))
                        (rule "array2seqDef" (formula "21") (term "0,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "22") (term "0,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "22") (term "1") (inst "u=u"))
                        (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "29"))
                        (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "1"))
                        (rule "array2seqDef" (formula "9") (term "0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "9"))
                        (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "3") (ifseqformula "37"))
                        (rule "eqSymm" (formula "9"))
                        (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "2"))
                        (rule "eqSeqDef" (formula "15") (inst "iv=iv"))
                        (rule "andLeft" (formula "15"))
                        (rule "lenOfSeqDef" (formula "15") (term "0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1"))
                        (rule "add_zero_right" (formula "15") (term "1,1"))
                        (rule "getOfSeqDef" (formula "16") (term "1,1,0"))
                        (rule "castDel" (formula "16") (term "2,1,1,0"))
                        (rule "castDel" (formula "16") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "16") (term "0,2,1,1,1,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "16") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "16") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "1,1,1,0,0"))
                        (rule "getOfSeqDef" (formula "16") (term "0,1,0"))
                        (rule "castDel" (formula "16") (term "2,0,1,0"))
                        (rule "castDel" (formula "16") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "16") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0"))
                        (rule "lenOfSeqDef" (formula "15") (term "0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1"))
                        (rule "add_zero_right" (formula "15") (term "1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                        (rule "apply_eq_monomials" (formula "16") (term "1,0,0,1,0,0") (ifseqformula "15"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "1,1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                        (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                        (rule "apply_eq_monomials" (formula "16") (term "1,0,0,1,0,0") (ifseqformula "15"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "1,1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                        (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "29"))
                        (rule "eqSeqDef" (formula "23") (inst "iv=iv"))
                        (rule "andLeft" (formula "23"))
                        (rule "getOfSeqDef" (formula "24") (term "1,1,0"))
                        (rule "castDel" (formula "24") (term "1,1,1,0"))
                        (rule "castDel" (formula "24") (term "2,1,1,0"))
                        (rule "add_zero_right" (formula "24") (term "0,2,1,1,1,0"))
                        (rule "polySimp_elimSub" (formula "24") (term "1,1,0,1,1,0"))
                        (rule "times_zero_2" (formula "24") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "24") (term "1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "23") (term "1"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1"))
                        (rule "times_zero_2" (formula "23") (term "1,1,1"))
                        (rule "add_zero_right" (formula "23") (term "1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,1,1,0"))
                        (rule "apply_eq_monomials" (formula "24") (term "1,0,1,0,0") (ifseqformula "23"))
                        (rule "polySimp_rightDist" (formula "24") (term "0,1,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "1,0,1,0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,1,0,1,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,1,0,1,0,0"))
                        (rule "add_zero_right" (formula "24") (term "1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                        (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                        (rule "andLeft" (formula "1"))
                        (rule "lenOfSeqDef" (formula "1") (term "1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                        (rule "times_zero_2" (formula "1") (term "1,1,1"))
                        (rule "add_zero_right" (formula "1") (term "1,1"))
                        (rule "getOfSeqDef" (formula "2") (term "1,1,0"))
                        (rule "castDel" (formula "2") (term "1,1,1,0"))
                        (rule "castDel" (formula "2") (term "2,1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,2,1,1,1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                        (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                        (rule "castDel" (formula "2") (term "1,0,1,0"))
                        (rule "castDel" (formula "2") (term "2,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "lenOfSeqDef" (formula "1") (term "0"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                        (rule "times_zero_2" (formula "1") (term "1,1,0"))
                        (rule "add_zero_right" (formula "1") (term "1,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "array2seqDef" (formula "9") (term "1,1,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "9") (term "0,1,1") (inst "u=u"))
                        (rule "eqSeqDef" (formula "2") (inst "iv=iv"))
                        (rule "andLeft" (formula "2"))
                        (rule "lenOfSeqDef" (formula "2") (term "1"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                        (rule "times_zero_2" (formula "2") (term "1,1,1"))
                        (rule "add_zero_right" (formula "2") (term "1,1"))
                        (rule "getOfSeqDef" (formula "3") (term "1,1,0"))
                        (rule "castDel" (formula "3") (term "1,1,1,0"))
                        (rule "castDel" (formula "3") (term "2,1,1,0"))
                        (rule "add_zero_right" (formula "3") (term "0,2,1,1,1,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "3") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "2") (term "0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                        (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                        (rule "castDel" (formula "2") (term "1,0,1,0"))
                        (rule "castDel" (formula "2") (term "2,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                        (rule "pullOutSelect" (formula "33") (term "0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_14"))
                        (rule "applyEq" (formula "34") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "34") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "34") (term "1,1,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "16") (term "0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "34") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "16") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "17") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "34") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "17") (term "1,1,0,1,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "5")))
                        (rule "eqSymm" (formula "34") (term "0"))
                        (rule "eqSymm" (formula "34") (term "1,0,1"))
                        (rule "applyEq" (formula "34") (term "1,1,1,0,0,1") (ifseqformula "16"))
                        (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "16"))
                        (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_2"))
                        (rule "applyEq" (formula "24") (term "1,2,0") (ifseqformula "23"))
                        (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "eqSeqDef2" (formula "33") (inst "iv=iv") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "pullOutSelect" (formula "32") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_11"))
                        (rule "applyEq" (formula "33") (term "1,2,0") (ifseqformula "32"))
                        (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "39")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "20"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0,0") (ifseqformula "13"))
                        (rule "replace_known_left" (formula "32") (term "0,0,0,0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "39")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "13"))
                        (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "39")) (ifInst ""  (formula "5")))
                        (rule "elementOfUnion" (formula "1") (term "0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                        (rule "applyEqReverse" (formula "17") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "35") (term "1,1,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "16") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "16") (term "0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "17") (term "1,1,0,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "34") (term "1,0,1"))
                        (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "allRight" (formula "34") (inst "sk=iv_8"))
                        (rule "impRight" (formula "34"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_left" (formula "36") (term "0,0,1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "1")))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                        (rule "eqSymm" (formula "36"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0,0"))
                        (rule "eqSymm" (formula "36"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,1"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                        (rule "elementOfUnion" (formula "24") (term "0,0"))
                        (rule "elementOfSingleton" (formula "24") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "elementOfSingleton" (formula "24") (term "0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEqReverse" (formula "25") (term "1,2,0") (ifseqformula "24"))
                        (rule "applyEqReverse" (formula "25") (term "0,1,0") (ifseqformula "24"))
                        (rule "hideAuxiliaryEq" (formula "24"))
                        (rule "elementOfUnion" (formula "32") (term "0,0"))
                        (rule "elementOfSingleton" (formula "32") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "39")))
                        (rule "elementOfSingleton" (formula "32") (term "0,0"))
                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "39")))
                        (rule "applyEqReverse" (formula "33") (term "1,2,0") (ifseqformula "32"))
                        (rule "applyEqReverse" (formula "33") (term "0,1,0") (ifseqformula "32"))
                        (rule "hideAuxiliaryEq" (formula "32"))
                        (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "eqSeqDef2" (formula "23") (inst "iv=iv") (ifseqformula "23"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "eqSeqDef2" (formula "30") (inst "iv=iv") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "pullOutSelect" (formula "31") (term "1,0") (inst "selectSK=arr_108"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "32"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "Contract_axiom_for_signerPre_in_MixServer" (formula "11") (term "0"))
                        (rule "eqSymm" (formula "11") (term "1,0,1,1"))
                        (rule "eqSymm" (formula "11") (term "1"))
                        (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "37")))
                        (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "notLeft" (formula "13"))
                        (rule "andLeft" (formula "11"))
                        (rule "notLeft" (formula "13"))
                        (rule "notLeft" (formula "11"))
                        (rule "array2seqDef" (formula "12") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                        (rule "narrowSelectArrayType" (formula "12") (term "2,1") (ifseqformula "6") (ifseqformula "36"))
                        (rule "eqSeqDef" (formula "12") (inst "iv=iv"))
                        (rule "andLeft" (formula "12"))
                        (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "13") (term "1,1,1,0,0"))
                        (rule "lenOfSeqDef" (formula "12") (term "1"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,1"))
                        (rule "times_zero_2" (formula "12") (term "1,1,1"))
                        (rule "add_zero_right" (formula "12") (term "1,1"))
                        (rule "getOfSeqDef" (formula "13") (term "0,1,0"))
                        (rule "castDel" (formula "13") (term "1,0,1,0"))
                        (rule "castDel" (formula "13") (term "2,0,1,0"))
                        (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0"))
                        (rule "eqSymm" (formula "13") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
                        (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "12") (term "0"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                        (rule "times_zero_2" (formula "12") (term "1,1,0"))
                        (rule "add_zero_right" (formula "12") (term "1,0"))
                        (rule "getOfSeqDef" (formula "13") (term "0,1,0"))
                        (rule "castDel" (formula "13") (term "2,0,1,0"))
                        (rule "castDel" (formula "13") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0"))
                        (rule "eqSymm" (formula "13") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
                        (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1"))
                        (rule "add_zero_right" (formula "12") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "13") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "13") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
                        (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "20"))
                        (rule "eqSymm" (formula "12"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "13") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "13") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                        (rule "Definition_axiom_for_signerPre_in_verif_selectvoting_system_core_MixServer" (formula "14") (term "0"))
                        (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "35")) (ifInst ""  (formula "11")) (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                        (rule "eqSymm" (formula "14"))
                        (rule "array2seqDef" (formula "14") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                        (rule "narrowSelectArrayType" (formula "14") (term "2,1") (ifseqformula "6") (ifseqformula "37"))
                        (rule "eqSeqDef" (formula "14") (inst "iv=iv"))
                        (rule "andLeft" (formula "14"))
                        (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                        (rule "lenOfSeqDef" (formula "14") (term "1"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1"))
                        (rule "times_zero_2" (formula "14") (term "1,1,1"))
                        (rule "add_zero_right" (formula "14") (term "1,1"))
                        (rule "getOfSeqDef" (formula "15") (term "0,1,0"))
                        (rule "castDel" (formula "15") (term "2,0,1,0"))
                        (rule "castDel" (formula "15") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "14") (term "0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                        (rule "getOfSeqDef" (formula "15") (term "0,1,0"))
                        (rule "castDel" (formula "15") (term "2,0,1,0"))
                        (rule "castDel" (formula "15") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0"))
                        (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,0,1"))
                        (rule "applyEq" (formula "14") (term "1") (ifseqformula "12"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "14") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "14") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "commute_or_2" (formula "32"))
                        (rule "nnf_imp2or" (formula "27") (term "0"))
                        (rule "nnf_imp2or" (formula "4") (term "0"))
                        (rule "nnf_imp2or" (formula "5") (term "0"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "cut_direct" (formula "18") (term "0"))
                        (branch "CUT: result_0.<created> = TRUE TRUE"
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "cut_direct" (formula "25") (term "0,0"))
                           (branch "CUT: result_1.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "ifthenelse_split" (formula "19") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "13") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "replace_known_left" (formula "21") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "4") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "34") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_4" (formula "34") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "34") (term "0,0,1"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "nonNull" (formula "36") (inst "i=i"))
                                 (rule "greater_literals" (formula "36") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "sub_literals" (formula "36") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "35") (inst "i=i"))
                                 (rule "sub_literals" (formula "35") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "greater_literals" (formula "35") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "34") (inst "i=i"))
                                 (rule "sub_literals" (formula "34") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "greater_literals" (formula "34") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_19"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_19"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
                                 (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_19"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "8")))
                                 (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_18"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "26"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "9")))
                                 (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_20"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "replaceKnownSelect_taclet10000000_1" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_7" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "ifthenelse_negated" (formula "3") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "1,0,1,0") (ifseqformula "8") (ifseqformula "42"))
                                 (rule "narrowSelectArrayType" (formula "50") (term "1,0") (ifseqformula "8") (ifseqformula "42"))
                                 (rule "eqSymm" (formula "50"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "8") (ifseqformula "42"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "17") (ifseqformula "42"))
                                 (rule "elementOfUnion" (formula "2") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "2") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "2") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "pullOutSelect" (formula "37") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_19"))
                                 (rule "applyEq" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                 (rule "applyEq" (formula "41") (term "0") (ifseqformula "37"))
                                 (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "25"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "37") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "54")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "35") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_19"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "35"))
                                 (rule "applyEq" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "35"))
                                 (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0") (ifseqformula "24"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "35") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "35") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "54")) (ifInst ""  (formula "7")))
                                 (rule "pullOutSelect" (formula "34") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_19"))
                                 (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "34"))
                                 (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "55")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0") (ifseqformula "24"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "34") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "55")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "55")) (ifInst ""  (formula "7")))
                                 (rule "elementOfUnion" (formula "38") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "38") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "38") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "38"))
                                 (rule "applyEqReverse" (formula "39") (term "1,0,0,1,0") (ifseqformula "38"))
                                 (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                 (rule "hideAuxiliaryEq" (formula "38"))
                                 (rule "elementOfUnion" (formula "36") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "36") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "36") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "36"))
                                 (rule "applyEqReverse" (formula "37") (term "1,0,0,1,0") (ifseqformula "36"))
                                 (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                                 (rule "hideAuxiliaryEq" (formula "36"))
                                 (rule "elementOfUnion" (formula "34") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "34") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "53")))
                                 (rule "elementOfSingleton" (formula "34") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "53")))
                                 (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                 (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "34"))
                                 (rule "applyEqReverse" (formula "35") (term "1,0,0,1,0") (ifseqformula "34"))
                                 (rule "hideAuxiliaryEq" (formula "34"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "14") (ifseqformula "8"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "nonNull" (formula "16") (inst "i=i"))
                                 (rule "greater_literals" (formula "16") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "41")))
                                 (rule "sub_literals" (formula "16") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "41"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "15") (inst "i=i"))
                                 (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "40")))
                                 (rule "greater_literals" (formula "15") (term "0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "40"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "14") (inst "i=i"))
                                 (rule "sub_literals" (formula "14") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "39")))
                                 (rule "greater_literals" (formula "14") (term "0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "39"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_6" (formula "24") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "24") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet00010000000_13" (formula "24") (term "0,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_14" (formula "24") (term "0,0,1,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_17" (formula "24") (term "0,0,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_18" (formula "24") (term "0,0,1,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_31" (formula "24") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_21" (formula "24") (term "0,0,1,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_39" (formula "24") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_28" (formula "24") (term "0,0,1,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_35" (formula "24") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_38" (formula "24") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_40" (formula "24") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_41" (formula "24") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet10000000_1" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_24" (formula "24") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_7" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_32" (formula "24") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "nonNull" (formula "26") (inst "i=i"))
                                 (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "43")))
                                 (rule "greater_literals" (formula "26") (term "0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "25") (inst "i=i"))
                                 (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "42")))
                                 (rule "greater_literals" (formula "25") (term "0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "24") (inst "i=i"))
                                 (rule "greater_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "41")))
                                 (rule "sub_literals" (formula "24") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "33") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_5" (formula "33") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "33") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet00010000000_12" (formula "33") (term "0,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_14" (formula "33") (term "0,0,1,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_16" (formula "33") (term "0,0,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_18" (formula "33") (term "0,0,1,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_30" (formula "33") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_20" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_39" (formula "33") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_28" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_34" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_37" (formula "33") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_40" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_41" (formula "33") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_26" (formula "33") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00010000000_23" (formula "33") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_27" (formula "33") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010000000_32" (formula "33") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "nonNull" (formula "35") (inst "i=i"))
                                 (rule "greater_literals" (formula "35") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "45")))
                                 (rule "sub_literals" (formula "35") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "34") (inst "i=i"))
                                 (rule "sub_literals" (formula "34") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "44")))
                                 (rule "greater_literals" (formula "34") (term "0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "33") (inst "i=i"))
                                 (rule "sub_literals" (formula "33") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "43")))
                                 (rule "greater_literals" (formula "33") (term "0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                 (rule "ifthenelse_split" (formula "31") (term "1"))
                                 (branch "result_1.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "5") (term "0,1,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "replace_known_left" (formula "33") (term "0,1,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "arrayLengthNotNegative" (formula "32") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "32") (term "0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "lenNonNegative" (formula "32") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "32"))
                                    (rule "arrayLengthIsAShort" (formula "33") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "eqSymm" (formula "13") (term "1,0"))
                                       (rule "applyEq" (formula "57") (term "0,0,0") (ifseqformula "23"))
                                       (rule "eqSymm" (formula "57"))
                                       (rule "replace_known_left" (formula "57") (term "0,1") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "57"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "applyEq" (formula "56") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "56") (term "0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "56"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "commute_or_2" (formula "41") (term "0"))
                                       (rule "nnf_imp2or" (formula "44") (term "0"))
                                       (rule "nnf_imp2or" (formula "43") (term "0"))
                                       (rule "nnf_imp2or" (formula "42") (term "0"))
                                       (rule "commute_or_2" (formula "4") (term "0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "nnf_imp2or" (formula "26") (term "0"))
                                       (rule "nnf_imp2or" (formula "25") (term "0"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "nnf_imp2or" (formula "37") (term "0"))
                                       (rule "ifthenelse_split" (formula "12") (term "0"))
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "14") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "eqSymm" (formula "14") (term "1,0"))
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                                          (rule "nnf_imp2or" (formula "36") (term "0"))
                                          (rule "nnf_imp2or" (formula "35") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "0") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "45") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                          (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "44") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "44") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "44") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
                                          (rule "mul_literals" (formula "44") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0"))
                                          (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "43") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
                                          (rule "mul_literals" (formula "43") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "43") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                                          (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                          (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                          (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.unsigned.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "58"))
                                             (rule "closeTrue" (formula "58"))
                                          )
                                          (branch "self.unsigned.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "46") (ifseqformula "50"))
                                             (rule "close" (formula "46") (ifseqformula "7"))
                                          )
                                       )
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "12"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "34") (term "0,0,0"))
                                          (rule "applyEq" (formula "5") (term "1,1,1,0,0,1,0,0") (ifseqformula "13"))
                                          (rule "add_zero_right" (formula "5") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "5") (term "1,0,0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "45"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "34") (term "0,0,0"))
                                       (rule "applyEq" (formula "35") (term "1,0,0,0,1,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "35") (term "0,0,0,1,0"))
                                       (rule "eqSymm" (formula "35") (term "1,0"))
                                       (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "23"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "times_zero_2" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                                 (branch "result_1.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "32") (term "0,1,1,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "replace_known_right" (formula "5") (term "0,1,1,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_geqRight" (formula "43"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                    (rule "add_zero_right" (formula "33") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                                    (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "6") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "arrayLengthNotNegative" (formula "31") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "arrayLengthIsAShort" (formula "31") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "lenNonNegative" (formula "31") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "31"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "54") (term "0,0,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "54"))
                                       (rule "replace_known_left" (formula "54") (term "0,1") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "13") (term "1,0"))
                                       (rule "applyEq" (formula "54") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "54") (term "0,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "eqSymm" (formula "54"))
                                       (rule "commute_or_2" (formula "39") (term "0"))
                                       (rule "nnf_imp2or" (formula "42") (term "0"))
                                       (rule "nnf_imp2or" (formula "41") (term "0"))
                                       (rule "nnf_imp2or" (formula "40") (term "0"))
                                       (rule "commute_or_2" (formula "5") (term "0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "nnf_imp2or" (formula "26") (term "0"))
                                       (rule "nnf_imp2or" (formula "25") (term "0"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "nnf_imp2or" (formula "35") (term "0"))
                                       (rule "ifthenelse_split" (formula "12") (term "0"))
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "eqSymm" (formula "13") (term "1,0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "33") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "43") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
                                          (rule "mul_literals" (formula "43") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "43") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "42") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
                                          (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "42") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                          (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "41") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
                                          (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                          (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                          (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.unsigned.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "closeTrue" (formula "56"))
                                          )
                                          (branch "self.unsigned.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "48"))
                                             (rule "close" (formula "44") (ifseqformula "7"))
                                          )
                                       )
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "12"))
                                          (rule "inEqSimp_geqRight" (formula "43"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0"))
                                          (rule "eqSymm" (formula "24") (term "1,0"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "times_zero_2" (formula "5") (term "1,0"))
                                          (rule "add_zero_right" (formula "5") (term "0"))
                                          (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "32") (term "0,0,0"))
                                          (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0,0") (ifseqformula "13"))
                                          (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "43"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                                       (rule "eqSymm" (formula "6") (term "1,0"))
                                       (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "23"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "times_zero_2" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "33") (term "0,0,0"))
                                       (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "32") (term "0,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "replace_known_right" (formula "13") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "4") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "add_zero_right" (formula "4") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "20") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "inEqSimp_geqRight" (formula "34"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                           (branch "CUT: result_1.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "ifthenelse_split" (formula "19") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "13") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "replace_known_left" (formula "21") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_left" (formula "4") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_6" (formula "22") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "22") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet10000000_1" (formula "22") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_7" (formula "22") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "13") (term "1,0,1,0") (ifseqformula "6") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "47") (term "1,0") (ifseqformula "6") (ifseqformula "37"))
                                 (rule "eqSymm" (formula "47"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "6") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "15") (ifseqformula "37"))
                                 (rule "nonNull" (formula "24") (inst "i=i"))
                                 (rule "greater_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "sub_literals" (formula "24") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "23") (inst "i=i"))
                                 (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "greater_literals" (formula "23") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "22") (inst "i=i"))
                                 (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "greater_literals" (formula "22") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_16"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_16"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_16"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_16"))
                                 (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "24"))
                                 (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "54")) (ifInst ""  (formula "7")))
                                 (rule "elementOfUnion" (formula "24") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "24") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "24") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                                 (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
                                 (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "24"))
                                 (rule "hideAuxiliaryEq" (formula "24"))
                                 (rule "pullOutSelect" (formula "23") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_16"))
                                 (rule "applyEq" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "39") (term "0") (ifseqformula "23"))
                                 (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "54")) (ifInst ""  (formula "7")))
                                 (rule "elementOfUnion" (formula "23") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "23") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "23") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0") (ifseqformula "23"))
                                 (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "23"))
                                 (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                                 (rule "hideAuxiliaryEq" (formula "23"))
                                 (rule "pullOutSelect" (formula "22") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_16"))
                                 (rule "applyEq" (formula "38") (term "0") (ifseqformula "22"))
                                 (rule "applyEq" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
                                 (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "54")) (ifInst ""  (formula "7")))
                                 (rule "elementOfUnion" (formula "22") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "22") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "22") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
                                 (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "22"))
                                 (rule "applyEqReverse" (formula "23") (term "1,0,0,1,0") (ifseqformula "22"))
                                 (rule "hideAuxiliaryEq" (formula "22"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "14") (ifseqformula "8"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "nonNull" (formula "16") (inst "i=i"))
                                 (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "41")))
                                 (rule "greater_literals" (formula "16") (term "0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "41"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "15") (inst "i=i"))
                                 (rule "greater_literals" (formula "15") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "40")))
                                 (rule "sub_literals" (formula "15") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "40"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "14") (inst "i=i"))
                                 (rule "sub_literals" (formula "14") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "39")))
                                 (rule "greater_literals" (formula "14") (term "0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "39"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "33") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_5" (formula "33") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "33") (term "0,0,1"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "nonNull" (formula "35") (inst "i=i"))
                                 (rule "greater_literals" (formula "35") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "sub_literals" (formula "35") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "34") (inst "i=i"))
                                 (rule "greater_literals" (formula "34") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "sub_literals" (formula "34") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "33") (inst "i=i"))
                                 (rule "sub_literals" (formula "33") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "greater_literals" (formula "33") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_17"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                 (rule "replaceKnownSelect_taclet01010000000_11" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_12" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_17"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                 (rule "replaceKnownSelect_taclet01010000000_13" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_14" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_17"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                 (rule "replaceKnownSelect_taclet01010000000_15" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_16" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "45") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_16"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                 (rule "replaceKnownSelect_taclet01010000000_17" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_18" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_18"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                 (rule "replaceKnownSelect_taclet10000000_1" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_7" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "35") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_17"))
                                 (rule "applyEq" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "35"))
                                 (rule "applyEq" (formula "44") (term "0") (ifseqformula "35"))
                                 (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "61")))
                                 (rule "replaceKnownSelect_taclet01010000000_19" (formula "35") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_20" (formula "35") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "35") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "35"))
                                 (rule "applyEqReverse" (formula "36") (term "1,0,0,1,0") (ifseqformula "35"))
                                 (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "35"))
                                 (rule "hideAuxiliaryEq" (formula "35"))
                                 (rule "pullOutSelect" (formula "34") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_17"))
                                 (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                 (rule "applyEq" (formula "43") (term "0") (ifseqformula "34"))
                                 (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "60")))
                                 (rule "replaceKnownSelect_taclet01010000000_21" (formula "34") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_22" (formula "34") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "applyEqReverse" (formula "35") (term "1,0,0,1,0") (ifseqformula "34"))
                                 (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                 (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "34"))
                                 (rule "hideAuxiliaryEq" (formula "34"))
                                 (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_17"))
                                 (rule "applyEq" (formula "42") (term "0") (ifseqformula "33"))
                                 (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                 (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "59")))
                                 (rule "replaceKnownSelect_taclet01010000000_23" (formula "33") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_24" (formula "33") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "33") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                 (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
                                 (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "33"))
                                 (rule "hideAuxiliaryEq" (formula "33"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "40") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_4" (formula "40") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "40") (term "0,0,1"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "nonNull" (formula "42") (inst "i=i"))
                                 (rule "greater_literals" (formula "42") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "sub_literals" (formula "42") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "andLeft" (formula "42"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "42") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "41") (inst "i=i"))
                                 (rule "sub_literals" (formula "41") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "greater_literals" (formula "41") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "40") (inst "i=i"))
                                 (rule "sub_literals" (formula "40") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "greater_literals" (formula "40") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_18"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")))
                                 (rule "replaceKnownSelect_taclet01010000000_25" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_26" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_18"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                 (rule "replaceKnownSelect_taclet01010000000_27" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_28" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_18"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                 (rule "replaceKnownSelect_taclet01010000000_29" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_30" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_17"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                 (rule "replaceKnownSelect_taclet01010000000_31" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_32" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_19"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                 (rule "replaceKnownSelect_taclet01010000000_33" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_34" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "42") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_18"))
                                 (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                 (rule "applyEq" (formula "46") (term "0") (ifseqformula "42"))
                                 (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "63")))
                                 (rule "replaceKnownSelect_taclet01010000000_35" (formula "42") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_36" (formula "42") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "42") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "42"))
                                 (rule "applyEqReverse" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                 (rule "applyEqReverse" (formula "43") (term "1,0,0,1,0") (ifseqformula "42"))
                                 (rule "hideAuxiliaryEq" (formula "42"))
                                 (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_18"))
                                 (rule "applyEq" (formula "45") (term "0") (ifseqformula "41"))
                                 (rule "applyEq" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                 (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "62")))
                                 (rule "replaceKnownSelect_taclet01010000000_37" (formula "41") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_38" (formula "41") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "41") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                                 (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "41"))
                                 (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                 (rule "hideAuxiliaryEq" (formula "41"))
                                 (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_18"))
                                 (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                 (rule "applyEq" (formula "44") (term "0") (ifseqformula "40"))
                                 (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "61")))
                                 (rule "replaceKnownSelect_taclet01010000000_39" (formula "40") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010000000_40" (formula "40") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "40"))
                                 (rule "applyEqReverse" (formula "41") (term "1,0,0,1,0") (ifseqformula "40"))
                                 (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                 (rule "hideAuxiliaryEq" (formula "40"))
                                 (rule "ifthenelse_split" (formula "31") (term "1"))
                                 (branch "result_1.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "33") (term "0,1,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "replace_known_left" (formula "5") (term "0,1,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "arrayLengthNotNegative" (formula "32") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "32") (term "0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "arrayLengthIsAShort" (formula "32") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "lenNonNegative" (formula "32") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "32"))
                                    (rule "nnf_imp2or" (formula "26") (term "0"))
                                    (rule "nnf_imp2or" (formula "25") (term "0"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "eqSymm" (formula "13") (term "1,0"))
                                       (rule "applyEq" (formula "58") (term "0,0,0") (ifseqformula "23"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "58"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "applyEq" (formula "57") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "57") (term "0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "57"))
                                       (rule "eqSymm" (formula "57"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "commute_or_2" (formula "41") (term "0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "4") (term "0"))
                                       (rule "nnf_imp2or" (formula "37") (term "0"))
                                       (rule "nnf_imp2or" (formula "36") (term "0"))
                                       (rule "nnf_imp2or" (formula "35") (term "0"))
                                       (rule "ifthenelse_split" (formula "12") (term "0"))
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "14") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "eqSymm" (formula "14") (term "1,0"))
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "45") (term "0"))
                                          (rule "nnf_imp2or" (formula "44") (term "0"))
                                          (rule "nnf_imp2or" (formula "43") (term "0"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.unsigned.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "59"))
                                             (rule "closeTrue" (formula "59"))
                                          )
                                          (branch "self.unsigned.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "46") (ifseqformula "50"))
                                             (rule "close" (formula "46") (ifseqformula "7"))
                                          )
                                       )
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "12"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "5") (term "1,1,1,0,0,1,0,0") (ifseqformula "13"))
                                          (rule "add_literals" (formula "5") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "5") (term "1,0,0"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0,1,0"))
                                          (rule "eqSymm" (formula "24") (term "1,0"))
                                          (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "33") (term "0,0,0"))
                                          (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "4") (term "0") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "4"))
                                          (rule "mul_literals" (formula "4") (term "1,0"))
                                          (rule "add_zero_right" (formula "4") (term "0"))
                                          (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "34") (term "0,0,0"))
                                          (rule "applyEq" (formula "35") (term "1,0,0,0,1,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "35") (term "0,0,0,1,0"))
                                          (rule "eqSymm" (formula "35") (term "1,0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "45"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "34") (term "0,0,0"))
                                       (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "33") (term "0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "add_zero_right" (formula "5") (term "1,1,0,0,1,0"))
                                       (rule "eqSymm" (formula "5") (term "1,0"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "23"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "times_zero_2" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "35") (term "1,0,0,0,1,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "35") (term "0,0,0,1,0"))
                                       (rule "eqSymm" (formula "35") (term "1,0"))
                                       (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                                 (branch "result_1.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "5") (term "0,1,1,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "replace_known_right" (formula "32") (term "0,1,1,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "inEqSimp_geqRight" (formula "43"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                                    (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "6") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "32") (term "0,0"))
                                    (rule "add_zero_right" (formula "32") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "32") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "arrayLengthNotNegative" (formula "31") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "arrayLengthIsAShort" (formula "31") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "lenNonNegative" (formula "31") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "31"))
                                    (rule "nnf_imp2or" (formula "26") (term "0"))
                                    (rule "nnf_imp2or" (formula "25") (term "0"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "56") (term "0,0,0") (ifseqformula "23"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "56"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "13") (term "1,0"))
                                       (rule "applyEq" (formula "55") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "55") (term "0,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "55"))
                                       (rule "eqSymm" (formula "55"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "commute_or_2" (formula "39") (term "0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "5") (term "0"))
                                       (rule "nnf_imp2or" (formula "35") (term "0"))
                                       (rule "nnf_imp2or" (formula "34") (term "0"))
                                       (rule "nnf_imp2or" (formula "33") (term "0"))
                                       (rule "ifthenelse_split" (formula "12") (term "0"))
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "14") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "eqSymm" (formula "14") (term "1,0"))
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "43") (term "0"))
                                          (rule "nnf_imp2or" (formula "42") (term "0"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.unsigned.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "57"))
                                             (rule "closeTrue" (formula "57"))
                                          )
                                          (branch "self.unsigned.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "48"))
                                             (rule "close" (formula "44") (ifseqformula "7"))
                                          )
                                       )
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "12"))
                                          (rule "inEqSimp_geqRight" (formula "43"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "33") (term "0,0,0"))
                                          (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "mul_literals" (formula "5") (term "1,0"))
                                          (rule "add_zero_right" (formula "5") (term "0"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0"))
                                          (rule "eqSymm" (formula "24") (term "1,0"))
                                          (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "32") (term "0,0,0"))
                                          (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0,0") (ifseqformula "13"))
                                          (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0"))
                                          (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "43"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "23"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "times_zero_2" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "32") (term "0,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "13") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "4") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "add_zero_right" (formula "4") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "20") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "inEqSimp_geqRight" (formula "34"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                        )
                        (branch "CUT: result_0.<created> = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "cut_direct" (formula "25") (term "0,0"))
                           (branch "CUT: result_1.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "ifthenelse_split" (formula "19") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "13") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "replace_known_left" (formula "21") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "replace_known_left" (formula "4") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "29") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_5" (formula "29") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "29") (term "0,0,1"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "nonNull" (formula "31") (inst "i=i"))
                                 (rule "greater_literals" (formula "31") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "sub_literals" (formula "31") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "30") (inst "i=i"))
                                 (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "greater_literals" (formula "30") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "29") (inst "i=i"))
                                 (rule "sub_literals" (formula "29") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "greater_literals" (formula "29") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_14"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_14"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_14"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_16"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "replaceKnownSelect_taclet10000000_1" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_7" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "13") (term "1,0,1,0") (ifseqformula "6") (ifseqformula "41"))
                                 (rule "narrowSelectArrayType" (formula "49") (term "1,0") (ifseqformula "6") (ifseqformula "41"))
                                 (rule "eqSymm" (formula "49"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "15") (ifseqformula "41"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "6") (ifseqformula "41"))
                                 (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_13"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "8")))
                                 (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_14"))
                                 (rule "applyEq" (formula "41") (term "0") (ifseqformula "32"))
                                 (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                 (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "55")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "55")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_14"))
                                 (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "30"))
                                 (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "55")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "55")) (ifInst ""  (formula "7")))
                                 (rule "elementOfUnion" (formula "32") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "32") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "32") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                 (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "32"))
                                 (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
                                 (rule "hideAuxiliaryEq" (formula "32"))
                                 (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_14"))
                                 (rule "applyEq" (formula "39") (term "0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                 (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "55")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "55")) (ifInst ""  (formula "7")))
                                 (rule "elementOfUnion" (formula "31") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "31") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "31") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
                                 (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                                 (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "31"))
                                 (rule "hideAuxiliaryEq" (formula "31"))
                                 (rule "elementOfUnion" (formula "29") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "29") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "54")))
                                 (rule "elementOfSingleton" (formula "29") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "54")))
                                 (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                 (rule "hideAuxiliaryEq" (formula "29"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_6" (formula "22") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "22") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet00110000000_12" (formula "22") (term "0,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_13" (formula "22") (term "0,0,1,0"))
                                 (rule "replaceKnownSelect_taclet00110000000_15" (formula "22") (term "0,0,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_16" (formula "22") (term "0,0,1,0,0"))
                                 (rule "replaceKnownSelect_taclet00110000000_25" (formula "22") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00110000000_18" (formula "22") (term "0,0,1,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_29" (formula "22") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_19" (formula "22") (term "0,0,1,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00110000000_28" (formula "22") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00110000000_31" (formula "22") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_32" (formula "22") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_33" (formula "22") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet10000000_1" (formula "22") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet00110000000_23" (formula "22") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_7" (formula "22") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_26" (formula "22") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "nonNull" (formula "24") (inst "i=i"))
                                 (rule "greater_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "41")))
                                 (rule "sub_literals" (formula "24") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "23") (inst "i=i"))
                                 (rule "greater_literals" (formula "23") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "40")))
                                 (rule "sub_literals" (formula "23") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "22") (inst "i=i"))
                                 (rule "greater_literals" (formula "22") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "39")))
                                 (rule "sub_literals" (formula "22") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "14") (ifseqformula "8"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "nonNull" (formula "16") (inst "i=i"))
                                 (rule "greater_literals" (formula "16") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "43")))
                                 (rule "sub_literals" (formula "16") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "43"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "15") (inst "i=i"))
                                 (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "42")))
                                 (rule "greater_literals" (formula "15") (term "0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "42"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "14") (inst "i=i"))
                                 (rule "sub_literals" (formula "14") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "41")))
                                 (rule "greater_literals" (formula "14") (term "0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "41"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "40") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_4" (formula "40") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "40") (term "0,0,1"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "nonNull" (formula "42") (inst "i=i"))
                                 (rule "greater_literals" (formula "42") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "sub_literals" (formula "42") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "andLeft" (formula "42"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "42") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "41") (inst "i=i"))
                                 (rule "sub_literals" (formula "41") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "greater_literals" (formula "41") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "40") (inst "i=i"))
                                 (rule "greater_literals" (formula "40") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "sub_literals" (formula "40") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")))
                                 (rule "replaceKnownSelect_taclet00110000000_11" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_13" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                 (rule "replaceKnownSelect_taclet00110000000_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_16" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                 (rule "replaceKnownSelect_taclet00110000000_17" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_19" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_14"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                 (rule "replaceKnownSelect_taclet00110000000_22" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_26" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_17"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                 (rule "replaceKnownSelect_taclet00110000000_20" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_21" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "42") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_15"))
                                 (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                 (rule "applyEq" (formula "46") (term "0") (ifseqformula "42"))
                                 (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "63")))
                                 (rule "replaceKnownSelect_taclet00110000000_24" (formula "42") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_29" (formula "42") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "42") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "applyEqReverse" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                 (rule "applyEqReverse" (formula "43") (term "1,0,0,1,0") (ifseqformula "42"))
                                 (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "42"))
                                 (rule "hideAuxiliaryEq" (formula "42"))
                                 (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_15"))
                                 (rule "applyEq" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                 (rule "applyEq" (formula "45") (term "0") (ifseqformula "41"))
                                 (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "62")))
                                 (rule "replaceKnownSelect_taclet00110000000_27" (formula "41") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_32" (formula "41") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "41") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "41"))
                                 (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                 (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                                 (rule "hideAuxiliaryEq" (formula "41"))
                                 (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_15"))
                                 (rule "applyEq" (formula "44") (term "0") (ifseqformula "40"))
                                 (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                 (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "61")))
                                 (rule "replaceKnownSelect_taclet00110000000_30" (formula "40") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00110000000_33" (formula "40") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "40"))
                                 (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                 (rule "applyEqReverse" (formula "41") (term "1,0,0,1,0") (ifseqformula "40"))
                                 (rule "hideAuxiliaryEq" (formula "40"))
                                 (rule "ifthenelse_split" (formula "31") (term "1"))
                                 (branch "result_1.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "33") (term "0,1,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "replace_known_left" (formula "5") (term "0,1,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "arrayLengthNotNegative" (formula "32") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "32") (term "0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "arrayLengthIsAShort" (formula "32") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "lenNonNegative" (formula "32") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "32"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "13") (term "1,0"))
                                       (rule "applyEq" (formula "57") (term "0,0,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "57"))
                                       (rule "replace_known_left" (formula "57") (term "0,1") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "57"))
                                       (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "applyEq" (formula "57") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "57") (term "0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "57"))
                                       (rule "eqSymm" (formula "57"))
                                       (rule "commute_or_2" (formula "41") (term "0"))
                                       (rule "nnf_imp2or" (formula "37") (term "0"))
                                       (rule "nnf_imp2or" (formula "36") (term "0"))
                                       (rule "nnf_imp2or" (formula "35") (term "0"))
                                       (rule "nnf_imp2or" (formula "26") (term "0"))
                                       (rule "commute_or_2" (formula "4") (term "0"))
                                       (rule "nnf_imp2or" (formula "25") (term "0"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "ifthenelse_split" (formula "12") (term "0"))
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "eqSymm" (formula "13") (term "1,0"))
                                          (rule "nnf_imp2or" (formula "44") (term "0"))
                                          (rule "nnf_imp2or" (formula "43") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "43") (term "0"))
                                          (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                                          (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                          (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                          (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "45") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                          (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "44") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "44") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
                                          (rule "mul_literals" (formula "44") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "44") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0"))
                                          (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "43") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
                                          (rule "mul_literals" (formula "43") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "43") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.unsigned.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "59"))
                                             (rule "closeTrue" (formula "59"))
                                          )
                                          (branch "self.unsigned.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "46") (ifseqformula "51"))
                                             (rule "close" (formula "46") (ifseqformula "7"))
                                          )
                                       )
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "12"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "5") (term "1,1,1,0,0,1,0,0") (ifseqformula "13"))
                                          (rule "add_zero_right" (formula "5") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "5") (term "1,0,0"))
                                          (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "35") (term "1,0,0,0,1,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "35") (term "0,0,0,1,0"))
                                          (rule "eqSymm" (formula "35") (term "1,0"))
                                          (rule "applyEq" (formula "4") (term "0") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "4"))
                                          (rule "times_zero_2" (formula "4") (term "1,0"))
                                          (rule "add_zero_right" (formula "4") (term "0"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0"))
                                          (rule "eqSymm" (formula "24") (term "1,0"))
                                          (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "34") (term "0,0,0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "45"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "34") (term "0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "33") (term "0,0,0"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "23"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "times_zero_2" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                                 (branch "result_1.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "32") (term "0,1,1,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "replace_known_right" (formula "5") (term "0,1,1,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_geqRight" (formula "43"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                    (rule "add_zero_right" (formula "33") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                                    (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "6") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "arrayLengthNotNegative" (formula "31") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "lenNonNegative" (formula "31") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "31"))
                                    (rule "arrayLengthIsAShort" (formula "32") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "56") (term "0,0,0") (ifseqformula "23"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "56"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "13") (term "1,0"))
                                       (rule "applyEq" (formula "55") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "55") (term "0,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "55"))
                                       (rule "eqSymm" (formula "55"))
                                       (rule "commute_or_2" (formula "39") (term "0"))
                                       (rule "nnf_imp2or" (formula "35") (term "0"))
                                       (rule "nnf_imp2or" (formula "34") (term "0"))
                                       (rule "nnf_imp2or" (formula "33") (term "0"))
                                       (rule "nnf_imp2or" (formula "26") (term "0"))
                                       (rule "commute_or_2" (formula "5") (term "0"))
                                       (rule "nnf_imp2or" (formula "25") (term "0"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "ifthenelse_split" (formula "12") (term "0"))
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "14") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "eqSymm" (formula "14") (term "1,0"))
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                                          (rule "nnf_imp2or" (formula "42") (term "0"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                          (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "43") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
                                          (rule "mul_literals" (formula "43") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "43") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "42") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "42") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                          (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "41") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
                                          (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.unsigned.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "57"))
                                             (rule "closeTrue" (formula "57"))
                                          )
                                          (branch "self.unsigned.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "49"))
                                             (rule "close" (formula "44") (ifseqformula "7"))
                                          )
                                       )
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "12"))
                                          (rule "inEqSimp_geqRight" (formula "43"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "32") (term "0,0,0"))
                                          (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "33") (term "0,0,0"))
                                          (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0,0") (ifseqformula "13"))
                                          (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "times_zero_2" (formula "5") (term "1,0"))
                                          (rule "add_zero_right" (formula "5") (term "0"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                          (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0"))
                                          (rule "eqSymm" (formula "24") (term "1,0"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "43"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "33") (term "0,0,0"))
                                       (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "32") (term "0,0,0"))
                                       (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
                                       (rule "eqSymm" (formula "6") (term "1,0"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "replace_known_right" (formula "20") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "4") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "add_zero_right" (formula "4") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "13") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_geqRight" (formula "34"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                           (branch "CUT: result_1.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "ifthenelse_split" (formula "19") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "4") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "13") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "replace_known_left" (formula "21") (term "0,1,1,1,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_6" (formula "22") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "22") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet10000000_1" (formula "22") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_7" (formula "22") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "48") (term "1,0") (ifseqformula "6") (ifseqformula "37"))
                                 (rule "eqSymm" (formula "48"))
                                 (rule "narrowSelectArrayType" (formula "13") (term "1,0,1,0") (ifseqformula "6") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "6") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "15") (ifseqformula "37"))
                                 (rule "nonNull" (formula "24") (inst "i=i"))
                                 (rule "greater_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "sub_literals" (formula "24") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "23") (inst "i=i"))
                                 (rule "greater_literals" (formula "23") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "sub_literals" (formula "23") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "22") (inst "i=i"))
                                 (rule "greater_literals" (formula "22") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "sub_literals" (formula "22") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_12"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
                                 (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_12"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_12"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_11"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "8")))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_12"))
                                 (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "24"))
                                 (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "55")) (ifInst ""  (formula "7")))
                                 (rule "elementOfUnion" (formula "24") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "24") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "24") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
                                 (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "24"))
                                 (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                                 (rule "hideAuxiliaryEq" (formula "24"))
                                 (rule "pullOutSelect" (formula "23") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_12"))
                                 (rule "applyEq" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "39") (term "0") (ifseqformula "23"))
                                 (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "55")) (ifInst ""  (formula "7")))
                                 (rule "elementOfUnion" (formula "23") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "23") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "23") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "23"))
                                 (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                                 (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0") (ifseqformula "23"))
                                 (rule "hideAuxiliaryEq" (formula "23"))
                                 (rule "pullOutSelect" (formula "22") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_12"))
                                 (rule "applyEq" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
                                 (rule "applyEq" (formula "38") (term "0") (ifseqformula "22"))
                                 (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "55")) (ifInst ""  (formula "7")))
                                 (rule "elementOfUnion" (formula "22") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "22") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "55")))
                                 (rule "elementOfSingleton" (formula "22") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "55")))
                                 (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
                                 (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "22"))
                                 (rule "applyEqReverse" (formula "23") (term "1,0,0,1,0") (ifseqformula "22"))
                                 (rule "hideAuxiliaryEq" (formula "22"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "36") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_4" (formula "36") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "36") (term "0,0,1"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "notLeft" (formula "37"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "nonNull" (formula "38") (inst "i=i"))
                                 (rule "greater_literals" (formula "38") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "sub_literals" (formula "38") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "andLeft" (formula "38"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "37") (inst "i=i"))
                                 (rule "sub_literals" (formula "37") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "greater_literals" (formula "37") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "andLeft" (formula "37"))
                                 (rule "notLeft" (formula "37"))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "36") (inst "i=i"))
                                 (rule "greater_literals" (formula "36") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "sub_literals" (formula "36") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_13"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                 (rule "replaceKnownSelect_taclet01110000000_11" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_12" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "45") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_13"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                 (rule "replaceKnownSelect_taclet01110000000_13" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_14" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_13"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                 (rule "replaceKnownSelect_taclet01110000000_15" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_16" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                 (rule "replaceKnownSelect_taclet10000000_1" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_7" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_12"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                                 (rule "replaceKnownSelect_taclet01110000000_17" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_18" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "38") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_13"))
                                 (rule "applyEq" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                 (rule "applyEq" (formula "42") (term "0") (ifseqformula "38"))
                                 (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "60")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "26"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "38") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "60")))
                                 (rule "replaceKnownSelect_taclet01110000000_19" (formula "38") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_20" (formula "38") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "38") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "applyEqReverse" (formula "39") (term "1,0,0,1,0") (ifseqformula "38"))
                                 (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "38"))
                                 (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                 (rule "hideAuxiliaryEq" (formula "38"))
                                 (rule "pullOutSelect" (formula "37") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_13"))
                                 (rule "applyEq" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                 (rule "applyEq" (formula "41") (term "0") (ifseqformula "37"))
                                 (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "59")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "26"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "37") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "59")))
                                 (rule "replaceKnownSelect_taclet01110000000_21" (formula "37") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_22" (formula "37") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "37"))
                                 (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                 (rule "applyEqReverse" (formula "38") (term "1,0,0,1,0") (ifseqformula "37"))
                                 (rule "hideAuxiliaryEq" (formula "37"))
                                 (rule "pullOutSelect" (formula "36") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_13"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                                 (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "58")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0") (ifseqformula "26"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "36") (term "0,0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "58")))
                                 (rule "replaceKnownSelect_taclet01110000000_23" (formula "36") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_24" (formula "36") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                                 (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "36"))
                                 (rule "applyEqReverse" (formula "37") (term "1,0,0,1,0") (ifseqformula "36"))
                                 (rule "hideAuxiliaryEq" (formula "36"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "31") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet10000000_5" (formula "31") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000000_9" (formula "31") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet01110000000_26" (formula "31") (term "0,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_27" (formula "31") (term "0,0,1,0"))
                                 (rule "replaceKnownSelect_taclet01110000000_29" (formula "31") (term "0,0,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_30" (formula "31") (term "0,0,1,0,0"))
                                 (rule "replaceKnownSelect_taclet01110000000_32" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "replaceKnownSelect_taclet01110000000_41" (formula "31") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_33" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_42" (formula "31") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet01110000000_44" (formula "31") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet01110000000_47" (formula "31") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_45" (formula "31") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_48" (formula "31") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet01110000000_35" (formula "31") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet01110000000_38" (formula "31") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_36" (formula "31") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_39" (formula "31") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "nonNull" (formula "33") (inst "i=i"))
                                 (rule "greater_literals" (formula "33") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "43")))
                                 (rule "sub_literals" (formula "33") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "32") (inst "i=i"))
                                 (rule "greater_literals" (formula "32") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "42")))
                                 (rule "sub_literals" (formula "32") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "31") (inst "i=i"))
                                 (rule "sub_literals" (formula "31") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "41")))
                                 (rule "greater_literals" (formula "31") (term "0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "14") (ifseqformula "8"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "nonNull" (formula "16") (inst "i=i"))
                                 (rule "greater_literals" (formula "16") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "45")))
                                 (rule "sub_literals" (formula "16") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "45"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "15") (inst "i=i"))
                                 (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "44")))
                                 (rule "greater_literals" (formula "15") (term "0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "44"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "14") (inst "i=i"))
                                 (rule "sub_literals" (formula "14") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "43")))
                                 (rule "greater_literals" (formula "14") (term "0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "43"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "ifthenelse_split" (formula "31") (term "1"))
                                 (branch "result_1.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "33") (term "0,1,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "replace_known_left" (formula "5") (term "0,1,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "arrayLengthIsAShort" (formula "32") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "lenNonNegative" (formula "32") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "32"))
                                    (rule "arrayLengthNotNegative" (formula "33") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "33") (term "0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "nnf_imp2or" (formula "26") (term "0"))
                                    (rule "nnf_imp2or" (formula "25") (term "0"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "13") (term "1,0"))
                                       (rule "applyEq" (formula "58") (term "0,0,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "58"))
                                       (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0") (ifseqformula "22"))
                                       (rule "applyEq" (formula "58") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "58") (term "0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "58"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "commute_or_2" (formula "41") (term "0"))
                                       (rule "commute_or_2" (formula "4") (term "0"))
                                       (rule "nnf_imp2or" (formula "44") (term "0"))
                                       (rule "nnf_imp2or" (formula "43") (term "0"))
                                       (rule "nnf_imp2or" (formula "42") (term "0"))
                                       (rule "nnf_imp2or" (formula "37") (term "0"))
                                       (rule "nnf_imp2or" (formula "36") (term "0"))
                                       (rule "nnf_imp2or" (formula "35") (term "0"))
                                       (rule "ifthenelse_split" (formula "12") (term "0"))
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "eqSymm" (formula "13") (term "1,0"))
                                          (rule "nnf_imp2or" (formula "16") (term "0"))
                                          (rule "nnf_imp2or" (formula "15") (term "0"))
                                          (rule "nnf_imp2or" (formula "14") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "45") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                          (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "44") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "44") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0"))
                                          (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "44") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
                                          (rule "mul_literals" (formula "44") (term "1,0,0,0"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.unsigned.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "60"))
                                             (rule "closeTrue" (formula "60"))
                                          )
                                          (branch "self.unsigned.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "46") (ifseqformula "50"))
                                             (rule "close" (formula "46") (ifseqformula "7"))
                                          )
                                       )
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "12"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "45"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "seqDef_lower_equals_upper" (formula "34") (term "0,0,0"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                                 (branch "result_1.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "32") (term "0,1,1,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "replace_known_right" (formula "5") (term "0,1,1,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_geqRight" (formula "43"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                    (rule "add_zero_right" (formula "33") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                                    (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "6") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "arrayLengthIsAShort" (formula "31") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "lenNonNegative" (formula "31") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "31"))
                                    (rule "arrayLengthNotNegative" (formula "32") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "32") (term "0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "nnf_imp2or" (formula "26") (term "0"))
                                    (rule "nnf_imp2or" (formula "25") (term "0"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "eqSymm" (formula "13") (term "1,0"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "56") (term "0,0,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "56"))
                                       (rule "applyEq" (formula "56") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "56") (term "0,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "56"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "commute_or_2" (formula "39") (term "0"))
                                       (rule "commute_or_2" (formula "5") (term "0"))
                                       (rule "nnf_imp2or" (formula "42") (term "0"))
                                       (rule "nnf_imp2or" (formula "41") (term "0"))
                                       (rule "nnf_imp2or" (formula "40") (term "0"))
                                       (rule "nnf_imp2or" (formula "35") (term "0"))
                                       (rule "nnf_imp2or" (formula "34") (term "0"))
                                       (rule "nnf_imp2or" (formula "33") (term "0"))
                                       (rule "ifthenelse_split" (formula "12") (term "0"))
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "eqSymm" (formula "13") (term "1,0"))
                                          (rule "nnf_imp2or" (formula "16") (term "0"))
                                          (rule "nnf_imp2or" (formula "15") (term "0"))
                                          (rule "nnf_imp2or" (formula "14") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "0") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.unsigned.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "58"))
                                             (rule "closeTrue" (formula "58"))
                                          )
                                          (branch "self.unsigned.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "48"))
                                             (rule "close" (formula "44") (ifseqformula "7"))
                                          )
                                       )
                                       (branch " (verif.functionalities.pkisig.UncorruptedVerifier)self.precServVerif.log.messages.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "12"))
                                          (rule "inEqSimp_geqRight" (formula "43"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "times_zero_2" (formula "5") (term "1,0"))
                                          (rule "add_zero_right" (formula "5") (term "0"))
                                          (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0,0") (ifseqformula "13"))
                                          (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0"))
                                          (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "32") (term "0,0,0"))
                                          (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "13"))
                                          (rule "seqDef_lower_equals_upper" (formula "33") (term "0,0,0"))
                                          (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "43"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "replace_known_right" (formula "13") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "20") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,0,0,0"))
                                 (rule "replace_known_right" (formula "4") (term "0,1,1,1,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "add_zero_right" (formula "4") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_geqRight" (formula "34"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                        )
                     )
                  )
                  (branch "CUT: array2seq(heapAfter_checkAndRemoveTag, result_0) = array2seq(heapAfter_checkAndRemoveSignature, result_0) FALSE"
                     (rule "hide_right" (formula "37") (userinteraction))
                     (rule "array2seqDef" (formula "30") (term "0") (inst "u=u") (userinteraction))
                     (rule "array2seqDef" (formula "30") (term "1") (inst "u=u") (userinteraction))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "11"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1") (ifseqformula "24"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1") (ifseqformula "17"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1") (ifseqformula "11"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,1") (ifseqformula "11"))
                     (rule "eqSymm" (formula "20"))
                     (rule "eqSymm" (formula "14"))
                     (rule "eqSymm" (formula "27"))
                     (rule "eqSymm" (formula "8"))
                     (rule "eqSymm" (formula "1"))
                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "35"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "33"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "31"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "32"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
                     (rule "applyEq" (formula "21") (term "1") (ifseqformula "1"))
                     (rule "array2seqDef" (formula "28") (term "0") (inst "u=u"))
                     (rule "array2seqDef" (formula "21") (term "0") (inst "u=u"))
                     (rule "eqSeqDef" (formula "30") (inst "iv=iv"))
                     (rule "lenOfSeqDef" (formula "30") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "30") (term "1,1,0"))
                     (rule "times_zero_2" (formula "30") (term "1,1,1,0"))
                     (rule "add_zero_right" (formula "30") (term "1,1,0"))
                     (rule "getOfSeqDef" (formula "30") (term "1,1,0,1"))
                     (rule "castDel" (formula "30") (term "1,1,1,0,1"))
                     (rule "castDel" (formula "30") (term "2,1,1,0,1"))
                     (rule "add_zero_right" (formula "30") (term "0,2,1,1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "30") (term "1,1,0,1,1,0,1"))
                     (rule "times_zero_2" (formula "30") (term "1,1,1,0,1,1,0,1"))
                     (rule "add_zero_right" (formula "30") (term "1,1,0,1,1,0,1"))
                     (rule "getOfSeqDef" (formula "30") (term "0,1,0,1"))
                     (rule "castDel" (formula "30") (term "2,0,1,0,1"))
                     (rule "castDel" (formula "30") (term "1,0,1,0,1"))
                     (rule "add_zero_right" (formula "30") (term "0,2,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "30") (term "1,1,0,0,1,0,1"))
                     (rule "times_zero_2" (formula "30") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "30") (term "1,1,0,0,1,0,1"))
                     (rule "lenOfSeqDef" (formula "30") (term "1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "30") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "30") (term "1,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "30") (term "1,1,1,0,0,1"))
                     (rule "lenOfSeqDef" (formula "30") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "30") (term "1,0,0"))
                     (rule "times_zero_2" (formula "30") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "30") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "allRight" (formula "30") (inst "sk=iv_7"))
                     (rule "impRight" (formula "30"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0"))
                     (rule "eqSymm" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1"))
                     (rule "eqSymm" (formula "32"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1"))
                     (rule "polySimp_elimOne" (formula "32") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "array2seqDef" (formula "30") (term "0,1") (inst "u=u"))
                     (rule "array2seqDef" (formula "22") (term "0") (inst "u=u"))
                     (rule "array2seqDef" (formula "22") (term "0,1") (inst "u=u"))
                     (rule "array2seqDef" (formula "16") (term "0") (inst "u=u"))
                     (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                     (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "29"))
                     (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                     (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "4") (ifseqformula "38"))
                     (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "10"))
                     (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "3"))
                     (rule "array2seqDef" (formula "23") (term "1") (inst "u=u"))
                     (rule "eqSeqDef" (formula "16") (inst "iv=iv"))
                     (rule "andLeft" (formula "16"))
                     (rule "lenOfSeqDef" (formula "16") (term "1"))
                     (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                     (rule "mul_literals" (formula "16") (term "1,1,1"))
                     (rule "add_zero_right" (formula "16") (term "1,1"))
                     (rule "lenOfSeqDef" (formula "16") (term "0"))
                     (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                     (rule "times_zero_2" (formula "16") (term "1,1,0"))
                     (rule "add_zero_right" (formula "16") (term "1,0"))
                     (rule "getOfSeqDef" (formula "17") (term "0,1,0"))
                     (rule "castDel" (formula "17") (term "2,0,1,0"))
                     (rule "castDel" (formula "17") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0"))
                     (rule "eqSymm" (formula "17") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0"))
                     (rule "times_zero_2" (formula "17") (term "1,1,1,1,0,0"))
                     (rule "add_zero_right" (formula "17") (term "1,1,1,0,0"))
                     (rule "getOfSeqDef" (formula "17") (term "0,1,0"))
                     (rule "castDel" (formula "17") (term "2,0,1,0"))
                     (rule "castDel" (formula "17") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0"))
                     (rule "eqSymm" (formula "17") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0"))
                     (rule "mul_literals" (formula "17") (term "1,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "17") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "17") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                     (rule "apply_eq_monomials" (formula "17") (term "1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "polySimp_rightDist" (formula "17") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "17") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "17") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                     (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "30"))
                     (rule "array2seqDef" (formula "10") (term "0,1,1") (inst "u=u"))
                     (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
                     (rule "array2seqDef" (formula "3") (term "0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "3"))
                     (rule "eqSeqDef2" (formula "31") (inst "iv=iv") (ifseqformula "31"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "eqSeqDef2" (formula "23") (inst "iv=iv") (ifseqformula "23"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "eqSeqDef" (formula "23") (inst "iv=iv"))
                     (rule "andLeft" (formula "23"))
                     (rule "lenOfSeqDef" (formula "23") (term "0"))
                     (rule "eqSymm" (formula "23"))
                     (rule "polySimp_elimSub" (formula "23") (term "1,1"))
                     (rule "times_zero_2" (formula "23") (term "1,1,1"))
                     (rule "add_zero_right" (formula "23") (term "1,1"))
                     (rule "getOfSeqDef" (formula "24") (term "0,1,0"))
                     (rule "castDel" (formula "24") (term "2,0,1,0"))
                     (rule "castDel" (formula "24") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "24") (term "0,2,1,0,1,0"))
                     (rule "eqSymm" (formula "24") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "24") (term "1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "24") (term "1,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "24") (term "1,1,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "24") (term "1,1,1,0,0"))
                     (rule "times_zero_2" (formula "24") (term "1,1,1,1,0,0"))
                     (rule "add_zero_right" (formula "24") (term "1,1,1,0,0"))
                     (rule "lenOfSeqDef" (formula "23") (term "0"))
                     (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                     (rule "mul_literals" (formula "23") (term "1,1,0"))
                     (rule "add_zero_right" (formula "23") (term "1,0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                     (rule "castDel" (formula "23") (term "1,0,1,0"))
                     (rule "castDel" (formula "23") (term "2,0,1,0"))
                     (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0,0"))
                     (rule "add_zero_right" (formula "23") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,0,1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,0"))
                     (rule "pullOutSelect" (formula "31") (term "1,0") (inst "selectSK=arr_107"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
                     (rule "eqSymm" (formula "32"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "closeTrue" (formula "32"))
                  )
               )
               (branch "CUT: array2seq(heapAfter_checkAndRemoveElectionId, result_1) = array2seq(heapAfter_checkAndRemoveTag, result_1) FALSE"
                  (rule "hide_right" (formula "36") (userinteraction))
                  (rule "array2seqDef" (formula "29") (term "0") (inst "u=u") (userinteraction))
                  (rule "array2seqDef" (formula "29") (term "1") (inst "u=u") (userinteraction))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1") (ifseqformula "23"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1") (ifseqformula "16"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1") (ifseqformula "10"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,1") (ifseqformula "10"))
                  (rule "eqSymm" (formula "19"))
                  (rule "eqSymm" (formula "13"))
                  (rule "eqSymm" (formula "26"))
                  (rule "eqSymm" (formula "7"))
                  (rule "eqSymm" (formula "29"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "34"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "32"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "31"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "array2seqDef" (formula "27") (term "0") (inst "u=u"))
                  (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "20") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "20"))
                  (rule "array2seqDef" (formula "19") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "19"))
                  (rule "array2seqDef" (formula "13") (term "0") (inst "u=u"))
                  (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                  (rule "array2seqDef" (formula "26") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "26"))
                  (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "7") (term "0,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "7"))
                  (rule "eqSeqDef" (formula "29") (inst "iv=iv"))
                  (rule "getOfSeqDef" (formula "29") (term "1,1,0,1"))
                  (rule "castDel" (formula "29") (term "2,1,1,0,1"))
                  (rule "castDel" (formula "29") (term "1,1,1,0,1"))
                  (rule "add_zero_right" (formula "29") (term "0,2,1,1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,1,0,1,1,0,1"))
                  (rule "times_zero_2" (formula "29") (term "1,1,1,0,1,1,0,1"))
                  (rule "add_zero_right" (formula "29") (term "1,1,0,1,1,0,1"))
                  (rule "lenOfSeqDef" (formula "29") (term "1,1,0,0,1"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,1,1,0,0,1"))
                  (rule "times_zero_2" (formula "29") (term "1,1,1,1,0,0,1"))
                  (rule "add_zero_right" (formula "29") (term "1,1,1,0,0,1"))
                  (rule "lenOfSeqDef" (formula "29") (term "0,0"))
                  (rule "eqSymm" (formula "29") (term "0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,1,1,0"))
                  (rule "add_zero_right" (formula "29") (term "1,1,0"))
                  (rule "getOfSeqDef" (formula "29") (term "0,1,0,1"))
                  (rule "castDel" (formula "29") (term "2,0,1,0,1"))
                  (rule "castDel" (formula "29") (term "1,0,1,0,1"))
                  (rule "add_zero_right" (formula "29") (term "0,2,1,0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,1,0,0,1,0,1"))
                  (rule "times_zero_2" (formula "29") (term "1,1,1,0,0,1,0,1"))
                  (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,0,1"))
                  (rule "lenOfSeqDef" (formula "29") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,0,0"))
                  (rule "times_zero_2" (formula "29") (term "1,1,0,0"))
                  (rule "add_zero_right" (formula "29") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "allRight" (formula "29") (inst "sk=iv_6"))
                  (rule "impRight" (formula "29"))
                  (rule "andLeft" (formula "1"))
                  (rule "replace_known_left" (formula "31") (term "0,0,1") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                  (rule "add_zero_right" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0"))
                  (rule "eqSymm" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0"))
                  (rule "eqSymm" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,1"))
                  (rule "eqSymm" (formula "31"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                  (rule "eqSymm" (formula "31"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "31") (term "0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                  (rule "array2seqDef" (formula "22") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "22"))
                  (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "21"))
                  (rule "eqSeqDef" (formula "15") (inst "iv=iv"))
                  (rule "andLeft" (formula "15"))
                  (rule "getOfSeqDef" (formula "16") (term "0,1,0"))
                  (rule "castDel" (formula "16") (term "2,0,1,0"))
                  (rule "castDel" (formula "16") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "16") (term "0,2,1,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
                  (rule "times_zero_2" (formula "16") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "1,1,1,0,0"))
                  (rule "lenOfSeqDef" (formula "15") (term "0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                  (rule "mul_literals" (formula "15") (term "1,1,1"))
                  (rule "add_zero_right" (formula "15") (term "1,1"))
                  (rule "getOfSeqDef" (formula "16") (term "0,1,0"))
                  (rule "castDel" (formula "16") (term "1,0,1,0"))
                  (rule "castDel" (formula "16") (term "2,0,1,0"))
                  (rule "add_zero_right" (formula "16") (term "0,2,1,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "15") (term "0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                  (rule "times_zero_2" (formula "15") (term "1,1,1"))
                  (rule "add_zero_right" (formula "15") (term "1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0"))
                  (rule "apply_eq_monomials" (formula "16") (term "1,0,0,1,0,0") (ifseqformula "15"))
                  (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "16") (term "1,1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                  (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                  (rule "apply_eq_monomials" (formula "16") (term "1,0,0,1,0,0") (ifseqformula "15"))
                  (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "16") (term "1,1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                  (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "29"))
                  (rule "array2seqDef" (formula "9") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "9"))
                  (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "3") (ifseqformula "38"))
                  (rule "eqSymm" (formula "9"))
                  (rule "eqSeqDef2" (formula "30") (inst "iv=iv") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "pullOutSelect" (formula "31") (term "1,0") (inst "selectSK=arr_105"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "13"))
                  (rule "eqSymm" (formula "32"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "19") (ifseqformula "33"))
                  (rule "pullOutSelect" (formula "23") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_1"))
                  (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "23"))
                  (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "eqSeqDef2" (formula "25") (inst "iv=iv") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "elementOfUnion" (formula "22") (term "0,0"))
                  (rule "elementOfSingleton" (formula "22") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "elementOfSingleton" (formula "22") (term "0,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "applyEqReverse" (formula "23") (term "1,2,0") (ifseqformula "22"))
                  (rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "22"))
                  (rule "hideAuxiliaryEq" (formula "22"))
                  (rule "eqSeqDef2" (formula "28") (inst "iv=iv") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "eqSeqDef2" (formula "22") (inst "iv=iv") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "pullOutSelect" (formula "16") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_13"))
                  (rule "applyEq" (formula "15") (term "0,0,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "17") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "16"))
                  (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "33")) (ifInst ""  (formula "5")))
                  (rule "elementOfUnion" (formula "16") (term "0,0"))
                  (rule "elementOfSingleton" (formula "16") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "33")))
                  (rule "elementOfSingleton" (formula "16") (term "0,0"))
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "33")))
                  (rule "applyEqReverse" (formula "17") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
                  (rule "applyEqReverse" (formula "15") (term "0,1,0") (ifseqformula "16"))
                  (rule "applyEqReverse" (formula "15") (term "0,0,0,0") (ifseqformula "16"))
                  (rule "applyEqReverse" (formula "17") (term "1,1,0,1,0") (ifseqformula "16"))
                  (rule "hideAuxiliaryEq" (formula "16"))
                  (rule "pullOutSelect" (formula "28") (term "1,0") (inst "selectSK=arr_106"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                  (rule "replaceKnownSelect_taclet100000_1" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "13"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "29") (term "1,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "closeTrue" (formula "29"))
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "35"))
               (branch "Case 1"
                  (rule "close" (formula "35") (ifseqformula "28"))
               )
               (branch "Case 2"
                  (rule "notRight" (formula "35"))
                  (rule "close" (formula "31") (ifseqformula "1"))
               )
            )
         )
         (branch "Case 2"
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1") (ifseqformula "23"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1") (ifseqformula "10"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1") (ifseqformula "16"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,1") (ifseqformula "10"))
            (rule "allRight" (formula "35") (inst "sk=f_9"))
            (rule "allRight" (formula "35") (inst "sk=o_9"))
            (rule "orRight" (formula "35"))
            (rule "orRight" (formula "35"))
            (rule "eqSymm" (formula "7"))
            (rule "eqSymm" (formula "13"))
            (rule "eqSymm" (formula "26"))
            (rule "eqSymm" (formula "19"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "33"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "31"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "29"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "30"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "array2seqDef" (formula "20") (term "0") (inst "u=u"))
            (rule "array2seqDef" (formula "20") (term "0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "27"))
            (rule "elementOfUnion" (formula "35"))
            (rule "orRight" (formula "35"))
            (rule "elementOfSingleton" (formula "35"))
            (rule "elementOfSingleton" (formula "36"))
            (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
            (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "7"))
            (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "13"))
            (rule "array2seqDef" (formula "26") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "26"))
            (rule "array2seqDef" (formula "19") (term "0") (inst "u=u"))
            (rule "array2seqDef" (formula "19") (term "0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "27") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "27"))
            (rule "array2seqDef" (formula "7") (term "0,1,1") (inst "u=u"))
            (rule "array2seqDef" (formula "7") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "7"))
            (rule "narrowSelectArrayType" (formula "7") (term "2,0,0") (ifseqformula "1") (ifseqformula "34"))
            (rule "eqSymm" (formula "7"))
            (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "13"))
            (rule "array2seqDef" (formula "26") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "26"))
            (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
            (rule "andLeft" (formula "13"))
            (rule "lenOfSeqDef" (formula "13") (term "1"))
            (rule "polySimp_elimSub" (formula "13") (term "1,1"))
            (rule "times_zero_2" (formula "13") (term "1,1,1"))
            (rule "add_zero_right" (formula "13") (term "1,1"))
            (rule "lenOfSeqDef" (formula "14") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
            (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "14") (term "1,1,1,0,0"))
            (rule "getOfSeqDef" (formula "14") (term "1,1,0"))
            (rule "castDel" (formula "14") (term "2,1,1,0"))
            (rule "castDel" (formula "14") (term "1,1,1,0"))
            (rule "add_zero_right" (formula "14") (term "0,2,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
            (rule "mul_literals" (formula "14") (term "1,1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
            (rule "getOfSeqDef" (formula "14") (term "0,1,0"))
            (rule "castDel" (formula "14") (term "1,0,1,0"))
            (rule "castDel" (formula "14") (term "2,0,1,0"))
            (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "14") (term "1,1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0"))
            (rule "lenOfSeqDef" (formula "13") (term "0"))
            (rule "polySimp_elimSub" (formula "13") (term "1,0"))
            (rule "times_zero_2" (formula "13") (term "1,1,0"))
            (rule "add_zero_right" (formula "13") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
            (rule "add_zero_right" (formula "13") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
            (rule "apply_eq_monomials" (formula "14") (term "1,0,0,1,0,0") (ifseqformula "13"))
            (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "14") (term "1,1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "14") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,0,0"))
            (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "eqSeqDef2" (formula "7") (inst "iv=iv") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "eqSeqDef2" (formula "25") (inst "iv=iv") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_9_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "36"))
            (rule "eqSeqDef2" (formula "25") (inst "iv=iv") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "pullOutSelect" (formula "14") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_11"))
            (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "14"))
            (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "15") (term "0,1,1,1,0,0,1,0") (ifseqformula "14"))
            (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "10"))
            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
            (rule "elementOfUnion" (formula "14") (term "0,0"))
            (rule "elementOfSingleton" (formula "14") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "30")))
            (rule "elementOfSingleton" (formula "14") (term "0,0"))
            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "30")))
            (rule "applyEqReverse" (formula "15") (term "1,1,0,1,0") (ifseqformula "14"))
            (rule "applyEqReverse" (formula "13") (term "0,0,0,0") (ifseqformula "14"))
            (rule "applyEqReverse" (formula "13") (term "0,1,0") (ifseqformula "14"))
            (rule "applyEqReverse" (formula "15") (term "0,1,1,1,0,0,1,0") (ifseqformula "14"))
            (rule "hideAuxiliaryEq" (formula "14"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_9_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "11"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_9_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
            (rule "elementOfUnion" (formula "1") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "35"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "34"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "nnf_imp2or" (formula "15") (term "0"))
            (rule "nnf_notAnd" (formula "15") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
            (rule "mul_literals" (formula "15") (term "1,0,0,0"))
            (rule "Contract_axiom_for_signerPre_in_MixServer" (formula "8") (term "0"))
            (rule "eqSymm" (formula "8") (term "1"))
            (rule "eqSymm" (formula "8") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "31")))
            (rule "applyEq" (formula "8") (term "1") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "8"))
            (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "9"))
            (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "3") (ifseqformula "31"))
            (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "9"))
            (rule "eqSeqDef" (formula "9") (inst "iv=iv"))
            (rule "andLeft" (formula "9"))
            (rule "lenOfSeqDef" (formula "9") (term "0"))
            (rule "eqSymm" (formula "9"))
            (rule "polySimp_elimSub" (formula "9") (term "1,1"))
            (rule "mul_literals" (formula "9") (term "1,1,1"))
            (rule "add_zero_right" (formula "9") (term "1,1"))
            (rule "getOfSeqDef" (formula "10") (term "1,1,0"))
            (rule "castDel" (formula "10") (term "1,1,1,0"))
            (rule "castDel" (formula "10") (term "2,1,1,0"))
            (rule "add_zero_right" (formula "10") (term "0,2,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,1,0"))
            (rule "times_zero_2" (formula "10") (term "1,1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "10") (term "1,1,0,1,1,0"))
            (rule "getOfSeqDef" (formula "10") (term "0,1,0"))
            (rule "castDel" (formula "10") (term "1,0,1,0"))
            (rule "castDel" (formula "10") (term "2,0,1,0"))
            (rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "10") (term "1,1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0"))
            (rule "lenOfSeqDef" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
            (rule "lenOfSeqDef" (formula "9") (term "0"))
            (rule "eqSymm" (formula "9"))
            (rule "polySimp_elimSub" (formula "9") (term "1,1"))
            (rule "mul_literals" (formula "9") (term "1,1,1"))
            (rule "add_zero_right" (formula "9") (term "1,1"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
            (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "9"))
            (rule "applyEq" (formula "9") (term "1") (ifseqformula "17"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
            (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
            (rule "Definition_axiom_for_signerPre_in_verif_selectvoting_system_core_MixServer" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "30")) (ifInst ""  (formula "8")) (ifInst ""  (formula "31")) (ifInst ""  (formula "32")))
            (rule "eqSymm" (formula "11"))
            (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "11"))
            (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "3") (ifseqformula "32"))
            (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "11"))
            (rule "eqSeqDef" (formula "11") (inst "iv=iv"))
            (rule "andLeft" (formula "11"))
            (rule "getOfSeqDef" (formula "12") (term "1,1,0"))
            (rule "castDel" (formula "12") (term "1,1,1,0"))
            (rule "castDel" (formula "12") (term "2,1,1,0"))
            (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0"))
            (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0"))
            (rule "getOfSeqDef" (formula "12") (term "0,1,0"))
            (rule "castDel" (formula "12") (term "2,0,1,0"))
            (rule "castDel" (formula "12") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0"))
            (rule "lenOfSeqDef" (formula "11") (term "0"))
            (rule "eqSymm" (formula "11"))
            (rule "polySimp_elimSub" (formula "11") (term "1,1"))
            (rule "times_zero_2" (formula "11") (term "1,1,1"))
            (rule "add_zero_right" (formula "11") (term "1,1"))
            (rule "lenOfSeqDef" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,1,0,0"))
            (rule "lenOfSeqDef" (formula "11") (term "0"))
            (rule "eqSymm" (formula "11"))
            (rule "polySimp_elimSub" (formula "11") (term "1,1"))
            (rule "times_zero_2" (formula "11") (term "1,1,1"))
            (rule "add_zero_right" (formula "11") (term "1,1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1"))
            (rule "add_zero_right" (formula "11") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
            (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,1"))
            (rule "applyEq" (formula "11") (term "1") (ifseqformula "18"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1,0,0"))
            (rule "applyEq" (formula "11") (term "1,1,1,0,0") (ifseqformula "17"))
            (rule "commute_or_2" (formula "27"))
            (rule "nnf_imp2or" (formula "10") (term "0"))
            (rule "commute_and" (formula "38"))
            (rule "commute_and" (formula "39"))
            (rule "nnf_notAnd" (formula "10") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "5"))
            (rule "replaceKnownSelect_taclet1000_1" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_2" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "notLeft" (formula "20"))
            (rule "notLeft" (formula "19"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "notLeft" (formula "20"))
            (rule "notLeft" (formula "19"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "notLeft" (formula "19"))
            (rule "notLeft" (formula "18"))
            (rule "narrowSelectArrayType" (formula "10") (term "1,0,1,0") (ifseqformula "3") (ifseqformula "31"))
            (rule "nonNull" (formula "20") (inst "i=i"))
            (rule "greater_literals" (formula "20") (term "0,1"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "sub_literals" (formula "20") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "notLeft" (formula "20"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "19") (inst "i=i"))
            (rule "greater_literals" (formula "19") (term "0,1"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "sub_literals" (formula "19") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "notLeft" (formula "19"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "18") (inst "i=i"))
            (rule "greater_literals" (formula "18") (term "0,1"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "sub_literals" (formula "18") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "notLeft" (formula "18"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
            (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_9"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "5")))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
            (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_10"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "5")))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
            (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_10"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "5")))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
            (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_10"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "5")))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
            (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_9"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "5")))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
            (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "20") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_10"))
            (rule "applyEq" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "34") (term "0") (ifseqformula "20"))
            (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "46")) (ifInst ""  (formula "4")))
            (rule "elementOfUnion" (formula "20") (term "0,0"))
            (rule "elementOfSingleton" (formula "20") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "46")))
            (rule "elementOfSingleton" (formula "20") (term "0,0"))
            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "46")))
            (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0") (ifseqformula "20"))
            (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "20"))
            (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
            (rule "hideAuxiliaryEq" (formula "20"))
            (rule "pullOutSelect" (formula "19") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_10"))
            (rule "applyEq" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "33") (term "0") (ifseqformula "19"))
            (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "46")) (ifInst ""  (formula "4")))
            (rule "elementOfUnion" (formula "19") (term "0,0"))
            (rule "elementOfSingleton" (formula "19") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "46")))
            (rule "elementOfSingleton" (formula "19") (term "0,0"))
            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "46")))
            (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
            (rule "applyEqReverse" (formula "20") (term "1,0,0,1,0") (ifseqformula "19"))
            (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "19"))
            (rule "hideAuxiliaryEq" (formula "19"))
            (rule "pullOutSelect" (formula "18") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_10"))
            (rule "applyEq" (formula "32") (term "0") (ifseqformula "18"))
            (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "18"))
            (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "46")) (ifInst ""  (formula "4")))
            (rule "elementOfUnion" (formula "18") (term "0,0"))
            (rule "elementOfSingleton" (formula "18") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "46")))
            (rule "elementOfSingleton" (formula "18") (term "0,0"))
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "46")))
            (rule "applyEqReverse" (formula "19") (term "1,0,0,1,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "18"))
            (rule "hideAuxiliaryEq" (formula "18"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "30") (ifseqformula "5"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "30"))
            (rule "notLeft" (formula "32"))
            (rule "notLeft" (formula "31"))
            (rule "andLeft" (formula "30"))
            (rule "notLeft" (formula "31"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "30"))
            (rule "notLeft" (formula "32"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "30"))
            (rule "notLeft" (formula "31"))
            (rule "notLeft" (formula "30"))
            (rule "nonNull" (formula "32") (inst "i=i"))
            (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "32"))
            (rule "greater_literals" (formula "32") (term "0,1"))
            (builtin "One Step Simplification" (formula "32"))
            (rule "andLeft" (formula "32"))
            (rule "notLeft" (formula "32"))
            (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
            (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "31") (inst "i=i"))
            (rule "greater_literals" (formula "31") (term "0,1"))
            (builtin "One Step Simplification" (formula "31"))
            (rule "sub_literals" (formula "31") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "31"))
            (rule "andLeft" (formula "31"))
            (rule "notLeft" (formula "31"))
            (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
            (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "30") (inst "i=i"))
            (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "greater_literals" (formula "30") (term "0,1"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "andLeft" (formula "30"))
            (rule "notLeft" (formula "30"))
            (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
            (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_10"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
            (rule "replaceKnownSelect_taclet1000_6" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_7" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_11"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
            (rule "replaceKnownSelect_taclet1000_8" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_9" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_11"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
            (rule "replaceKnownSelect_taclet1000_10" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_11" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_11"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
            (rule "replaceKnownSelect_taclet1000_12" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_13" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_10"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
            (rule "replaceKnownSelect_taclet1000_14" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_15" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_12"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
            (rule "replaceKnownSelect_taclet1000_1" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_2" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_11"))
            (rule "applyEq" (formula "36") (term "0") (ifseqformula "32"))
            (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
            (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "27"))
            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "51")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "22"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0,0") (ifseqformula "13"))
            (rule "replace_known_left" (formula "32") (term "0,0,0,0,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "32"))
            (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "51")))
            (rule "replaceKnownSelect_taclet1000_16" (formula "32") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_17" (formula "32") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "13"))
            (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "32"))
            (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
            (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
            (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "32"))
            (rule "hideAuxiliaryEq" (formula "32"))
            (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_11"))
            (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
            (rule "applyEq" (formula "35") (term "0") (ifseqformula "31"))
            (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "27"))
            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "50")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0") (ifseqformula "22"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0,0") (ifseqformula "13"))
            (rule "replace_known_left" (formula "31") (term "0,0,0,0,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "31"))
            (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "50")))
            (rule "replaceKnownSelect_taclet1000_18" (formula "31") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_19" (formula "31") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0") (ifseqformula "13"))
            (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "31"))
            (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "31"))
            (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
            (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
            (rule "hideAuxiliaryEq" (formula "31"))
            (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_11"))
            (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
            (rule "applyEq" (formula "34") (term "0") (ifseqformula "30"))
            (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "27"))
            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "49")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0") (ifseqformula "22"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0,0") (ifseqformula "13"))
            (rule "replace_known_left" (formula "30") (term "0,0,0,0,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "49")))
            (rule "replaceKnownSelect_taclet1000_20" (formula "30") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_21" (formula "30") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0") (ifseqformula "13"))
            (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "30"))
            (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
            (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
            (rule "hideAuxiliaryEq" (formula "30"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "11") (ifseqformula "5"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "13"))
            (rule "notLeft" (formula "12"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "12"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "13"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "12"))
            (rule "notLeft" (formula "11"))
            (rule "nonNull" (formula "13") (inst "i=i"))
            (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "37")))
            (rule "greater_literals" (formula "13") (term "0"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "37"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "12") (inst "i=i"))
            (rule "greater_literals" (formula "12") (term "0,1"))
            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "36")))
            (rule "sub_literals" (formula "12") (term "2,1,0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "36"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "11") (inst "i=i"))
            (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "35")))
            (rule "greater_literals" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "35"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "27") (ifseqformula "5"))
            (rule "replaceKnownSelect_taclet1000_23" (formula "27") (term "0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_24" (formula "27") (term "0,0,1"))
            (rule "replaceKnownSelect_taclet1000_26" (formula "27") (term "0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_27" (formula "27") (term "0,0,1,0"))
            (rule "replaceKnownSelect_taclet1000_29" (formula "27") (term "0,0,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_30" (formula "27") (term "0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet1000_41" (formula "27") (term "1,1,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1000_32" (formula "27") (term "0,0,1,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_42" (formula "27") (term "1,1,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_33" (formula "27") (term "0,0,1,0,0,0"))
            (rule "replaceKnownSelect_taclet1000_44" (formula "27") (term "1,1,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1000_47" (formula "27") (term "1,1,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_45" (formula "27") (term "1,1,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_48" (formula "27") (term "1,1,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1000_38" (formula "27") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1000_35" (formula "27") (term "0,0,1,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_39" (formula "27") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_36" (formula "27") (term "0,0,1,0,0,0,0,0,0,0"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "28"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "28"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "28"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "29"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "28"))
            (rule "notLeft" (formula "27"))
            (rule "nonNull" (formula "29") (inst "i=i"))
            (rule "greater_literals" (formula "29") (term "0,1"))
            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "39")))
            (rule "sub_literals" (formula "29") (term "2,1,0"))
            (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "28") (inst "i=i"))
            (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "38")))
            (rule "greater_literals" (formula "28") (term "0"))
            (builtin "One Step Simplification" (formula "28"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
            (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "27") (inst "i=i"))
            (rule "greater_literals" (formula "27") (term "0,1"))
            (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "37")))
            (rule "sub_literals" (formula "27") (term "2,1,0"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
            (rule "commute_or_2" (formula "19") (term "0"))
            (rule "nnf_imp2or" (formula "22") (term "0"))
            (rule "nnf_imp2or" (formula "21") (term "0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "cut_direct" (formula "56") (term "0,0"))
            (branch "CUT: o_9 = null TRUE"
               (builtin "One Step Simplification" (formula "57"))
               (rule "false_right" (formula "57"))
               (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "57") (term "1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "56")))
               (rule "closeFalse" (formula "2"))
            )
            (branch "CUT: o_9 = null FALSE"
               (builtin "One Step Simplification" (formula "57"))
               (rule "notRight" (formula "57"))
               (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "57"))
               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
               (rule "applyEqReverse" (formula "58") (term "1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "56"))
               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "57")))
               (rule "closeFalse" (formula "2"))
            )
         )
      )
      (branch "Exceptional Post (checkAndRemoveElectionId)"
         (rule "true_left" (formula "15"))
         (builtin "One Step Simplification" (formula "18"))
         (builtin "One Step Simplification" (formula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
         (rule "andLeft" (formula "16"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,1,0") (ifseqformula "16"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,1,1,0") (ifseqformula "10"))
         (rule "andLeft" (formula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,0") (ifseqformula "16"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,1,0") (ifseqformula "10"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "17"))
         (rule "typeEqDerived" (formula "19") (term "0,1,1,1,1") (ifseqformula "17"))
         (rule "typeEqDerived" (formula "19") (term "0,0,0,1,1,1") (ifseqformula "17"))
         (rule "typeEqDerived" (formula "19") (term "0,1,0,1,1,1") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "23"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "22"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "7"))
         (rule "eqSymm" (formula "33") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "33") (term "0,1,0,0,0,1"))
         (rule "eqSymm" (formula "25") (term "0,1"))
         (rule "eqSymm" (formula "19"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "31"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "true_left" (formula "25"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "26"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "elementOfUnion" (formula "33") (term "0,0,0,0,1,0,1"))
         (rule "elementOfSingleton" (formula "33") (term "1,0,0,0,0,1,0,1"))
         (rule "elementOfSingleton" (formula "33") (term "0,0,0,0,0,1,0,1"))
         (rule "array2seqDef" (formula "20") (term "0,1") (inst "u=u"))
         (rule "eqSymm" (formula "20"))
         (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "13"))
         (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "7"))
         (rule "array2seqDef" (formula "33") (term "0,0,1,0,0,0,1") (inst "u=u"))
         (rule "array2seqDef" (formula "33") (term "1,0,1,0,0,0,1") (inst "u=u"))
         (rule "array2seqDef" (formula "19") (term "0,1") (inst "u=u"))
         (rule "eqSymm" (formula "19"))
         (rule "array2seqDef" (formula "20") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "20"))
         (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "13"))
         (rule "array2seqDef" (formula "7") (term "0,1,1") (inst "u=u"))
         (rule "array2seqDef" (formula "7") (term "0,1") (inst "u=u"))
         (rule "eqSymm" (formula "7"))
         (rule "narrowSelectArrayType" (formula "7") (term "2,0,0") (ifseqformula "1") (ifseqformula "32"))
         (rule "eqSymm" (formula "7"))
         (rule "eqSeqDef" (formula "33") (term "0,1,0,0,0,1") (inst "iv=iv"))
         (rule "lenOfSeqDef" (formula "33") (term "0,0,0,1,0,0,0,1"))
         (rule "eqSymm" (formula "33") (term "0,0,1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0,0,0,1"))
         (rule "times_zero_2" (formula "33") (term "1,1,1,0,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,0,0,0,1"))
         (rule "getOfSeqDef" (formula "33") (term "1,1,0,1,0,1,0,0,0,1"))
         (rule "castDel" (formula "33") (term "1,1,1,0,1,0,1,0,0,0,1"))
         (rule "castDel" (formula "33") (term "2,1,1,0,1,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "0,2,1,1,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "33") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "33") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "lenOfSeqDef" (formula "33") (term "1,1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "33") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
         (rule "times_zero_2" (formula "33") (term "1,1,1,1,0,0,1,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
         (rule "getOfSeqDef" (formula "33") (term "0,1,0,1,0,1,0,0,0,1"))
         (rule "castDel" (formula "33") (term "2,0,1,0,1,0,1,0,0,0,1"))
         (rule "castDel" (formula "33") (term "1,0,1,0,1,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "0,2,1,0,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "times_zero_2" (formula "33") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "lenOfSeqDef" (formula "33") (term "0,0,0,1,0,0,0,1"))
         (rule "eqSymm" (formula "33") (term "0,0,1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "33") (term "1,1,1,0,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "0,0,1,1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,1,0,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1,0,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "0,0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,0,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "33") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "33") (term "0,1,1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "33") (term "0,0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "33") (term "0,0,1,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0,0,0,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,0,0,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "33") (term "0,0,0,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "33") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
         (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "19"))
         (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
         (rule "andLeft" (formula "13"))
         (rule "lenOfSeqDef" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
         (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "14") (term "1,1,1,0,0"))
         (rule "getOfSeqDef" (formula "14") (term "0,1,0"))
         (rule "castDel" (formula "14") (term "1,0,1,0"))
         (rule "castDel" (formula "14") (term "2,0,1,0"))
         (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "14") (term "1,0"))
         (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "13") (term "0"))
         (rule "eqSymm" (formula "13"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1"))
         (rule "times_zero_2" (formula "13") (term "1,1,1"))
         (rule "add_zero_right" (formula "13") (term "1,1"))
         (rule "getOfSeqDef" (formula "14") (term "0,1,0"))
         (rule "castDel" (formula "14") (term "2,0,1,0"))
         (rule "castDel" (formula "14") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "14") (term "1,0"))
         (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "14") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "13") (term "0"))
         (rule "eqSymm" (formula "13"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1"))
         (rule "mul_literals" (formula "13") (term "1,1,1"))
         (rule "add_zero_right" (formula "13") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "14") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
         (rule "add_zero_right" (formula "13") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "14") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
         (rule "apply_eq_monomials" (formula "14") (term "1,0,0,1,0,0") (ifseqformula "13"))
         (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "14") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "14") (term "1,1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "14") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "14") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "14") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,0,0"))
         (rule "array2seqDef" (formula "7") (term "1,1,1") (inst "u=u"))
         (rule "eqSeqDef2" (formula "21") (inst "iv=iv") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "eqSeqDef2" (formula "7") (inst "iv=iv") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "pullOutSelect" (formula "12") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_1"))
         (rule "applyEq" (formula "14") (term "1,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
         (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "29")) (ifInst ""  (formula "2")))
         (rule "elementOfUnion" (formula "12") (term "0,0"))
         (rule "elementOfSingleton" (formula "12") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "29")))
         (rule "elementOfSingleton" (formula "12") (term "0,0"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "29")))
         (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
         (rule "applyEqReverse" (formula "13") (term "0,1,0") (ifseqformula "12"))
         (rule "applyEqReverse" (formula "14") (term "1,1,0,1,0") (ifseqformula "12"))
         (rule "applyEqReverse" (formula "13") (term "0,0,0,0") (ifseqformula "12"))
         (rule "hideAuxiliaryEq" (formula "12"))
         (rule "nnf_imp2or" (formula "31") (term "0,1,0,1,0,0,0,1"))
         (rule "Contract_axiom_for_signerPre_in_MixServer" (formula "6") (term "0"))
         (rule "eqSymm" (formula "6") (term "1"))
         (rule "eqSymm" (formula "6") (term "1,0,0,1"))
         (rule "replace_known_left" (formula "6") (term "1,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "29")))
         (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "7"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "7"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "7"))
         (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "1") (ifseqformula "29"))
         (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "7"))
         (rule "eqSeqDef" (formula "7") (inst "iv=iv"))
         (rule "andLeft" (formula "7"))
         (rule "lenOfSeqDef" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
         (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
         (rule "lenOfSeqDef" (formula "7") (term "0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_elimSub" (formula "7") (term "1,1"))
         (rule "times_zero_2" (formula "7") (term "1,1,1"))
         (rule "add_zero_right" (formula "7") (term "1,1"))
         (rule "getOfSeqDef" (formula "8") (term "1,1,0"))
         (rule "castDel" (formula "8") (term "2,1,1,0"))
         (rule "castDel" (formula "8") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "8") (term "0,2,1,1,1,0"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "8") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
         (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
         (rule "castDel" (formula "8") (term "1,0,1,0"))
         (rule "castDel" (formula "8") (term "2,0,1,0"))
         (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "8") (term "1,1,1,0,0,1,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0"))
         (rule "lenOfSeqDef" (formula "7") (term "0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_elimSub" (formula "7") (term "1,1"))
         (rule "mul_literals" (formula "7") (term "1,1,1"))
         (rule "add_zero_right" (formula "7") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
         (rule "applyEq" (formula "7") (term "1") (ifseqformula "15"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "Definition_axiom_for_signerPre_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "28")) (ifInst ""  (formula "6")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
         (rule "eqSymm" (formula "9"))
         (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "9"))
         (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "1") (ifseqformula "30"))
         (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "9"))
         (rule "eqSeqDef" (formula "9") (inst "iv=iv"))
         (rule "andLeft" (formula "9"))
         (rule "getOfSeqDef" (formula "10") (term "0,1,0"))
         (rule "castDel" (formula "10") (term "1,0,1,0"))
         (rule "castDel" (formula "10") (term "2,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "10") (term "1,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "10") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
         (rule "lenOfSeqDef" (formula "9") (term "1"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1"))
         (rule "mul_literals" (formula "9") (term "1,1,1"))
         (rule "add_zero_right" (formula "9") (term "1,1"))
         (rule "lenOfSeqDef" (formula "9") (term "0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,0"))
         (rule "mul_literals" (formula "9") (term "1,1,0"))
         (rule "add_zero_right" (formula "9") (term "1,0"))
         (rule "getOfSeqDef" (formula "10") (term "0,1,0"))
         (rule "castDel" (formula "10") (term "2,0,1,0"))
         (rule "castDel" (formula "10") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "10") (term "1,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "10") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "10") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "10") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,1,0"))
         (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,1"))
         (rule "applyEq" (formula "9") (term "1") (ifseqformula "7"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "9") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,1,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
         (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "9") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "15") (term "0"))
         (rule "commute_or_2" (formula "24"))
         (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,1,0,0,0,1"))
         (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,1,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "36") (term "1,0,0,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
         (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,0,0,0,1"))
         (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1,0,1,0,0,0,1"))
         (rule "nnf_imp2or" (formula "8") (term "0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "8") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "16") (ifseqformula "3"))
         (rule "replaceKnownSelect_taclet100_0" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_1" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "18"))
         (rule "notLeft" (formula "17"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "17"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "18"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "narrowSelectArrayType" (formula "8") (term "1,0,1,0") (ifseqformula "1") (ifseqformula "30"))
         (rule "nonNull" (formula "18") (inst "i=i"))
         (rule "greater_literals" (formula "18") (term "0,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "sub_literals" (formula "18") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "18"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "17") (inst "i=i"))
         (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "greater_literals" (formula "17") (term "0,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "16") (inst "i=i"))
         (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "greater_literals" (formula "16") (term "0,1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "3")))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
         (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "3")))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
         (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "3")))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "3")))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "3")))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "18") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_1"))
         (rule "applyEq" (formula "32") (term "0") (ifseqformula "18"))
         (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "18"))
         (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "44")) (ifInst ""  (formula "2")))
         (rule "elementOfUnion" (formula "18") (term "0,0"))
         (rule "elementOfSingleton" (formula "18") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "44")))
         (rule "elementOfSingleton" (formula "18") (term "0,0"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "44")))
         (rule "applyEqReverse" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "18"))
         (rule "applyEqReverse" (formula "19") (term "1,0,0,1,0") (ifseqformula "18"))
         (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "18"))
         (rule "hideAuxiliaryEq" (formula "18"))
         (rule "pullOutSelect" (formula "17") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_1"))
         (rule "applyEq" (formula "31") (term "0") (ifseqformula "17"))
         (rule "applyEq" (formula "18") (term "0,1,1,1,0,0") (ifseqformula "17"))
         (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "44")) (ifInst ""  (formula "2")))
         (rule "elementOfUnion" (formula "17") (term "0,0"))
         (rule "elementOfSingleton" (formula "17") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "44")))
         (rule "elementOfSingleton" (formula "17") (term "0,0"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "44")))
         (rule "applyEqReverse" (formula "18") (term "0,1,1,1,0,0") (ifseqformula "17"))
         (rule "applyEqReverse" (formula "18") (term "1,0,0,1,0") (ifseqformula "17"))
         (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "17"))
         (rule "hideAuxiliaryEq" (formula "17"))
         (rule "pullOutSelect" (formula "16") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_1"))
         (rule "applyEq" (formula "30") (term "0") (ifseqformula "16"))
         (rule "applyEq" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "16"))
         (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "44")) (ifInst ""  (formula "2")))
         (rule "elementOfUnion" (formula "16") (term "0,0"))
         (rule "elementOfSingleton" (formula "16") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "44")))
         (rule "elementOfSingleton" (formula "16") (term "0,0"))
         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "44")))
         (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "16"))
         (rule "applyEqReverse" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "16"))
         (rule "applyEqReverse" (formula "17") (term "1,0,0,1,0") (ifseqformula "16"))
         (rule "hideAuxiliaryEq" (formula "16"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "9") (ifseqformula "3"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "11"))
         (rule "notLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "10"))
         (rule "notLeft" (formula "9"))
         (rule "nonNull" (formula "11") (inst "i=i"))
         (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "33")))
         (rule "greater_literals" (formula "11") (term "0"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "33"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "10") (inst "i=i"))
         (rule "greater_literals" (formula "10") (term "0,1"))
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "32")))
         (rule "sub_literals" (formula "10") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "32"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "9") (inst "i=i"))
         (rule "greater_literals" (formula "9") (term "0,1"))
         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "31")))
         (rule "sub_literals" (formula "9") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "31"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "nnf_imp2or" (formula "19") (term "0"))
         (rule "nnf_imp2or" (formula "18") (term "0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "29") (ifseqformula "3"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "notLeft" (formula "31"))
         (rule "notLeft" (formula "30"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "notLeft" (formula "31"))
         (rule "andLeft" (formula "29"))
         (rule "notLeft" (formula "31"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "notLeft" (formula "29"))
         (rule "notLeft" (formula "29"))
         (rule "nonNull" (formula "31") (inst "i=i"))
         (rule "greater_literals" (formula "31") (term "0,1"))
         (builtin "One Step Simplification" (formula "31"))
         (rule "sub_literals" (formula "31") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "31"))
         (rule "andLeft" (formula "31"))
         (rule "notLeft" (formula "31"))
         (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "30") (inst "i=i"))
         (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "30"))
         (rule "greater_literals" (formula "30") (term "0,1"))
         (builtin "One Step Simplification" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "notLeft" (formula "30"))
         (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
         (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "29") (inst "i=i"))
         (rule "greater_literals" (formula "29") (term "0,1"))
         (builtin "One Step Simplification" (formula "29"))
         (rule "sub_literals" (formula "29") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "notLeft" (formula "29"))
         (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
         (rule "replaceKnownSelect_taclet100_2" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_3" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
         (rule "replaceKnownSelect_taclet100_4" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_5" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
         (rule "replaceKnownSelect_taclet100_6" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_7" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
         (rule "replaceKnownSelect_taclet100_8" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_9" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
         (rule "replaceKnownSelect_taclet100_0" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_1" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
         (rule "replaceKnownSelect_taclet100_10" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_11" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_2"))
         (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
         (rule "applyEq" (formula "36") (term "0") (ifseqformula "31"))
         (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "51")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0") (ifseqformula "22"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0,0") (ifseqformula "13"))
         (rule "replace_known_left" (formula "31") (term "0,0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "31"))
         (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "51")))
         (rule "replaceKnownSelect_taclet100_12" (formula "31") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "31") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0") (ifseqformula "13"))
         (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "31"))
         (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
         (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "31"))
         (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
         (rule "hideAuxiliaryEq" (formula "31"))
         (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_2"))
         (rule "applyEq" (formula "35") (term "0") (ifseqformula "30"))
         (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
         (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "50")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0") (ifseqformula "22"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0,0") (ifseqformula "13"))
         (rule "replace_known_left" (formula "30") (term "0,0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "30"))
         (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "50")))
         (rule "replaceKnownSelect_taclet100_14" (formula "30") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_15" (formula "30") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0") (ifseqformula "13"))
         (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "30"))
         (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
         (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "30"))
         (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
         (rule "hideAuxiliaryEq" (formula "30"))
         (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_2"))
         (rule "applyEq" (formula "34") (term "0") (ifseqformula "29"))
         (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
         (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "49")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,0") (ifseqformula "22"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,0,0") (ifseqformula "13"))
         (rule "replace_known_left" (formula "29") (term "0,0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "29"))
         (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "49")))
         (rule "replaceKnownSelect_taclet100_16" (formula "29") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_17" (formula "29") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,0") (ifseqformula "13"))
         (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "29"))
         (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
         (rule "hideAuxiliaryEq" (formula "29"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "25") (ifseqformula "3"))
         (rule "replaceKnownSelect_taclet100_19" (formula "25") (term "0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_20" (formula "25") (term "0,0,1"))
         (rule "replaceKnownSelect_taclet100_22" (formula "25") (term "0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_23" (formula "25") (term "0,0,1,0"))
         (rule "replaceKnownSelect_taclet100_25" (formula "25") (term "0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_26" (formula "25") (term "0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet100_37" (formula "25") (term "1,1,0,0,0,0"))
         (rule "replaceKnownSelect_taclet100_28" (formula "25") (term "0,0,1,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_38" (formula "25") (term "1,1,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_29" (formula "25") (term "0,0,1,0,0,0"))
         (rule "replaceKnownSelect_taclet100_40" (formula "25") (term "1,1,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet100_43" (formula "25") (term "1,1,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_41" (formula "25") (term "1,1,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_44" (formula "25") (term "1,1,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet100_34" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet100_31" (formula "25") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_35" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_32" (formula "25") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "27"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "27"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "27"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "26"))
         (rule "notLeft" (formula "25"))
         (rule "nonNull" (formula "27") (inst "i=i"))
         (rule "greater_literals" (formula "27") (term "0,1"))
         (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "37")))
         (rule "sub_literals" (formula "27") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "26") (inst "i=i"))
         (rule "greater_literals" (formula "26") (term "0,1"))
         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "36")))
         (rule "sub_literals" (formula "26") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "25") (inst "i=i"))
         (rule "greater_literals" (formula "25") (term "0,1"))
         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "35")))
         (rule "sub_literals" (formula "25") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "10") (term "0"))
         (rule "commute_or_2" (formula "30") (term "0"))
         (rule "nnf_imp2or" (formula "9") (term "0"))
         (rule "nnf_notAnd" (formula "20") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "19") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
         (rule "mul_literals" (formula "19") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "18") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
         (rule "mul_literals" (formula "18") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
         (rule "commute_or_2" (formula "17") (term "0"))
         (rule "arrayLengthNotNegative" (formula "16") (term "1,1"))
         (rule "arrayLengthIsAShort" (formula "17") (term "1,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "commute_or_2" (formula "8") (term "0"))
         (rule "arrayLengthIsAShort" (formula "17") (term "1,0"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "arrayLengthNotNegative" (formula "17") (term "1,0"))
         (rule "methodCallParamThrow" (formula "54") (term "1"))
         (rule "nnf_imp2or" (formula "35") (term "0"))
         (rule "nnf_imp2or" (formula "34") (term "0"))
         (rule "arrayLengthNotNegative" (formula "7") (term "1,0"))
         (rule "arrayLengthIsAShort" (formula "8") (term "1,0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "nnf_imp2or" (formula "34") (term "0"))
         (rule "nnf_imp2or" (formula "30") (term "0"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "nnf_imp2or" (formula "28") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "36") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
         (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
         (rule "mul_literals" (formula "36") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "35") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
         (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
         (rule "mul_literals" (formula "35") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "34") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
         (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
         (rule "mul_literals" (formula "34") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "30") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
         (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "28") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
         (rule "mul_literals" (formula "28") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
         (rule "commute_or_2" (formula "23") (term "0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "commute_or_2" (formula "23") (term "0"))
         (rule "commute_or_2" (formula "22") (term "0"))
         (rule "commute_or_2" (formula "13") (term "0"))
         (rule "commute_or" (formula "21") (term "0,0"))
         (rule "commute_or" (formula "10") (term "0,0"))
         (rule "commute_or_2" (formula "12") (term "0"))
         (rule "commute_or_2" (formula "11") (term "0"))
         (rule "commute_or_2" (formula "37") (term "0"))
         (rule "commute_or_2" (formula "36") (term "0"))
         (rule "commute_or_2" (formula "35") (term "0"))
         (rule "commute_or_2" (formula "31") (term "0"))
         (rule "commute_or_2" (formula "30") (term "0"))
         (rule "tryCatchThrow" (formula "56") (term "1"))
         (rule "commute_or_2" (formula "29") (term "0"))
         (rule "commute_or" (formula "24") (term "0,0"))
         (rule "commute_or" (formula "23") (term "0,0"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "commute_or" (formula "13") (term "0,0"))
         (rule "commute_or" (formula "12") (term "0,0"))
         (rule "commute_or" (formula "11") (term "0,0"))
         (rule "commute_or" (formula "37") (term "0,0"))
         (rule "commute_or" (formula "36") (term "0,0"))
         (rule "commute_or" (formula "35") (term "0,0"))
         (rule "commute_or" (formula "31") (term "0,0"))
         (rule "commute_or" (formula "30") (term "0,0"))
         (rule "commute_or" (formula "29") (term "0,0"))
         (rule "ifthenelse_to_or_right" (formula "21") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,1,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,1,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,1,1,0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,0,0,0"))
         (rule "commute_or" (formula "21") (term "0,0"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "commute_or_2" (formula "21") (term "0,1,0"))
         (rule "commute_or" (formula "21") (term "1,1,0"))
         (rule "commute_or" (formula "21") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
         (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
         (rule "ifthenelse_to_or_left" (formula "10") (term "0,0,0"))
         (rule "eqSymm" (formula "10") (term "1,0,0,0,0"))
         (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
         (rule "commute_or" (formula "10") (term "0,0"))
         (rule "commute_or_2" (formula "10") (term "0"))
         (rule "commute_or_2" (formula "10") (term "0,1,0"))
         (rule "commute_or" (formula "10") (term "1,1,0"))
         (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
         (rule "commute_or" (formula "10") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
         (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,1,1,0"))
         (rule "add_literals" (formula "21") (term "1,1,0,0,1,1,0"))
         (rule "qeq_literals" (formula "21") (term "1,0,0,1,1,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "shift_paren_or" (formula "21") (term "1,1,0"))
         (rule "commute_or" (formula "21") (term "0,1,1,0"))
         (rule "cnf_rightDist" (formula "21") (term "0"))
         (rule "distr_forallAnd" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "shift_paren_or" (formula "22") (term "0"))
         (rule "commute_or_2" (formula "22") (term "0,0"))
         (rule "shift_paren_or" (formula "21") (term "0,0"))
         (rule "commute_or_2" (formula "22") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "shift_paren_or" (formula "21") (term "0,0,0"))
         (rule "commute_or" (formula "21") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "commute_or" (formula "10") (term "0,0,1,1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1,0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "45"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0,1,0") (ifseqformula "3"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "ineffectiveCast3" (formula "53") (term "1,1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "13") (term "1,1,0,1,1,1,0,0,0,0,0,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "12") (term "1,1,0,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "54") (term "1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "53") (term "1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "13") (term "1,1,0,1,1,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "12") (term "1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "13") (term "1,1,1,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "13") (term "1,1,1,1,0,0,0,0,1,0") (ifseqformula "1"))
         (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
         (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,1,1,0"))
         (rule "add_literals" (formula "13") (term "1,1,0,0,1,1,0"))
         (rule "qeq_literals" (formula "13") (term "1,0,0,1,1,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "commute_or" (formula "13") (term "1,1,0"))
         (rule "cnf_rightDist" (formula "13") (term "0"))
         (rule "distr_forallAnd" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "commute_or_2" (formula "13") (term "0"))
         (rule "shift_paren_or" (formula "14") (term "0"))
         (rule "commute_or_2" (formula "14") (term "0,0"))
         (rule "shift_paren_or" (formula "13") (term "0,0"))
         (rule "commute_or_2" (formula "14") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "shift_paren_or" (formula "13") (term "0,0,0"))
         (rule "commute_or" (formula "13") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "ifElseUnfold" (formula "62") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "62") (term "1") (newnames "x_1"))
         (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0,0"))
         (rule "eqSymm" (formula "26") (term "1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "26") (term "0,0,0"))
         (rule "commute_or_2" (formula "26") (term "0,0"))
         (rule "commute_or_2" (formula "26") (term "0"))
         (rule "commute_or_2" (formula "26") (term "0,1,0"))
         (rule "commute_or" (formula "26") (term "1,1,0"))
         (rule "commute_or" (formula "26") (term "0,0,1,0"))
         (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
         (rule "cnf_rightDist" (formula "26") (term "0"))
         (rule "distr_forallAnd" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "commute_or_2" (formula "26") (term "0"))
         (rule "commute_or" (formula "27") (term "0"))
         (rule "shift_paren_or" (formula "26") (term "0,0"))
         (rule "commute_or" (formula "27") (term "1,1,0"))
         (rule "commute_or_2" (formula "26") (term "0,0,0"))
         (rule "cnf_rightDist" (formula "27") (term "0"))
         (rule "distr_forallAnd" (formula "27"))
         (rule "andLeft" (formula "27"))
         (rule "commute_or_2" (formula "27") (term "0"))
         (rule "shift_paren_or" (formula "28") (term "0"))
         (rule "commute_or_2" (formula "27") (term "0,0"))
         (rule "commute_or_2" (formula "28") (term "0,0"))
         (rule "shift_paren_or" (formula "27") (term "0,0,0"))
         (rule "shift_paren_or" (formula "28") (term "0,0,0"))
         (rule "commute_or" (formula "27") (term "0,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,0"))
         (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
         (rule "qeq_literals" (formula "27") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "true_left" (formula "27"))
         (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
         (rule "commute_or" (formula "26") (term "0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "equality_comparison_simple" (formula "63") (term "1"))
         (builtin "One Step Simplification" (formula "63"))
         (rule "replace_known_right" (formula "63") (term "0,0,1,0") (ifseqformula "58"))
         (builtin "One Step Simplification" (formula "63"))
         (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0,0"))
         (rule "eqSymm" (formula "13") (term "1,0,0,0,0,0"))
         (rule "eqSymm" (formula "13") (term "1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0"))
         (rule "commute_or" (formula "13") (term "0,0,0"))
         (rule "commute_or_2" (formula "13") (term "0,0"))
         (rule "commute_or_2" (formula "13") (term "0"))
         (rule "commute_or" (formula "13") (term "1,1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "5"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "6"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "7"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "8"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "9"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "10"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "57") (term "0") (ifseqformula "11"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "58"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "arrayLengthNotNegative" (formula "38") (term "1,1,0"))
         (rule "arrayLengthIsAShort" (formula "39") (term "1,1,0"))
         (builtin "One Step Simplification" (formula "39"))
         (rule "true_left" (formula "39"))
         (rule "arrayLengthIsAShort" (formula "37") (term "1,1,0"))
         (builtin "One Step Simplification" (formula "37"))
         (rule "true_left" (formula "37"))
         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
         (rule "arrayLengthIsAShort" (formula "36") (term "1,1,0"))
         (builtin "One Step Simplification" (formula "36"))
         (rule "true_left" (formula "36"))
         (rule "arrayLengthNotNegative" (formula "36") (term "1,1,0"))
         (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
         (rule "cnf_rightDist" (formula "20") (term "0"))
         (rule "distr_forallAnd" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "commute_or" (formula "21") (term "0"))
         (rule "shift_paren_or" (formula "20") (term "0"))
         (rule "commute_or_2" (formula "20") (term "0,0"))
         (rule "commute_or" (formula "21") (term "1,1,0"))
         (rule "commute_or_2" (formula "20") (term "0,0,0"))
         (rule "cnf_rightDist" (formula "21") (term "0"))
         (rule "distr_forallAnd" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "shift_paren_or" (formula "22") (term "0"))
         (rule "commute_or_2" (formula "21") (term "0,0"))
         (rule "shift_paren_or" (formula "22") (term "0,0"))
         (rule "commute_or_2" (formula "22") (term "0,0,0"))
         (rule "shift_paren_or" (formula "21") (term "0,0,0"))
         (rule "commute_or" (formula "21") (term "0,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,0"))
         (rule "add_zero_right" (formula "21") (term "1,1,0,0,0"))
         (rule "qeq_literals" (formula "21") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "arrayLengthIsAShort" (formula "18") (term "0"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "arrayLengthNotNegative" (formula "18") (term "0"))
         (rule "ifElseSplit" (formula "74"))
         (branch "if x_1 true"
            (builtin "One Step Simplification" (formula "75"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_1 false"
            (builtin "One Step Simplification" (formula "75"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifElseSplit" (formula "74"))
            (branch "if exc_2 instanceof java.lang.Throwable true"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "74") (term "1") (newnames "e_1"))
               (rule "reference_type_cast" (formula "74") (term "1"))
               (branch "Normal Execution (exc_2 instanceof java.lang.Throwable)"
                  (builtin "One Step Simplification" (formula "75"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "74") (term "1"))
                  (builtin "One Step Simplification" (formula "74"))
                  (rule "emptyModality" (formula "74") (term "1"))
                  (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "69")) (ifInst ""  (formula "69")) (ifInst ""  (formula "56")))
                  (rule "eqSymm" (formula "74") (term "1,0,0,1"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "74") (term "0") (ifseqformula "14"))
                  (rule "replaceKnownSelect_taclet100_18" (formula "74") (term "0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_20" (formula "74") (term "0,0,1,0"))
                  (rule "replaceKnownSelect_taclet100_21" (formula "74") (term "0,0,1,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_23" (formula "74") (term "0,0,1,0,0"))
                  (rule "replaceKnownSelect_taclet100_24" (formula "74") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_26" (formula "74") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownSelect_taclet100_27" (formula "74") (term "0,0,1,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100_36" (formula "74") (term "1,1,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_29" (formula "74") (term "0,0,1,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_38" (formula "74") (term "1,1,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100_39" (formula "74") (term "1,1,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100_42" (formula "74") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_41" (formula "74") (term "1,1,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_44" (formula "74") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100_30" (formula "74") (term "0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100_33" (formula "74") (term "0,0,1,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_32" (formula "74") (term "0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_35" (formula "74") (term "0,0,1,0,0,0,0,0,0,0,0"))
                  (rule "replace_known_right" (formula "74") (term "0,1,0,0") (ifseqformula "65"))
                  (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "61")) (ifInst ""  (formula "60")) (ifInst ""  (formula "62")) (ifInst ""  (formula "63")) (ifInst ""  (formula "64")))
                  (rule "nonNull" (formula "74") (term "0,0,0") (inst "i=i"))
                  (rule "greater_literals" (formula "74") (term "0,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "57")))
                  (rule "sub_literals" (formula "74") (term "2,1,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "74"))
                  (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,1,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "74") (term "0,1,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,0,0,0"))
                  (rule "nonNull" (formula "74") (term "1,0") (inst "i=i"))
                  (rule "greater_literals" (formula "74") (term "0,1,1,0"))
                  (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "59")))
                  (rule "sub_literals" (formula "74") (term "2,1,0,1,0"))
                  (builtin "One Step Simplification" (formula "74"))
                  (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "74") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,1,0"))
                  (rule "nonNull" (formula "74") (term "1,0,0") (inst "i=i"))
                  (rule "greater_literals" (formula "74") (term "0,1,1,0,0"))
                  (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "58")))
                  (rule "sub_literals" (formula "74") (term "2,1,0,1,0,0"))
                  (builtin "One Step Simplification" (formula "74"))
                  (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "74") (term "0,1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "74") (term "0,1,0"))
                  (rule "nnf_imp2or" (formula "74") (term "0,0,0,0"))
                  (rule "nnf_imp2or" (formula "74") (term "0,1,0,0"))
                  (rule "nnf_notAnd" (formula "74") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "74") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "74") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "74") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "74") (term "1,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "74") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "74") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,1,0"))
                  (rule "nnf_notAnd" (formula "74") (term "0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "74") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "74") (term "0,0,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "74") (term "0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "74") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "74") (term "0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "74") (term "1,0,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "74") (term "0,0,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "74") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "74") (term "0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "74") (term "0,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "74") (term "1,0,0,0,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "74") (term "0,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "74") (term "1,0,0,0,1,0,0"))
                  (rule "ifthenelse_split" (formula "19") (term "1"))
                  (branch "result_0.length ≥ 1 TRUE"
                     (rule "replace_known_left" (formula "34") (term "0,1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "replace_known_left" (formula "21") (term "0,1,1,0,0") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "replace_known_left" (formula "22") (term "0,1,1,0") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "replace_known_left" (formula "37") (term "0,1,1,0") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "37"))
                     (rule "replace_known_left" (formula "36") (term "0,1,1,0") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "19"))
                     (rule "leq_literals" (formula "31") (term "0"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "commute_or_2" (formula "34") (term "0"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "commute_or_2" (formula "22") (term "0"))
                     (rule "commute_or_2" (formula "23") (term "0"))
                     (rule "commute_or_2" (formula "36") (term "0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                     (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                     (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                     (rule "leq_literals" (formula "36") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "true_left" (formula "36"))
                     (rule "commute_or_2" (formula "35") (term "0"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "commute_or_2" (formula "21") (term "0,0"))
                     (rule "commute_or_2" (formula "22") (term "0,0"))
                     (rule "commute_or_2" (formula "23") (term "0,0"))
                     (rule "commute_or_2" (formula "21") (term "0,0,0"))
                     (rule "andRight" (formula "73"))
                     (branch "Case 1"
                        (rule "andRight" (formula "73"))
                        (branch "Case 1"
                           (rule "andRight" (formula "73"))
                           (branch "Case 1"
                              (rule "allRight" (formula "73") (inst "sk=i_8"))
                              (rule "orRight" (formula "73"))
                              (rule "orRight" (formula "73"))
                              (rule "notRight" (formula "75"))
                              (rule "inEqSimp_geqRight" (formula "75"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "75"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_8"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "47"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "32"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "47"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "32"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")) (ifInst ""  (formula "6")))
                              (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "60"))
                              (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "31") (ifseqformula "60"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")))
                              (rule "elementOfSingleton" (formula "3") (term "0,0"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")))
                              (rule "ifthenelse_split" (formula "24") (term "0"))
                              (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                                 (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "26") (term "1,1,0,0,0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                 (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "23"))
                                 (rule "leq_literals" (formula "22") (term "0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "inEqSimp_or_tautInEq3" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "0,1,0,0"))
                                 (rule "leq_literals" (formula "25") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "allLeft" (formula "26") (inst "t=i_8"))
                                 (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                 (rule "leq_literals" (formula "26") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "24"))
                                 (rule "inEqSimp_geqRight" (formula "60"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "26") (term "1,1,0,0,0,0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                 (rule "qeq_literals" (formula "24"))
                                 (rule "closeFalse" (formula "24"))
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "73") (inst "sk=i_7"))
                              (rule "orRight" (formula "73"))
                              (rule "orRight" (formula "73"))
                              (rule "notRight" (formula "75"))
                              (rule "inEqSimp_geqRight" (formula "75"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "75"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_7"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "61")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "47"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "32"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "47"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "61")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "32"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "61")) (ifInst ""  (formula "11")))
                              (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "61"))
                              (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "31") (ifseqformula "61"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "61")))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "61")))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "61")))
                              (rule "elementOfSingleton" (formula "3") (term "0,0"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "61")))
                              (rule "ifthenelse_split" (formula "24") (term "0"))
                              (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                                 (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "26") (term "1,1,0,0,0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                 (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "23"))
                                 (rule "leq_literals" (formula "22") (term "0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "inEqSimp_or_tautInEq3" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "0,1,0,0"))
                                 (rule "leq_literals" (formula "25") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "allLeft" (formula "27") (inst "t=i_7"))
                                 (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                 (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "0,0,1"))
                                 (rule "leq_literals" (formula "27") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "27"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "24"))
                                 (rule "inEqSimp_geqRight" (formula "60"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "26") (term "1,1,0,0,0,0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                 (rule "qeq_literals" (formula "24"))
                                 (rule "closeFalse" (formula "24"))
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "73") (inst "sk=i_6"))
                           (rule "orRight" (formula "73"))
                           (rule "orRight" (formula "73"))
                           (rule "notRight" (formula "75"))
                           (rule "inEqSimp_geqRight" (formula "75"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "75"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_6"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "54"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "62")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "47"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "32"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "47"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "62")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "32"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "62")) (ifInst ""  (formula "7")))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "62"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "31") (ifseqformula "62"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "62")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "62")))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "62")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "62")))
                           (rule "ifthenelse_split" (formula "24") (term "0"))
                           (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "25"))
                              (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                              (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "23"))
                              (rule "leq_literals" (formula "22") (term "0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_or_tautInEq3" (formula "25") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "25") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "25") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "allLeft" (formula "28") (inst "t=i_6"))
                              (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                              (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "28") (term "0,0,1"))
                              (rule "leq_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "28"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "24"))
                              (rule "inEqSimp_geqRight" (formula "60"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "28") (term "1,1,0,0,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0,0,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "24"))
                              (rule "closeFalse" (formula "24"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "73") (inst "sk=f_2"))
                        (rule "allRight" (formula "73") (inst "sk=o_2"))
                        (rule "orRight" (formula "73"))
                        (rule "orRight" (formula "73"))
                        (rule "orRight" (formula "73"))
                        (rule "pullOutSelect" (formula "76") (term "0") (inst "selectSK=f_2_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "51"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "44"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "29"))
                        (rule "eqSymm" (formula "77"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "30"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "76"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "77"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "commute_and" (formula "76"))
                        (rule "commute_and" (formula "75"))
                        (rule "ifthenelse_split" (formula "22") (term "0"))
                        (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                           (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "22"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                           (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "21"))
                           (rule "leq_literals" (formula "20") (term "0"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0,0"))
                           (rule "add_literals" (formula "23") (term "1,0,1,0,0"))
                           (rule "times_zero_1" (formula "23") (term "0,1,0,0"))
                           (rule "leq_literals" (formula "23") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "cut_direct" (formula "55") (term "0,0"))
                           (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                              (rule "instanceof_not_compatible_5" (formula "56") (term "1") (ifseqformula "55"))
                              (rule "instanceof_not_compatible_5" (formula "56") (term "1,0") (ifseqformula "55"))
                              (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "69")) (ifInst ""  (formula "69")))
                              (rule "true_left" (formula "56"))
                              (rule "cut_direct" (formula "45") (term "0,0"))
                              (branch "CUT: result_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "46"))
                                 (rule "true_left" (formula "46"))
                                 (rule "cut_direct" (formula "30") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "cut_direct" (formula "51") (term "0,0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "1,0") (ifseqformula "14"))
                                       (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "54"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "53")))
                                             (rule "replace_known_right" (formula "75") (term "0,0") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "53")))
                                             (rule "closeTrue" (formula "75"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "73") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "false_right" (formula "74"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "notRight" (formula "74"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "74")) (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "1,0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "35") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                          (rule "leq_literals" (formula "35") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "54"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "54")))
                                             (rule "replace_known_right" (formula "76") (term "0,0") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "53")))
                                             (rule "closeTrue" (formula "76"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "74") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "false_right" (formula "75"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "notRight" (formula "75"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "75"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "cut_direct" (formula "51") (term "0,0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "1,0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "3"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "55"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")) (ifInst ""  (formula "55")))
                                             (rule "replace_known_right" (formula "76") (term "0,1") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "53")))
                                             (rule "closeTrue" (formula "76"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "74") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "false_right" (formula "75"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "notRight" (formula "75"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "75"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "1,0") (ifseqformula "15"))
                                       (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")))
                                       (rule "true_left" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "35") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                          (rule "leq_literals" (formula "35") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "3"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "55"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")))
                                             (rule "replace_known_right" (formula "75") (term "1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "75"))
                                             (rule "false_right" (formula "75"))
                                             (rule "replace_known_right" (formula "75") (term "1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "75"))
                                             (rule "false_right" (formula "75"))
                                             (rule "replace_known_right" (formula "75") (term "0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "54")))
                                             (rule "closeTrue" (formula "75"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "75") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "false_right" (formula "76"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "notRight" (formula "76"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")) (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "cut_direct" (formula "30") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "cut_direct" (formula "51") (term "0,0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0") (ifseqformula "14"))
                                       (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "67")))
                                       (rule "true_left" (formula "12"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "35") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                          (rule "leq_literals" (formula "35") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "3"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "55"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")) (ifInst ""  (formula "55")))
                                             (rule "replace_known_right" (formula "74") (term "1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "74"))
                                             (rule "false_right" (formula "74"))
                                             (rule "replace_known_right" (formula "75") (term "0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "54")))
                                             (rule "closeTrue" (formula "75"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "74") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "false_right" (formula "75"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "notRight" (formula "75"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")) (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "68"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "12"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "54"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "53")))
                                             (rule "replace_known_right" (formula "76") (term "1") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "76"))
                                             (rule "false_right" (formula "76"))
                                             (rule "replace_known_right" (formula "75") (term "1") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "75"))
                                             (rule "false_right" (formula "75"))
                                             (rule "replace_known_right" (formula "75") (term "0,0") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "53")))
                                             (rule "closeTrue" (formula "75"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "75") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "false_right" (formula "76"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "notRight" (formula "76"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")) (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "cut_direct" (formula "51") (term "0,0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0") (ifseqformula "14"))
                                       (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "68")))
                                       (rule "true_left" (formula "12"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "3"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "55"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")))
                                             (rule "replace_known_right" (formula "77") (term "0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "54")))
                                             (rule "closeTrue" (formula "77"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "75") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "false_right" (formula "76"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "notRight" (formula "76"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "76"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "12"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "3"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "55"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "55")))
                                             (rule "replace_known_right" (formula "77") (term "1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "77"))
                                             (rule "false_right" (formula "77"))
                                             (rule "replace_known_right" (formula "77") (term "0,1") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "53")))
                                             (rule "closeTrue" (formula "77"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "76") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "77"))
                                                (rule "false_right" (formula "77"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "77"))
                                                (rule "notRight" (formula "77"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "77")) (ifInst ""  (formula "78")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "55"))
                              (rule "cut_direct" (formula "45") (term "0,0"))
                              (branch "CUT: result_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "46"))
                                 (rule "true_left" (formula "46"))
                                 (rule "cut_direct" (formula "30") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "cut_direct" (formula "51") (term "0,0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "1,0") (ifseqformula "14"))
                                       (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "54"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "53")))
                                             (rule "replace_known_right" (formula "76") (term "0,0") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "53")))
                                             (rule "closeTrue" (formula "76"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "74") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "false_right" (formula "75"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "notRight" (formula "75"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")) (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "54"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "54")))
                                             (rule "replace_known_right" (formula "76") (term "1") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "76"))
                                             (rule "false_right" (formula "76"))
                                             (rule "replace_known_right" (formula "76") (term "0,1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "55")))
                                             (rule "closeTrue" (formula "76"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "75") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "false_right" (formula "76"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "notRight" (formula "76"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "76"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "cut_direct" (formula "51") (term "0,0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "1,0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "35") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                          (rule "leq_literals" (formula "35") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "54"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "54")))
                                             (rule "replace_known_right" (formula "77") (term "0,1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "55")))
                                             (rule "closeTrue" (formula "77"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "75") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "false_right" (formula "76"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "notRight" (formula "76"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")) (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "35") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                          (rule "leq_literals" (formula "35") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "3"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "55"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")))
                                             (rule "replace_known_right" (formula "77") (term "1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "77"))
                                             (rule "false_right" (formula "77"))
                                             (rule "replace_known_right" (formula "77") (term "0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "54")))
                                             (rule "closeTrue" (formula "77"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "76") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "77"))
                                                (rule "false_right" (formula "77"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "77"))
                                                (rule "notRight" (formula "77"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "77"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "78")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "cut_direct" (formula "30") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "cut_direct" (formula "51") (term "0,0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "54"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "54")))
                                             (rule "replace_known_right" (formula "77") (term "0,1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "55")))
                                             (rule "closeTrue" (formula "77"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "75") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "false_right" (formula "76"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "notRight" (formula "76"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "76"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "15"))
                                       (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                       (rule "true_left" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "35") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                          (rule "leq_literals" (formula "35") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "54"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "54")))
                                             (rule "replace_known_right" (formula "76") (term "1") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "76"))
                                             (rule "false_right" (formula "76"))
                                             (rule "replace_known_right" (formula "77") (term "0,0") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "53")))
                                             (rule "closeTrue" (formula "77"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "76") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "77"))
                                                (rule "false_right" (formula "77"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "77"))
                                                (rule "notRight" (formula "77"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "77")) (ifInst ""  (formula "78")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "cut_direct" (formula "51") (term "0,0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "54"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "53")))
                                             (rule "replace_known_right" (formula "77") (term "1") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "77"))
                                             (rule "false_right" (formula "77"))
                                             (rule "replace_known_right" (formula "76") (term "1") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "76"))
                                             (rule "false_right" (formula "76"))
                                             (rule "replace_known_right" (formula "76") (term "0,1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "55")))
                                             (rule "closeTrue" (formula "76"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "76") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "77"))
                                                (rule "false_right" (formula "77"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "77"))
                                                (rule "notRight" (formula "77"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "77")) (ifInst ""  (formula "78")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_split" (formula "34") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "32") (term "0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                          (rule "leq_literals" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "notLeft" (formula "3"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "55"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "55"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")))
                                             (rule "replace_known_right" (formula "78") (term "1") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "78"))
                                             (rule "false_right" (formula "78"))
                                             (rule "replace_known_right" (formula "78") (term "0,0") (ifseqformula "53"))
                                             (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "54")))
                                             (rule "closeTrue" (formula "78"))
                                          )
                                          (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "cut_direct" (formula "77") (term "0,0"))
                                             (branch "CUT: o_2 = null TRUE"
                                                (builtin "One Step Simplification" (formula "78"))
                                                (rule "false_right" (formula "78"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "78")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: o_2 = null FALSE"
                                                (builtin "One Step Simplification" (formula "78"))
                                                (rule "notRight" (formula "78"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "78"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "79")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "34"))
                                          (rule "inEqSimp_geqRight" (formula "57"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "22"))
                           (rule "inEqSimp_geqRight" (formula "58"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "23"))
                           (rule "applyEq" (formula "26") (term "1,1,0,0,0") (ifseqformula "23"))
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                           (rule "qeq_literals" (formula "22"))
                           (rule "closeFalse" (formula "22"))
                        )
                     )
                  )
                  (branch "result_0.length ≥ 1 FALSE"
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "replace_known_right" (formula "35") (term "0,1,1,0") (ifseqformula "57"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "57"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "replace_known_right" (formula "36") (term "0,1,1,0") (ifseqformula "57"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "57"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "replace_known_right" (formula "21") (term "0,1,1,0") (ifseqformula "57"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "57"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "57"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "inEqSimp_geqRight" (formula "57"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "31") (ifseqformula "1"))
                     (rule "applyEq" (formula "36") (term "1,1,0,0,0") (ifseqformula "31"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "31"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                     (rule "qeq_literals" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "applyEq" (formula "36") (term "1,1,1,0,0,0") (ifseqformula "30"))
                     (rule "add_zero_right" (formula "36") (term "1,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "applyEq" (formula "35") (term "1,1,0,0,0") (ifseqformula "30"))
                     (rule "inEqSimp_notGeq" (formula "19") (term "0"))
                     (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0"))
                     (rule "add_zero_left" (formula "19") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "33") (term "0"))
                     (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                     (rule "add_literals" (formula "33") (term "0,0,0"))
                     (rule "add_zero_left" (formula "33") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0,0"))
                     (rule "add_zero_right" (formula "34") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "34") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "true_left" (formula "34"))
                     (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0,0"))
                     (rule "add_zero_right" (formula "34") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "34") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "true_left" (formula "34"))
                     (rule "commute_or_2" (formula "22") (term "0"))
                     (rule "commute_or_2" (formula "21") (term "0"))
                     (rule "commute_or_2" (formula "20") (term "0,0"))
                     (rule "commute_or_2" (formula "34") (term "0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                     (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "34") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "true_left" (formula "34"))
                     (rule "commute_or_2" (formula "22") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0,0"))
                     (rule "add_literals" (formula "22") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "22") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "commute_or_2" (formula "21") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "21") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "andRight" (formula "69"))
                     (branch "Case 1"
                        (rule "commute_or_2" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_or_tautInEq0" (formula "20") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "qeq_literals" (formula "20") (term "1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "andRight" (formula "68"))
                        (branch "Case 1"
                           (rule "andRight" (formula "68"))
                           (branch "Case 1"
                              (rule "allRight" (formula "68") (inst "sk=i_5"))
                              (rule "orRight" (formula "68"))
                              (rule "orRight" (formula "68"))
                              (rule "notRight" (formula "70"))
                              (rule "inEqSimp_leqRight" (formula "69"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "70"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "49"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "42"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "28"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")) (ifInst ""  (formula "6")))
                              (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "55"))
                              (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "27") (ifseqformula "55"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                              (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                              (rule "elementOfSingleton" (formula "3") (term "0,0"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                              (rule "allLeft" (formula "24") (inst "t=i_5"))
                              (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "24") (term "0,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "1"))
                              (rule "andLeft" (formula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "24"))
                              (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                              (rule "add_literals" (formula "24") (term "1,1,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0"))
                              (rule "add_zero_right" (formula "24") (term "0"))
                              (rule "leq_literals" (formula "24"))
                              (rule "closeFalse" (formula "24"))
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "68") (inst "sk=i_4"))
                              (rule "orRight" (formula "68"))
                              (rule "orRight" (formula "68"))
                              (rule "notRight" (formula "70"))
                              (rule "inEqSimp_leqRight" (formula "69"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "70"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "49"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "56")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "42"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "28"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "56")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "56")) (ifInst ""  (formula "11")))
                              (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "56"))
                              (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "27") (ifseqformula "56"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "56")))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "56")))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                              (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "56")))
                              (rule "elementOfSingleton" (formula "3") (term "0,0"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "56")))
                              (rule "allLeft" (formula "25") (inst "t=i_4"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "25") (term "0,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "68") (inst "sk=i_3"))
                           (rule "orRight" (formula "68"))
                           (rule "orRight" (formula "68"))
                           (rule "notRight" (formula "70"))
                           (rule "inEqSimp_geqRight" (formula "70"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "70"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "49"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "57")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "42"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "57")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "57")) (ifInst ""  (formula "7")))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "57"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "27") (ifseqformula "57"))
                           (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "57")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "57")))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "57")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "57")))
                           (rule "allLeft" (formula "26") (inst "t=i_3"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "26") (term "0,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "26"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "69") (inst "sk=f_1"))
                        (rule "allRight" (formula "69") (inst "sk=o_1"))
                        (rule "orRight" (formula "69"))
                        (rule "orRight" (formula "69"))
                        (rule "orRight" (formula "69"))
                        (rule "pullOutSelect" (formula "72") (term "0") (inst "selectSK=f_1_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "40"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "26"))
                        (rule "eqSymm" (formula "73"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "27"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "74")))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "73"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "72"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "commute_or_2" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_or_tautInEq0" (formula "22") (term "0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "1,1,0,0,0,0"))
                        (rule "qeq_literals" (formula "22") (term "1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "commute_and" (formula "70"))
                        (rule "commute_and" (formula "71"))
                        (rule "cut_direct" (formula "52") (term "0,0"))
                        (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                           (rule "instanceof_not_compatible_5" (formula "53") (term "1") (ifseqformula "52"))
                           (rule "instanceof_not_compatible_5" (formula "53") (term "1,0") (ifseqformula "52"))
                           (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "66")) (ifInst ""  (formula "66")))
                           (rule "true_left" (formula "53"))
                           (rule "cut_direct" (formula "42") (term "0,0"))
                           (branch "CUT: result_1.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "43"))
                              (rule "true_left" (formula "43"))
                              (rule "cut_direct" (formula "28") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "cut_direct" (formula "48") (term "0,0,0"))
                                 (branch "CUT: exc_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "true_left" (formula "49"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "63"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "12")))
                                    (rule "true_left" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "64"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")))
                                       (rule "replace_known_right" (formula "74") (term "1") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "74"))
                                       (rule "false_right" (formula "74"))
                                       (rule "replace_known_right" (formula "74") (term "0,0") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "54")))
                                       (rule "closeTrue" (formula "74"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "71") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "72"))
                                                (rule "false_right" (formula "72"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "72"))
                                                (rule "notRight" (formula "72"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")) (ifInst ""  (formula "73")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "CUT: exc_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "65"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "65")))
                                    (rule "true_left" (formula "21"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "54"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "54")))
                                       (rule "replace_known_right" (formula "74") (term "1") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "74"))
                                       (rule "false_right" (formula "74"))
                                       (rule "replace_known_right" (formula "75") (term "0,0") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "75"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "72") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "73"))
                                                (rule "false_right" (formula "73"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "73"))
                                                (rule "notRight" (formula "73"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")) (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "cut_direct" (formula "48") (term "0,0,0"))
                                 (branch "CUT: exc_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "true_left" (formula "49"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "64")))
                                    (rule "true_left" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "65"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "55")))
                                       (rule "replace_known_right" (formula "76") (term "0,1") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "76"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "cut_direct" (formula "72") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "73"))
                                                (rule "false_right" (formula "73"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "73"))
                                                (rule "notRight" (formula "73"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")) (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "CUT: exc_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "65")))
                                    (rule "true_left" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "66"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "55")))
                                       (rule "replace_known_right" (formula "77") (term "0,0") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "54")))
                                       (rule "closeTrue" (formula "77"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "cut_direct" (formula "73") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "false_right" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "notRight" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")) (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: result_1.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "42"))
                              (rule "cut_direct" (formula "28") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "cut_direct" (formula "48") (term "0,0,0"))
                                 (branch "CUT: exc_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "true_left" (formula "49"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "64"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "12")))
                                    (rule "true_left" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "65"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "55")))
                                       (rule "replace_known_right" (formula "75") (term "1") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "75"))
                                       (rule "false_right" (formula "75"))
                                       (rule "replace_known_right" (formula "75") (term "0,1") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "75"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "cut_direct" (formula "72") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "73"))
                                                (rule "false_right" (formula "73"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "73"))
                                                (rule "notRight" (formula "73"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")) (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_literals" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "CUT: exc_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "65"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "12")))
                                    (rule "true_left" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "66"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "54"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")))
                                       (rule "replace_known_right" (formula "76") (term "1") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "76"))
                                       (rule "false_right" (formula "76"))
                                       (rule "replace_known_right" (formula "76") (term "0,0") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "76"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "cut_direct" (formula "73") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "false_right" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "notRight" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")) (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                             (rule "add_literals" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "cut_direct" (formula "48") (term "0,0,0"))
                                 (branch "CUT: exc_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "true_left" (formula "49"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "65"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "12")))
                                    (rule "true_left" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "66"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "55")))
                                       (rule "replace_known_right" (formula "77") (term "0,0") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "54")))
                                       (rule "closeTrue" (formula "77"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "73") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "false_right" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "notRight" (formula "74"))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "74"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "21"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "CUT: exc_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "66"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "12")))
                                    (rule "true_left" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "67"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "55")))
                                       (rule "replace_known_right" (formula "78") (term "0,1") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "78"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "74") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "false_right" (formula "75"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "notRight" (formula "75"))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "75"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "52"))
                           (rule "cut_direct" (formula "42") (term "0,0"))
                           (branch "CUT: result_1.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "43"))
                              (rule "true_left" (formula "43"))
                              (rule "cut_direct" (formula "28") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "cut_direct" (formula "48") (term "0,0,0"))
                                 (branch "CUT: exc_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "true_left" (formula "49"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "65"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "65")))
                                    (rule "true_left" (formula "21"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "54"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "53")))
                                       (rule "replace_known_right" (formula "74") (term "1") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "74"))
                                       (rule "false_right" (formula "74"))
                                       (rule "replace_known_right" (formula "75") (term "0,0") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "75"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "cut_direct" (formula "72") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "73"))
                                                (rule "false_right" (formula "73"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "73"))
                                                (rule "notRight" (formula "73"))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "73"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "CUT: exc_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "65"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "12")))
                                    (rule "true_left" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "66"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "54"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "54")))
                                       (rule "replace_known_right" (formula "77") (term "0,0") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "77"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "73") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "false_right" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "notRight" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")) (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "cut_direct" (formula "48") (term "0,0,0"))
                                 (branch "CUT: exc_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "true_left" (formula "49"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "66"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "66")))
                                    (rule "true_left" (formula "21"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "54"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")))
                                       (rule "replace_known_right" (formula "75") (term "1") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "75"))
                                       (rule "false_right" (formula "75"))
                                       (rule "replace_known_right" (formula "76") (term "0,0") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "76"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "73") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "false_right" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "notRight" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")) (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "CUT: exc_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "66")))
                                    (rule "true_left" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "67"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "55")))
                                       (rule "replace_known_right" (formula "78") (term "0,0") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "54")))
                                       (rule "closeTrue" (formula "78"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "74") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "false_right" (formula "75"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "notRight" (formula "75"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "75")) (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_literals" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: result_1.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "42"))
                              (rule "cut_direct" (formula "28") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "cut_direct" (formula "48") (term "0,0,0"))
                                 (branch "CUT: exc_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "true_left" (formula "49"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "65")))
                                    (rule "true_left" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "66"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "54"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "53")))
                                       (rule "replace_known_right" (formula "75") (term "1") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "75"))
                                       (rule "false_right" (formula "75"))
                                       (rule "replace_known_right" (formula "75") (term "1") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "75"))
                                       (rule "false_right" (formula "75"))
                                       (rule "replace_known_right" (formula "75") (term "0,1") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "55")))
                                       (rule "closeTrue" (formula "75"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "73") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "false_right" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "74"))
                                                (rule "notRight" (formula "74"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")) (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                             (rule "add_literals" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "21"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "CUT: exc_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "66")))
                                    (rule "true_left" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "67"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "55")))
                                       (rule "replace_known_right" (formula "78") (term "0,1") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "78"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "cut_direct" (formula "74") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "false_right" (formula "75"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "notRight" (formula "75"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "75")) (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "21"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "cut_direct" (formula "48") (term "0,0,0"))
                                 (branch "CUT: exc_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "true_left" (formula "49"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "66")))
                                    (rule "true_left" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "67"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "55")))
                                       (rule "replace_known_right" (formula "77") (term "1") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "77"))
                                       (rule "false_right" (formula "77"))
                                       (rule "replace_known_right" (formula "77") (term "0,1") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "77"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "74") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "false_right" (formula "75"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "75")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "75"))
                                                (rule "notRight" (formula "75"))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "75"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "CUT: exc_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0,0") (ifseqformula "14"))
                                    (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "67")))
                                    (rule "true_left" (formula "20"))
                                    (rule "ineffectiveCast2" (formula "10") (term "0") (ifseqformula "10"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "68"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "54"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "54")))
                                       (rule "replace_known_right" (formula "77") (term "1") (ifseqformula "55"))
                                       (builtin "One Step Simplification" (formula "77"))
                                       (rule "false_right" (formula "77"))
                                       (rule "replace_known_right" (formula "78") (term "0,1") (ifseqformula "53"))
                                       (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "55")))
                                       (rule "closeTrue" (formula "78"))
                                    )
                                    (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "31") (term "0"))
                                          (branch "CUT: self.unsigned.length ≤ 0 TRUE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "75") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "false_right" (formula "76"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "76"))
                                                (rule "notRight" (formula "76"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")) (ifInst ""  (formula "77")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "CUT: self.unsigned.length ≤ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_leqRight" (formula "52"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "53"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
               (branch "ClassCastException (!(exc_2 instanceof java.lang.Throwable))"
                  (builtin "One Step Simplification" (formula "74"))
                  (rule "closeTrue" (formula "74"))
               )
            )
            (branch "if exc_2 instanceof java.lang.Throwable false"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Pre (checkAndRemoveElectionId)"
         (rule "true_left" (formula "15"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
         (rule "andLeft" (formula "16"))
         (rule "wellFormedAnonEQ" (formula "22") (term "0,1") (ifseqformula "16"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1,1,1") (ifseqformula "16"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,1,0") (ifseqformula "16"))
         (rule "wellFormedAnonEQ" (formula "22") (term "0,0,1") (ifseqformula "10"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,1,1,0") (ifseqformula "10"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1,1,1") (ifseqformula "10"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "17"))
         (rule "typeEqDerived" (formula "20") (term "0,1,1,1") (ifseqformula "17"))
         (rule "typeEqDerived" (formula "20") (term "0,0,0,1,1") (ifseqformula "17"))
         (rule "typeEqDerived" (formula "20") (term "0,1,0,1,1") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "17")))
         (rule "true_left" (formula "20"))
         (rule "eqSymm" (formula "7"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "19") (term "0,1"))
         (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "22"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "replace_known_left" (formula "27") (term "1,0,1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "22")) (ifInst ""  (formula "18")))
         (rule "closeTrue" (formula "27"))
      )
   )
   (branch "Exceptional Post (checkAndRemoveTag)"
      (rule "true_left" (formula "15"))
      (builtin "One Step Simplification" (formula "16"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
      (rule "andLeft" (formula "16"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,0") (ifseqformula "16"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,1,0") (ifseqformula "10"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "eqSymm" (formula "7"))
      (rule "eqSymm" (formula "13"))
      (rule "eqSymm" (formula "25") (term "0,1,0,0,0,1"))
      (rule "eqSymm" (formula "25") (term "1,0,0,1,0,1"))
      (rule "eqSymm" (formula "18") (term "0,1"))
      (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "elementOfUnion" (formula "25") (term "0,0,0,0,1,0,1"))
      (rule "elementOfSingleton" (formula "25") (term "1,0,0,0,0,1,0,1"))
      (rule "elementOfSingleton" (formula "25") (term "0,0,0,0,0,1,0,1"))
      (rule "array2seqDef" (formula "7") (term "0,0") (inst "u=u"))
      (rule "narrowSelectArrayType" (formula "7") (term "2,0,0") (ifseqformula "1") (ifseqformula "24"))
      (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "7"))
      (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "13"))
      (rule "array2seqDef" (formula "25") (term "0,0,1,0,0,0,1") (inst "u=u"))
      (rule "array2seqDef" (formula "25") (term "1,0,1,0,0,0,1") (inst "u=u"))
      (rule "array2seqDef" (formula "7") (term "0,1,1") (inst "u=u"))
      (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "13"))
      (rule "eqSeqDef" (formula "25") (term "0,1,0,0,0,1") (inst "iv=iv"))
      (rule "lenOfSeqDef" (formula "25") (term "1,0,0,1,0,0,0,1"))
      (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "1,1,1,0,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0,0,0,1"))
      (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
      (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
      (rule "lenOfSeqDef" (formula "25") (term "0,0,0,1,0,0,0,1"))
      (rule "polySimp_elimSub" (formula "25") (term "1,0,0,0,1,0,0,0,1"))
      (rule "times_zero_2" (formula "25") (term "1,1,0,0,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "1,0,0,0,1,0,0,0,1"))
      (rule "getOfSeqDef" (formula "25") (term "0,1,0,1,0,1,0,0,0,1"))
      (rule "castDel" (formula "25") (term "2,0,1,0,1,0,1,0,0,0,1"))
      (rule "castDel" (formula "25") (term "1,0,1,0,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1,0,1,0,0,0,1"))
      (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "getOfSeqDef" (formula "25") (term "0,1,0,1,0,1,0,0,0,1"))
      (rule "castDel" (formula "25") (term "2,0,1,0,1,0,1,0,0,0,1"))
      (rule "castDel" (formula "25") (term "1,0,1,0,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1,0,1,0,0,0,1"))
      (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,0,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "0,0,1,0,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "0,0,1,1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
      (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
      (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,0,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,0,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "0,0,1,0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
      (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
      (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
      (rule "eqSeqDef2" (formula "7") (inst "iv=iv") (ifseqformula "7"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "eqSeqDef" (formula "12") (inst "iv=iv"))
      (rule "andLeft" (formula "12"))
      (rule "getOfSeqDef" (formula "13") (term "0,1,0"))
      (rule "castDel" (formula "13") (term "2,0,1,0"))
      (rule "castDel" (formula "13") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0"))
      (rule "eqSymm" (formula "13") (term "1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
      (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
      (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "13") (term "1,1,1,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,1,0,0"))
      (rule "lenOfSeqDef" (formula "12") (term "0"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_elimSub" (formula "12") (term "1,1"))
      (rule "times_zero_2" (formula "12") (term "1,1,1"))
      (rule "add_zero_right" (formula "12") (term "1,1"))
      (rule "getOfSeqDef" (formula "13") (term "0,1,0"))
      (rule "castDel" (formula "13") (term "1,0,1,0"))
      (rule "castDel" (formula "13") (term "2,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0"))
      (rule "eqSymm" (formula "13") (term "1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
      (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
      (rule "lenOfSeqDef" (formula "12") (term "0"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_elimSub" (formula "12") (term "1,1"))
      (rule "times_zero_2" (formula "12") (term "1,1,1"))
      (rule "add_zero_right" (formula "12") (term "1,1"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "13") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "13") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0"))
      (rule "apply_eq_monomials" (formula "13") (term "1,0,0,1,0,0") (ifseqformula "12"))
      (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,1,0,0,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "13") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_elimOne" (formula "12") (term "0,0,1"))
      (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "13") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_elimOne" (formula "12") (term "0,0,1"))
      (rule "apply_eq_monomials" (formula "13") (term "1,0,0,1,0,0") (ifseqformula "12"))
      (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,1,0,0,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "13") (term "0,1,1,1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_6"))
      (rule "applyEq" (formula "12") (term "0,0,0,0") (ifseqformula "13"))
      (rule "applyEq" (formula "14") (term "1,1,0,1,0") (ifseqformula "13"))
      (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "13"))
      (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "23")) (ifInst ""  (formula "2")))
      (rule "elementOfUnion" (formula "13") (term "0,0"))
      (rule "elementOfSingleton" (formula "13") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "23")))
      (rule "elementOfSingleton" (formula "13") (term "0,0"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "23")))
      (rule "applyEqReverse" (formula "12") (term "0,1,0") (ifseqformula "13"))
      (rule "applyEqReverse" (formula "14") (term "1,1,0,1,0") (ifseqformula "13"))
      (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
      (rule "applyEqReverse" (formula "12") (term "0,0,0,0") (ifseqformula "13"))
      (rule "hideAuxiliaryEq" (formula "13"))
      (rule "nnf_imp2or" (formula "25") (term "0,1,0,1,0,0,0,1"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "Definition_axiom_for_signerPre_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "notLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "notLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "notLeft" (formula "6"))
      (rule "eqSymm" (formula "7"))
      (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "7"))
      (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "1") (ifseqformula "23"))
      (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "7"))
      (rule "eqSeqDef" (formula "7") (inst "iv=iv"))
      (rule "andLeft" (formula "7"))
      (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
      (rule "castDel" (formula "8") (term "1,0,1,0"))
      (rule "castDel" (formula "8") (term "2,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
      (rule "eqSymm" (formula "8") (term "1,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
      (rule "times_zero_2" (formula "8") (term "1,1,1,0,1,1,0"))
      (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
      (rule "lenOfSeqDef" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
      (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
      (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
      (rule "lenOfSeqDef" (formula "7") (term "0"))
      (rule "eqSymm" (formula "7"))
      (rule "polySimp_elimSub" (formula "7") (term "1,1"))
      (rule "times_zero_2" (formula "7") (term "1,1,1"))
      (rule "add_zero_right" (formula "7") (term "1,1"))
      (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
      (rule "castDel" (formula "8") (term "1,0,1,0"))
      (rule "castDel" (formula "8") (term "2,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
      (rule "eqSymm" (formula "8") (term "1,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
      (rule "times_zero_2" (formula "8") (term "1,1,1,0,1,1,0"))
      (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
      (rule "lenOfSeqDef" (formula "7") (term "0"))
      (rule "eqSymm" (formula "7"))
      (rule "polySimp_elimSub" (formula "7") (term "1,1"))
      (rule "times_zero_2" (formula "7") (term "1,1,1"))
      (rule "add_zero_right" (formula "7") (term "1,1"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "8") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0"))
      (rule "eqSymm" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "8") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0"))
      (rule "eqSymm" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
      (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "8") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
      (rule "eqSymm" (formula "7"))
      (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
      (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
      (rule "applyEq" (formula "7") (term "1") (ifseqformula "14"))
      (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "8") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "15") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "30") (term "0,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,0,1,0,0,0,1"))
      (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
      (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1,0,1,0,0,0,1"))
      (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,1,0,1,0,0,0,1"))
      (rule "nnf_imp2or" (formula "8") (term "0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
      (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "16") (ifseqformula "3"))
      (rule "replaceKnownSelect_taclet10_0" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "18"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "18"))
      (rule "notLeft" (formula "17"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "17"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "17"))
      (rule "notLeft" (formula "16"))
      (rule "narrowSelectArrayType" (formula "8") (term "1,0,1,0") (ifseqformula "1") (ifseqformula "24"))
      (rule "nonNull" (formula "18") (inst "i=i"))
      (rule "greater_literals" (formula "18") (term "0,1"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "sub_literals" (formula "18") (term "2,1,0,1"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "18"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "17") (inst "i=i"))
      (rule "greater_literals" (formula "17") (term "0,1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "sub_literals" (formula "17") (term "2,1,0,1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "16") (inst "i=i"))
      (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "greater_literals" (formula "16") (term "0,1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "16"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_6"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "3")))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
      (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_6"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "3")))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
      (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_6"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "3")))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
      (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_6"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "3")))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
      (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_6"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "3")))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
      (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "18") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_6"))
      (rule "applyEq" (formula "27") (term "0") (ifseqformula "18"))
      (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "18"))
      (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "38")) (ifInst ""  (formula "2")))
      (rule "elementOfUnion" (formula "18") (term "0,0"))
      (rule "elementOfSingleton" (formula "18") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "38")))
      (rule "elementOfSingleton" (formula "18") (term "0,0"))
      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "38")))
      (rule "applyEqReverse" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "18"))
      (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "18"))
      (rule "applyEqReverse" (formula "19") (term "1,0,0,1,0") (ifseqformula "18"))
      (rule "hideAuxiliaryEq" (formula "18"))
      (rule "pullOutSelect" (formula "17") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_6"))
      (rule "applyEq" (formula "18") (term "0,1,1,1,0,0") (ifseqformula "17"))
      (rule "applyEq" (formula "26") (term "0") (ifseqformula "17"))
      (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "38")) (ifInst ""  (formula "2")))
      (rule "elementOfUnion" (formula "17") (term "0,0"))
      (rule "elementOfSingleton" (formula "17") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "38")))
      (rule "elementOfSingleton" (formula "17") (term "0,0"))
      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "38")))
      (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "18") (term "0,1,1,1,0,0") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "18") (term "1,0,0,1,0") (ifseqformula "17"))
      (rule "hideAuxiliaryEq" (formula "17"))
      (rule "pullOutSelect" (formula "16") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_6"))
      (rule "applyEq" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "25") (term "0") (ifseqformula "16"))
      (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "38")) (ifInst ""  (formula "2")))
      (rule "elementOfUnion" (formula "16") (term "0,0"))
      (rule "elementOfSingleton" (formula "16") (term "1,0,0"))
      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "38")))
      (rule "elementOfSingleton" (formula "16") (term "0,0"))
      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "38")))
      (rule "applyEqReverse" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "16"))
      (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "16"))
      (rule "applyEqReverse" (formula "17") (term "1,0,0,1,0") (ifseqformula "16"))
      (rule "hideAuxiliaryEq" (formula "16"))
      (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "9") (ifseqformula "3"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "11"))
      (rule "notLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "10"))
      (rule "notLeft" (formula "9"))
      (rule "nonNull" (formula "11") (inst "i=i"))
      (rule "greater_literals" (formula "11") (term "0,1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "28")))
      (rule "sub_literals" (formula "11") (term "2,1,0"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "28"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "10") (inst "i=i"))
      (rule "sub_literals" (formula "10") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "27")))
      (rule "greater_literals" (formula "10") (term "0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "27"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "9") (inst "i=i"))
      (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "26")))
      (rule "greater_literals" (formula "9") (term "0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "26"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "20") (term "0"))
      (rule "nnf_imp2or" (formula "19") (term "0"))
      (rule "nnf_imp2or" (formula "18") (term "0"))
      (rule "nnf_imp2or" (formula "11") (term "0"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (ifseqformula "3"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "25"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "25"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "26"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "26"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "24"))
      (rule "notLeft" (formula "24"))
      (rule "nonNull" (formula "26") (inst "i=i"))
      (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "greater_literals" (formula "26") (term "0,1"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "notLeft" (formula "26"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "25") (inst "i=i"))
      (rule "greater_literals" (formula "25") (term "0,1"))
      (builtin "One Step Simplification" (formula "25"))
      (rule "sub_literals" (formula "25") (term "2,1,0,1"))
      (builtin "One Step Simplification" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "24") (inst "i=i"))
      (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "24"))
      (rule "greater_literals" (formula "24") (term "0,1"))
      (builtin "One Step Simplification" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "24"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_7"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
      (rule "replaceKnownSelect_taclet10_2" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_3" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_7"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
      (rule "replaceKnownSelect_taclet10_4" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_5" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_7"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
      (rule "replaceKnownSelect_taclet10_6" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_7" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_7"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
      (rule "replaceKnownSelect_taclet10_8" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_7"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
      (rule "replaceKnownSelect_taclet10_0" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_7"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
      (rule "replaceKnownSelect_taclet10_10" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_7"))
      (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
      (rule "applyEq" (formula "31") (term "0") (ifseqformula "26"))
      (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "45")))
      (rule "replaceKnownSelect_taclet10_12" (formula "26") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_13" (formula "26") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,0") (ifseqformula "13"))
      (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
      (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
      (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "26"))
      (rule "hideAuxiliaryEq" (formula "26"))
      (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_7"))
      (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
      (rule "applyEq" (formula "30") (term "0") (ifseqformula "25"))
      (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "44")))
      (rule "replaceKnownSelect_taclet10_14" (formula "25") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_15" (formula "25") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,0") (ifseqformula "13"))
      (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "25"))
      (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "25"))
      (rule "hideAuxiliaryEq" (formula "25"))
      (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_7"))
      (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "29") (term "0") (ifseqformula "24"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "43")))
      (rule "replaceKnownSelect_taclet10_16" (formula "24") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_17" (formula "24") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,0,0") (ifseqformula "13"))
      (rule "replace_known_left" (formula "24") (term "0,0,0,0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "24"))
      (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
      (rule "hideAuxiliaryEq" (formula "24"))
      (rule "nnf_imp2or" (formula "9") (term "0"))
      (rule "commute_or_2" (formula "17") (term "0"))
      (rule "nnf_notAnd" (formula "20") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
      (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
      (rule "mul_literals" (formula "20") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
      (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "18") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
      (rule "mul_literals" (formula "18") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "8") (term "0"))
      (rule "nnf_imp2or" (formula "26") (term "0"))
      (rule "nnf_imp2or" (formula "25") (term "0"))
      (rule "methodCallParamThrow" (formula "44") (term "1"))
      (rule "nnf_imp2or" (formula "24") (term "0"))
      (rule "nnf_notAnd" (formula "9") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
      (rule "arrayLengthIsAShort" (formula "16") (term "1,1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthNotNegative" (formula "16") (term "1,1"))
      (rule "arrayLengthNotNegative" (formula "17") (term "1,0"))
      (rule "arrayLengthIsAShort" (formula "18") (term "1,0"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "nnf_notAnd" (formula "28") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
      (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
      (rule "mul_literals" (formula "28") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "27") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
      (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
      (rule "mul_literals" (formula "27") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "26") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
      (rule "arrayLengthIsAShort" (formula "7") (term "1,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "arrayLengthNotNegative" (formula "7") (term "1,0"))
      (rule "commute_or_2" (formula "23") (term "0"))
      (rule "commute_or" (formula "20") (term "0,0"))
      (rule "commute_or_2" (formula "22") (term "0"))
      (rule "commute_or_2" (formula "21") (term "0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "commute_or_2" (formula "11") (term "0"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "commute_or" (formula "9") (term "0,0"))
      (rule "commute_or_2" (formula "29") (term "0"))
      (rule "commute_or_2" (formula "28") (term "0"))
      (rule "commute_or_2" (formula "27") (term "0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "commute_or" (formula "24") (term "0,0"))
      (rule "commute_or" (formula "23") (term "0,0"))
      (rule "commute_or" (formula "22") (term "0,0"))
      (rule "commute_or" (formula "13") (term "0,0"))
      (rule "commute_or" (formula "12") (term "0,0"))
      (rule "commute_or" (formula "11") (term "0,0"))
      (rule "commute_or" (formula "30") (term "0,0"))
      (rule "commute_or" (formula "29") (term "0,0"))
      (rule "commute_or" (formula "28") (term "0,0"))
      (rule "tryCatchThrow" (formula "48") (term "1"))
      (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
      (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
      (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "21") (term "0,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,1,0,0,0"))
      (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,1,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,1,1,0,0,0"))
      (rule "add_zero_left" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,0,0,0"))
      (rule "commute_or" (formula "21") (term "0,0"))
      (rule "commute_or_2" (formula "21") (term "0"))
      (rule "commute_or_2" (formula "21") (term "0,1,0"))
      (rule "commute_or" (formula "21") (term "1,1,0"))
      (rule "commute_or" (formula "21") (term "0,0,1,0"))
      (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
      (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
      (rule "ifthenelse_to_or_right" (formula "10") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
      (rule "commute_or" (formula "10") (term "0,0"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "commute_or_2" (formula "10") (term "0,1,0"))
      (rule "commute_or" (formula "10") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
      (rule "commute_or" (formula "10") (term "0,0,1,0"))
      (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
      (rule "commute_or" (formula "21") (term "1,1,1,0"))
      (rule "cnf_rightDist" (formula "21") (term "0"))
      (rule "distr_forallAnd" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "commute_or" (formula "22") (term "0"))
      (rule "commute_or_2" (formula "21") (term "0"))
      (rule "commute_or_2" (formula "22") (term "0,1,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0,1,0"))
      (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0"))
      (rule "qeq_literals" (formula "22") (term "1,0,0,1,0"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "commute_or_2" (formula "22") (term "0"))
      (rule "shift_paren_or" (formula "21") (term "0,0"))
      (rule "shift_paren_or" (formula "22") (term "0,0"))
      (rule "shift_paren_or" (formula "21") (term "0,0,0"))
      (rule "shift_paren_or" (formula "22") (term "0,0,0"))
      (rule "commute_or" (formula "21") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "commute_or" (formula "10") (term "0,0,1,1,0"))
      (rule "shift_paren_or" (formula "22") (term "0,0,0,0"))
      (rule "commute_or" (formula "22") (term "0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
      (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0,1,1,0"))
      (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "shift_paren_or" (formula "10") (term "1,1,0"))
      (rule "commute_or" (formula "10") (term "0,1,1,0"))
      (rule "cnf_rightDist" (formula "10") (term "0"))
      (rule "distr_forallAnd" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "shift_paren_or" (formula "11") (term "0"))
      (rule "commute_or_2" (formula "11") (term "0,0"))
      (rule "shift_paren_or" (formula "10") (term "0,0"))
      (rule "commute_or_2" (formula "11") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "shift_paren_or" (formula "10") (term "0,0,0"))
      (rule "commute_or" (formula "10") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "ifElseUnfold" (formula "50") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "50") (term "1") (newnames "x_2"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1,0") (ifseqformula "2"))
      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "38"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "equality_comparison_simple" (formula "51") (term "1"))
      (builtin "One Step Simplification" (formula "51"))
      (rule "replace_known_right" (formula "51") (term "0,0,1,0") (ifseqformula "46"))
      (builtin "One Step Simplification" (formula "51"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,0") (ifseqformula "2"))
      (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "44"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "2"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "ineffectiveCast3" (formula "46") (term "1,0") (ifseqformula "9"))
      (rule "applyEq" (formula "13") (term "1,1,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "13") (term "1,1,1,1,0,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "12") (term "1,1,0,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "12") (term "1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "48") (term "1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "14") (term "1,1,0,1,1,1,0,0,0") (ifseqformula "1"))
      (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0,0"))
      (rule "eqSymm" (formula "26") (term "1,1,0,0,0,0"))
      (rule "eqSymm" (formula "26") (term "1,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0"))
      (rule "commute_or" (formula "26") (term "0,0,0"))
      (rule "commute_or_2" (formula "26") (term "0,0"))
      (rule "commute_or_2" (formula "26") (term "0"))
      (rule "commute_or" (formula "26") (term "1,1,0"))
      (rule "commute_or_2" (formula "26") (term "0,1,0"))
      (rule "commute_or" (formula "26") (term "0,0,1,0"))
      (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "26") (term "0"))
      (rule "distr_forallAnd" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "commute_or_2" (formula "26") (term "0"))
      (rule "commute_or" (formula "27") (term "0"))
      (rule "commute_or_2" (formula "26") (term "0,0"))
      (rule "commute_or" (formula "27") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "27") (term "0"))
      (rule "distr_forallAnd" (formula "27"))
      (rule "andLeft" (formula "27"))
      (rule "commute_or_2" (formula "27") (term "0"))
      (rule "shift_paren_or" (formula "28") (term "0"))
      (rule "commute_or_2" (formula "27") (term "0,0"))
      (rule "shift_paren_or" (formula "28") (term "0,0"))
      (rule "commute_or_2" (formula "28") (term "0,0,0"))
      (rule "shift_paren_or" (formula "26") (term "0,0,0"))
      (rule "shift_paren_or" (formula "27") (term "0,0,0"))
      (rule "commute_or" (formula "27") (term "0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,0"))
      (rule "add_zero_right" (formula "27") (term "1,1,0,0,0"))
      (rule "qeq_literals" (formula "27") (term "1,0,0,0"))
      (builtin "One Step Simplification" (formula "27"))
      (rule "true_left" (formula "27"))
      (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
      (rule "commute_or" (formula "26") (term "0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0,0"))
      (rule "eqSymm" (formula "13") (term "1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0"))
      (rule "commute_or" (formula "13") (term "0,0,0"))
      (rule "commute_or_2" (formula "13") (term "0,0"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "commute_or" (formula "13") (term "1,1,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "4"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "arrayLengthIsAShort" (formula "32") (term "1,1,0"))
      (builtin "One Step Simplification" (formula "32"))
      (rule "true_left" (formula "32"))
      (rule "arrayLengthNotNegative" (formula "32") (term "1,1,0"))
      (rule "arrayLengthIsAShort" (formula "31") (term "1,1,0"))
      (builtin "One Step Simplification" (formula "31"))
      (rule "true_left" (formula "31"))
      (rule "arrayLengthNotNegative" (formula "31") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "0"))
      (rule "distr_forallAnd" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "commute_or" (formula "15") (term "0"))
      (rule "shift_paren_or" (formula "14") (term "0"))
      (rule "commute_or_2" (formula "14") (term "0,0"))
      (rule "commute_or" (formula "15") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "15") (term "0"))
      (rule "distr_forallAnd" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "commute_or_2" (formula "15") (term "0"))
      (rule "shift_paren_or" (formula "16") (term "0"))
      (rule "commute_or_2" (formula "15") (term "0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0"))
      (rule "shift_paren_or" (formula "15") (term "0,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "commute_or" (formula "15") (term "0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,0,0"))
      (rule "add_zero_right" (formula "15") (term "1,1,0,0,0"))
      (rule "qeq_literals" (formula "15") (term "1,0,0,0"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "5"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "6"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "7"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "arrayLengthIsAShort" (formula "34") (term "1,1,0"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "true_left" (formula "34"))
      (rule "arrayLengthNotNegative" (formula "34") (term "1,1,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "8"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "9"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "10"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "ifElseSplit" (formula "66"))
      (branch "if x_2 true"
         (builtin "One Step Simplification" (formula "67"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_2 false"
         (builtin "One Step Simplification" (formula "67"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "arrayLengthIsAShort" (formula "19") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "arrayLengthNotNegative" (formula "19") (term "0,0,0"))
         (rule "ifElseSplit" (formula "66"))
         (branch "if exc_1 instanceof java.lang.Throwable true"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "66") (term "1") (newnames "e_2"))
            (rule "reference_type_cast" (formula "66") (term "1"))
            (branch "Normal Execution (exc_1 instanceof java.lang.Throwable)"
               (builtin "One Step Simplification" (formula "67"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "66") (term "1"))
               (builtin "One Step Simplification" (formula "66"))
               (rule "emptyModality" (formula "66") (term "1"))
               (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "61")) (ifInst ""  (formula "61")) (ifInst ""  (formula "49")))
               (rule "eqSymm" (formula "66") (term "1,0,0,1"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "66") (term "0") (ifseqformula "13"))
               (rule "replaceKnownSelect_taclet10_18" (formula "66") (term "0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_19" (formula "66") (term "0,0,1,0"))
               (rule "replaceKnownSelect_taclet10_20" (formula "66") (term "0,0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_21" (formula "66") (term "0,0,1,0,0"))
               (rule "replaceKnownSelect_taclet10_22" (formula "66") (term "0,0,1,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_23" (formula "66") (term "0,0,1,0,0,0"))
               (rule "replaceKnownSelect_taclet10_24" (formula "66") (term "0,0,1,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_30" (formula "66") (term "1,1,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_25" (formula "66") (term "0,0,1,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_31" (formula "66") (term "1,1,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_32" (formula "66") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_34" (formula "66") (term "1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_33" (formula "66") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_35" (formula "66") (term "1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_26" (formula "66") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_28" (formula "66") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_27" (formula "66") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_29" (formula "66") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "66") (term "0,1,0,0") (ifseqformula "58"))
               (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")) (ifInst ""  (formula "55")) (ifInst ""  (formula "56")) (ifInst ""  (formula "57")))
               (rule "nonNull" (formula "66") (term "1,0,0") (inst "i=i"))
               (rule "sub_literals" (formula "66") (term "2,1,0,1,1,1,0,0"))
               (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "51")))
               (rule "greater_literals" (formula "66") (term "0,1,0,0"))
               (builtin "One Step Simplification" (formula "66"))
               (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "66") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,1,0,0"))
               (rule "nonNull" (formula "66") (term "1,0") (inst "i=i"))
               (rule "greater_literals" (formula "66") (term "0,1,1,0"))
               (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "52")))
               (rule "sub_literals" (formula "66") (term "2,1,0,1,0"))
               (builtin "One Step Simplification" (formula "66"))
               (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,1,0"))
               (rule "nonNull" (formula "66") (term "0,0,0") (inst "i=i"))
               (rule "greater_literals" (formula "66") (term "0,1,0,0,0"))
               (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "50")))
               (rule "sub_literals" (formula "66") (term "2,1,0,0,0,0"))
               (builtin "One Step Simplification" (formula "66"))
               (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0,0,0"))
               (rule "nnf_imp2or" (formula "66") (term "0,1,0"))
               (rule "nnf_imp2or" (formula "66") (term "0,1,0,0"))
               (rule "nnf_imp2or" (formula "66") (term "0,0,0,0"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,0,0,1,0"))
               (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,1,0,0"))
               (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,1,0,0"))
               (rule "times_zero_1" (formula "66") (term "1,0,0,0,0,0,1,0,0"))
               (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,1,0,0"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0,0,0"))
               (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "66") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,0,0,0"))
               (rule "ifthenelse_split" (formula "19") (term "1"))
               (branch "result_0.length ≥ 1 TRUE"
                  (rule "replace_known_left" (formula "21") (term "0,1,1,0,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "replace_known_left" (formula "36") (term "0,1,1,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "replace_known_left" (formula "37") (term "0,1,1,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "37"))
                  (rule "replace_known_left" (formula "34") (term "0,1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "replace_known_left" (formula "22") (term "0,1,1,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "19"))
                  (rule "leq_literals" (formula "31") (term "0"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "commute_or_2" (formula "34") (term "0"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "commute_or_2" (formula "35") (term "0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0,0"))
                  (rule "add_literals" (formula "35") (term "1,0,1,0,0"))
                  (rule "times_zero_1" (formula "35") (term "0,1,0,0"))
                  (rule "leq_literals" (formula "35") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "commute_or_2" (formula "35") (term "0"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "commute_or_2" (formula "22") (term "0"))
                  (rule "commute_or_2" (formula "23") (term "0"))
                  (rule "commute_or_2" (formula "21") (term "0,0"))
                  (rule "commute_or_2" (formula "22") (term "0,0"))
                  (rule "commute_or_2" (formula "23") (term "0,0"))
                  (rule "commute_or_2" (formula "21") (term "0,0,0"))
                  (rule "andRight" (formula "65"))
                  (branch "Case 1"
                     (rule "andRight" (formula "65"))
                     (branch "Case 1"
                        (rule "andRight" (formula "65"))
                        (branch "Case 1"
                           (rule "allRight" (formula "65") (inst "sk=i_26"))
                           (rule "orRight" (formula "65"))
                           (rule "orRight" (formula "65"))
                           (rule "notRight" (formula "67"))
                           (rule "inEqSimp_geqRight" (formula "67"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "67"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_70"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "47"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "32"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")) (ifInst ""  (formula "6")))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "15") (ifseqformula "53"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "31") (ifseqformula "53"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")))
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "elementOfUnion" (formula "53"))
                           (rule "orRight" (formula "53"))
                           (rule "elementOfSingleton" (formula "53"))
                           (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "55")))
                           (rule "false_right" (formula "53"))
                           (rule "elementOfSingleton" (formula "53"))
                           (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "54")))
                           (rule "false_right" (formula "53"))
                           (rule "ifthenelse_split" (formula "24") (term "0"))
                           (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                              (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "24"))
                              (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "23"))
                              (rule "leq_literals" (formula "22") (term "0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_or_tautInEq3" (formula "26") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "26") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "26") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "allLeft" (formula "26") (inst "t=i_26"))
                              (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                              (rule "add_literals" (formula "26") (term "0,0,1"))
                              (rule "leq_literals" (formula "26") (term "0,1"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "26") (term "0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "closeFalse" (formula "26"))
                           )
                           (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "24"))
                              (rule "inEqSimp_geqRight" (formula "53"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0,0,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "24"))
                              (rule "closeFalse" (formula "24"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "65") (inst "sk=i_25"))
                           (rule "orRight" (formula "65"))
                           (rule "orRight" (formula "65"))
                           (rule "notRight" (formula "67"))
                           (rule "inEqSimp_geqRight" (formula "67"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "67"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_69"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "47"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "32"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")) (ifInst ""  (formula "5")))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "15") (ifseqformula "54"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "31") (ifseqformula "54"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "elementOfUnion" (formula "53"))
                           (rule "orRight" (formula "53"))
                           (rule "elementOfSingleton" (formula "53"))
                           (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "56")))
                           (rule "false_right" (formula "53"))
                           (rule "elementOfSingleton" (formula "53"))
                           (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "55")))
                           (rule "false_right" (formula "53"))
                           (rule "ifthenelse_split" (formula "24") (term "0"))
                           (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                              (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "24"))
                              (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "23"))
                              (rule "leq_literals" (formula "22") (term "0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_or_tautInEq3" (formula "26") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "26") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "26") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "allLeft" (formula "27") (inst "t=i_25"))
                              (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                              (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                              (rule "add_literals" (formula "27") (term "0,0,1"))
                              (rule "leq_literals" (formula "27") (term "0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "27") (term "0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "closeFalse" (formula "27"))
                           )
                           (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "24"))
                              (rule "inEqSimp_geqRight" (formula "53"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0,0,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "24"))
                              (rule "closeFalse" (formula "24"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "65") (inst "sk=i_24"))
                        (rule "orRight" (formula "65"))
                        (rule "orRight" (formula "65"))
                        (rule "notRight" (formula "67"))
                        (rule "inEqSimp_leqRight" (formula "66"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "67"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_68"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "47"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "32"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "7"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "32"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")) (ifInst ""  (formula "7")))
                        (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "15") (ifseqformula "55"))
                        (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "31") (ifseqformula "55"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                        (rule "ifEqualsNull" (formula "3"))
                        (rule "elementOfUnion" (formula "3") (term "0,0"))
                        (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                        (rule "elementOfSingleton" (formula "3") (term "0,0"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "elementOfUnion" (formula "53"))
                        (rule "orRight" (formula "53"))
                        (rule "elementOfSingleton" (formula "53"))
                        (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "57")))
                        (rule "false_right" (formula "53"))
                        (rule "elementOfSingleton" (formula "53"))
                        (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "56")))
                        (rule "false_right" (formula "53"))
                        (rule "ifthenelse_split" (formula "24") (term "0"))
                        (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "25"))
                           (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                           (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "24"))
                           (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "23"))
                           (rule "leq_literals" (formula "22") (term "0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "inEqSimp_or_tautInEq3" (formula "26") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0,0"))
                           (rule "add_literals" (formula "26") (term "1,0,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "0,1,0,0"))
                           (rule "leq_literals" (formula "26") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "allLeft" (formula "28") (inst "t=i_24"))
                           (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                           (rule "add_literals" (formula "28") (term "0,0,1"))
                           (rule "leq_literals" (formula "28") (term "0,1"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "28") (term "0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "closeFalse" (formula "28"))
                        )
                        (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "24"))
                           (rule "inEqSimp_geqRight" (formula "53"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "28") (term "1,1,0,0,0") (ifseqformula "25"))
                           (rule "applyEq" (formula "39") (term "1,1,0,0") (ifseqformula "25"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                           (rule "qeq_literals" (formula "24"))
                           (rule "closeFalse" (formula "24"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "65") (inst "sk=f_8"))
                     (rule "allRight" (formula "65") (inst "sk=o_8"))
                     (rule "orRight" (formula "65"))
                     (rule "orRight" (formula "65"))
                     (rule "orRight" (formula "65"))
                     (rule "pullOutSelect" (formula "68") (term "0") (inst "selectSK=f_8_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "29"))
                     (rule "eqSymm" (formula "69"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_8_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "68"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "67"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "commute_and" (formula "66"))
                     (rule "commute_and" (formula "67"))
                     (rule "ifthenelse_split" (formula "21") (term "0"))
                     (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                        (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "22"))
                        (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                        (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "21"))
                        (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "20"))
                        (rule "leq_literals" (formula "19") (term "0"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "1,0,1,0,0"))
                        (rule "times_zero_1" (formula "23") (term "0,1,0,0"))
                        (rule "leq_literals" (formula "23") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "ineffectiveCast2" (formula "9") (term "0") (ifseqformula "9"))
                        (rule "cut_direct" (formula "47") (term "1,0"))
                        (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                           (rule "instanceof_not_compatible_5" (formula "48") (term "1") (ifseqformula "47"))
                           (rule "instanceof_not_compatible_5" (formula "48") (term "0,0") (ifseqformula "47"))
                           (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "60")) (ifInst ""  (formula "60")))
                           (rule "true_left" (formula "48"))
                           (rule "cut_direct" (formula "29") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "cut_direct" (formula "43") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "true_left" (formula "44"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "57") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "58"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                                 (rule "true_left" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_split" (formula "33") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                    (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                    (rule "leq_literals" (formula "34") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "true_left" (formula "34"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "46"))
                                       (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "replace_known_right" (formula "66") (term "0,1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "47")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "66") (ifseqformula "2"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "33"))
                                    (rule "inEqSimp_geqRight" (formula "49"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "34"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "closeFalse" (formula "21"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "11"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                 (rule "true_left" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_split" (formula "33") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "33") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0"))
                                    (rule "add_literals" (formula "33") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "33") (term "0,1,0"))
                                    (rule "leq_literals" (formula "33") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "47"))
                                       (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "replace_known_right" (formula "65") (term "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "65"))
                                       (rule "false_right" (formula "65"))
                                       (rule "replace_known_right" (formula "66") (term "0,1") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "45")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "67") (ifseqformula "2"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "33"))
                                    (rule "inEqSimp_geqRight" (formula "49"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "34"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "closeFalse" (formula "21"))
                                 )
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "cut_direct" (formula "43") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "true_left" (formula "44"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "11"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                 (rule "true_left" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_split" (formula "33") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "33"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "33") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0"))
                                    (rule "add_literals" (formula "33") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "33") (term "0,1,0"))
                                    (rule "leq_literals" (formula "33") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "46"))
                                       (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "replace_known_right" (formula "66") (term "1") (ifseqformula "47"))
                                       (builtin "One Step Simplification" (formula "66"))
                                       (rule "false_right" (formula "66"))
                                       (rule "replace_known_right" (formula "66") (term "0,1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "47")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "67") (ifseqformula "2"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "33"))
                                    (rule "inEqSimp_geqRight" (formula "49"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "34"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "closeFalse" (formula "21"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                                 (rule "true_left" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_split" (formula "33") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "33"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "33") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0"))
                                    (rule "add_literals" (formula "33") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "33") (term "0,1,0"))
                                    (rule "leq_literals" (formula "33") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "47"))
                                       (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "69"))
                                       (rule "replace_known_right" (formula "68") (term "0,0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "46")))
                                       (rule "closeTrue" (formula "68"))
                                    )
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "68") (ifseqformula "2"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "33"))
                                    (rule "inEqSimp_geqRight" (formula "49"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "34"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "closeFalse" (formula "21"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "47"))
                           (rule "cut_direct" (formula "29") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "cut_direct" (formula "43") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "true_left" (formula "44"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                                 (rule "true_left" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_split" (formula "33") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "33"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                    (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                    (rule "leq_literals" (formula "34") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "true_left" (formula "34"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "47"))
                                       (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "replace_known_right" (formula "66") (term "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "66"))
                                       (rule "false_right" (formula "66"))
                                       (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "46")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "67") (ifseqformula "2"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "33"))
                                    (rule "inEqSimp_geqRight" (formula "49"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "34"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "closeFalse" (formula "21"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                                 (rule "true_left" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_split" (formula "33") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "33") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0"))
                                    (rule "add_literals" (formula "33") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "33") (term "0,1,0"))
                                    (rule "leq_literals" (formula "33") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "47"))
                                       (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "69"))
                                       (rule "replace_known_right" (formula "66") (term "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "66"))
                                       (rule "false_right" (formula "66"))
                                       (rule "replace_known_right" (formula "66") (term "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "66"))
                                       (rule "false_right" (formula "66"))
                                       (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "46")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "68") (ifseqformula "2"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "33"))
                                    (rule "inEqSimp_geqRight" (formula "49"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "34"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "closeFalse" (formula "21"))
                                 )
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "cut_direct" (formula "43") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "true_left" (formula "44"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                                 (rule "true_left" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_split" (formula "33") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                                    (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "33"))
                                    (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "33"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "34") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                    (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                    (rule "leq_literals" (formula "34") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "true_left" (formula "34"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "46"))
                                       (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "69"))
                                       (rule "replace_known_right" (formula "67") (term "1") (ifseqformula "47"))
                                       (builtin "One Step Simplification" (formula "67"))
                                       (rule "false_right" (formula "67"))
                                       (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "47"))
                                       (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "45")))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "68") (ifseqformula "2"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "33"))
                                    (rule "inEqSimp_geqRight" (formula "49"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "34"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "closeFalse" (formula "21"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "11"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                                 (rule "true_left" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_split" (formula "33") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "33") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0"))
                                    (rule "add_literals" (formula "33") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "33") (term "0,1,0"))
                                    (rule "leq_literals" (formula "33") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "47"))
                                       (rule "applyEqReverse" (formula "71") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "70"))
                                       (rule "replace_known_right" (formula "68") (term "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "68"))
                                       (rule "false_right" (formula "68"))
                                       (rule "replace_known_right" (formula "67") (term "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "67"))
                                       (rule "false_right" (formula "67"))
                                       (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "46")))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "69") (ifseqformula "2"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "33"))
                                    (rule "inEqSimp_geqRight" (formula "49"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "34"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "closeFalse" (formula "21"))
                                 )
                              )
                           )
                        )
                     )
                     (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                        (rule "eqSymm" (formula "21"))
                        (rule "inEqSimp_geqRight" (formula "50"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "21"))
                        (rule "closeFalse" (formula "21"))
                     )
                  )
               )
               (branch "result_0.length ≥ 1 FALSE"
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "50"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "50"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "replace_known_right" (formula "36") (term "0,1,1,0") (ifseqformula "50"))
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "replace_known_right" (formula "21") (term "0,1,1,0") (ifseqformula "50"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "50"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "replace_known_right" (formula "35") (term "0,1,1,0") (ifseqformula "50"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "50"))
                  (builtin "One Step Simplification" (formula "33"))
                  (rule "inEqSimp_geqRight" (formula "50"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "31") (ifseqformula "1"))
                  (rule "applyEq" (formula "36") (term "1,1,0,0,0") (ifseqformula "31"))
                  (rule "applyEq" (formula "37") (term "1,1,1,0,0,0") (ifseqformula "31"))
                  (rule "add_zero_right" (formula "37") (term "1,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "37"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "31"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "37") (term "1,1,0,0,0") (ifseqformula "30"))
                  (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                  (rule "qeq_literals" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0"))
                  (rule "add_zero_left" (formula "19") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "33") (term "0"))
                  (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                  (rule "add_literals" (formula "33") (term "0,0,0"))
                  (rule "add_zero_left" (formula "33") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0,0"))
                  (rule "add_zero_right" (formula "34") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "34") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "true_left" (formula "34"))
                  (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,0"))
                  (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "35") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "commute_or_2" (formula "21") (term "0"))
                  (rule "commute_or_2" (formula "22") (term "0"))
                  (rule "commute_or_2" (formula "20") (term "0,0"))
                  (rule "commute_or_2" (formula "34") (term "0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                  (rule "add_literals" (formula "34") (term "1,1,0,0"))
                  (rule "qeq_literals" (formula "34") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "true_left" (formula "34"))
                  (rule "commute_or_2" (formula "21") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,0"))
                  (rule "add_zero_right" (formula "21") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "21") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "commute_or_2" (formula "21") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,0"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "21") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "andRight" (formula "61"))
                  (branch "Case 1"
                     (rule "commute_or_2" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_or_tautInEq0" (formula "20") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "20") (term "1,1,0,0,0,0"))
                     (rule "qeq_literals" (formula "20") (term "1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "andRight" (formula "60"))
                     (branch "Case 1"
                        (rule "andRight" (formula "60"))
                        (branch "Case 1"
                           (rule "allRight" (formula "60") (inst "sk=i_23"))
                           (rule "orRight" (formula "60"))
                           (rule "orRight" (formula "60"))
                           (rule "notRight" (formula "62"))
                           (rule "inEqSimp_geqRight" (formula "62"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "62"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_67"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "6")))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "27") (ifseqformula "48"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "15") (ifseqformula "48"))
                           (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                           (rule "allLeft" (formula "24") (inst "t=i_23"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "leq_literals" (formula "24") (term "0,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "24") (term "0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "closeFalse" (formula "24"))
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "60") (inst "sk=i_22"))
                           (rule "orRight" (formula "60"))
                           (rule "orRight" (formula "60"))
                           (rule "notRight" (formula "62"))
                           (rule "inEqSimp_geqRight" (formula "62"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "62"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_66"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "5")))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "27") (ifseqformula "49"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "15") (ifseqformula "49"))
                           (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                           (rule "allLeft" (formula "25") (inst "t=i_22"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                           (rule "add_literals" (formula "25") (term "0,0,1"))
                           (rule "leq_literals" (formula "25") (term "0,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "60") (inst "sk=i_21"))
                        (rule "orRight" (formula "60"))
                        (rule "orRight" (formula "60"))
                        (rule "notRight" (formula "62"))
                        (rule "inEqSimp_geqRight" (formula "62"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "62"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_65"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "7"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "7")))
                        (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "27") (ifseqformula "50"))
                        (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "15") (ifseqformula "50"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                        (rule "ifEqualsNull" (formula "3"))
                        (rule "elementOfUnion" (formula "3") (term "0,0"))
                        (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")))
                        (rule "elementOfSingleton" (formula "3") (term "0,0"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")))
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "elementOfUnion" (formula "48"))
                        (rule "orRight" (formula "48"))
                        (rule "elementOfSingleton" (formula "48"))
                        (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "52")))
                        (rule "false_right" (formula "48"))
                        (rule "elementOfSingleton" (formula "48"))
                        (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "51")))
                        (rule "false_right" (formula "48"))
                        (rule "allLeft" (formula "26") (inst "t=i_21"))
                        (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                        (rule "add_literals" (formula "26") (term "0,0,1"))
                        (rule "leq_literals" (formula "26") (term "0,1"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "61") (inst "sk=f_7"))
                     (rule "allRight" (formula "61") (inst "sk=o_7"))
                     (rule "orRight" (formula "61"))
                     (rule "orRight" (formula "61"))
                     (rule "orRight" (formula "61"))
                     (rule "pullOutSelect" (formula "64") (term "0") (inst "selectSK=f_7_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                     (rule "eqSymm" (formula "65"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_7_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "63"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "64"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "commute_or_2" (formula "21") (term "0,0,0"))
                     (rule "inEqSimp_or_tautInEq0" (formula "21") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,0,0,0"))
                     (rule "qeq_literals" (formula "21") (term "1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "commute_and" (formula "62"))
                     (rule "commute_and" (formula "61"))
                     (rule "cut_direct" (formula "44") (term "1"))
                     (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_1) = TRUE TRUE"
                        (rule "instanceof_not_compatible_5" (formula "45") (term "0,0") (ifseqformula "44"))
                        (rule "instanceof_not_compatible_5" (formula "45") (term "1,0") (ifseqformula "44"))
                        (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "57")) (ifInst ""  (formula "57")))
                        (rule "true_left" (formula "45"))
                        (rule "cut_direct" (formula "40") (term "0,0"))
                        (branch "CUT: exc_1.<created> = TRUE TRUE"
                           (builtin "One Step Simplification" (formula "41"))
                           (rule "true_left" (formula "41"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "ineffectiveCast2" (formula "9") (term "0") (ifseqformula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                              (rule "true_left" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "orRight" (formula "46"))
                                 (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "67"))
                                 (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "47"))
                                 (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "45")))
                                 (rule "closeTrue" (formula "66"))
                              )
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                 (rule "close" (formula "66") (ifseqformula "2"))
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "ineffectiveCast2" (formula "9") (term "0") (ifseqformula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                              (rule "true_left" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "orRight" (formula "47"))
                                 (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "68"))
                                 (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "46")))
                                 (rule "closeTrue" (formula "67"))
                              )
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                 (rule "close" (formula "67") (ifseqformula "2"))
                              )
                           )
                        )
                        (branch "CUT: exc_1.<created> = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "40"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                              (rule "true_left" (formula "1"))
                              (rule "ineffectiveCast2" (formula "9") (term "0") (ifseqformula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "orRight" (formula "47"))
                                 (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "68"))
                                 (rule "replace_known_right" (formula "67") (term "0,1") (ifseqformula "46"))
                                 (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "45")))
                                 (rule "closeTrue" (formula "67"))
                              )
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                 (rule "close" (formula "67") (ifseqformula "2"))
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                              (rule "true_left" (formula "1"))
                              (rule "ineffectiveCast2" (formula "9") (term "0") (ifseqformula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "57") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "58"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "orRight" (formula "47"))
                                 (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "69"))
                                 (rule "replace_known_right" (formula "67") (term "1") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "67"))
                                 (rule "false_right" (formula "67"))
                                 (rule "replace_known_right" (formula "66") (term "1") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "66"))
                                 (rule "false_right" (formula "66"))
                                 (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "46")))
                                 (rule "closeTrue" (formula "66"))
                              )
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                 (rule "close" (formula "68") (ifseqformula "2"))
                              )
                           )
                        )
                     )
                     (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_1) = TRUE FALSE"
                        (builtin "One Step Simplification" (formula "44"))
                        (rule "cut_direct" (formula "40") (term "0,0"))
                        (branch "CUT: exc_1.<created> = TRUE TRUE"
                           (builtin "One Step Simplification" (formula "41"))
                           (rule "true_left" (formula "41"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "ineffectiveCast2" (formula "9") (term "0") (ifseqformula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                              (rule "true_left" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "orRight" (formula "47"))
                                 (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "68"))
                                 (rule "replace_known_right" (formula "66") (term "1") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "66"))
                                 (rule "false_right" (formula "66"))
                                 (rule "replace_known_right" (formula "65") (term "1") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "65"))
                                 (rule "false_right" (formula "65"))
                                 (rule "replace_known_right" (formula "65") (term "0,0") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "46")))
                                 (rule "closeTrue" (formula "65"))
                              )
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                 (rule "close" (formula "67") (ifseqformula "2"))
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "ineffectiveCast2" (formula "9") (term "0") (ifseqformula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                              (rule "true_left" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "58"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "47"))
                                 (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "69"))
                                 (rule "replace_known_right" (formula "68") (term "0,0") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "46")))
                                 (rule "closeTrue" (formula "68"))
                              )
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                 (rule "close" (formula "68") (ifseqformula "1"))
                              )
                           )
                        )
                        (branch "CUT: exc_1.<created> = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "40"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "ineffectiveCast2" (formula "9") (term "0") (ifseqformula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                              (rule "true_left" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "57") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "58"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "orRight" (formula "47"))
                                 (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "69"))
                                 (rule "replace_known_right" (formula "68") (term "0,1") (ifseqformula "46"))
                                 (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "45")))
                                 (rule "closeTrue" (formula "68"))
                              )
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                 (rule "close" (formula "68") (ifseqformula "2"))
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "ineffectiveCast2" (formula "9") (term "0") (ifseqformula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "57") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "58"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                              (rule "true_left" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "59"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "47"))
                                 (rule "applyEqReverse" (formula "71") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "70"))
                                 (rule "replace_known_right" (formula "68") (term "1") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "68"))
                                 (rule "false_right" (formula "68"))
                                 (rule "replace_known_right" (formula "67") (term "1") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "67"))
                                 (rule "false_right" (formula "67"))
                                 (rule "replace_known_right" (formula "67") (term "0,1") (ifseqformula "46"))
                                 (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "45")))
                                 (rule "closeTrue" (formula "67"))
                              )
                              (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                 (rule "close" (formula "69") (ifseqformula "1"))
                              )
                           )
                        )
                     )
                  )
               )
            )
            (branch "ClassCastException (!(exc_1 instanceof java.lang.Throwable))"
               (builtin "One Step Simplification" (formula "66"))
               (rule "closeTrue" (formula "66"))
            )
         )
         (branch "if exc_1 instanceof java.lang.Throwable false"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Pre (checkAndRemoveTag)"
      (rule "true_left" (formula "15"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
      (rule "wellFormedAnonEQ" (formula "19") (term "0,1") (ifseqformula "10"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,1") (ifseqformula "10"))
      (rule "eqSymm" (formula "7"))
      (rule "eqSymm" (formula "13"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "17"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "15"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "replace_known_left" (formula "19") (term "1,0,1") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "12")))
      (rule "notRight" (formula "19"))
      (rule "array2seqDef" (formula "8") (term "0,0") (inst "u=u"))
      (rule "narrowSelectArrayType" (formula "8") (term "2,0,0") (ifseqformula "2") (ifseqformula "19"))
      (rule "array2seqDef" (formula "8") (term "0,1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "8") (term "1,1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "8") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "8"))
      (rule "array2seqDef" (formula "14") (term "0") (inst "u=u"))
      (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
      (rule "eqSeqDef" (formula "14") (inst "iv=iv"))
      (rule "andLeft" (formula "14"))
      (rule "lenOfSeqDef" (formula "14") (term "1"))
      (rule "polySimp_elimSub" (formula "14") (term "1,1"))
      (rule "times_zero_2" (formula "14") (term "1,1,1"))
      (rule "add_zero_right" (formula "14") (term "1,1"))
      (rule "getOfSeqDef" (formula "15") (term "1,1,0"))
      (rule "castDel" (formula "15") (term "1,1,1,0"))
      (rule "castDel" (formula "15") (term "2,1,1,0"))
      (rule "add_zero_right" (formula "15") (term "0,2,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0"))
      (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0"))
      (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0"))
      (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "15") (term "1,1,1,1,0,0"))
      (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
      (rule "getOfSeqDef" (formula "15") (term "0,1,0"))
      (rule "castDel" (formula "15") (term "2,0,1,0"))
      (rule "castDel" (formula "15") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0"))
      (rule "times_zero_2" (formula "15") (term "1,1,1,0,0,1,0"))
      (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0"))
      (rule "lenOfSeqDef" (formula "14") (term "0"))
      (rule "polySimp_elimSub" (formula "14") (term "1,0"))
      (rule "times_zero_2" (formula "14") (term "1,1,0"))
      (rule "add_zero_right" (formula "14") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1"))
      (rule "add_zero_right" (formula "14") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0"))
      (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
      (rule "apply_eq_monomials" (formula "15") (term "1,0,0,1,0,0") (ifseqformula "14"))
      (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,1,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "15") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "15") (term "1,1,1,0,0,1,0,0"))
      (rule "times_zero_1" (formula "15") (term "1,1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "15") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
      (rule "polySimp_elimOne" (formula "14") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "0,0,1,1,1,0,0"))
      (rule "eqSeqDef2" (formula "8") (inst "iv=iv") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
      (rule "ifEqualsNull" (formula "1"))
      (rule "replace_known_right" (formula "1") (term "1,1") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "elementOfUnion" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (checkAndRemoveSignature)"
   (builtin "One Step Simplification" (formula "10"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "eqSymm" (formula "7"))
   (rule "eqSymm" (formula "18") (term "0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "1,0,0,1,0,1"))
   (rule "eqSymm" (formula "12") (term "0,1"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "elementOfUnion" (formula "18") (term "0,0,0,0,1,0,1"))
   (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,0,1,0,1"))
   (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,0,1,0,1"))
   (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
   (rule "eqSymm" (formula "7"))
   (rule "array2seqDef" (formula "18") (term "0,0,1,0,0,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "18") (term "1,0,1,0,0,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "7") (term "0,1,1") (inst "u=u"))
   (rule "array2seqDef" (formula "7") (term "0,1") (inst "u=u"))
   (rule "eqSymm" (formula "7"))
   (rule "narrowSelectArrayType" (formula "7") (term "2,0,0") (ifseqformula "1") (ifseqformula "17"))
   (rule "eqSymm" (formula "7"))
   (rule "eqSeqDef" (formula "18") (term "0,1,0,0,0,1") (inst "iv=iv"))
   (rule "getOfSeqDef" (formula "18") (term "0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "18") (term "1,0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "18") (term "2,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "18") (term "0,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "18") (term "1,1,1,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "18") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "18") (term "1,1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "getOfSeqDef" (formula "18") (term "0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "18") (term "2,0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "18") (term "1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "18") (term "0,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "18") (term "1,1,1,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "0,0,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "18") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "array2seqDef" (formula "7") (term "1,1,1") (inst "u=u"))
   (rule "eqSeqDef2" (formula "7") (inst "iv=iv") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "nnf_imp2or" (formula "17") (term "0,1,0,1,0,0,0,1"))
   (rule "nnf_notAnd" (formula "17") (term "0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0,1,0,0,0,1"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,0,1,0,0,0,1"))
   (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "Definition_axiom_for_signerPre_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "6"))
   (rule "eqSymm" (formula "7"))
   (rule "array2seqDef" (formula "7") (term "0") (inst "u=u"))
   (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
   (rule "narrowSelectArrayType" (formula "7") (term "2,1") (ifseqformula "1") (ifseqformula "16"))
   (rule "eqSeqDef" (formula "7") (inst "iv=iv"))
   (rule "andLeft" (formula "7"))
   (rule "lenOfSeqDef" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "1,1,1,1,0,0"))
   (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
   (rule "lenOfSeqDef" (formula "7") (term "1"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1"))
   (rule "times_zero_2" (formula "7") (term "1,1,1"))
   (rule "add_zero_right" (formula "7") (term "1,1"))
   (rule "getOfSeqDef" (formula "8") (term "1,1,0"))
   (rule "castDel" (formula "8") (term "1,1,1,0"))
   (rule "castDel" (formula "8") (term "2,1,1,0"))
   (rule "add_zero_right" (formula "8") (term "0,2,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
   (rule "times_zero_2" (formula "8") (term "1,1,1,0,1,1,0"))
   (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
   (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
   (rule "castDel" (formula "8") (term "2,0,1,0"))
   (rule "castDel" (formula "8") (term "1,0,1,0"))
   (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "1,1,1,0,0,1,0"))
   (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0"))
   (rule "lenOfSeqDef" (formula "7") (term "0"))
   (rule "polySimp_elimSub" (formula "7") (term "1,0"))
   (rule "times_zero_2" (formula "7") (term "1,1,0"))
   (rule "add_zero_right" (formula "7") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
   (rule "add_zero_right" (formula "7") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "9") (ifseqformula "3"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "11"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "11"))
   (rule "notLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "9"))
   (rule "notLeft" (formula "9"))
   (rule "narrowSelectArrayType" (formula "8") (term "1,0,1,0") (ifseqformula "1") (ifseqformula "18"))
   (rule "nonNull" (formula "11") (inst "i=i"))
   (rule "greater_literals" (formula "11") (term "0,1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "sub_literals" (formula "11") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "17"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "10") (inst "i=i"))
   (rule "sub_literals" (formula "10") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "greater_literals" (formula "10") (term "0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "17"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "9") (inst "i=i"))
   (rule "greater_literals" (formula "9") (term "0,1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "sub_literals" (formula "9") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "9"))
   (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "17"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "15") (ifseqformula "3"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "notLeft" (formula "15"))
   (rule "nonNull" (formula "17") (inst "i=i"))
   (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "greater_literals" (formula "17") (term "0,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "17"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "16") (inst "i=i"))
   (rule "greater_literals" (formula "16") (term "0,1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "sub_literals" (formula "16") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "16"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "15") (inst "i=i"))
   (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "greater_literals" (formula "15") (term "0,1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "15"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "3")))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
   (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
   (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "3")))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
   (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "3")))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
   (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "3")))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
   (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")) (ifInst ""  (formula "3")))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
   (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "17") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_0"))
   (rule "applyEq" (formula "18") (term "0,1,1,1,0,0") (ifseqformula "17"))
   (rule "applyEq" (formula "22") (term "0") (ifseqformula "17"))
   (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "35")) (ifInst ""  (formula "2")))
   (rule "elementOfUnion" (formula "17") (term "0,0"))
   (rule "elementOfSingleton" (formula "17") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "35")))
   (rule "elementOfSingleton" (formula "17") (term "0,0"))
   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "35")))
   (rule "applyEqReverse" (formula "18") (term "0,1,1,1,0,0") (ifseqformula "17"))
   (rule "applyEqReverse" (formula "18") (term "1,0,0,1,0") (ifseqformula "17"))
   (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "17"))
   (rule "hideAuxiliaryEq" (formula "17"))
   (rule "pullOutSelect" (formula "16") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_0"))
   (rule "applyEq" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "16"))
   (rule "applyEq" (formula "21") (term "0") (ifseqformula "16"))
   (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "34")) (ifInst ""  (formula "2")))
   (rule "elementOfUnion" (formula "16") (term "0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0"))
   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "34")))
   (rule "elementOfSingleton" (formula "16") (term "0,0"))
   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "34")))
   (rule "applyEqReverse" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "16"))
   (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "16"))
   (rule "applyEqReverse" (formula "17") (term "1,0,0,1,0") (ifseqformula "16"))
   (rule "hideAuxiliaryEq" (formula "16"))
   (rule "pullOutSelect" (formula "15") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_0"))
   (rule "applyEq" (formula "16") (term "0,1,1,1,0,0") (ifseqformula "15"))
   (rule "applyEq" (formula "20") (term "0") (ifseqformula "15"))
   (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "33")) (ifInst ""  (formula "2")))
   (rule "elementOfUnion" (formula "15") (term "0,0"))
   (rule "elementOfSingleton" (formula "15") (term "1,0,0"))
   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "33")))
   (rule "elementOfSingleton" (formula "15") (term "0,0"))
   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "33")))
   (rule "applyEqReverse" (formula "16") (term "1,0,0,1,0") (ifseqformula "15"))
   (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "15"))
   (rule "applyEqReverse" (formula "16") (term "0,1,1,1,0,0") (ifseqformula "15"))
   (rule "hideAuxiliaryEq" (formula "15"))
   (rule "nnf_imp2or" (formula "17") (term "0"))
   (rule "nnf_imp2or" (formula "16") (term "0"))
   (rule "commute_or_2" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "15") (term "0"))
   (rule "methodCallParamThrow" (formula "34") (term "1"))
   (rule "nnf_notAnd" (formula "17") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
   (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
   (rule "mul_literals" (formula "17") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0"))
   (rule "commute_or_2" (formula "11") (term "0"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "commute_or_2" (formula "9") (term "0"))
   (rule "arrayLengthNotNegative" (formula "7") (term "1,1"))
   (rule "arrayLengthIsAShort" (formula "8") (term "1,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "arrayLengthIsAShort" (formula "8") (term "1,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "arrayLengthNotNegative" (formula "8") (term "1,0"))
   (rule "commute_or_2" (formula "19") (term "0"))
   (rule "commute_or" (formula "10") (term "0,0"))
   (rule "commute_or_2" (formula "18") (term "0"))
   (rule "commute_or_2" (formula "17") (term "0"))
   (rule "commute_or" (formula "13") (term "0,0"))
   (rule "commute_or" (formula "12") (term "0,0"))
   (rule "commute_or" (formula "11") (term "0,0"))
   (rule "commute_or" (formula "19") (term "0,0"))
   (rule "commute_or" (formula "18") (term "0,0"))
   (rule "commute_or" (formula "17") (term "0,0"))
   (rule "tryCatchThrow" (formula "36") (term "1"))
   (rule "ifthenelse_to_or_right" (formula "10") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
   (rule "commute_or" (formula "10") (term "0,0"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "commute_or" (formula "10") (term "1,1,0"))
   (rule "commute_or_2" (formula "10") (term "0,1,0"))
   (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
   (rule "commute_or" (formula "10") (term "0,0,1,0"))
   (rule "commute_or" (formula "10") (term "0,0,1,1,0"))
   (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
   (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
   (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,1,0"))
   (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "shift_paren_or" (formula "10") (term "1,1,0"))
   (rule "commute_or" (formula "10") (term "0,1,1,0"))
   (rule "cnf_rightDist" (formula "10") (term "0"))
   (rule "distr_forallAnd" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "shift_paren_or" (formula "11") (term "0"))
   (rule "commute_or_2" (formula "11") (term "0,0"))
   (rule "shift_paren_or" (formula "10") (term "0,0"))
   (rule "commute_or_2" (formula "11") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "shift_paren_or" (formula "10") (term "0,0,0"))
   (rule "commute_or" (formula "10") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "ifthenelse_to_or_left" (formula "10") (term "0,0,0,0"))
   (rule "eqSymm" (formula "10") (term "1,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0,0"))
   (rule "commute_or" (formula "10") (term "0,0,0"))
   (rule "commute_or_2" (formula "10") (term "0,0"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "commute_or" (formula "10") (term "1,1,0"))
   (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
   (rule "cnf_rightDist" (formula "10") (term "0"))
   (rule "distr_forallAnd" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "commute_or" (formula "11") (term "0"))
   (rule "shift_paren_or" (formula "10") (term "0"))
   (rule "commute_or_2" (formula "10") (term "0,0"))
   (rule "commute_or" (formula "11") (term "1,1,0"))
   (rule "cnf_rightDist" (formula "11") (term "0"))
   (rule "distr_forallAnd" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "commute_or_2" (formula "11") (term "0"))
   (rule "shift_paren_or" (formula "12") (term "0"))
   (rule "commute_or_2" (formula "11") (term "0,0"))
   (rule "commute_or_2" (formula "12") (term "0,0"))
   (rule "shift_paren_or" (formula "10") (term "0,0,0"))
   (rule "shift_paren_or" (formula "11") (term "0,0,0"))
   (rule "shift_paren_or" (formula "12") (term "0,0,0"))
   (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "commute_or" (formula "11") (term "0,0,0,0"))
   (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0,0,0"))
   (rule "add_zero_right" (formula "11") (term "1,1,0,0,0"))
   (rule "qeq_literals" (formula "11") (term "1,0,0,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "ifElseUnfold" (formula "38") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "38") (term "1") (newnames "x"))
   (rule "equality_comparison_simple" (formula "38") (term "1"))
   (builtin "One Step Simplification" (formula "38"))
   (rule "replace_known_right" (formula "38") (term "0,0,1,0") (ifseqformula "34"))
   (builtin "One Step Simplification" (formula "38"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
   (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "true_left" (formula "15"))
   (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0,1,1,0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
   (rule "arrayLengthIsAShort" (formula "16") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "true_left" (formula "16"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0,1,1") (ifseqformula "3"))
   (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "39"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "3"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "ineffectiveCast3" (formula "40") (term "1,1,0") (ifseqformula "9"))
   (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "16") (term "1,1,0,0,0,1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "16") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "17") (term "1,1,0,1,1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "16") (term "1,1,0,1,1,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "14") (term "1,1,0,0,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "15") (term "1,1,0,1,1,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "41") (term "1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "14") (term "1,1,0,1,1") (ifseqformula "1"))
   (rule "applyEq" (formula "15") (term "1,1,0,0,0,1,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "17") (term "1,1,0,1,1,1,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "17") (term "1,1,0,0,0,1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "15") (term "1,1,1,1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "15") (term "1,1,0,1,1,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "16") (term "1,1,0,1,1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0,1,0") (ifseqformula "5"))
   (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "36"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "0") (ifseqformula "5"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "36"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "6"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "7"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "8"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "9"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "10"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "11"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "ifElseSplit" (formula "54"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "55"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "55"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifElseSplit" (formula "54"))
      (branch "if exc_0 instanceof java.lang.Throwable true"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
         (rule "true_left" (formula "1"))
         (rule "variableDeclaration" (formula "54") (term "1") (newnames "e"))
         (rule "reference_type_cast" (formula "54") (term "1"))
         (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
            (builtin "One Step Simplification" (formula "55"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "54") (term "1"))
            (builtin "One Step Simplification" (formula "54"))
            (rule "emptyModality" (formula "54") (term "1"))
            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "50")) (ifInst ""  (formula "50")) (ifInst ""  (formula "38")))
            (rule "eqSymm" (formula "54") (term "1,0,0,1"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "54") (term "0") (ifseqformula "14"))
            (rule "replaceKnownSelect_taclet1_0" (formula "54") (term "0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "54") (term "0,0,1,0"))
            (rule "replaceKnownSelect_taclet1_2" (formula "54") (term "0,0,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "54") (term "0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet1_4" (formula "54") (term "0,0,1,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "54") (term "0,0,1,0,0,0"))
            (rule "replaceKnownSelect_taclet1_12" (formula "54") (term "1,1,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_6" (formula "54") (term "0,0,1,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_13" (formula "54") (term "1,1,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_7" (formula "54") (term "0,0,1,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_14" (formula "54") (term "1,1,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_16" (formula "54") (term "1,1,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_15" (formula "54") (term "1,1,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_17" (formula "54") (term "1,1,0,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_8" (formula "54") (term "0,0,1,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_10" (formula "54") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_9" (formula "54") (term "0,0,1,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_11" (formula "54") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "54") (term "0,1,0,0,0") (ifseqformula "45"))
            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "43")) (ifInst ""  (formula "42")) (ifInst ""  (formula "44")) (ifInst ""  (formula "47")) (ifInst ""  (formula "46")))
            (rule "nonNull" (formula "54") (term "1,0,0") (inst "i=i"))
            (rule "sub_literals" (formula "54") (term "2,1,0,1,1,1,0,0"))
            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "40")))
            (rule "greater_literals" (formula "54") (term "0,1,0,0"))
            (builtin "One Step Simplification" (formula "54"))
            (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "54") (term "0,1,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,1,0,0"))
            (rule "nonNull" (formula "54") (term "0,0,0") (inst "i=i"))
            (rule "sub_literals" (formula "54") (term "2,1,0,1,1,0,0,0"))
            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "39")))
            (rule "greater_literals" (formula "54") (term "0,0,0,0"))
            (builtin "One Step Simplification" (formula "54"))
            (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,0,0,0"))
            (rule "nonNull" (formula "54") (term "1,0") (inst "i=i"))
            (rule "greater_literals" (formula "54") (term "0,1,1,0"))
            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "41")))
            (rule "sub_literals" (formula "54") (term "2,1,0,1,0"))
            (builtin "One Step Simplification" (formula "54"))
            (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "54") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,1,0"))
            (rule "nnf_imp2or" (formula "54") (term "0,1,0"))
            (rule "nnf_imp2or" (formula "54") (term "0,0,0,0"))
            (rule "nnf_imp2or" (formula "54") (term "0,1,0,0"))
            (rule "nnf_notAnd" (formula "54") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "54") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "54") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "54") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "54") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "54") (term "1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "54") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "54") (term "1,0,0,0,1,0"))
            (rule "nnf_notAnd" (formula "54") (term "0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "54") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "54") (term "0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "54") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "54") (term "0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "54") (term "1,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "54") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "54") (term "1,0,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "54") (term "0,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "54") (term "0,0,0,1,0,0"))
            (rule "mul_literals" (formula "54") (term "1,0,0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "54") (term "0,0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "0,0,0,1,0,0"))
            (rule "mul_literals" (formula "54") (term "1,0,0,0,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "54") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "54") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_zero_left" (formula "54") (term "0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0,1,0,0"))
            (rule "andRight" (formula "54"))
            (branch "Case 1"
               (rule "andRight" (formula "54"))
               (branch "Case 1"
                  (rule "andRight" (formula "54"))
                  (branch "Case 1"
                     (rule "allRight" (formula "54") (inst "sk=i_2"))
                     (rule "orRight" (formula "54"))
                     (rule "orRight" (formula "54"))
                     (rule "notRight" (formula "56"))
                     (rule "inEqSimp_geqRight" (formula "56"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "56"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "37"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "43")) (ifInst ""  (formula "5")))
                     (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "36") (ifseqformula "43"))
                     (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "43"))
                     (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                     (rule "ifEqualsNull" (formula "3"))
                     (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                     (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "43")))
                     (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "43")))
                     (rule "elementOfUnion" (formula "3") (term "0,0"))
                     (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "43")))
                     (rule "elementOfSingleton" (formula "3") (term "0,0"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "43")))
                     (rule "ifthenelse_split" (formula "26") (term "1"))
                     (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "30") (term "0,1,1,0") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "replace_known_left" (formula "29") (term "0,1,1,0") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "26"))
                        (rule "leq_literals" (formula "22") (term "0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "commute_or_2" (formula "29") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,0,0"))
                        (rule "add_literals" (formula "29") (term "1,0,1,0,0"))
                        (rule "times_zero_1" (formula "29") (term "0,1,0,0"))
                        (rule "leq_literals" (formula "29") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "commute_or_2" (formula "28") (term "0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "commute_or_2" (formula "27") (term "0,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "ifthenelse_split" (formula "26") (term "0"))
                        (branch "self.unsigned.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "applyEq" (formula "29") (term "1,1,1,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                           (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "25"))
                           (rule "leq_literals" (formula "22") (term "0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "inEqSimp_or_tautInEq3" (formula "27") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                           (rule "add_literals" (formula "27") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "27") (term "0,1,0"))
                           (rule "leq_literals" (formula "27") (term "1,0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "allLeft" (formula "28") (inst "t=i_2"))
                           (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                           (rule "add_literals" (formula "28") (term "0,0,1"))
                           (rule "leq_literals" (formula "28") (term "0,1"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "self.unsigned.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "26"))
                           (rule "inEqSimp_geqRight" (formula "42"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "26"))
                           (rule "closeFalse" (formula "26"))
                        )
                     )
                     (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "replace_known_right" (formula "28") (term "0,1,1,0") (ifseqformula "43"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "replace_known_right" (formula "29") (term "0,1,1,0") (ifseqformula "43"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_right" (formula "27") (term "0,1,1,0,0") (ifseqformula "43"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_geqRight" (formula "43"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "1"))
                        (rule "applyEq" (formula "30") (term "1,1,0,0,0") (ifseqformula "23"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                        (rule "qeq_literals" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "applyEq" (formula "30") (term "1,1,1,0,0,0") (ifseqformula "23"))
                        (rule "add_zero_right" (formula "30") (term "1,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "27") (term "1,1,0,0,0,0") (ifseqformula "22"))
                        (rule "inEqSimp_notGeq" (formula "26") (term "0"))
                        (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0"))
                        (rule "add_zero_left" (formula "26") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                        (rule "qeq_literals" (formula "28") (term "1,0,0,0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "1,1,0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "commute_or_2" (formula "27") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "27") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "allLeft" (formula "28") (inst "t=i_2"))
                        (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                        (rule "add_literals" (formula "28") (term "0,0,1"))
                        (rule "leq_literals" (formula "28") (term "0,1"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "28") (term "0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "closeFalse" (formula "28"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "54") (inst "sk=i_1"))
                     (rule "orRight" (formula "54"))
                     (rule "orRight" (formula "54"))
                     (rule "notRight" (formula "56"))
                     (rule "inEqSimp_geqRight" (formula "56"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "56"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "37"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                     (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "36") (ifseqformula "44"))
                     (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "44"))
                     (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                     (rule "ifEqualsNull" (formula "3"))
                     (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                     (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")))
                     (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")))
                     (rule "elementOfUnion" (formula "3") (term "0,0"))
                     (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")))
                     (rule "elementOfSingleton" (formula "3") (term "0,0"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")))
                     (rule "ifthenelse_split" (formula "26") (term "1"))
                     (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "30") (term "0,1,1,0") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "replace_known_left" (formula "29") (term "0,1,1,0") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "26"))
                        (rule "leq_literals" (formula "22") (term "0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "commute_or_2" (formula "29") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,0,0"))
                        (rule "add_literals" (formula "29") (term "1,0,1,0,0"))
                        (rule "times_zero_1" (formula "29") (term "0,1,0,0"))
                        (rule "leq_literals" (formula "29") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "commute_or_2" (formula "28") (term "0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "commute_or_2" (formula "27") (term "0,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "ifthenelse_split" (formula "26") (term "0"))
                        (branch "self.unsigned.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "applyEq" (formula "29") (term "1,1,1,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                           (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "25"))
                           (rule "leq_literals" (formula "22") (term "0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "inEqSimp_or_tautInEq3" (formula "27") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                           (rule "add_literals" (formula "27") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "27") (term "0,1,0"))
                           (rule "leq_literals" (formula "27") (term "1,0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "allLeft" (formula "30") (inst "t=i_1"))
                           (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                           (rule "add_literals" (formula "30") (term "0,0,1"))
                           (rule "leq_literals" (formula "30") (term "0,1"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "30"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "self.unsigned.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "26"))
                           (rule "inEqSimp_geqRight" (formula "42"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "26"))
                           (rule "closeFalse" (formula "26"))
                        )
                     )
                     (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "replace_known_right" (formula "28") (term "0,1,1,0") (ifseqformula "43"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "replace_known_right" (formula "29") (term "0,1,1,0") (ifseqformula "43"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_right" (formula "27") (term "0,1,1,0,0") (ifseqformula "43"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_geqRight" (formula "43"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "1"))
                        (rule "applyEq" (formula "30") (term "1,1,0,0,0") (ifseqformula "23"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                        (rule "qeq_literals" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "applyEq" (formula "30") (term "1,1,1,0,0,0") (ifseqformula "23"))
                        (rule "add_zero_right" (formula "30") (term "1,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "27") (term "1,1,0,0,0,0") (ifseqformula "22"))
                        (rule "inEqSimp_notGeq" (formula "26") (term "0"))
                        (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0"))
                        (rule "add_zero_left" (formula "26") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                        (rule "qeq_literals" (formula "28") (term "1,0,0,0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "1,1,0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "commute_or_2" (formula "27") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "27") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "allLeft" (formula "30") (inst "t=i_1"))
                        (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                        (rule "add_literals" (formula "30") (term "0,0,1"))
                        (rule "leq_literals" (formula "30") (term "0,1"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "30") (term "0"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "closeFalse" (formula "30"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "54") (inst "sk=i_0"))
                  (rule "orRight" (formula "54"))
                  (rule "notRight" (formula "55"))
                  (rule "orRight" (formula "55"))
                  (rule "inEqSimp_leqRight" (formula "55"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "56"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "37"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")) (ifInst ""  (formula "7")))
                  (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "36") (ifseqformula "45"))
                  (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "45"))
                  (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                  (rule "ifEqualsNull" (formula "3"))
                  (rule "elementOfUnion" (formula "3") (term "0,0,1"))
                  (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")))
                  (rule "elementOfSingleton" (formula "3") (term "0,0,1"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")))
                  (rule "elementOfUnion" (formula "3") (term "0,0"))
                  (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")))
                  (rule "elementOfSingleton" (formula "3") (term "0,0"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")))
                  (rule "ifthenelse_split" (formula "26") (term "1"))
                  (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 TRUE"
                     (rule "replace_known_left" (formula "30") (term "0,1,1,0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "replace_known_left" (formula "29") (term "0,1,1,0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "26"))
                     (rule "leq_literals" (formula "22") (term "0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "commute_or_2" (formula "29") (term "0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,0,0"))
                     (rule "add_literals" (formula "29") (term "1,0,1,0,0"))
                     (rule "times_zero_1" (formula "29") (term "0,1,0,0"))
                     (rule "leq_literals" (formula "29") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "commute_or_2" (formula "28") (term "0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "commute_or_2" (formula "27") (term "0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "ifthenelse_split" (formula "26") (term "0"))
                     (branch "self.unsigned.length ≥ 1 TRUE"
                        (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "applyEq" (formula "29") (term "1,1,1,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "26"))
                        (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "25"))
                        (rule "leq_literals" (formula "22") (term "0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "inEqSimp_or_tautInEq3" (formula "27") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                        (rule "add_literals" (formula "27") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "27") (term "0,1,0"))
                        (rule "leq_literals" (formula "27") (term "1,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "allLeft" (formula "32") (inst "t=i_0"))
                        (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                        (rule "add_literals" (formula "32") (term "0,0,1"))
                        (rule "leq_literals" (formula "32") (term "0,1"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "32"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "self.unsigned.length ≥ 1 FALSE"
                        (rule "eqSymm" (formula "26"))
                        (rule "inEqSimp_geqRight" (formula "42"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "26"))
                        (rule "closeFalse" (formula "26"))
                     )
                  )
                  (branch " self.precServVerif.(verif.functionalities.pkisig.UncorruptedVerifier::log).messages.length ≥ 1 FALSE"
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "replace_known_right" (formula "28") (term "0,1,1,0") (ifseqformula "43"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "replace_known_right" (formula "27") (term "0,1,1,0,0") (ifseqformula "43"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "replace_known_right" (formula "29") (term "0,1,1,0") (ifseqformula "43"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_geqRight" (formula "43"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "1"))
                     (rule "applyEq" (formula "31") (term "1,1,1,0,0,0") (ifseqformula "23"))
                     (rule "add_zero_right" (formula "31") (term "1,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "29") (term "1,1,0,0,0") (ifseqformula "22"))
                     (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                     (rule "qeq_literals" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "applyEq" (formula "27") (term "1,1,0,0,0,0") (ifseqformula "22"))
                     (rule "inEqSimp_notGeq" (formula "26") (term "0"))
                     (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,0"))
                     (rule "add_zero_left" (formula "26") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0,0"))
                     (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "28") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "27") (term "1,1,0,0,0,0"))
                     (rule "qeq_literals" (formula "27") (term "1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "commute_or_2" (formula "27") (term "0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "27") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "allLeft" (formula "32") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                     (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                     (rule "add_literals" (formula "32") (term "0,0,1"))
                     (rule "leq_literals" (formula "32") (term "0,1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "32"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "54") (inst "sk=f_0"))
               (rule "allRight" (formula "54") (inst "sk=o_0"))
               (rule "orRight" (formula "54"))
               (rule "orRight" (formula "54"))
               (rule "orRight" (formula "54"))
               (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
               (rule "eqSymm" (formula "58"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "55"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "56"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
            (builtin "One Step Simplification" (formula "54"))
            (rule "closeTrue" (formula "54"))
         )
      )
      (branch "if exc_0 instanceof java.lang.Throwable false"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Pre (checkAndRemoveSignature)"
   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "6")) (ifInst ""  (formula "8")) (ifInst ""  (formula "10")) (ifInst ""  (formula "1")) (ifInst ""  (formula "10")))
   (rule "eqSymm" (formula "7"))
   (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "12"))
   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "10")))
   (rule "closeFalse" (formula "4"))
)
)

}
