\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jun 07 11:45:28 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=9000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Wed Jun 07 11:45:28 CEST 2017
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:checkAndGetBallots([B)].JML behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:checkAndGetBallots([B)].JML behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "777423351da3a616156ed00120c6f885d0eb8492"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "777423351da3a616156ed00120c6f885d0eb8492"))
(keyLog "2" (keyUser "mihai" ) (keyVersion "777423351da3a616156ed00120c6f885d0eb8492"))
(keyLog "3" (keyUser "mihai" ) (keyVersion "777423351da3a616156ed00120c6f885d0eb8492"))
(keyLog "4" (keyUser "mihai" ) (keyVersion "777423351da3a616156ed00120c6f885d0eb8492"))
(keyLog "5" (keyUser "mihai" ) (keyVersion "777423351da3a616156ed00120c6f885d0eb8492"))

(autoModeTime "82617")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "data,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1") (userinteraction))
(rule "assignment" (formula "2") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "2") (term "1,1") (newnames "heapBefore_checkAndGetBallots,savedHeapBefore_checkAndGetBallots") (userinteraction))
(builtin "One Step Simplification" (formula "2"))
(rule "variableDeclarationAssign" (formula "2") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "tagged_payload") (userinteraction))
(builtin "Use Operation Contract" (formula "2") (newnames "heapBefore_checkAndRemoveSignature,result_0,exc_0,heapAfter_checkAndRemoveSignature,anon_heap_checkAndRemoveSignature") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::checkAndRemoveSignature([B)].JML behavior operation contract.0"))
(branch
   (builtin "One Step Simplification" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "2"))
   (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "10") (userinteraction))
   (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "10") (userinteraction))
   (builtin "One Step Simplification" (formula "13"))
   (rule "true_left" (formula "13") (userinteraction))
   (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "12") (userinteraction))
   (rule "andLeft" (formula "13") (userinteraction))
   (rule "mSigLemma" (formula "12") (userinteraction))
   (rule "eqSymm" (formula "13") (userinteraction))
   (rule "cut" (inst "cutFormula=  verif.selectvoting.system.core.MixServer::uniqueSignedObject(heapAfter_checkAndRemoveSignature,
                                                               self,
                                                               result_0)
= TRUE") (userinteraction))
   (branch "CUT: self.uniqueSignedObject(result_0) @heapAfter_checkAndRemoveSignature = TRUE TRUE"
      (rule "Contract_axiom_for_uniqueSignedObject_in_MixServer" (formula "1") (term "0") (inst "s=s") (userinteraction))
      (rule "impLeft" (formula "1") (userinteraction))
      (branch "Case 1"
         (rule "hide_right" (formula "20") (userinteraction))
         (rule "andRight" (formula "16") (userinteraction))
         (branch "Case 1"
            (rule "andRight" (formula "16") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "16") (userinteraction))
               (branch "Case 1"
                  (rule "andRight" (formula "16") (userinteraction))
                  (branch "Case 1"
                     (rule "applyEqReverse" (formula "16") (term "0,1,0") (ifseqformula "14") (userinteraction))
                     (rule "instEx" (formula "13") (term "0") (ifseqformula "16") (userinteraction))
                     (rule "close" (formula "16") (ifseqformula "13") (userinteraction))
                  )
                  (branch "Case 2"
                     (rule "close" (formula "16") (ifseqformula "15"))
                  )
               )
               (branch "Case 2"
                  (rule "wellFormedAnonEQ" (formula "16") (ifseqformula "10"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
                  (rule "andLeft" (formula "15"))
                  (rule "notLeft" (formula "16"))
                  (rule "eqSymm" (formula "7"))
                  (rule "eqSymm" (formula "13"))
                  (rule "eqSymm" (formula "14"))
                  (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "2")))
                  (rule "closeTrue" (formula "17"))
               )
            )
            (branch "Case 2"
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (ifseqformula "10"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
               (rule "andLeft" (formula "15"))
               (rule "orRight" (formula "17"))
               (rule "close" (formula "17") (ifseqformula "3"))
            )
         )
         (branch "Case 2"
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
            (rule "andLeft" (formula "15"))
            (rule "notRight" (formula "17"))
            (rule "close" (formula "18") (ifseqformula "1"))
         )
      )
      (branch
         (rule "andLeft" (formula "1") (userinteraction))
         (rule "andLeft" (formula "2") (userinteraction))
         (rule "assignment" (formula "21") (term "1,1") (userinteraction))
         (rule "variableDeclarationAssign" (formula "21") (term "1,1,1") (userinteraction))
         (rule "variableDeclaration" (formula "21") (term "1,1,1") (newnames "payload_1") (userinteraction))
         (builtin "One Step Simplification" (formula "21"))
         (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_checkAndRemoveTag_0,result_2,exc_2,heapAfter_checkAndRemoveTag_0,anon_heap_checkAndRemoveTag_0") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::checkAndRemoveTag([B)].JML behavior operation contract.0"))
         (branch "Post (checkAndRemoveTag)"
            (builtin "One Step Simplification" (formula "19"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "19"))
            (rule "notLeft" (formula "17"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "19"))
            (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "19") (userinteraction))
            (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22") (userinteraction))
            (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "19") (userinteraction))
            (builtin "One Step Simplification" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "23"))
            (rule "notLeft" (formula "24"))
            (rule "assignment" (formula "29") (term "1,1") (userinteraction))
            (rule "variableDeclarationAssign" (formula "29") (term "1,1,1") (userinteraction))
            (rule "variableDeclaration" (formula "29") (term "1,1,1") (newnames "ballotsAsAMessage") (userinteraction))
            (builtin "One Step Simplification" (formula "29"))
            (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_checkAndRemoveElectionId,result_3,exc_3,heapAfter_checkAndRemoveElectionId,anon_heap_checkAndRemoveElectionId") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::checkAndRemoveElectionId([B)].JML behavior operation contract.0"))
            (branch "Post (checkAndRemoveElectionId)"
               (rule "assignment" (formula "31") (term "1,1") (userinteraction))
               (rule "methodCallReturn" (formula "31") (term "1,1,1") (userinteraction))
               (rule "assignment" (formula "31") (term "1,1,1") (userinteraction))
               (rule "methodCallEmpty" (formula "31") (term "1,1,1,1") (userinteraction))
               (rule "tryEmpty" (formula "31") (term "1,1,1,1") (userinteraction))
               (rule "emptyModality" (formula "31") (term "1,1,1,1") (userinteraction))
               (builtin "One Step Simplification" (formula "31"))
               (builtin "One Step Simplification" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "26"))
               (rule "andLeft" (formula "27"))
               (rule "andLeft" (formula "26"))
               (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "26") (userinteraction))
               (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "26") (userinteraction))
               (builtin "One Step Simplification" (formula "29"))
               (rule "true_left" (formula "29") (userinteraction))
               (builtin "One Step Simplification" (formula "28"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "29"))
               (rule "andLeft" (formula "30"))
               (rule "notLeft" (formula "31"))
               (rule "andRight" (formula "37") (userinteraction))
               (branch "Case 1"
                  (rule "andRight" (formula "37") (userinteraction))
                  (branch "Case 1"
                     (rule "applyEq" (formula "16") (term "1") (ifseqformula "1") (userinteraction))
                     (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndRemoveSignature,
            byte[]::select(heapAfter_checkAndRemoveSignature,
                           self,
                           verif.selectvoting.system.core.MixServer::$unsigned))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$unsigned))") (userinteraction))
                     (branch "CUT: array2seq(heapAfter_checkAndRemoveSignature, self.unsigned@heapAfter_checkAndRemoveSignature) = array2seq(heap, self.unsigned) TRUE"
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "1") (userinteraction))
                        (rule "applyEqReverse" (formula "10") (term "0") (ifseqformula "2") (userinteraction))
                        (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndRemoveTag_0, result_0)
= array2seq(heapAfter_checkAndRemoveSignature,
            result_0)") (userinteraction))
                        (branch "CUT: array2seq(heapAfter_checkAndRemoveTag_0, result_0) = array2seq(heapAfter_checkAndRemoveSignature, result_0) TRUE"
                           (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "1") (userinteraction))
                           (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "11") (userinteraction))
                           (rule "mSecondofmConcat" (formula "24") (term "1") (userinteraction))
                           (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndRemoveElectionId,
            result_2)
= array2seq(heapAfter_checkAndRemoveTag_0, result_2)") (userinteraction))
                           (branch "CUT: array2seq(heapAfter_checkAndRemoveElectionId, result_2) = array2seq(heapAfter_checkAndRemoveTag_0, result_2) TRUE"
                              (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "1") (userinteraction))
                              (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "25") (userinteraction))
                              (rule "mSecondofmConcat" (formula "32") (term "1") (userinteraction))
                              (rule "applyEq" (formula "40") (term "0") (ifseqformula "32") (userinteraction))
                              (rule "array2seqDef" (formula "40") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seqDef" (formula "40") (term "1") (inst "u=u") (userinteraction))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "40") (inst "iv=iv") (userinteraction))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "15"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1") (ifseqformula "28"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1") (ifseqformula "21"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,1") (ifseqformula "21"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1") (ifseqformula "15"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,1") (ifseqformula "15"))
                              (rule "eqSymm" (formula "40") (term "0"))
                              (rule "eqSymm" (formula "24"))
                              (rule "eqSymm" (formula "18"))
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "12"))
                              (rule "eqSymm" (formula "19"))
                              (rule "eqSymm" (formula "25"))
                              (rule "eqSymm" (formula "40") (term "1,0,1"))
                              (rule "eqSymm" (formula "31"))
                              (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "38"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "lenOfSeqDef" (formula "40") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "40") (term "1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "40") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "40") (term "1,1,1,0,0,1"))
                              (rule "lenOfSeqDef" (formula "40") (term "0,0"))
                              (rule "eqSymm" (formula "40") (term "0"))
                              (rule "polySimp_elimSub" (formula "40") (term "1,1,0"))
                              (rule "times_zero_2" (formula "40") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "40") (term "1,1,0"))
                              (rule "getOfSeqDef" (formula "40") (term "1,1,0,1"))
                              (rule "castDel" (formula "40") (term "1,1,1,0,1"))
                              (rule "castDel" (formula "40") (term "2,1,1,0,1"))
                              (rule "add_zero_right" (formula "40") (term "0,2,1,1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "40") (term "1,1,0,1,1,0,1"))
                              (rule "times_zero_2" (formula "40") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "40") (term "1,1,0,1,1,0,1"))
                              (rule "getOfSeqDef" (formula "40") (term "0,1,0,1"))
                              (rule "castDel" (formula "40") (term "1,0,1,0,1"))
                              (rule "castDel" (formula "40") (term "2,0,1,0,1"))
                              (rule "add_zero_right" (formula "40") (term "0,2,1,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "40") (term "1,1,0,0,1,0,1"))
                              (rule "times_zero_2" (formula "40") (term "1,1,1,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "40") (term "1,1,0,0,1,0,1"))
                              (rule "lenOfSeqDef" (formula "40") (term "0,0"))
                              (rule "eqSymm" (formula "40") (term "0"))
                              (rule "polySimp_elimSub" (formula "40") (term "1,1,0"))
                              (rule "times_zero_2" (formula "40") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "40") (term "1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "0,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "40") (term "0,0,1,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "0,1,0"))
                              (rule "add_zero_right" (formula "40") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
                              (rule "add_zero_right" (formula "40") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,1,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0,1"))
                              (rule "applyEq" (formula "25") (term "1") (ifseqformula "1"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "4"))
                              (rule "applyEq" (formula "12") (term "1") (ifseqformula "4"))
                              (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "2"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "40") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0,1"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0,1"))
                              (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0,1"))
                              (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "40") (term "0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "40") (term "0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "40") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1"))
                              (rule "array2seqDef" (formula "3") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                              (rule "array2seqDef" (formula "32") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "32"))
                              (rule "array2seqDef" (formula "4") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                              (rule "array2seqDef" (formula "24") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "18") (term "0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "18"))
                              (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                              (rule "array2seqDef" (formula "12") (term "0,0") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "12") (term "2,0,0") (ifseqformula "7") (ifseqformula "39"))
                              (rule "array2seqDef" (formula "19") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "19") (term "0,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "25") (term "1,0") (inst "u=u"))
                              (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "32"))
                              (rule "array2seqDef" (formula "31") (term "0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "31"))
                              (rule "array2seqDef" (formula "25") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "25"))
                              (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                              (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "12"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "12"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "12"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "12"))
                              (rule "array2seqDef" (formula "24") (term "0,1") (inst "u=u"))
                              (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "12"))
                              (rule "mFirstofmConcat" (formula "24") (term "1"))
                              (rule "array2seqDef" (formula "32") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "32"))
                              (rule "array2seqDef" (formula "18") (term "0,0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "18"))
                              (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                              (rule "andLeft" (formula "1"))
                              (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDef" (formula "1") (term "0"))
                              (rule "eqSymm" (formula "1"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                              (rule "times_zero_2" (formula "1") (term "1,1,1"))
                              (rule "add_zero_right" (formula "1") (term "1,1"))
                              (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                              (rule "castDel" (formula "2") (term "2,0,1,0"))
                              (rule "castDel" (formula "2") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "1") (term "0"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                              (rule "times_zero_2" (formula "1") (term "1,1,0"))
                              (rule "add_zero_right" (formula "1") (term "1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "getOfSeqDef" (formula "1") (term "0,1,0"))
                              (rule "castDel" (formula "1") (term "2,0,1,0"))
                              (rule "castDel" (formula "1") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "1") (term "0,2,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,1,0"))
                              (rule "times_zero_2" (formula "1") (term "1,1,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "1") (term "1,1,0,0,1,0"))
                              (rule "eqSymm" (formula "1") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "1") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "1") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "1") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
                              (rule "eqSymm" (formula "1") (term "1,0"))
                              (rule "array2seqDef" (formula "31") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "31"))
                              (rule "array2seqDef" (formula "25") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "25"))
                              (rule "array2seqDef" (formula "12") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "12"))
                              (rule "array2seqDef" (formula "4") (term "1,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "2") (term "1,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "3") (term "1,1") (inst "u=u"))
                              (rule "eqSeqDef" (formula "24") (inst "iv=iv"))
                              (rule "andLeft" (formula "24"))
                              (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                              (rule "castDel" (formula "25") (term "2,0,1,0"))
                              (rule "castDel" (formula "25") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDef" (formula "24") (term "0"))
                              (rule "eqSymm" (formula "24"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1"))
                              (rule "times_zero_2" (formula "24") (term "1,1,1"))
                              (rule "add_zero_right" (formula "24") (term "1,1"))
                              (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                              (rule "castDel" (formula "25") (term "2,0,1,0"))
                              (rule "castDel" (formula "25") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "24") (term "0"))
                              (rule "eqSymm" (formula "24"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1"))
                              (rule "times_zero_2" (formula "24") (term "1,1,1"))
                              (rule "add_zero_right" (formula "24") (term "1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0"))
                              (rule "eqSymm" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0"))
                              (rule "eqSymm" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                              (rule "apply_eq_monomials" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                              (rule "eqSymm" (formula "24"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                              (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "24"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                              (rule "eqSymm" (formula "24"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                              (rule "apply_eq_monomials" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "eqSeqDef" (formula "33") (inst "iv=iv"))
                              (rule "andLeft" (formula "33"))
                              (rule "lenOfSeqDef" (formula "34") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "34") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "34") (term "1,1,1,0,0"))
                              (rule "getOfSeqDef" (formula "34") (term "0,1,0"))
                              (rule "castDel" (formula "34") (term "1,0,1,0"))
                              (rule "castDel" (formula "34") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "34") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "34") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "34") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "34") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "34") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "33") (term "1"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,1"))
                              (rule "mul_literals" (formula "33") (term "1,1,1"))
                              (rule "add_zero_right" (formula "33") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "33") (term "0"))
                              (rule "eqSymm" (formula "33"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,1"))
                              (rule "times_zero_2" (formula "33") (term "1,1,1"))
                              (rule "add_zero_right" (formula "33") (term "1,1"))
                              (rule "getOfSeqDef" (formula "34") (term "0,1,0"))
                              (rule "castDel" (formula "34") (term "1,0,1,0"))
                              (rule "castDel" (formula "34") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "34") (term "0,2,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "34") (term "1,1,0,0,1,0"))
                              (rule "times_zero_2" (formula "34") (term "1,1,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "34") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0,0"))
                              (rule "eqSymm" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0,0"))
                              (rule "eqSymm" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0"))
                              (rule "eqSymm" (formula "33"))
                              (rule "polySimp_elimOne" (formula "33") (term "0,0,1"))
                              (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "33"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0"))
                              (rule "eqSymm" (formula "33"))
                              (rule "polySimp_elimOne" (formula "33") (term "0,0,1"))
                              (rule "applyEq" (formula "42") (term "1,1,1,0,0,1") (ifseqformula "33"))
                              (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "33"))
                              (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "33"))
                              (rule "pullOutSelect" (formula "42") (term "1,1,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_16"))
                              (rule "applyEq" (formula "43") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "43") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "43") (term "0,0,0,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "16"))
                              (rule "eqSymm" (formula "43") (term "1,0,1"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "16"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "9")))
                              (rule "applyEqReverse" (formula "43") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "43") (term "1,1,1,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "43") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "43") (term "0,0,0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "42") (term "1,0,1"))
                              (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "42"))
                              (rule "allRight" (formula "42") (inst "sk=iv_13"))
                              (rule "impRight" (formula "42"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_left" (formula "44") (term "0,0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_homoInEq0" (formula "2"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "44") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "44") (term "0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "44") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "44") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0,1"))
                              (rule "mul_literals" (formula "44") (term "0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
                              (rule "pullOutSelect" (formula "5") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_23"))
                              (rule "applyEq" (formula "22") (term "1,2,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "5"))
                              (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "42")) (ifInst ""  (formula "11")))
                              (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "5"))
                              (rule "applyEqReverse" (formula "22") (term "1,2,0") (ifseqformula "5"))
                              (rule "applyEqReverse" (formula "6") (term "0,1,0") (ifseqformula "5"))
                              (rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "eqSeqDef" (formula "28") (inst "iv=iv"))
                              (rule "andLeft" (formula "28"))
                              (rule "getOfSeqDef" (formula "29") (term "1,1,0"))
                              (rule "castDel" (formula "29") (term "1,1,1,0"))
                              (rule "castDel" (formula "29") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "29") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "29") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "29") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "29") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "28") (term "1"))
                              (rule "polySimp_elimSub" (formula "28") (term "1,1"))
                              (rule "mul_literals" (formula "28") (term "1,1,1"))
                              (rule "add_zero_right" (formula "28") (term "1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1"))
                              (rule "add_zero_right" (formula "28") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,1,1,0"))
                              (rule "apply_eq_monomials" (formula "29") (term "1,0,1,0,0") (ifseqformula "28"))
                              (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "29") (term "1,0,1,0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,0,1,1,1,0,0"))
                              (rule "eqSeqDef" (formula "14") (inst "iv=iv"))
                              (rule "andLeft" (formula "14"))
                              (rule "lenOfSeqDef" (formula "14") (term "1"))
                              (rule "polySimp_elimSub" (formula "14") (term "1,1"))
                              (rule "mul_literals" (formula "14") (term "1,1,1"))
                              (rule "add_zero_right" (formula "14") (term "1,1"))
                              (rule "getOfSeqDef" (formula "15") (term "1,1,0"))
                              (rule "castDel" (formula "15") (term "1,1,1,0"))
                              (rule "castDel" (formula "15") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "15") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDefEQ" (formula "14") (term "0") (ifseqformula "4"))
                              (rule "eqSymm" (formula "14"))
                              (rule "polySimp_elimSub" (formula "14") (term "1,1"))
                              (rule "times_zero_2" (formula "14") (term "1,1,1"))
                              (rule "add_zero_right" (formula "14") (term "1,1"))
                              (rule "lenOfSeqDefEQ" (formula "15") (term "1,1,0,0") (ifseqformula "4"))
                              (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "36") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_22"))
                              (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "36"))
                              (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "44")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0") (ifseqformula "24"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0,0") (ifseqformula "18"))
                              (rule "replace_known_left" (formula "36") (term "0,0,0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "44")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0") (ifseqformula "18"))
                              (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "44")) (ifInst ""  (formula "10")))
                              (rule "applyEqReverse" (formula "37") (term "1,2,0") (ifseqformula "36"))
                              (rule "applyEqReverse" (formula "37") (term "0,1,0") (ifseqformula "36"))
                              (rule "hideAuxiliaryEq" (formula "36"))
                              (rule "pullOutSelect" (formula "28") (term "0,1,1,1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_3"))
                              (rule "applyEq" (formula "29") (term "1,1,0,1,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "27") (term "0,0,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "28"))
                              (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,1,0") (ifseqformula "28"))
                              (rule "applyEqReverse" (formula "29") (term "1,1,0,1,0") (ifseqformula "28"))
                              (rule "applyEqReverse" (formula "27") (term "0,0,0,0") (ifseqformula "28"))
                              (rule "applyEqReverse" (formula "27") (term "0,1,0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "hideAuxiliaryEq" (formula "27"))
                              (rule "pullOutSelect" (formula "45") (term "1,0") (inst "selectSK=arr_114"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "25"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                              (rule "eqSymm" (formula "46"))
                              (rule "eqSeqDef2" (formula "5") (inst "iv=iv") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "eqSeqDef2" (formula "21") (inst "iv=iv") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "getOfSeqDefEQ" (formula "14") (term "0,1,0") (ifseqformula "5"))
                              (rule "castDel" (formula "14") (term "1,0,1,0"))
                              (rule "castDel" (formula "14") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0"))
                              (rule "times_zero_2" (formula "14") (term "1,1,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                              (rule "eqSeqDef2" (formula "5") (inst "iv=iv") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "eqSeqDef2" (formula "32") (inst "iv=iv") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_115"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_116"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_imp2or" (formula "6") (term "0"))
                              (rule "commute_or_2" (formula "33"))
                              (rule "nnf_imp2or" (formula "35") (term "0"))
                              (rule "nnf_imp2or" (formula "28") (term "0"))
                              (rule "nnf_imp2or" (formula "26") (term "0"))
                              (rule "cut_direct" (formula "20") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "cut_direct" (formula "25") (term "0,0"))
                                 (branch "CUT: result_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "21") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "22") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                    (rule "apply_eq_monomials" (formula "23") (term "1,0,1,0,0") (ifseqformula "22"))
                                    (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "23") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0"))
                                    (rule "nnf_imp2or" (formula "23") (term "0"))
                                    (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                    (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                    (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "8") (term "0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "15") (ifseqformula "10"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "notLeft" (formula "15"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "45"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "45"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "45"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "14") (term "1,1,1,0") (ifseqformula "8") (ifseqformula "44"))
                                    (rule "narrowSelectArrayType" (formula "42") (term "1,0,1,0") (ifseqformula "8") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "56") (term "1,0") (ifseqformula "8") (ifseqformula "45"))
                                    (rule "eqSymm" (formula "56"))
                                    (rule "narrowSelectArrayType" (formula "35") (term "2,0,0,0,1,0") (ifseqformula "8") (ifseqformula "49"))
                                    (rule "narrowSelectArrayType" (formula "34") (term "2,0,0,0") (ifseqformula "8") (ifseqformula "49"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "21") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "8") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "37") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "29") (ifseqformula "45"))
                                    (rule "nonNull" (formula "20") (inst "i=i"))
                                    (rule "greater_literals" (formula "20") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "sub_literals" (formula "20") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "44"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "19") (inst "i=i"))
                                    (rule "sub_literals" (formula "19") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "greater_literals" (formula "19") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "andLeft" (formula "19"))
                                    (rule "notLeft" (formula "19"))
                                    (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "44"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "18") (inst "i=i"))
                                    (rule "greater_literals" (formula "18") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "sub_literals" (formula "18") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "andLeft" (formula "18"))
                                    (rule "notLeft" (formula "18"))
                                    (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "44"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "17") (inst "i=i"))
                                    (rule "greater_literals" (formula "17") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "sub_literals" (formula "17") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "44"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "16") (inst "i=i"))
                                    (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "greater_literals" (formula "16") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "44"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "15") (inst "i=i"))
                                    (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "greater_literals" (formula "15") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "15"))
                                    (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "44"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_imp2or" (formula "18") (term "0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "7") (ifseqformula "10"))
                                    (rule "replaceKnownSelect_taclet0000000100_8" (formula "7") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "7") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet0000000100_4" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet0000000100_2" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "notLeft" (formula "8"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "notLeft" (formula "9"))
                                    (rule "notLeft" (formula "8"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "notLeft" (formula "8"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "notLeft" (formula "7"))
                                    (rule "notLeft" (formula "7"))
                                    (rule "nonNull" (formula "12") (inst "i=i"))
                                    (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "greater_literals" (formula "12") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "notLeft" (formula "12"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "11") (inst "i=i"))
                                    (rule "greater_literals" (formula "11") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "sub_literals" (formula "11") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "10") (inst "i=i"))
                                    (rule "greater_literals" (formula "10") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "sub_literals" (formula "10") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "notLeft" (formula "10"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "9") (inst "i=i"))
                                    (rule "greater_literals" (formula "9") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "sub_literals" (formula "9") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "andLeft" (formula "9"))
                                    (rule "notLeft" (formula "9"))
                                    (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "8") (inst "i=i"))
                                    (rule "greater_literals" (formula "8") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "sub_literals" (formula "8") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "andLeft" (formula "8"))
                                    (rule "notLeft" (formula "8"))
                                    (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "7") (inst "i=i"))
                                    (rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "greater_literals" (formula "7") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "notLeft" (formula "7"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_32"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "74")) (ifInst ""  (formula "15")))
                                    (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "56") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_32"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "73")) (ifInst ""  (formula "15")))
                                    (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "55") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_32"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "72")) (ifInst ""  (formula "15")))
                                    (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "12") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_32"))
                                    (rule "applyEq" (formula "13") (term "0,1,1,1,0,0") (ifseqformula "12"))
                                    (rule "applyEq" (formula "55") (term "0") (ifseqformula "12"))
                                    (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "71")) (ifInst ""  (formula "15")))
                                    (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,0") (ifseqformula "12"))
                                    (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "12"))
                                    (rule "applyEqReverse" (formula "13") (term "1,0,0,1,0") (ifseqformula "12"))
                                    (rule "hideAuxiliaryEq" (formula "12"))
                                    (rule "pullOutSelect" (formula "11") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_32"))
                                    (rule "applyEq" (formula "54") (term "0") (ifseqformula "11"))
                                    (rule "applyEq" (formula "12") (term "0,1,1,1,0,0") (ifseqformula "11"))
                                    (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "70")) (ifInst ""  (formula "15")))
                                    (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "11"))
                                    (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,0") (ifseqformula "11"))
                                    (rule "applyEqReverse" (formula "12") (term "1,0,0,1,0") (ifseqformula "11"))
                                    (rule "hideAuxiliaryEq" (formula "11"))
                                    (rule "pullOutSelect" (formula "10") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_32"))
                                    (rule "applyEq" (formula "53") (term "0") (ifseqformula "10"))
                                    (rule "applyEq" (formula "11") (term "0,1,1,1,0,0") (ifseqformula "10"))
                                    (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "69")) (ifInst ""  (formula "15")))
                                    (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "10"))
                                    (rule "applyEqReverse" (formula "11") (term "1,0,0,1,0") (ifseqformula "10"))
                                    (rule "applyEqReverse" (formula "11") (term "0,1,1,1,0,0") (ifseqformula "10"))
                                    (rule "hideAuxiliaryEq" (formula "10"))
                                    (rule "pullOutSelect" (formula "9") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_32"))
                                    (rule "applyEq" (formula "52") (term "0") (ifseqformula "9"))
                                    (rule "applyEq" (formula "10") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                    (rule "simplifySelectOfAnonEQ" (formula "9") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "68")) (ifInst ""  (formula "15")))
                                    (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "9"))
                                    (rule "applyEqReverse" (formula "10") (term "1,0,0,1,0") (ifseqformula "9"))
                                    (rule "applyEqReverse" (formula "10") (term "0,1,1,1,0,0") (ifseqformula "9"))
                                    (rule "hideAuxiliaryEq" (formula "9"))
                                    (rule "pullOutSelect" (formula "8") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_32"))
                                    (rule "applyEq" (formula "9") (term "0,1,1,1,0,0") (ifseqformula "8"))
                                    (rule "applyEq" (formula "51") (term "0") (ifseqformula "8"))
                                    (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "67")) (ifInst ""  (formula "15")))
                                    (rule "applyEqReverse" (formula "9") (term "0,1,1,1,0,0") (ifseqformula "8"))
                                    (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "8"))
                                    (rule "applyEqReverse" (formula "9") (term "1,0,0,1,0") (ifseqformula "8"))
                                    (rule "hideAuxiliaryEq" (formula "8"))
                                    (rule "pullOutSelect" (formula "7") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_32"))
                                    (rule "applyEq" (formula "50") (term "0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "8") (term "0,1,1,1,0,0") (ifseqformula "7"))
                                    (rule "simplifySelectOfAnonEQ" (formula "7") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "66")) (ifInst ""  (formula "15")))
                                    (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "7"))
                                    (rule "applyEqReverse" (formula "8") (term "1,0,0,1,0") (ifseqformula "7"))
                                    (rule "applyEqReverse" (formula "8") (term "0,1,1,1,0,0") (ifseqformula "7"))
                                    (rule "hideAuxiliaryEq" (formula "7"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "48") (ifseqformula "15"))
                                    (rule "replaceKnownSelect_taclet0000000100_6" (formula "48") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "48") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet0000000100_0" (formula "48") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "48") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "notLeft" (formula "49"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "notLeft" (formula "49"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "notLeft" (formula "50"))
                                    (rule "notLeft" (formula "49"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "notLeft" (formula "49"))
                                    (rule "notLeft" (formula "48"))
                                    (rule "nonNull" (formula "53") (inst "i=i"))
                                    (rule "greater_literals" (formula "53") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "53"))
                                    (rule "sub_literals" (formula "53") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "53"))
                                    (rule "andLeft" (formula "53"))
                                    (rule "notLeft" (formula "53"))
                                    (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "53") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "52") (inst "i=i"))
                                    (rule "greater_literals" (formula "52") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "52"))
                                    (rule "sub_literals" (formula "52") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "52"))
                                    (rule "andLeft" (formula "52"))
                                    (rule "notLeft" (formula "52"))
                                    (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "51") (inst "i=i"))
                                    (rule "sub_literals" (formula "51") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "51"))
                                    (rule "greater_literals" (formula "51") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "51"))
                                    (rule "andLeft" (formula "51"))
                                    (rule "notLeft" (formula "51"))
                                    (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "51") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "50") (inst "i=i"))
                                    (rule "sub_literals" (formula "50") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "50"))
                                    (rule "greater_literals" (formula "50") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "50"))
                                    (rule "andLeft" (formula "50"))
                                    (rule "notLeft" (formula "50"))
                                    (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "50") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "50") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "49") (inst "i=i"))
                                    (rule "sub_literals" (formula "49") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "greater_literals" (formula "49") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "andLeft" (formula "49"))
                                    (rule "notLeft" (formula "49"))
                                    (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "49") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "48") (inst "i=i"))
                                    (rule "greater_literals" (formula "48") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "sub_literals" (formula "48") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "notLeft" (formula "48"))
                                    (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "48") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "63") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_33"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                                    (rule "replaceKnownSelect_taclet000000000100_16" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_17" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "28"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "62") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_33"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "79")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "79")))
                                    (rule "replaceKnownSelect_taclet000000000100_18" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_19" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "28"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "63") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "61") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_33"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
                                    (rule "replaceKnownSelect_taclet000000000100_20" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_21" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "28"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "62") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "60") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_34"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
                                    (rule "replaceKnownSelect_taclet0000000100_4" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "28"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "53") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_33"))
                                    (rule "applyEq" (formula "54") (term "0,1,1,1,0,0") (ifseqformula "53"))
                                    (rule "applyEq" (formula "60") (term "0") (ifseqformula "53"))
                                    (rule "simplifySelectOfAnonEQ" (formula "53") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "76")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,0,0") (ifseqformula "35"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "53") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "53"))
                                    (rule "simplifySelectOfAnonEQ" (formula "53") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "76")))
                                    (rule "replaceKnownSelect_taclet000000000100_22" (formula "53") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_23" (formula "53") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "53") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "53"))
                                    (rule "applyEqReverse" (formula "54") (term "1,0,0,1,0") (ifseqformula "53"))
                                    (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "53"))
                                    (rule "applyEqReverse" (formula "54") (term "0,1,1,1,0,0") (ifseqformula "53"))
                                    (rule "hideAuxiliaryEq" (formula "53"))
                                    (rule "pullOutSelect" (formula "52") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_33"))
                                    (rule "applyEq" (formula "53") (term "0,1,1,1,0,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "59") (term "0") (ifseqformula "52"))
                                    (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "75")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,0,0") (ifseqformula "35"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "52") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "52"))
                                    (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "75")))
                                    (rule "replaceKnownSelect_taclet000000000100_24" (formula "52") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_25" (formula "52") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "52") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "52"))
                                    (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,0") (ifseqformula "52"))
                                    (rule "applyEqReverse" (formula "53") (term "1,0,0,1,0") (ifseqformula "52"))
                                    (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "52"))
                                    (rule "hideAuxiliaryEq" (formula "52"))
                                    (rule "pullOutSelect" (formula "51") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_33"))
                                    (rule "applyEq" (formula "52") (term "0,1,1,1,0,0") (ifseqformula "51"))
                                    (rule "applyEq" (formula "58") (term "0") (ifseqformula "51"))
                                    (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "74")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0") (ifseqformula "35"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "51") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "51"))
                                    (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "74")))
                                    (rule "replaceKnownSelect_taclet000000000100_26" (formula "51") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_27" (formula "51") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "51") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "51"))
                                    (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "51"))
                                    (rule "applyEqReverse" (formula "52") (term "1,0,0,1,0") (ifseqformula "51"))
                                    (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,0") (ifseqformula "51"))
                                    (rule "hideAuxiliaryEq" (formula "51"))
                                    (rule "pullOutSelect" (formula "50") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_33"))
                                    (rule "applyEq" (formula "51") (term "0,1,1,1,0,0") (ifseqformula "50"))
                                    (rule "applyEq" (formula "57") (term "0") (ifseqformula "50"))
                                    (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "73")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,0") (ifseqformula "35"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "50") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "50"))
                                    (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "73")))
                                    (rule "replaceKnownSelect_taclet000000000100_28" (formula "50") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_29" (formula "50") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "50") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "50"))
                                    (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,0") (ifseqformula "50"))
                                    (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "50"))
                                    (rule "applyEqReverse" (formula "51") (term "1,0,0,1,0") (ifseqformula "50"))
                                    (rule "hideAuxiliaryEq" (formula "50"))
                                    (rule "pullOutSelect" (formula "49") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_33"))
                                    (rule "applyEq" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                    (rule "applyEq" (formula "56") (term "0") (ifseqformula "49"))
                                    (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "72")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0") (ifseqformula "35"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "49") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "72")))
                                    (rule "replaceKnownSelect_taclet000000000100_30" (formula "49") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_31" (formula "49") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "49") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "applyEqReverse" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                    (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "49"))
                                    (rule "applyEqReverse" (formula "50") (term "1,0,0,1,0") (ifseqformula "49"))
                                    (rule "hideAuxiliaryEq" (formula "49"))
                                    (rule "pullOutSelect" (formula "48") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_33"))
                                    (rule "applyEq" (formula "55") (term "0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "49") (term "0,1,1,1,0,0") (ifseqformula "48"))
                                    (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "71")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0") (ifseqformula "35"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "48") (term "0,0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "71")))
                                    (rule "replaceKnownSelect_taclet000000000100_32" (formula "48") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_33" (formula "48") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0") (ifseqformula "27"))
                                    (rule "replace_known_left" (formula "48") (term "0,0,0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "applyEqReverse" (formula "49") (term "1,0,0,1,0") (ifseqformula "48"))
                                    (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "48"))
                                    (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,0") (ifseqformula "48"))
                                    (rule "hideAuxiliaryEq" (formula "48"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "41") (ifseqformula "15"))
                                    (rule "replaceKnownSelect_taclet0000000100_7" (formula "41") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "41") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet000000000100_35" (formula "41") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_36" (formula "41") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet000000000100_38" (formula "41") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_39" (formula "41") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet000000000100_47" (formula "41") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000000000100_41" (formula "41") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_48" (formula "41") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_42" (formula "41") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000000000100_50" (formula "41") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000000000100_53" (formula "41") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_51" (formula "41") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000000000100_56" (formula "41") (term "1,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_54" (formula "41") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000000000100_59" (formula "41") (term "1,1,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_57" (formula "41") (term "1,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000000000100_62" (formula "41") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_60" (formula "41") (term "1,1,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_63" (formula "41") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet000000000100_44" (formula "41") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet0000000100_1" (formula "41") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000000100_45" (formula "41") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "41") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "notLeft" (formula "42"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "notLeft" (formula "43"))
                                    (rule "notLeft" (formula "42"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "notLeft" (formula "42"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "notLeft" (formula "42"))
                                    (rule "notLeft" (formula "41"))
                                    (rule "nonNull" (formula "46") (inst "i=i"))
                                    (rule "greater_literals" (formula "46") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "64")))
                                    (rule "sub_literals" (formula "46") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "45") (inst "i=i"))
                                    (rule "sub_literals" (formula "45") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "63")))
                                    (rule "greater_literals" (formula "45") (term "0"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "45") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "44") (inst "i=i"))
                                    (rule "greater_literals" (formula "44") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "62")))
                                    (rule "sub_literals" (formula "44") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "44") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "43") (inst "i=i"))
                                    (rule "greater_literals" (formula "43") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "61")))
                                    (rule "sub_literals" (formula "43") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "42") (inst "i=i"))
                                    (rule "greater_literals" (formula "42") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "60")))
                                    (rule "sub_literals" (formula "42") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "42") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "41") (inst "i=i"))
                                    (rule "greater_literals" (formula "41") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "59")))
                                    (rule "sub_literals" (formula "41") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                    (rule "ifthenelse_split" (formula "51") (term "0"))
                                    (branch "self.concatenated.length ≥ 1 TRUE"
                                       (rule "eqSymm" (formula "52"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "52"))
                                       (rule "replace_known_left" (formula "78") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "5")))
                                       (rule "applyEq" (formula "53") (term "1,1,0,0") (ifseqformula "52"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "commute_or_2" (formula "50") (term "0"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                       (rule "commute_or_2" (formula "6") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "38") (term "0"))
                                       (rule "ifthenelse_split" (formula "39") (term "1"))
                                       (branch "result_2.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "41") (term "0,1,1,0,0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "replace_known_left" (formula "6") (term "0,1,1,0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "commute_or_2" (formula "32") (term "0"))
                                          (rule "nnf_imp2or" (formula "12") (term "0"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,1,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "41") (term "1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "11") (term "0"))
                                          (rule "ifthenelse_split" (formula "18") (term "1"))
                                          (branch "result_0.length ≥ 0 TRUE"
                                             (rule "replace_known_left" (formula "20") (term "0,1,1,0") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "nnf_imp2or" (formula "10") (term "0"))
                                             (rule "ifthenelse_split" (formula "19") (term "0"))
                                             (branch "self.unsigned.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0,0") (ifseqformula "20"))
                                                (rule "eqSymm" (formula "21") (term "1,0,0"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0,0") (ifseqformula "20"))
                                                (rule "eqSymm" (formula "21") (term "1,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "19"))
                                                (rule "leq_literals" (formula "18") (term "0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "nnf_imp2or" (formula "9") (term "0"))
                                                (rule "nnf_imp2or" (formula "8") (term "0"))
                                                (rule "nnf_imp2or" (formula "7") (term "0"))
                                                (rule "ifthenelse_to_or_right" (formula "57") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "57"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "13"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "82"))
                                                   (rule "closeTrue" (formula "82"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "65") (ifseqformula "73"))
                                                   (rule "close" (formula "65") (ifseqformula "14"))
                                                )
                                             )
                                             (branch "self.unsigned.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "19"))
                                                (rule "inEqSimp_geqRight" (formula "64"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                (rule "qeq_literals" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "19"))
                                                (rule "nnf_imp2or" (formula "10") (term "0"))
                                                (rule "nnf_imp2or" (formula "9") (term "0"))
                                                (rule "nnf_imp2or" (formula "8") (term "0"))
                                                (rule "ifthenelse_to_or_right" (formula "57") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "57"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "14"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "82"))
                                                   (rule "closeTrue" (formula "82"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "65") (ifseqformula "73"))
                                                   (rule "close" (formula "65") (ifseqformula "15"))
                                                )
                                             )
                                          )
                                          (branch "result_0.length ≥ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "63"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_geqRight" (formula "63"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_notGeq" (formula "19") (term "0"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "19") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "10") (term "0"))
                                             (rule "nnf_imp2or" (formula "9") (term "0"))
                                             (rule "nnf_imp2or" (formula "8") (term "0"))
                                             (rule "ifthenelse_to_or_right" (formula "57") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "57"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "82"))
                                                (rule "closeTrue" (formula "82"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "65") (ifseqformula "73"))
                                                (rule "close" (formula "65") (ifseqformula "15"))
                                             )
                                          )
                                       )
                                       (branch "result_2.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "6") (term "0,1,1,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "replace_known_right" (formula "40") (term "0,1,1,0,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "inEqSimp_geqRight" (formula "60"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "41") (term "0,0"))
                                          (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "41") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "commute_or_2" (formula "33") (term "0"))
                                          (rule "nnf_imp2or" (formula "13") (term "0"))
                                          (rule "commute_or_2" (formula "20") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "41") (term "1,1,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "42") (term "1,1,0,0"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "true_left" (formula "42"))
                                          (rule "nnf_imp2or" (formula "12") (term "0"))
                                          (rule "ifthenelse_split" (formula "19") (term "1"))
                                          (branch "result_0.length ≥ 0 TRUE"
                                             (rule "replace_known_left" (formula "21") (term "0,1,1,0") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "ifthenelse_split" (formula "20") (term "0"))
                                             (branch "self.unsigned.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "21"))
                                                (rule "eqSymm" (formula "22") (term "1,0,0"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "21"))
                                                (rule "eqSymm" (formula "22") (term "1,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "20"))
                                                (rule "leq_literals" (formula "19") (term "0"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "nnf_imp2or" (formula "10") (term "0"))
                                                (rule "nnf_imp2or" (formula "9") (term "0"))
                                                (rule "nnf_imp2or" (formula "8") (term "0"))
                                                (rule "ifthenelse_to_or_left" (formula "56") (term "1,0"))
                                                (rule "eqSymm" (formula "56") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "56"))
                                                (rule "eqSymm" (formula "56") (term "1,0,1,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "80") (term "0") (ifseqformula "14"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "81"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "81"))
                                                   (rule "closeTrue" (formula "81"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "72"))
                                                   (rule "close" (formula "64") (ifseqformula "15"))
                                                )
                                             )
                                             (branch "self.unsigned.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "20"))
                                                (rule "inEqSimp_geqRight" (formula "63"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "qeq_literals" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "10") (term "0"))
                                                (rule "nnf_imp2or" (formula "9") (term "0"))
                                                (rule "ifthenelse_to_or_left" (formula "56") (term "1,0"))
                                                (rule "eqSymm" (formula "56") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "56"))
                                                (rule "eqSymm" (formula "56") (term "1,0,1,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "80") (term "0") (ifseqformula "15"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "81"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "81"))
                                                   (rule "closeTrue" (formula "81"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "72"))
                                                   (rule "close" (formula "64") (ifseqformula "16"))
                                                )
                                             )
                                          )
                                          (branch "result_0.length ≥ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "replace_known_right" (formula "20") (term "0,1,1,0") (ifseqformula "62"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "inEqSimp_geqRight" (formula "62"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_notGeq" (formula "20") (term "0"))
                                             (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "20") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "20") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "10") (term "0"))
                                             (rule "nnf_imp2or" (formula "9") (term "0"))
                                             (rule "ifthenelse_to_or_left" (formula "56") (term "1,0"))
                                             (rule "eqSymm" (formula "56") (term "1,0,1,0"))
                                             (rule "eqSymm" (formula "56") (term "1,1,1,0"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "80") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "81"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "81"))
                                                (rule "closeTrue" (formula "81"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "72"))
                                                (rule "close" (formula "64") (ifseqformula "16"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "self.concatenated.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "51"))
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "inEqSimp_geqRight" (formula "59"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "nnf_imp2or" (formula "22") (term "0"))
                                       (rule "commute_or_2" (formula "51") (term "0"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "52") (term "0"))
                                       (rule "mul_literals" (formula "52") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "52") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "52") (term "0,0"))
                                       (rule "commute_or_2" (formula "7") (term "0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                       (rule "ifthenelse_split" (formula "6") (term "0"))
                                       (branch "result_3.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "54") (term "0,1,1,0,0") (ifseqformula "6"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "inEqSimp_contradEq7" (formula "53") (term "1") (ifseqformula "6"))
                                          (rule "times_zero_1" (formula "53") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "53") (term "0,0,1"))
                                          (rule "leq_literals" (formula "53") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "53"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                       (branch "result_3.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "53") (term "0,1,1,0,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "inEqSimp_geqRight" (formula "60"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "53") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                    )
                                 )
                                 (branch "CUT: result_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "21") (term "1,0,1"))
                                    (rule "arrayLengthIsAShort" (formula "22") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                    (rule "apply_eq_monomials" (formula "23") (term "1,0,1,0,0") (ifseqformula "22"))
                                    (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "23") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0"))
                                    (rule "nnf_imp2or" (formula "23") (term "0"))
                                    (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                    (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "16") (ifseqformula "11"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "45"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "45"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "45"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "36") (term "2,0,0,0,1,0") (ifseqformula "9") (ifseqformula "50"))
                                    (rule "narrowSelectArrayType" (formula "43") (term "1,0,1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "15") (term "1,1,1,0") (ifseqformula "9") (ifseqformula "46"))
                                    (rule "narrowSelectArrayType" (formula "35") (term "2,0,0,0") (ifseqformula "9") (ifseqformula "50"))
                                    (rule "narrowSelectArrayType" (formula "58") (term "1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "eqSymm" (formula "58"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "38") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "30") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "22") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "nonNull" (formula "21") (inst "i=i"))
                                    (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "greater_literals" (formula "21") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "20") (inst "i=i"))
                                    (rule "greater_literals" (formula "20") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "sub_literals" (formula "20") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "19") (inst "i=i"))
                                    (rule "greater_literals" (formula "19") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "sub_literals" (formula "19") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "andLeft" (formula "19"))
                                    (rule "notLeft" (formula "19"))
                                    (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "18") (inst "i=i"))
                                    (rule "greater_literals" (formula "18") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "sub_literals" (formula "18") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "andLeft" (formula "18"))
                                    (rule "notLeft" (formula "18"))
                                    (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "17") (inst "i=i"))
                                    (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "greater_literals" (formula "17") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "16") (inst "i=i"))
                                    (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "greater_literals" (formula "16") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_imp2or" (formula "18") (term "0"))
                                    (rule "ifthenelse_split" (formula "42") (term "0"))
                                    (branch "self.concatenated.length ≥ 1 TRUE"
                                       (rule "eqSymm" (formula "43"))
                                       (rule "applyEq" (formula "44") (term "1,1,0,0") (ifseqformula "43"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "43"))
                                       (rule "replace_known_left" (formula "65") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "5")))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "37") (ifseqformula "11"))
                                       (rule "replaceKnownSelect_taclet0000000100_7" (formula "37") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "37") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0000000100_1" (formula "37") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "37") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "nonNull" (formula "42") (inst "i=i"))
                                       (rule "sub_literals" (formula "42") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "greater_literals" (formula "42") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "andLeft" (formula "42"))
                                       (rule "notLeft" (formula "42"))
                                       (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "41") (inst "i=i"))
                                       (rule "greater_literals" (formula "41") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "sub_literals" (formula "41") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "40") (inst "i=i"))
                                       (rule "sub_literals" (formula "40") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "greater_literals" (formula "40") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "notLeft" (formula "40"))
                                       (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "39") (inst "i=i"))
                                       (rule "sub_literals" (formula "39") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "greater_literals" (formula "39") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "38") (inst "i=i"))
                                       (rule "sub_literals" (formula "38") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "greater_literals" (formula "38") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "37") (inst "i=i"))
                                       (rule "sub_literals" (formula "37") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "greater_literals" (formula "37") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "60") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_30"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_30"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_30"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_32"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
                                       (rule "replaceKnownSelect_taclet0000000100_4" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "42") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_30"))
                                       (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                       (rule "applyEq" (formula "57") (term "0") (ifseqformula "42"))
                                       (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "74")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "42") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "74")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                       (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "42"))
                                       (rule "applyEqReverse" (formula "43") (term "1,0,0,1,0") (ifseqformula "42"))
                                       (rule "hideAuxiliaryEq" (formula "42"))
                                       (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_30"))
                                       (rule "applyEq" (formula "56") (term "0") (ifseqformula "41"))
                                       (rule "applyEq" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                       (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "73")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "41") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "73")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                                       (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "41"))
                                       (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                       (rule "hideAuxiliaryEq" (formula "41"))
                                       (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_30"))
                                       (rule "applyEq" (formula "55") (term "0") (ifseqformula "40"))
                                       (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                       (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "72")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "40") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "72")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                       (rule "applyEqReverse" (formula "41") (term "1,0,0,1,0") (ifseqformula "40"))
                                       (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "40"))
                                       (rule "hideAuxiliaryEq" (formula "40"))
                                       (rule "pullOutSelect" (formula "39") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_30"))
                                       (rule "applyEq" (formula "54") (term "0") (ifseqformula "39"))
                                       (rule "applyEq" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                       (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "71")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "39") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "71")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                       (rule "applyEqReverse" (formula "40") (term "1,0,0,1,0") (ifseqformula "39"))
                                       (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "39"))
                                       (rule "hideAuxiliaryEq" (formula "39"))
                                       (rule "pullOutSelect" (formula "38") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_30"))
                                       (rule "applyEq" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                       (rule "applyEq" (formula "53") (term "0") (ifseqformula "38"))
                                       (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "70")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "38") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "70")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "38"))
                                       (rule "applyEqReverse" (formula "39") (term "1,0,0,1,0") (ifseqformula "38"))
                                       (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                       (rule "hideAuxiliaryEq" (formula "38"))
                                       (rule "pullOutSelect" (formula "37") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_30"))
                                       (rule "applyEq" (formula "52") (term "0") (ifseqformula "37"))
                                       (rule "applyEq" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                       (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "69")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "69")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                       (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "37"))
                                       (rule "applyEqReverse" (formula "38") (term "1,0,0,1,0") (ifseqformula "37"))
                                       (rule "hideAuxiliaryEq" (formula "37"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "7") (ifseqformula "11"))
                                       (rule "replaceKnownSelect_taclet0000000100_8" (formula "7") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "7") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0100000000100_17" (formula "7") (term "0,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_18" (formula "7") (term "0,0,1,0"))
                                       (rule "replaceKnownSelect_taclet0100000000100_20" (formula "7") (term "0,0,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_21" (formula "7") (term "0,0,1,0,0"))
                                       (rule "replaceKnownSelect_taclet0100000000100_28" (formula "7") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0100000000100_23" (formula "7") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_29" (formula "7") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_24" (formula "7") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0100000000100_31" (formula "7") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0100000000100_34" (formula "7") (term "1,1,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_32" (formula "7") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0100000000100_37" (formula "7") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_35" (formula "7") (term "1,1,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0100000000100_40" (formula "7") (term "1,1,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_38" (formula "7") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0100000000100_43" (formula "7") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_41" (formula "7") (term "1,1,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_44" (formula "7") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0000000100_2" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0000000100_4" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "notLeft" (formula "7"))
                                       (rule "notLeft" (formula "7"))
                                       (rule "nonNull" (formula "12") (inst "i=i"))
                                       (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "61")))
                                       (rule "greater_literals" (formula "12") (term "0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "11") (inst "i=i"))
                                       (rule "greater_literals" (formula "11") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "60")))
                                       (rule "sub_literals" (formula "11") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "10") (inst "i=i"))
                                       (rule "sub_literals" (formula "10") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "59")))
                                       (rule "greater_literals" (formula "10") (term "0"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "9") (inst "i=i"))
                                       (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "58")))
                                       (rule "greater_literals" (formula "9") (term "0"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "8") (inst "i=i"))
                                       (rule "greater_literals" (formula "8") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "57")))
                                       (rule "sub_literals" (formula "8") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "7") (inst "i=i"))
                                       (rule "greater_literals" (formula "7") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "56")))
                                       (rule "sub_literals" (formula "7") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                       (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "13") (term "0") (ifseqformula "16"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "54") (ifseqformula "15"))
                                       (rule "replaceKnownSelect_taclet0000000100_6" (formula "54") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "54") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0000000100_0" (formula "54") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "54") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "notLeft" (formula "55"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "notLeft" (formula "55"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "notLeft" (formula "55"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "notLeft" (formula "55"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "notLeft" (formula "55"))
                                       (rule "notLeft" (formula "54"))
                                       (rule "nonNull" (formula "59") (inst "i=i"))
                                       (rule "greater_literals" (formula "59") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "59"))
                                       (rule "sub_literals" (formula "59") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "59"))
                                       (rule "andLeft" (formula "59"))
                                       (rule "notLeft" (formula "59"))
                                       (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "59") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "58") (inst "i=i"))
                                       (rule "greater_literals" (formula "58") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "58"))
                                       (rule "sub_literals" (formula "58") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "58"))
                                       (rule "andLeft" (formula "58"))
                                       (rule "notLeft" (formula "58"))
                                       (rule "inEqSimp_ltToLeq" (formula "58") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "58") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "58") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "58") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "58") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "58") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "58") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "57") (inst "i=i"))
                                       (rule "greater_literals" (formula "57") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "57"))
                                       (rule "sub_literals" (formula "57") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "57"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "notLeft" (formula "57"))
                                       (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "57") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "56") (inst "i=i"))
                                       (rule "greater_literals" (formula "56") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "56"))
                                       (rule "sub_literals" (formula "56") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "56"))
                                       (rule "andLeft" (formula "56"))
                                       (rule "notLeft" (formula "56"))
                                       (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "56") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "55") (inst "i=i"))
                                       (rule "greater_literals" (formula "55") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "55"))
                                       (rule "sub_literals" (formula "55") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "55"))
                                       (rule "andLeft" (formula "55"))
                                       (rule "notLeft" (formula "55"))
                                       (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "55") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "54") (inst "i=i"))
                                       (rule "sub_literals" (formula "54") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "greater_literals" (formula "54") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "notLeft" (formula "54"))
                                       (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "54") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "69") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_31"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "87")))
                                       (rule "replaceKnownSelect_taclet0100000000100_16" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_18" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "70") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "68") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_31"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "86")))
                                       (rule "replaceKnownSelect_taclet0100000000100_19" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_21" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "69") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "67") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_31"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "85")))
                                       (rule "replaceKnownSelect_taclet0100000000100_22" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_24" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "68") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "66") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_33"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "84")))
                                       (rule "replaceKnownSelect_taclet0100000000100_25" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_26" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "15"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "67") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "59") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_31"))
                                       (rule "applyEq" (formula "66") (term "0") (ifseqformula "59"))
                                       (rule "applyEq" (formula "60") (term "0,1,1,1,0,0") (ifseqformula "59"))
                                       (rule "simplifySelectOfAnonEQ" (formula "59") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "83")))
                                       (rule "replaceKnownSelect_taclet0100000000100_27" (formula "59") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_29" (formula "59") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "59") (term "0,0,0") (ifseqformula "35"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "59") (term "0,0,0,0") (ifseqformula "27"))
                                       (rule "replace_known_left" (formula "59") (term "0,0,0,0,0") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "59"))
                                       (rule "applyEqReverse" (formula "60") (term "1,0,0,1,0") (ifseqformula "59"))
                                       (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "59"))
                                       (rule "applyEqReverse" (formula "60") (term "0,1,1,1,0,0") (ifseqformula "59"))
                                       (rule "hideAuxiliaryEq" (formula "59"))
                                       (rule "pullOutSelect" (formula "58") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_31"))
                                       (rule "applyEq" (formula "59") (term "0,1,1,1,0,0") (ifseqformula "58"))
                                       (rule "applyEq" (formula "65") (term "0") (ifseqformula "58"))
                                       (rule "simplifySelectOfAnonEQ" (formula "58") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "82")))
                                       (rule "replaceKnownSelect_taclet0100000000100_30" (formula "58") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_32" (formula "58") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "0,0,0") (ifseqformula "35"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "0,0,0,0") (ifseqformula "27"))
                                       (rule "replace_known_left" (formula "58") (term "0,0,0,0,0") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "58"))
                                       (rule "applyEqReverse" (formula "65") (term "0") (ifseqformula "58"))
                                       (rule "applyEqReverse" (formula "59") (term "0,1,1,1,0,0") (ifseqformula "58"))
                                       (rule "applyEqReverse" (formula "59") (term "1,0,0,1,0") (ifseqformula "58"))
                                       (rule "hideAuxiliaryEq" (formula "58"))
                                       (rule "pullOutSelect" (formula "57") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_31"))
                                       (rule "applyEq" (formula "58") (term "0,1,1,1,0,0") (ifseqformula "57"))
                                       (rule "applyEq" (formula "64") (term "0") (ifseqformula "57"))
                                       (rule "simplifySelectOfAnonEQ" (formula "57") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "81")))
                                       (rule "replaceKnownSelect_taclet0100000000100_33" (formula "57") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_35" (formula "57") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0") (ifseqformula "35"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0,0") (ifseqformula "27"))
                                       (rule "replace_known_left" (formula "57") (term "0,0,0,0,0") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "57"))
                                       (rule "applyEqReverse" (formula "58") (term "0,1,1,1,0,0") (ifseqformula "57"))
                                       (rule "applyEqReverse" (formula "58") (term "1,0,0,1,0") (ifseqformula "57"))
                                       (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "57"))
                                       (rule "hideAuxiliaryEq" (formula "57"))
                                       (rule "pullOutSelect" (formula "56") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_31"))
                                       (rule "applyEq" (formula "63") (term "0") (ifseqformula "56"))
                                       (rule "applyEq" (formula "57") (term "0,1,1,1,0,0") (ifseqformula "56"))
                                       (rule "simplifySelectOfAnonEQ" (formula "56") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "80")))
                                       (rule "replaceKnownSelect_taclet0100000000100_36" (formula "56") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_38" (formula "56") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "0,0,0") (ifseqformula "35"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "0,0,0,0") (ifseqformula "27"))
                                       (rule "replace_known_left" (formula "56") (term "0,0,0,0,0") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "56"))
                                       (rule "applyEqReverse" (formula "63") (term "0") (ifseqformula "56"))
                                       (rule "applyEqReverse" (formula "57") (term "1,0,0,1,0") (ifseqformula "56"))
                                       (rule "applyEqReverse" (formula "57") (term "0,1,1,1,0,0") (ifseqformula "56"))
                                       (rule "hideAuxiliaryEq" (formula "56"))
                                       (rule "pullOutSelect" (formula "55") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_31"))
                                       (rule "applyEq" (formula "56") (term "0,1,1,1,0,0") (ifseqformula "55"))
                                       (rule "applyEq" (formula "62") (term "0") (ifseqformula "55"))
                                       (rule "simplifySelectOfAnonEQ" (formula "55") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "79")))
                                       (rule "replaceKnownSelect_taclet0100000000100_39" (formula "55") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_41" (formula "55") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "55") (term "0,0,0") (ifseqformula "35"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "55") (term "0,0,0,0") (ifseqformula "27"))
                                       (rule "replace_known_left" (formula "55") (term "0,0,0,0,0") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "55"))
                                       (rule "applyEqReverse" (formula "56") (term "1,0,0,1,0") (ifseqformula "55"))
                                       (rule "applyEqReverse" (formula "62") (term "0") (ifseqformula "55"))
                                       (rule "applyEqReverse" (formula "56") (term "0,1,1,1,0,0") (ifseqformula "55"))
                                       (rule "hideAuxiliaryEq" (formula "55"))
                                       (rule "pullOutSelect" (formula "54") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_31"))
                                       (rule "applyEq" (formula "55") (term "0,1,1,1,0,0") (ifseqformula "54"))
                                       (rule "applyEq" (formula "61") (term "0") (ifseqformula "54"))
                                       (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "78")))
                                       (rule "replaceKnownSelect_taclet0100000000100_42" (formula "54") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000000100_44" (formula "54") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,0") (ifseqformula "35"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,0,0") (ifseqformula "27"))
                                       (rule "replace_known_left" (formula "54") (term "0,0,0,0,0") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "54"))
                                       (rule "applyEqReverse" (formula "55") (term "1,0,0,1,0") (ifseqformula "54"))
                                       (rule "applyEqReverse" (formula "55") (term "0,1,1,1,0,0") (ifseqformula "54"))
                                       (rule "hideAuxiliaryEq" (formula "54"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "commute_or_2" (formula "50") (term "0"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                       (rule "commute_or_2" (formula "6") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                       (rule "commute_or_2" (formula "38") (term "0"))
                                       (rule "ifthenelse_split" (formula "39") (term "1"))
                                       (branch "result_2.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "6") (term "0,1,1,0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "replace_known_left" (formula "41") (term "0,1,1,0,0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "commute_or_2" (formula "32") (term "0"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "40") (term "1,1,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "41") (term "1,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "42") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "true_left" (formula "42"))
                                          (rule "arrayLengthIsAShort" (formula "42") (term "1,1,0,0"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "true_left" (formula "42"))
                                          (rule "ifthenelse_split" (formula "18") (term "1"))
                                          (branch "result_0.length ≥ 0 TRUE"
                                             (rule "replace_known_left" (formula "20") (term "0,1,1,0") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "ifthenelse_split" (formula "19") (term "0"))
                                             (branch "self.unsigned.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0,0") (ifseqformula "20"))
                                                (rule "eqSymm" (formula "21") (term "1,0,0"))
                                                (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0,0") (ifseqformula "20"))
                                                (rule "eqSymm" (formula "21") (term "1,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "19"))
                                                (rule "leq_literals" (formula "18") (term "0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "nnf_imp2or" (formula "50") (term "0"))
                                                (rule "nnf_imp2or" (formula "49") (term "0"))
                                                (rule "nnf_imp2or" (formula "48") (term "0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0"))
                                                (rule "nnf_imp2or" (formula "46") (term "0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0"))
                                                (rule "commute_or_2" (formula "57") (term "0"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "82") (term "0") (ifseqformula "13"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "83"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "10") (term "0"))
                                                (rule "nnf_imp2or" (formula "9") (term "0"))
                                                (rule "nnf_imp2or" (formula "8") (term "0"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "83"))
                                                   (rule "closeTrue" (formula "83"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "65") (ifseqformula "72"))
                                                   (rule "close" (formula "65") (ifseqformula "14"))
                                                )
                                             )
                                             (branch "self.unsigned.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "19"))
                                                (rule "inEqSimp_geqRight" (formula "64"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                (rule "qeq_literals" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "19"))
                                                (rule "nnf_imp2or" (formula "50") (term "0"))
                                                (rule "nnf_imp2or" (formula "49") (term "0"))
                                                (rule "nnf_imp2or" (formula "48") (term "0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0"))
                                                (rule "nnf_imp2or" (formula "46") (term "0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0"))
                                                (rule "commute_or_2" (formula "57") (term "0"))
                                                (rule "nnf_imp2or" (formula "13") (term "0"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "82") (term "0") (ifseqformula "14"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "83"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "10") (term "0"))
                                                (rule "nnf_imp2or" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "83"))
                                                   (rule "closeTrue" (formula "83"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "65") (ifseqformula "72"))
                                                   (rule "close" (formula "65") (ifseqformula "15"))
                                                )
                                             )
                                          )
                                          (branch "result_0.length ≥ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "63"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_geqRight" (formula "63"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_notGeq" (formula "19") (term "0"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "19") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "50") (term "0"))
                                             (rule "nnf_imp2or" (formula "49") (term "0"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "nnf_imp2or" (formula "47") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "45") (term "0"))
                                             (rule "commute_or_2" (formula "57") (term "0"))
                                             (rule "nnf_imp2or" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "12") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "82") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "83"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "10") (term "0"))
                                             (rule "nnf_imp2or" (formula "9") (term "0"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "83"))
                                                (rule "closeTrue" (formula "83"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "65") (ifseqformula "72"))
                                                (rule "close" (formula "65") (ifseqformula "15"))
                                             )
                                          )
                                       )
                                       (branch "result_2.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "6") (term "0,1,1,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "replace_known_right" (formula "40") (term "0,1,1,0,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "inEqSimp_geqRight" (formula "60"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "41") (term "0,0"))
                                          (rule "add_zero_right" (formula "41") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "41") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "commute_or_2" (formula "33") (term "0"))
                                          (rule "commute_or_2" (formula "20") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,1,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "41") (term "1,1,0,0"))
                                          (rule "ifthenelse_split" (formula "19") (term "1"))
                                          (branch "result_0.length ≥ 0 TRUE"
                                             (rule "replace_known_left" (formula "21") (term "0,1,1,0") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "ifthenelse_split" (formula "20") (term "0"))
                                             (branch "self.unsigned.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "21"))
                                                (rule "eqSymm" (formula "22") (term "1,0,0"))
                                                (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "21"))
                                                (rule "eqSymm" (formula "22") (term "1,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "20"))
                                                (rule "leq_literals" (formula "19") (term "0"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "nnf_imp2or" (formula "49") (term "0"))
                                                (rule "nnf_imp2or" (formula "48") (term "0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0"))
                                                (rule "nnf_imp2or" (formula "46") (term "0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0"))
                                                (rule "nnf_imp2or" (formula "44") (term "0"))
                                                (rule "commute_or_2" (formula "56") (term "0"))
                                                (rule "nnf_imp2or" (formula "13") (term "0"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "14"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "10") (term "0"))
                                                (rule "nnf_imp2or" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "82"))
                                                   (rule "closeTrue" (formula "82"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "71"))
                                                   (rule "close" (formula "64") (ifseqformula "15"))
                                                )
                                             )
                                             (branch "self.unsigned.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "20"))
                                                (rule "inEqSimp_geqRight" (formula "63"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "qeq_literals" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "nnf_imp2or" (formula "49") (term "0"))
                                                (rule "nnf_imp2or" (formula "48") (term "0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0"))
                                                (rule "nnf_imp2or" (formula "46") (term "0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0"))
                                                (rule "nnf_imp2or" (formula "44") (term "0"))
                                                (rule "commute_or_2" (formula "56") (term "0"))
                                                (rule "nnf_imp2or" (formula "14") (term "0"))
                                                (rule "nnf_imp2or" (formula "13") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "15"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "nnf_imp2or" (formula "13") (term "0"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "10") (term "0"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "6"))
                                                   (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "82"))
                                                   (rule "closeTrue" (formula "82"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "71"))
                                                   (rule "close" (formula "64") (ifseqformula "16"))
                                                )
                                             )
                                          )
                                          (branch "result_0.length ≥ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "replace_known_right" (formula "20") (term "0,1,1,0") (ifseqformula "62"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "inEqSimp_geqRight" (formula "62"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_notGeq" (formula "20") (term "0"))
                                             (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "20") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "20") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "49") (term "0"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "nnf_imp2or" (formula "47") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "45") (term "0"))
                                             (rule "nnf_imp2or" (formula "44") (term "0"))
                                             (rule "commute_or_2" (formula "56") (term "0"))
                                             (rule "nnf_imp2or" (formula "14") (term "0"))
                                             (rule "nnf_imp2or" (formula "13") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "10") (term "0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "6"))
                                                (rule "hideAuxiliaryEq" (formula "6"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "82"))
                                                (rule "closeTrue" (formula "82"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "71"))
                                                (rule "close" (formula "64") (ifseqformula "16"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "self.concatenated.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "42"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "inEqSimp_geqRight" (formula "45"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "43") (term "0"))
                                       (rule "mul_literals" (formula "43") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "43") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "43") (term "0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "38") (ifseqformula "12"))
                                       (rule "replaceKnownSelect_taclet0000000100_7" (formula "38") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "38") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0000000100_1" (formula "38") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "38") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "nonNull" (formula "43") (inst "i=i"))
                                       (rule "greater_literals" (formula "43") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "43"))
                                       (rule "sub_literals" (formula "43") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "43"))
                                       (rule "andLeft" (formula "43"))
                                       (rule "notLeft" (formula "43"))
                                       (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "43") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "42") (inst "i=i"))
                                       (rule "greater_literals" (formula "42") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "sub_literals" (formula "42") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "andLeft" (formula "42"))
                                       (rule "notLeft" (formula "42"))
                                       (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "41") (inst "i=i"))
                                       (rule "sub_literals" (formula "41") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "greater_literals" (formula "41") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "40") (inst "i=i"))
                                       (rule "sub_literals" (formula "40") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "greater_literals" (formula "40") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "notLeft" (formula "40"))
                                       (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "39") (inst "i=i"))
                                       (rule "sub_literals" (formula "39") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "greater_literals" (formula "39") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "38") (inst "i=i"))
                                       (rule "greater_literals" (formula "38") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "sub_literals" (formula "38") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "60") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_28"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")) (ifInst ""  (formula "12")))
                                       (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_28"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")) (ifInst ""  (formula "12")))
                                       (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_28"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "12")))
                                       (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_30"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
                                       (rule "replaceKnownSelect_taclet0000000100_4" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "43") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_28"))
                                       (rule "applyEq" (formula "44") (term "0,1,1,1,0,0") (ifseqformula "43"))
                                       (rule "applyEq" (formula "57") (term "0") (ifseqformula "43"))
                                       (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "74")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "43") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "43"))
                                       (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "74")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "43"))
                                       (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,0") (ifseqformula "43"))
                                       (rule "applyEqReverse" (formula "44") (term "1,0,0,1,0") (ifseqformula "43"))
                                       (rule "hideAuxiliaryEq" (formula "43"))
                                       (rule "pullOutSelect" (formula "42") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_28"))
                                       (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                       (rule "applyEq" (formula "56") (term "0") (ifseqformula "42"))
                                       (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "73")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "42") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "73")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "43") (term "1,0,0,1,0") (ifseqformula "42"))
                                       (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "42"))
                                       (rule "applyEqReverse" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                                       (rule "hideAuxiliaryEq" (formula "42"))
                                       (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_28"))
                                       (rule "applyEq" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                       (rule "applyEq" (formula "55") (term "0") (ifseqformula "41"))
                                       (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "72")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "41") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "72")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                       (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "41"))
                                       (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                                       (rule "hideAuxiliaryEq" (formula "41"))
                                       (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_28"))
                                       (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                       (rule "applyEq" (formula "54") (term "0") (ifseqformula "40"))
                                       (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "71")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "40") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "71")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "41") (term "1,0,0,1,0") (ifseqformula "40"))
                                       (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "40"))
                                       (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                       (rule "hideAuxiliaryEq" (formula "40"))
                                       (rule "pullOutSelect" (formula "39") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_28"))
                                       (rule "applyEq" (formula "53") (term "0") (ifseqformula "39"))
                                       (rule "applyEq" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                       (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "70")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "39") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "70")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                       (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "39"))
                                       (rule "applyEqReverse" (formula "40") (term "1,0,0,1,0") (ifseqformula "39"))
                                       (rule "hideAuxiliaryEq" (formula "39"))
                                       (rule "pullOutSelect" (formula "38") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_28"))
                                       (rule "applyEq" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                       (rule "applyEq" (formula "52") (term "0") (ifseqformula "38"))
                                       (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "69")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "38") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "69")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "38"))
                                       (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                       (rule "applyEqReverse" (formula "39") (term "1,0,0,1,0") (ifseqformula "38"))
                                       (rule "hideAuxiliaryEq" (formula "38"))
                                       (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (ifseqformula "12"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "49") (ifseqformula "11"))
                                       (rule "replaceKnownSelect_taclet0000000100_6" (formula "49") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "49") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0000000100_0" (formula "49") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "49") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "notLeft" (formula "49"))
                                       (rule "nonNull" (formula "54") (inst "i=i"))
                                       (rule "sub_literals" (formula "54") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "greater_literals" (formula "54") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "notLeft" (formula "54"))
                                       (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "54") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "53") (inst "i=i"))
                                       (rule "greater_literals" (formula "53") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "53"))
                                       (rule "sub_literals" (formula "53") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "53"))
                                       (rule "andLeft" (formula "53"))
                                       (rule "notLeft" (formula "53"))
                                       (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "53") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "52") (inst "i=i"))
                                       (rule "sub_literals" (formula "52") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "greater_literals" (formula "52") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "andLeft" (formula "52"))
                                       (rule "notLeft" (formula "52"))
                                       (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "51") (inst "i=i"))
                                       (rule "greater_literals" (formula "51") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "sub_literals" (formula "51") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "andLeft" (formula "51"))
                                       (rule "notLeft" (formula "51"))
                                       (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "51") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "50") (inst "i=i"))
                                       (rule "greater_literals" (formula "50") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "50"))
                                       (rule "sub_literals" (formula "50") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "50"))
                                       (rule "andLeft" (formula "50"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "50") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "50") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "49") (inst "i=i"))
                                       (rule "greater_literals" (formula "49") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "49"))
                                       (rule "sub_literals" (formula "49") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "49"))
                                       (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "49") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "64") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_29"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "82")))
                                       (rule "replaceKnownSelect_taclet1100000000100_16" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_18" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "32"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "65") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "63") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_29"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "81")))
                                       (rule "replaceKnownSelect_taclet1100000000100_19" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_21" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "32"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "62") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_29"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                                       (rule "replaceKnownSelect_taclet1100000000100_22" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_24" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "32"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "63") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "61") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_31"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "79")))
                                       (rule "replaceKnownSelect_taclet1100000000100_25" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_26" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "32"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "62") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "54") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_29"))
                                       (rule "applyEq" (formula "61") (term "0") (ifseqformula "54"))
                                       (rule "applyEq" (formula "55") (term "0,1,1,1,0,0") (ifseqformula "54"))
                                       (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "78")))
                                       (rule "replaceKnownSelect_taclet1100000000100_27" (formula "54") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_29" (formula "54") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "54") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "54"))
                                       (rule "applyEqReverse" (formula "55") (term "0,1,1,1,0,0") (ifseqformula "54"))
                                       (rule "applyEqReverse" (formula "55") (term "1,0,0,1,0") (ifseqformula "54"))
                                       (rule "hideAuxiliaryEq" (formula "54"))
                                       (rule "pullOutSelect" (formula "53") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_29"))
                                       (rule "applyEq" (formula "54") (term "0,1,1,1,0,0") (ifseqformula "53"))
                                       (rule "applyEq" (formula "60") (term "0") (ifseqformula "53"))
                                       (rule "simplifySelectOfAnonEQ" (formula "53") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "77")))
                                       (rule "replaceKnownSelect_taclet1100000000100_30" (formula "53") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_32" (formula "53") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "53") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "53"))
                                       (rule "applyEqReverse" (formula "54") (term "1,0,0,1,0") (ifseqformula "53"))
                                       (rule "applyEqReverse" (formula "54") (term "0,1,1,1,0,0") (ifseqformula "53"))
                                       (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "53"))
                                       (rule "hideAuxiliaryEq" (formula "53"))
                                       (rule "pullOutSelect" (formula "52") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_29"))
                                       (rule "applyEq" (formula "59") (term "0") (ifseqformula "52"))
                                       (rule "applyEq" (formula "53") (term "0,1,1,1,0,0") (ifseqformula "52"))
                                       (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "76")))
                                       (rule "replaceKnownSelect_taclet1100000000100_33" (formula "52") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_35" (formula "52") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "52") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,0") (ifseqformula "52"))
                                       (rule "applyEqReverse" (formula "53") (term "1,0,0,1,0") (ifseqformula "52"))
                                       (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "52"))
                                       (rule "hideAuxiliaryEq" (formula "52"))
                                       (rule "pullOutSelect" (formula "51") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_29"))
                                       (rule "applyEq" (formula "52") (term "0,1,1,1,0,0") (ifseqformula "51"))
                                       (rule "applyEq" (formula "58") (term "0") (ifseqformula "51"))
                                       (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "75")))
                                       (rule "replaceKnownSelect_taclet1100000000100_36" (formula "51") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_38" (formula "51") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "51") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "51"))
                                       (rule "applyEqReverse" (formula "52") (term "1,0,0,1,0") (ifseqformula "51"))
                                       (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,0") (ifseqformula "51"))
                                       (rule "hideAuxiliaryEq" (formula "51"))
                                       (rule "pullOutSelect" (formula "50") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_29"))
                                       (rule "applyEq" (formula "57") (term "0") (ifseqformula "50"))
                                       (rule "applyEq" (formula "51") (term "0,1,1,1,0,0") (ifseqformula "50"))
                                       (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "74")))
                                       (rule "replaceKnownSelect_taclet1100000000100_39" (formula "50") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_41" (formula "50") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "50") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "50"))
                                       (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "50"))
                                       (rule "applyEqReverse" (formula "51") (term "1,0,0,1,0") (ifseqformula "50"))
                                       (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,0") (ifseqformula "50"))
                                       (rule "hideAuxiliaryEq" (formula "50"))
                                       (rule "pullOutSelect" (formula "49") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_29"))
                                       (rule "applyEq" (formula "56") (term "0") (ifseqformula "49"))
                                       (rule "applyEq" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                       (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "73")))
                                       (rule "replaceKnownSelect_taclet1100000000100_42" (formula "49") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_44" (formula "49") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "49") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "49"))
                                       (rule "applyEqReverse" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                       (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "49"))
                                       (rule "applyEqReverse" (formula "50") (term "1,0,0,1,0") (ifseqformula "49"))
                                       (rule "hideAuxiliaryEq" (formula "49"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "8") (ifseqformula "11"))
                                       (rule "replaceKnownSelect_taclet0000000100_8" (formula "8") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "8") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet1100000000100_17" (formula "8") (term "0,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_18" (formula "8") (term "0,0,1,0"))
                                       (rule "replaceKnownSelect_taclet1100000000100_20" (formula "8") (term "0,0,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_21" (formula "8") (term "0,0,1,0,0"))
                                       (rule "replaceKnownSelect_taclet1100000000100_28" (formula "8") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1100000000100_23" (formula "8") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_29" (formula "8") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_24" (formula "8") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1100000000100_31" (formula "8") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1100000000100_34" (formula "8") (term "1,1,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_32" (formula "8") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1100000000100_37" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_35" (formula "8") (term "1,1,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1100000000100_40" (formula "8") (term "1,1,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_38" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1100000000100_43" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_41" (formula "8") (term "1,1,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1100000000100_44" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0000000100_4" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0000000100_2" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "nonNull" (formula "13") (inst "i=i"))
                                       (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "65")))
                                       (rule "greater_literals" (formula "13") (term "0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "12") (inst "i=i"))
                                       (rule "greater_literals" (formula "12") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "64")))
                                       (rule "sub_literals" (formula "12") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "11") (inst "i=i"))
                                       (rule "greater_literals" (formula "11") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "63")))
                                       (rule "sub_literals" (formula "11") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "10") (inst "i=i"))
                                       (rule "greater_literals" (formula "10") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "62")))
                                       (rule "sub_literals" (formula "10") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "9") (inst "i=i"))
                                       (rule "greater_literals" (formula "9") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "61")))
                                       (rule "sub_literals" (formula "9") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "8") (inst "i=i"))
                                       (rule "greater_literals" (formula "8") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "60")))
                                       (rule "sub_literals" (formula "8") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "22") (term "0"))
                                       (rule "commute_or_2" (formula "51") (term "0"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                       (rule "commute_or_2" (formula "7") (term "0"))
                                       (rule "ifthenelse_split" (formula "6") (term "0"))
                                       (branch "result_3.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "54") (term "0,1,1,0,0") (ifseqformula "6"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "inEqSimp_contradEq7" (formula "53") (term "1") (ifseqformula "6"))
                                          (rule "times_zero_1" (formula "53") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "53") (term "0,0,1"))
                                          (rule "leq_literals" (formula "53") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "53"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                       (branch "result_3.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "53") (term "0,1,1,0,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "inEqSimp_geqRight" (formula "60"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "53") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "times_zero_2" (formula "7") (term "1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "7") (term "0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "closeFalse" (formula "7"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "cut_direct" (formula "25") (term "0,0"))
                                 (branch "CUT: result_2.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "21") (term "1,0,1"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                    (rule "apply_eq_monomials" (formula "23") (term "1,0,1,0,0") (ifseqformula "22"))
                                    (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "23") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "24") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "true_left" (formula "24"))
                                    (rule "nnf_imp2or" (formula "23") (term "0"))
                                    (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                    (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "32") (ifseqformula "11"))
                                    (rule "replaceKnownSelect_taclet0000000100_7" (formula "32") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "32") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet0000000100_1" (formula "32") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "32") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "32"))
                                    (rule "notLeft" (formula "32"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "45"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "45"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "45"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "43") (term "1,0,1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "31") (term "2,0,0,0,1,0") (ifseqformula "9") (ifseqformula "50"))
                                    (rule "narrowSelectArrayType" (formula "58") (term "1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "eqSymm" (formula "58"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "30") (term "2,0,0,0") (ifseqformula "9") (ifseqformula "50"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "9") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "25") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "17") (ifseqformula "45"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "38") (ifseqformula "45"))
                                    (rule "nonNull" (formula "37") (inst "i=i"))
                                    (rule "sub_literals" (formula "37") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "greater_literals" (formula "37") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "36") (inst "i=i"))
                                    (rule "greater_literals" (formula "36") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "sub_literals" (formula "36") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "andLeft" (formula "36"))
                                    (rule "notLeft" (formula "36"))
                                    (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "35") (inst "i=i"))
                                    (rule "greater_literals" (formula "35") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "sub_literals" (formula "35") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "andLeft" (formula "35"))
                                    (rule "notLeft" (formula "35"))
                                    (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "34") (inst "i=i"))
                                    (rule "sub_literals" (formula "34") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "greater_literals" (formula "34") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "33") (inst "i=i"))
                                    (rule "sub_literals" (formula "33") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "greater_literals" (formula "33") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "andLeft" (formula "33"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "32") (inst "i=i"))
                                    (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "greater_literals" (formula "32") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "32"))
                                    (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "55") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_26"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")) (ifInst ""  (formula "11")))
                                    (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "54") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_26"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")) (ifInst ""  (formula "11")))
                                    (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "53") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_26"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")) (ifInst ""  (formula "11")))
                                    (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "52") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_28"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                    (rule "replaceKnownSelect_taclet0000000100_4" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "15") (term "1,1,1,0") (ifseqformula "9") (ifseqformula "52"))
                                    (rule "pullOutSelect" (formula "37") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_26"))
                                    (rule "applyEq" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                    (rule "applyEq" (formula "51") (term "0") (ifseqformula "37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "62")) (ifInst ""  (formula "10")))
                                    (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "37"))
                                    (rule "applyEqReverse" (formula "38") (term "1,0,0,1,0") (ifseqformula "37"))
                                    (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                    (rule "hideAuxiliaryEq" (formula "37"))
                                    (rule "pullOutSelect" (formula "36") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_26"))
                                    (rule "applyEq" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                                    (rule "applyEq" (formula "50") (term "0") (ifseqformula "36"))
                                    (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "62")) (ifInst ""  (formula "10")))
                                    (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "36"))
                                    (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                                    (rule "applyEqReverse" (formula "37") (term "1,0,0,1,0") (ifseqformula "36"))
                                    (rule "hideAuxiliaryEq" (formula "36"))
                                    (rule "pullOutSelect" (formula "35") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_26"))
                                    (rule "applyEq" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "35"))
                                    (rule "applyEq" (formula "49") (term "0") (ifseqformula "35"))
                                    (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "35") (term "0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "62")) (ifInst ""  (formula "10")))
                                    (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "35"))
                                    (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "35"))
                                    (rule "applyEqReverse" (formula "36") (term "1,0,0,1,0") (ifseqformula "35"))
                                    (rule "hideAuxiliaryEq" (formula "35"))
                                    (rule "pullOutSelect" (formula "34") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_26"))
                                    (rule "applyEq" (formula "48") (term "0") (ifseqformula "34"))
                                    (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                    (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "62")) (ifInst ""  (formula "10")))
                                    (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                    (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "34"))
                                    (rule "applyEqReverse" (formula "35") (term "1,0,0,1,0") (ifseqformula "34"))
                                    (rule "hideAuxiliaryEq" (formula "34"))
                                    (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_26"))
                                    (rule "applyEq" (formula "47") (term "0") (ifseqformula "33"))
                                    (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                    (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "33") (term "0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "62")) (ifInst ""  (formula "10")))
                                    (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                    (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "33"))
                                    (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
                                    (rule "hideAuxiliaryEq" (formula "33"))
                                    (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_26"))
                                    (rule "applyEq" (formula "46") (term "0") (ifseqformula "32"))
                                    (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                    (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "62")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "62")) (ifInst ""  (formula "10")))
                                    (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                    (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "32"))
                                    (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
                                    (rule "hideAuxiliaryEq" (formula "32"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "44") (ifseqformula "11"))
                                    (rule "replaceKnownSelect_taclet0000000100_6" (formula "44") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "44") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet0000000100_0" (formula "44") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "44") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "notLeft" (formula "45"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "notLeft" (formula "45"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "notLeft" (formula "45"))
                                    (rule "notLeft" (formula "44"))
                                    (rule "nonNull" (formula "49") (inst "i=i"))
                                    (rule "sub_literals" (formula "49") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "greater_literals" (formula "49") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "andLeft" (formula "49"))
                                    (rule "notLeft" (formula "49"))
                                    (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "49") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "48") (inst "i=i"))
                                    (rule "sub_literals" (formula "48") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "greater_literals" (formula "48") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "notLeft" (formula "48"))
                                    (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "48") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "47") (inst "i=i"))
                                    (rule "greater_literals" (formula "47") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "47"))
                                    (rule "sub_literals" (formula "47") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "47"))
                                    (rule "andLeft" (formula "47"))
                                    (rule "notLeft" (formula "47"))
                                    (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "47") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "46") (inst "i=i"))
                                    (rule "greater_literals" (formula "46") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "sub_literals" (formula "46") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "andLeft" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "45") (inst "i=i"))
                                    (rule "greater_literals" (formula "45") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "sub_literals" (formula "45") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "notLeft" (formula "45"))
                                    (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "45") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "44") (inst "i=i"))
                                    (rule "greater_literals" (formula "44") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "sub_literals" (formula "44") (term "2,1,0,1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "notLeft" (formula "44"))
                                    (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "44") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_27"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
                                    (rule "replaceKnownSelect_taclet010000000100_16" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_18" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_27"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
                                    (rule "replaceKnownSelect_taclet010000000100_19" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_21" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_27"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
                                    (rule "replaceKnownSelect_taclet010000000100_22" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_24" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "56") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_29"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "74")))
                                    (rule "replaceKnownSelect_taclet010000000100_25" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_26" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "49") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_27"))
                                    (rule "applyEq" (formula "56") (term "0") (ifseqformula "49"))
                                    (rule "applyEq" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                    (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "73")))
                                    (rule "replaceKnownSelect_taclet010000000100_27" (formula "49") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_29" (formula "49") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0") (ifseqformula "26"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "49") (term "0,0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "49"))
                                    (rule "applyEqReverse" (formula "50") (term "1,0,0,1,0") (ifseqformula "49"))
                                    (rule "applyEqReverse" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                    (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "49"))
                                    (rule "hideAuxiliaryEq" (formula "49"))
                                    (rule "pullOutSelect" (formula "48") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_27"))
                                    (rule "applyEq" (formula "49") (term "0,1,1,1,0,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "55") (term "0") (ifseqformula "48"))
                                    (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "72")))
                                    (rule "replaceKnownSelect_taclet010000000100_30" (formula "48") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_32" (formula "48") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0") (ifseqformula "26"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "48") (term "0,0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "48"))
                                    (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "48"))
                                    (rule "applyEqReverse" (formula "49") (term "1,0,0,1,0") (ifseqformula "48"))
                                    (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,0") (ifseqformula "48"))
                                    (rule "hideAuxiliaryEq" (formula "48"))
                                    (rule "pullOutSelect" (formula "47") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_27"))
                                    (rule "applyEq" (formula "48") (term "0,1,1,1,0,0") (ifseqformula "47"))
                                    (rule "applyEq" (formula "54") (term "0") (ifseqformula "47"))
                                    (rule "simplifySelectOfAnonEQ" (formula "47") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "71")))
                                    (rule "replaceKnownSelect_taclet010000000100_33" (formula "47") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_35" (formula "47") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0") (ifseqformula "26"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "47") (term "0,0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "47"))
                                    (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "47"))
                                    (rule "applyEqReverse" (formula "48") (term "1,0,0,1,0") (ifseqformula "47"))
                                    (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0") (ifseqformula "47"))
                                    (rule "hideAuxiliaryEq" (formula "47"))
                                    (rule "pullOutSelect" (formula "46") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_27"))
                                    (rule "applyEq" (formula "47") (term "0,1,1,1,0,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "53") (term "0") (ifseqformula "46"))
                                    (rule "simplifySelectOfAnonEQ" (formula "46") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "70")))
                                    (rule "replaceKnownSelect_taclet010000000100_36" (formula "46") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_38" (formula "46") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "46") (term "0,0,0") (ifseqformula "26"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "46") (term "0,0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0") (ifseqformula "46"))
                                    (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "46"))
                                    (rule "applyEqReverse" (formula "47") (term "1,0,0,1,0") (ifseqformula "46"))
                                    (rule "hideAuxiliaryEq" (formula "46"))
                                    (rule "pullOutSelect" (formula "45") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_27"))
                                    (rule "applyEq" (formula "52") (term "0") (ifseqformula "45"))
                                    (rule "applyEq" (formula "46") (term "0,1,1,1,0,0") (ifseqformula "45"))
                                    (rule "simplifySelectOfAnonEQ" (formula "45") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "69")))
                                    (rule "replaceKnownSelect_taclet010000000100_39" (formula "45") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_41" (formula "45") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,0") (ifseqformula "26"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "45") (term "0,0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "applyEqReverse" (formula "46") (term "0,1,1,1,0,0") (ifseqformula "45"))
                                    (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "45"))
                                    (rule "applyEqReverse" (formula "46") (term "1,0,0,1,0") (ifseqformula "45"))
                                    (rule "hideAuxiliaryEq" (formula "45"))
                                    (rule "pullOutSelect" (formula "44") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_27"))
                                    (rule "applyEq" (formula "51") (term "0") (ifseqformula "44"))
                                    (rule "applyEq" (formula "45") (term "0,1,1,1,0,0") (ifseqformula "44"))
                                    (rule "simplifySelectOfAnonEQ" (formula "44") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "68")))
                                    (rule "replaceKnownSelect_taclet010000000100_42" (formula "44") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_44" (formula "44") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0") (ifseqformula "26"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "44") (term "0,0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,0") (ifseqformula "44"))
                                    (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "44"))
                                    (rule "applyEqReverse" (formula "45") (term "1,0,0,1,0") (ifseqformula "44"))
                                    (rule "hideAuxiliaryEq" (formula "44"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "16") (ifseqformula "11"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "nonNull" (formula "21") (inst "i=i"))
                                    (rule "greater_literals" (formula "21") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "60")))
                                    (rule "sub_literals" (formula "21") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "60"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "20") (inst "i=i"))
                                    (rule "greater_literals" (formula "20") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "59")))
                                    (rule "sub_literals" (formula "20") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "59"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "19") (inst "i=i"))
                                    (rule "greater_literals" (formula "19") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "58")))
                                    (rule "sub_literals" (formula "19") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "58"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "18") (inst "i=i"))
                                    (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "57")))
                                    (rule "greater_literals" (formula "18") (term "0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "57"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "17") (inst "i=i"))
                                    (rule "greater_literals" (formula "17") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "56")))
                                    (rule "sub_literals" (formula "17") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "56"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "16") (inst "i=i"))
                                    (rule "greater_literals" (formula "16") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "55")))
                                    (rule "sub_literals" (formula "16") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "55"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "7") (ifseqformula "11"))
                                    (rule "replaceKnownSelect_taclet0000000100_8" (formula "7") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "7") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet010000000100_17" (formula "7") (term "0,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_18" (formula "7") (term "0,0,1,0"))
                                    (rule "replaceKnownSelect_taclet010000000100_20" (formula "7") (term "0,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_21" (formula "7") (term "0,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet010000000100_28" (formula "7") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010000000100_23" (formula "7") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_29" (formula "7") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_24" (formula "7") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010000000100_31" (formula "7") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010000000100_34" (formula "7") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_32" (formula "7") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010000000100_37" (formula "7") (term "1,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_35" (formula "7") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010000000100_40" (formula "7") (term "1,1,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_38" (formula "7") (term "1,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet010000000100_43" (formula "7") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_41" (formula "7") (term "1,1,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet010000000100_44" (formula "7") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet0000000100_4" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet0000000100_2" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "notLeft" (formula "8"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "notLeft" (formula "8"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "notLeft" (formula "9"))
                                    (rule "notLeft" (formula "8"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "notLeft" (formula "8"))
                                    (rule "notLeft" (formula "7"))
                                    (rule "nonNull" (formula "12") (inst "i=i"))
                                    (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "65")))
                                    (rule "greater_literals" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "11") (inst "i=i"))
                                    (rule "greater_literals" (formula "11") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "64")))
                                    (rule "sub_literals" (formula "11") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "10") (inst "i=i"))
                                    (rule "sub_literals" (formula "10") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "63")))
                                    (rule "greater_literals" (formula "10") (term "0"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "9") (inst "i=i"))
                                    (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "62")))
                                    (rule "greater_literals" (formula "9") (term "0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "8") (inst "i=i"))
                                    (rule "sub_literals" (formula "8") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "61")))
                                    (rule "greater_literals" (formula "8") (term "0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "7") (inst "i=i"))
                                    (rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "60")))
                                    (rule "greater_literals" (formula "7") (term "0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                    (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "13") (term "0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "ifthenelse_split" (formula "51") (term "0"))
                                    (branch "self.concatenated.length ≥ 1 TRUE"
                                       (rule "eqSymm" (formula "52"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "52"))
                                       (rule "replace_known_left" (formula "79") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "5")))
                                       (rule "applyEq" (formula "53") (term "1,1,0,0") (ifseqformula "52"))
                                       (rule "commute_or_2" (formula "50") (term "0"))
                                       (rule "commute_or_2" (formula "6") (term "0"))
                                       (rule "nnf_imp2or" (formula "46") (term "0"))
                                       (rule "nnf_imp2or" (formula "45") (term "0"))
                                       (rule "commute_or_2" (formula "38") (term "0"))
                                       (rule "nnf_imp2or" (formula "44") (term "0"))
                                       (rule "nnf_imp2or" (formula "43") (term "0"))
                                       (rule "nnf_imp2or" (formula "42") (term "0"))
                                       (rule "ifthenelse_split" (formula "39") (term "1"))
                                       (branch "result_2.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "41") (term "0,1,1,0,0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "replace_known_left" (formula "6") (term "0,1,1,0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "nnf_imp2or" (formula "42") (term "0"))
                                          (rule "commute_or_2" (formula "32") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,1,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthNotNegative" (formula "40") (term "1,1,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "41") (term "1,0,0,0"))
                                          (rule "ifthenelse_split" (formula "18") (term "1"))
                                          (branch "result_0.length ≥ 0 TRUE"
                                             (rule "replace_known_left" (formula "20") (term "0,1,1,0,0") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "ifthenelse_split" (formula "19") (term "0"))
                                             (branch "self.unsigned.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0") (ifseqformula "20"))
                                                (rule "eqSymm" (formula "21") (term "1,0"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0") (ifseqformula "20"))
                                                (rule "eqSymm" (formula "21") (term "1,0"))
                                                (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "19"))
                                                (rule "leq_literals" (formula "18") (term "0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "ifthenelse_to_or_left" (formula "57") (term "1,0"))
                                                (rule "eqSymm" (formula "57") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "57"))
                                                (rule "eqSymm" (formula "57") (term "1,0,1,0"))
                                                (rule "nnf_imp2or" (formula "63") (term "0"))
                                                (rule "nnf_imp2or" (formula "62") (term "0"))
                                                (rule "nnf_imp2or" (formula "61") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "82") (term "0") (ifseqformula "13"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "83"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "nnf_imp2or" (formula "61") (term "0"))
                                                (rule "nnf_imp2or" (formula "60") (term "0"))
                                                (rule "nnf_imp2or" (formula "59") (term "0"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "83"))
                                                   (rule "closeTrue" (formula "83"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "65") (ifseqformula "72"))
                                                   (rule "close" (formula "65") (ifseqformula "14"))
                                                )
                                             )
                                             (branch "self.unsigned.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "19"))
                                                (rule "inEqSimp_geqRight" (formula "64"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                (rule "qeq_literals" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "19"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "20") (term "0,0"))
                                                (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "ifthenelse_to_or_left" (formula "56") (term "1,0"))
                                                (rule "eqSymm" (formula "56") (term "1,0,1,0"))
                                                (rule "eqSymm" (formula "56") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "56"))
                                                (rule "nnf_imp2or" (formula "62") (term "0"))
                                                (rule "nnf_imp2or" (formula "61") (term "0"))
                                                (rule "nnf_imp2or" (formula "60") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "14"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "nnf_imp2or" (formula "60") (term "0"))
                                                (rule "nnf_imp2or" (formula "59") (term "0"))
                                                (rule "nnf_imp2or" (formula "58") (term "0"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "82"))
                                                   (rule "closeTrue" (formula "82"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "71"))
                                                   (rule "close" (formula "64") (ifseqformula "15"))
                                                )
                                             )
                                          )
                                          (branch "result_0.length ≥ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "replace_known_right" (formula "19") (term "0,1,1,0,0") (ifseqformula "63"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_geqRight" (formula "63"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_notGeq" (formula "19") (term "0"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "19") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "20") (term "0,0"))
                                             (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "ifthenelse_to_or_left" (formula "56") (term "1,0"))
                                             (rule "eqSymm" (formula "56") (term "1,1,1,0"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "eqSymm" (formula "56") (term "1,0,1,0"))
                                             (rule "nnf_imp2or" (formula "62") (term "0"))
                                             (rule "nnf_imp2or" (formula "61") (term "0"))
                                             (rule "nnf_imp2or" (formula "60") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "60") (term "0"))
                                             (rule "nnf_imp2or" (formula "59") (term "0"))
                                             (rule "nnf_imp2or" (formula "58") (term "0"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "82"))
                                                (rule "closeTrue" (formula "82"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "71"))
                                                (rule "close" (formula "64") (ifseqformula "15"))
                                             )
                                          )
                                       )
                                       (branch "result_2.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "6") (term "0,1,1,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "replace_known_right" (formula "40") (term "0,1,1,0,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "inEqSimp_geqRight" (formula "60"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "41") (term "0,0"))
                                          (rule "add_zero_right" (formula "41") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "41") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "nnf_imp2or" (formula "41") (term "0"))
                                          (rule "commute_or_2" (formula "33") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,1,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "41") (term "1,1,0,0"))
                                          (rule "ifthenelse_split" (formula "19") (term "1"))
                                          (branch "result_0.length ≥ 0 TRUE"
                                             (rule "replace_known_left" (formula "21") (term "0,1,1,0,0") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "ifthenelse_split" (formula "20") (term "0"))
                                             (branch "self.unsigned.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0") (ifseqformula "21"))
                                                (rule "eqSymm" (formula "22") (term "1,0"))
                                                (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0") (ifseqformula "21"))
                                                (rule "eqSymm" (formula "22") (term "1,0"))
                                                (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "20"))
                                                (rule "leq_literals" (formula "19") (term "0"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "ifthenelse_to_or_left" (formula "56") (term "1,0"))
                                                (rule "eqSymm" (formula "56") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "56"))
                                                (rule "eqSymm" (formula "56") (term "1,0,1,0"))
                                                (rule "nnf_imp2or" (formula "62") (term "0"))
                                                (rule "nnf_imp2or" (formula "61") (term "0"))
                                                (rule "nnf_imp2or" (formula "60") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "14"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "nnf_imp2or" (formula "60") (term "0"))
                                                (rule "nnf_imp2or" (formula "59") (term "0"))
                                                (rule "nnf_imp2or" (formula "58") (term "0"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "82"))
                                                   (rule "closeTrue" (formula "82"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "71"))
                                                   (rule "close" (formula "64") (ifseqformula "15"))
                                                )
                                             )
                                             (branch "self.unsigned.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "20"))
                                                (rule "inEqSimp_geqRight" (formula "63"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "qeq_literals" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "21") (term "0,0"))
                                                (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "true_left" (formula "21"))
                                                (rule "ifthenelse_to_or_left" (formula "55") (term "1,0"))
                                                (rule "eqSymm" (formula "55") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "55"))
                                                (rule "eqSymm" (formula "55") (term "1,0,1,0"))
                                                (rule "nnf_imp2or" (formula "61") (term "0"))
                                                (rule "nnf_imp2or" (formula "60") (term "0"))
                                                (rule "nnf_imp2or" (formula "59") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "80") (term "0") (ifseqformula "15"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "81"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "nnf_imp2or" (formula "59") (term "0"))
                                                (rule "nnf_imp2or" (formula "58") (term "0"))
                                                (rule "nnf_imp2or" (formula "57") (term "0"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "6"))
                                                   (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "81"))
                                                   (rule "closeTrue" (formula "81"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "63") (ifseqformula "70"))
                                                   (rule "close" (formula "63") (ifseqformula "16"))
                                                )
                                             )
                                          )
                                          (branch "result_0.length ≥ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "62"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "inEqSimp_geqRight" (formula "62"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_notGeq" (formula "20") (term "0"))
                                             (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "20") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "20") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "21") (term "0,0"))
                                             (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "ifthenelse_to_or_right" (formula "55") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "55"))
                                             (rule "nnf_imp2or" (formula "61") (term "0"))
                                             (rule "nnf_imp2or" (formula "60") (term "0"))
                                             (rule "nnf_imp2or" (formula "59") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "80") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "81"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "59") (term "0"))
                                             (rule "nnf_imp2or" (formula "58") (term "0"))
                                             (rule "nnf_imp2or" (formula "57") (term "0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "81"))
                                                (rule "closeTrue" (formula "81"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "63") (ifseqformula "70"))
                                                (rule "close" (formula "63") (ifseqformula "16"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "self.concatenated.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "51"))
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "inEqSimp_geqRight" (formula "59"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "commute_or_2" (formula "51") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "52") (term "0"))
                                       (rule "mul_literals" (formula "52") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "52") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "52") (term "0,0"))
                                       (rule "commute_or_2" (formula "7") (term "0"))
                                       (rule "ifthenelse_split" (formula "6") (term "0"))
                                       (branch "result_3.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "54") (term "0,1,1,0,0") (ifseqformula "6"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "inEqSimp_contradEq7" (formula "53") (term "1") (ifseqformula "6"))
                                          (rule "times_zero_1" (formula "53") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "53") (term "0,0,1"))
                                          (rule "leq_literals" (formula "53") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "inEqSimp_contradInEq1" (formula "53") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "53") (term "0"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "closeFalse" (formula "53"))
                                       )
                                       (branch "result_3.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "53") (term "0,1,1,0,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "inEqSimp_geqRight" (formula "60"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "53") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "times_zero_2" (formula "7") (term "1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                    )
                                 )
                                 (branch "CUT: result_2.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "21") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "22") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                    (rule "apply_eq_monomials" (formula "23") (term "1,0,1,0,0") (ifseqformula "22"))
                                    (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "23") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0"))
                                    (rule "nnf_imp2or" (formula "23") (term "0"))
                                    (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                    (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                    (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "8") (term "0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "ifthenelse_split" (formula "36") (term "0"))
                                    (branch "self.concatenated.length ≥ 1 TRUE"
                                       (rule "eqSymm" (formula "37"))
                                       (rule "applyEq" (formula "38") (term "1,1,0,0") (ifseqformula "37"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "37"))
                                       (rule "replace_known_left" (formula "48") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "5")))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "15") (ifseqformula "10"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "ifthenelse_negated" (formula "1") (term "0"))
                                       (rule "ifthenelse_negated" (formula "3") (term "0"))
                                       (rule "ifthenelse_negated" (formula "2") (term "0"))
                                       (rule "narrowSelectArrayType" (formula "14") (term "1,1,1,0") (ifseqformula "8") (ifseqformula "45"))
                                       (rule "narrowSelectArrayType" (formula "43") (term "1,0,1,0") (ifseqformula "8") (ifseqformula "46"))
                                       (rule "narrowSelectArrayType" (formula "34") (term "2,0,0,0") (ifseqformula "8") (ifseqformula "50"))
                                       (rule "narrowSelectArrayType" (formula "35") (term "2,0,0,0,1,0") (ifseqformula "8") (ifseqformula "50"))
                                       (rule "narrowSelectArrayType" (formula "59") (term "0") (ifseqformula "8") (ifseqformula "46"))
                                       (rule "eqSymm" (formula "59"))
                                       (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "8") (ifseqformula "46"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "29") (ifseqformula "46"))
                                       (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "21") (ifseqformula "46"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "37") (ifseqformula "46"))
                                       (rule "nonNull" (formula "20") (inst "i=i"))
                                       (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "greater_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "45"))
                                       (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "19") (inst "i=i"))
                                       (rule "greater_literals" (formula "19") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "sub_literals" (formula "19") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "notLeft" (formula "19"))
                                       (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "45"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "18") (inst "i=i"))
                                       (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "greater_literals" (formula "18") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "45"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "17") (inst "i=i"))
                                       (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "greater_literals" (formula "17") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "45"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "16") (inst "i=i"))
                                       (rule "greater_literals" (formula "16") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "sub_literals" (formula "16") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "45"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "15") (inst "i=i"))
                                       (rule "greater_literals" (formula "15") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "sub_literals" (formula "15") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "45"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "nnf_imp2or" (formula "19") (term "0"))
                                       (rule "nnf_imp2or" (formula "18") (term "0"))
                                       (rule "nnf_imp2or" (formula "17") (term "0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "36") (ifseqformula "10"))
                                       (rule "replaceKnownSelect_taclet0000000100_7" (formula "36") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "36") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0000000100_1" (formula "36") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "36") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "nonNull" (formula "41") (inst "i=i"))
                                       (rule "greater_literals" (formula "41") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "sub_literals" (formula "41") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "40") (inst "i=i"))
                                       (rule "sub_literals" (formula "40") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "greater_literals" (formula "40") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "notLeft" (formula "40"))
                                       (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "39") (inst "i=i"))
                                       (rule "greater_literals" (formula "39") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "sub_literals" (formula "39") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "38") (inst "i=i"))
                                       (rule "greater_literals" (formula "38") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "sub_literals" (formula "38") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "37") (inst "i=i"))
                                       (rule "greater_literals" (formula "37") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "sub_literals" (formula "37") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "36") (inst "i=i"))
                                       (rule "sub_literals" (formula "36") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "greater_literals" (formula "36") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_24"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_24"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_24"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "56") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_26"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
                                       (rule "replaceKnownSelect_taclet0000000100_4" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_24"))
                                       (rule "applyEq" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                       (rule "applyEq" (formula "56") (term "0") (ifseqformula "41"))
                                       (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "74")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "41") (term "0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "74")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "41"))
                                       (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                                       (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                                       (rule "hideAuxiliaryEq" (formula "41"))
                                       (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_24"))
                                       (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                       (rule "applyEq" (formula "55") (term "0") (ifseqformula "40"))
                                       (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "73")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "40") (term "0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "73")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "40"))
                                       (rule "applyEqReverse" (formula "41") (term "1,0,0,1,0") (ifseqformula "40"))
                                       (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                                       (rule "hideAuxiliaryEq" (formula "40"))
                                       (rule "pullOutSelect" (formula "39") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_24"))
                                       (rule "applyEq" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                       (rule "applyEq" (formula "54") (term "0") (ifseqformula "39"))
                                       (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "72")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "39") (term "0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "72")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "39"))
                                       (rule "applyEqReverse" (formula "40") (term "1,0,0,1,0") (ifseqformula "39"))
                                       (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                                       (rule "hideAuxiliaryEq" (formula "39"))
                                       (rule "pullOutSelect" (formula "38") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_24"))
                                       (rule "applyEq" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                       (rule "applyEq" (formula "53") (term "0") (ifseqformula "38"))
                                       (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "71")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "38") (term "0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "71")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "39") (term "1,0,0,1,0") (ifseqformula "38"))
                                       (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                                       (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "38"))
                                       (rule "hideAuxiliaryEq" (formula "38"))
                                       (rule "pullOutSelect" (formula "37") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_24"))
                                       (rule "applyEq" (formula "52") (term "0") (ifseqformula "37"))
                                       (rule "applyEq" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                       (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "70")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "70")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                       (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "37"))
                                       (rule "applyEqReverse" (formula "38") (term "1,0,0,1,0") (ifseqformula "37"))
                                       (rule "hideAuxiliaryEq" (formula "37"))
                                       (rule "pullOutSelect" (formula "36") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_24"))
                                       (rule "applyEq" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "51") (term "0") (ifseqformula "36"))
                                       (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "69")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "69")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "37") (term "1,0,0,1,0") (ifseqformula "36"))
                                       (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "36"))
                                       (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                                       (rule "hideAuxiliaryEq" (formula "36"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "49") (ifseqformula "10"))
                                       (rule "replaceKnownSelect_taclet0000000100_6" (formula "49") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "49") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0000000100_0" (formula "49") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "49") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "51"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "51"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "notLeft" (formula "49"))
                                       (rule "nonNull" (formula "54") (inst "i=i"))
                                       (rule "sub_literals" (formula "54") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "greater_literals" (formula "54") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "notLeft" (formula "54"))
                                       (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "54") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "53") (inst "i=i"))
                                       (rule "greater_literals" (formula "53") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "53"))
                                       (rule "sub_literals" (formula "53") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "53"))
                                       (rule "andLeft" (formula "53"))
                                       (rule "notLeft" (formula "53"))
                                       (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "53") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "52") (inst "i=i"))
                                       (rule "sub_literals" (formula "52") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "greater_literals" (formula "52") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "andLeft" (formula "52"))
                                       (rule "notLeft" (formula "52"))
                                       (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "51") (inst "i=i"))
                                       (rule "greater_literals" (formula "51") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "sub_literals" (formula "51") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "andLeft" (formula "51"))
                                       (rule "notLeft" (formula "51"))
                                       (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "51") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "50") (inst "i=i"))
                                       (rule "greater_literals" (formula "50") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "50"))
                                       (rule "sub_literals" (formula "50") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "50"))
                                       (rule "andLeft" (formula "50"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "50") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "50") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "49") (inst "i=i"))
                                       (rule "greater_literals" (formula "49") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "49"))
                                       (rule "sub_literals" (formula "49") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "49"))
                                       (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "49") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "64") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_25"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "83")))
                                       (rule "replaceKnownSelect_taclet0110000000100_16" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_18" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "65") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "63") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_25"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "82")))
                                       (rule "replaceKnownSelect_taclet0110000000100_19" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_21" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "62") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_25"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "81")))
                                       (rule "replaceKnownSelect_taclet0110000000100_22" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_24" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "63") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "61") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_27"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                                       (rule "replaceKnownSelect_taclet0110000000100_25" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_26" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "62") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "54") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_25"))
                                       (rule "applyEq" (formula "61") (term "0") (ifseqformula "54"))
                                       (rule "applyEq" (formula "55") (term "0,1,1,1,0,0") (ifseqformula "54"))
                                       (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "79")))
                                       (rule "replaceKnownSelect_taclet0110000000100_27" (formula "54") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_29" (formula "54") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,0") (ifseqformula "30"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "54") (term "0,0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "54"))
                                       (rule "applyEqReverse" (formula "55") (term "0,1,1,1,0,0") (ifseqformula "54"))
                                       (rule "applyEqReverse" (formula "55") (term "1,0,0,1,0") (ifseqformula "54"))
                                       (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "54"))
                                       (rule "hideAuxiliaryEq" (formula "54"))
                                       (rule "pullOutSelect" (formula "53") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_25"))
                                       (rule "applyEq" (formula "54") (term "0,1,1,1,0,0") (ifseqformula "53"))
                                       (rule "applyEq" (formula "60") (term "0") (ifseqformula "53"))
                                       (rule "simplifySelectOfAnonEQ" (formula "53") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "78")))
                                       (rule "replaceKnownSelect_taclet0110000000100_30" (formula "53") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_32" (formula "53") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,0,0") (ifseqformula "30"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "53") (term "0,0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "53"))
                                       (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "53"))
                                       (rule "applyEqReverse" (formula "54") (term "1,0,0,1,0") (ifseqformula "53"))
                                       (rule "applyEqReverse" (formula "54") (term "0,1,1,1,0,0") (ifseqformula "53"))
                                       (rule "hideAuxiliaryEq" (formula "53"))
                                       (rule "pullOutSelect" (formula "52") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_25"))
                                       (rule "applyEq" (formula "53") (term "0,1,1,1,0,0") (ifseqformula "52"))
                                       (rule "applyEq" (formula "59") (term "0") (ifseqformula "52"))
                                       (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "77")))
                                       (rule "replaceKnownSelect_taclet0110000000100_33" (formula "52") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_35" (formula "52") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,0,0") (ifseqformula "30"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "52") (term "0,0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "applyEqReverse" (formula "53") (term "1,0,0,1,0") (ifseqformula "52"))
                                       (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,0") (ifseqformula "52"))
                                       (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "52"))
                                       (rule "hideAuxiliaryEq" (formula "52"))
                                       (rule "pullOutSelect" (formula "51") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_25"))
                                       (rule "applyEq" (formula "58") (term "0") (ifseqformula "51"))
                                       (rule "applyEq" (formula "52") (term "0,1,1,1,0,0") (ifseqformula "51"))
                                       (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "76")))
                                       (rule "replaceKnownSelect_taclet0110000000100_36" (formula "51") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_38" (formula "51") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0") (ifseqformula "30"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "51") (term "0,0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "51"))
                                       (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,0") (ifseqformula "51"))
                                       (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "51"))
                                       (rule "applyEqReverse" (formula "52") (term "1,0,0,1,0") (ifseqformula "51"))
                                       (rule "hideAuxiliaryEq" (formula "51"))
                                       (rule "pullOutSelect" (formula "50") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_25"))
                                       (rule "applyEq" (formula "57") (term "0") (ifseqformula "50"))
                                       (rule "applyEq" (formula "51") (term "0,1,1,1,0,0") (ifseqformula "50"))
                                       (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "75")))
                                       (rule "replaceKnownSelect_taclet0110000000100_39" (formula "50") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_41" (formula "50") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,0") (ifseqformula "30"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "50") (term "0,0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "50"))
                                       (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,0") (ifseqformula "50"))
                                       (rule "applyEqReverse" (formula "51") (term "1,0,0,1,0") (ifseqformula "50"))
                                       (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "50"))
                                       (rule "hideAuxiliaryEq" (formula "50"))
                                       (rule "pullOutSelect" (formula "49") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_25"))
                                       (rule "applyEq" (formula "56") (term "0") (ifseqformula "49"))
                                       (rule "applyEq" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                       (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "74")))
                                       (rule "replaceKnownSelect_taclet0110000000100_42" (formula "49") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_44" (formula "49") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0") (ifseqformula "30"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "49") (term "0,0,0,0,0") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "49"))
                                       (rule "applyEqReverse" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                       (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "49"))
                                       (rule "applyEqReverse" (formula "50") (term "1,0,0,1,0") (ifseqformula "49"))
                                       (rule "hideAuxiliaryEq" (formula "49"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "7") (ifseqformula "10"))
                                       (rule "replaceKnownSelect_taclet0000000100_8" (formula "7") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "7") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0110000000100_17" (formula "7") (term "0,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_18" (formula "7") (term "0,0,1,0"))
                                       (rule "replaceKnownSelect_taclet0110000000100_20" (formula "7") (term "0,0,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_21" (formula "7") (term "0,0,1,0,0"))
                                       (rule "replaceKnownSelect_taclet0110000000100_23" (formula "7") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0110000000100_28" (formula "7") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_24" (formula "7") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_29" (formula "7") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0110000000100_31" (formula "7") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0110000000100_34" (formula "7") (term "1,1,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_32" (formula "7") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0110000000100_37" (formula "7") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_35" (formula "7") (term "1,1,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0110000000100_40" (formula "7") (term "1,1,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_38" (formula "7") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0110000000100_43" (formula "7") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_41" (formula "7") (term "1,1,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0110000000100_44" (formula "7") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0000000100_4" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0000000100_2" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "7") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "notLeft" (formula "7"))
                                       (rule "notLeft" (formula "7"))
                                       (rule "nonNull" (formula "12") (inst "i=i"))
                                       (rule "greater_literals" (formula "12") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "65")))
                                       (rule "sub_literals" (formula "12") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "11") (inst "i=i"))
                                       (rule "greater_literals" (formula "11") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "64")))
                                       (rule "sub_literals" (formula "11") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "10") (inst "i=i"))
                                       (rule "sub_literals" (formula "10") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "63")))
                                       (rule "greater_literals" (formula "10") (term "0"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "9") (inst "i=i"))
                                       (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "62")))
                                       (rule "greater_literals" (formula "9") (term "0"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "8") (inst "i=i"))
                                       (rule "sub_literals" (formula "8") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "61")))
                                       (rule "greater_literals" (formula "8") (term "0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "7") (inst "i=i"))
                                       (rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "60")))
                                       (rule "greater_literals" (formula "7") (term "0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "commute_or_2" (formula "50") (term "0"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                       (rule "commute_or_2" (formula "6") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "38") (term "0"))
                                       (rule "ifthenelse_split" (formula "39") (term "1"))
                                       (branch "result_2.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "6") (term "0,1,1,0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "replace_known_left" (formula "41") (term "0,1,1,0,0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "commute_or_2" (formula "32") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "40") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "41") (term "1,1,0,0"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "arrayLengthNotNegative" (formula "41") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "commute_or_2" (formula "56") (term "0"))
                                          (rule "ifthenelse_split" (formula "18") (term "1"))
                                          (branch "result_0.length ≥ 0 TRUE"
                                             (rule "replace_known_left" (formula "20") (term "0,1,1,0") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "ifthenelse_split" (formula "19") (term "0"))
                                             (branch "self.unsigned.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0,0") (ifseqformula "20"))
                                                (rule "eqSymm" (formula "21") (term "1,0,0"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0,0") (ifseqformula "20"))
                                                (rule "eqSymm" (formula "21") (term "1,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "19"))
                                                (rule "leq_literals" (formula "18") (term "0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "nnf_imp2or" (formula "50") (term "0"))
                                                (rule "nnf_imp2or" (formula "49") (term "0"))
                                                (rule "nnf_imp2or" (formula "48") (term "0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0"))
                                                (rule "nnf_imp2or" (formula "46") (term "0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "83") (term "0") (ifseqformula "13"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "84"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "ifthenelse_split" (formula "57") (term "0"))
                                                (branch "result_3.length ≥ 1 TRUE"
                                                   (rule "eqSymm" (formula "58"))
                                                   (rule "applyEq" (formula "59") (term "1,1,1,0,0,1,0,0") (ifseqformula "58"))
                                                   (rule "eqSymm" (formula "59") (term "1,0,0"))
                                                   (rule "applyEq" (formula "6") (term "0") (ifseqformula "58"))
                                                   (rule "applyEq" (formula "59") (term "1,1,0") (ifseqformula "58"))
                                                   (rule "applyEq" (formula "56") (term "0") (ifseqformula "58"))
                                                   (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "56"))
                                                   (rule "leq_literals" (formula "43") (term "0"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "true_left" (formula "43"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "self.concatenated.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "84") (term "0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "83"))
                                                      (rule "closeTrue" (formula "83"))
                                                   )
                                                   (branch "self.concatenated.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "72"))
                                                      (rule "close" (formula "64") (ifseqformula "14"))
                                                   )
                                                )
                                                (branch "result_3.length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "57"))
                                                   (rule "inEqSimp_geqRight" (formula "65"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "59") (term "1,1,0") (ifseqformula "58"))
                                                   (rule "applyEq" (formula "59") (term "1,1,1,0,0,1,0,0") (ifseqformula "58"))
                                                   (rule "add_literals" (formula "59") (term "1,1,0,0,1,0,0"))
                                                   (rule "eqSymm" (formula "59") (term "1,0,0"))
                                                   (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                                   (rule "qeq_literals" (formula "57"))
                                                   (rule "closeFalse" (formula "57"))
                                                )
                                             )
                                             (branch "self.unsigned.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "19"))
                                                (rule "inEqSimp_geqRight" (formula "64"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                (rule "qeq_literals" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "nnf_imp2or" (formula "50") (term "0"))
                                                (rule "nnf_imp2or" (formula "49") (term "0"))
                                                (rule "nnf_imp2or" (formula "48") (term "0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0"))
                                                (rule "nnf_imp2or" (formula "46") (term "0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "83") (term "0") (ifseqformula "14"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "84"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "ifthenelse_split" (formula "57") (term "0"))
                                                (branch "result_3.length ≥ 1 TRUE"
                                                   (rule "eqSymm" (formula "58"))
                                                   (rule "applyEq" (formula "7") (term "0") (ifseqformula "58"))
                                                   (rule "applyEq" (formula "59") (term "1,1,0") (ifseqformula "58"))
                                                   (rule "applyEq" (formula "56") (term "0") (ifseqformula "58"))
                                                   (rule "applyEq" (formula "58") (term "1,1,1,0,0,1,0,0") (ifseqformula "57"))
                                                   (rule "eqSymm" (formula "58") (term "1,0,0"))
                                                   (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "56"))
                                                   (rule "leq_literals" (formula "43") (term "0"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "true_left" (formula "43"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.concatenated.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "83"))
                                                      (rule "closeTrue" (formula "83"))
                                                   )
                                                   (branch "self.concatenated.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "72"))
                                                      (rule "close" (formula "64") (ifseqformula "15"))
                                                   )
                                                )
                                                (branch "result_3.length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "57"))
                                                   (rule "inEqSimp_geqRight" (formula "65"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "59") (term "1,1,1,0,0,1,0,0") (ifseqformula "58"))
                                                   (rule "add_zero_right" (formula "59") (term "1,1,0,0,1,0,0"))
                                                   (rule "eqSymm" (formula "59") (term "1,0,0"))
                                                   (rule "applyEq" (formula "59") (term "1,1,0") (ifseqformula "58"))
                                                   (rule "applyEq" (formula "8") (term "0") (ifseqformula "58"))
                                                   (rule "inEqSimp_homoInEq1" (formula "8"))
                                                   (rule "times_zero_2" (formula "8") (term "1,0"))
                                                   (rule "add_zero_right" (formula "8") (term "0"))
                                                   (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                                   (rule "qeq_literals" (formula "57"))
                                                   (rule "closeFalse" (formula "57"))
                                                )
                                             )
                                          )
                                          (branch "result_0.length ≥ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "63"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_geqRight" (formula "63"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_notGeq" (formula "19") (term "0"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "19") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "50") (term "0"))
                                             (rule "nnf_imp2or" (formula "49") (term "0"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "nnf_imp2or" (formula "47") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "45") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "83") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "84"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "ifthenelse_split" (formula "57") (term "0"))
                                             (branch "result_3.length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "58"))
                                                (rule "applyEq" (formula "7") (term "0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "59") (term "1,1,0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "56") (term "0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "58") (term "1,1,1,0,0,1,0,0") (ifseqformula "57"))
                                                (rule "eqSymm" (formula "58") (term "1,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "56"))
                                                (rule "leq_literals" (formula "43") (term "0"))
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "true_left" (formula "43"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "84") (term "0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "83"))
                                                   (rule "closeTrue" (formula "83"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "64") (ifseqformula "72"))
                                                   (rule "close" (formula "64") (ifseqformula "15"))
                                                )
                                             )
                                             (branch "result_3.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "57"))
                                                (rule "inEqSimp_geqRight" (formula "65"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "8") (term "0") (ifseqformula "58"))
                                                (rule "inEqSimp_homoInEq1" (formula "8"))
                                                (rule "times_zero_2" (formula "8") (term "1,0"))
                                                (rule "add_zero_right" (formula "8") (term "0"))
                                                (rule "applyEq" (formula "59") (term "1,1,0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                                (rule "qeq_literals" (formula "57"))
                                                (rule "closeFalse" (formula "57"))
                                             )
                                          )
                                       )
                                       (branch "result_2.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "40") (term "0,1,1,0,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "replace_known_right" (formula "6") (term "0,1,1,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "inEqSimp_geqRight" (formula "60"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "41") (term "0,0"))
                                          (rule "add_zero_right" (formula "41") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "41") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "commute_or_2" (formula "33") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "41") (term "1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "arrayLengthNotNegative" (formula "41") (term "1,1,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "42") (term "1,1,0,0"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "true_left" (formula "42"))
                                          (rule "commute_or_2" (formula "20") (term "0"))
                                          (rule "commute_or_2" (formula "55") (term "0"))
                                          (rule "ifthenelse_split" (formula "19") (term "1"))
                                          (branch "result_0.length ≥ 0 TRUE"
                                             (rule "replace_known_left" (formula "21") (term "0,1,1,0") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "ifthenelse_split" (formula "20") (term "0"))
                                             (branch "self.unsigned.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "21"))
                                                (rule "eqSymm" (formula "22") (term "1,0,0"))
                                                (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "21"))
                                                (rule "eqSymm" (formula "22") (term "1,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "20"))
                                                (rule "leq_literals" (formula "19") (term "0"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "nnf_imp2or" (formula "49") (term "0"))
                                                (rule "nnf_imp2or" (formula "48") (term "0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0"))
                                                (rule "nnf_imp2or" (formula "46") (term "0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0"))
                                                (rule "nnf_imp2or" (formula "44") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "82") (term "0") (ifseqformula "14"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "83"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "ifthenelse_split" (formula "56") (term "0"))
                                                (branch "result_3.length ≥ 1 TRUE"
                                                   (rule "eqSymm" (formula "57"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "57"))
                                                   (rule "applyEq" (formula "57") (term "1,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "57") (term "1,1,1,0,0,1,0,0") (ifseqformula "56"))
                                                   (rule "eqSymm" (formula "57") (term "1,0,0"))
                                                   (rule "applyEq" (formula "7") (term "0") (ifseqformula "56"))
                                                   (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "55"))
                                                   (rule "leq_literals" (formula "43") (term "0"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "true_left" (formula "43"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.concatenated.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "82"))
                                                      (rule "closeTrue" (formula "82"))
                                                   )
                                                   (branch "self.concatenated.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "63") (ifseqformula "71"))
                                                      (rule "close" (formula "63") (ifseqformula "15"))
                                                   )
                                                )
                                                (branch "result_3.length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "56"))
                                                   (rule "inEqSimp_geqRight" (formula "64"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "58") (term "1,1,1,0,0,1,0,0") (ifseqformula "57"))
                                                   (rule "add_literals" (formula "58") (term "1,1,0,0,1,0,0"))
                                                   (rule "eqSymm" (formula "58") (term "1,0,0"))
                                                   (rule "applyEq" (formula "8") (term "0") (ifseqformula "57"))
                                                   (rule "inEqSimp_homoInEq1" (formula "8"))
                                                   (rule "times_zero_2" (formula "8") (term "1,0"))
                                                   (rule "add_zero_right" (formula "8") (term "0"))
                                                   (rule "applyEq" (formula "58") (term "1,1,0") (ifseqformula "57"))
                                                   (rule "applyEq" (formula "56") (term "0") (ifseqformula "57"))
                                                   (rule "qeq_literals" (formula "56"))
                                                   (rule "closeFalse" (formula "56"))
                                                )
                                             )
                                             (branch "self.unsigned.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "20"))
                                                (rule "inEqSimp_geqRight" (formula "63"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "qeq_literals" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "20"))
                                                (rule "nnf_imp2or" (formula "49") (term "0"))
                                                (rule "nnf_imp2or" (formula "48") (term "0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0"))
                                                (rule "nnf_imp2or" (formula "46") (term "0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0"))
                                                (rule "nnf_imp2or" (formula "44") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "82") (term "0") (ifseqformula "15"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "83"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "ifthenelse_split" (formula "56") (term "0"))
                                                (branch "result_3.length ≥ 1 TRUE"
                                                   (rule "eqSymm" (formula "57"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "57"))
                                                   (rule "applyEq" (formula "57") (term "1,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "57") (term "1,1,1,0,0,1,0,0") (ifseqformula "56"))
                                                   (rule "eqSymm" (formula "57") (term "1,0,0"))
                                                   (rule "applyEq" (formula "8") (term "0") (ifseqformula "56"))
                                                   (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "55"))
                                                   (rule "leq_literals" (formula "43") (term "0"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "true_left" (formula "43"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.concatenated.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "82"))
                                                      (rule "closeTrue" (formula "82"))
                                                   )
                                                   (branch "self.concatenated.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "63") (ifseqformula "71"))
                                                      (rule "close" (formula "63") (ifseqformula "16"))
                                                   )
                                                )
                                                (branch "result_3.length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "56"))
                                                   (rule "inEqSimp_geqRight" (formula "64"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "58") (term "1,1,0") (ifseqformula "57"))
                                                   (rule "applyEq" (formula "56") (term "0") (ifseqformula "57"))
                                                   (rule "qeq_literals" (formula "56"))
                                                   (rule "closeFalse" (formula "56"))
                                                )
                                             )
                                          )
                                          (branch "result_0.length ≥ 0 FALSE"
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "replace_known_right" (formula "20") (term "0,1,1,0") (ifseqformula "62"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "inEqSimp_geqRight" (formula "62"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_notGeq" (formula "20") (term "0"))
                                             (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "20") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "20") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "49") (term "0"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "nnf_imp2or" (formula "47") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "45") (term "0"))
                                             (rule "nnf_imp2or" (formula "44") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "82") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "83"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "ifthenelse_split" (formula "56") (term "0"))
                                             (branch "result_3.length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "57"))
                                                (rule "applyEq" (formula "8") (term "0") (ifseqformula "57"))
                                                (rule "applyEq" (formula "58") (term "1,1,0") (ifseqformula "57"))
                                                (rule "applyEq" (formula "55") (term "0") (ifseqformula "57"))
                                                (rule "applyEq" (formula "57") (term "1,1,1,0,0,1,0,0") (ifseqformula "56"))
                                                (rule "eqSymm" (formula "57") (term "1,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "55"))
                                                (rule "leq_literals" (formula "43") (term "0"))
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "true_left" (formula "43"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.concatenated.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "82"))
                                                   (rule "closeTrue" (formula "82"))
                                                )
                                                (branch "self.concatenated.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "63") (ifseqformula "71"))
                                                   (rule "close" (formula "63") (ifseqformula "16"))
                                                )
                                             )
                                             (branch "result_3.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "56"))
                                                (rule "inEqSimp_geqRight" (formula "64"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "58") (term "1,1,0") (ifseqformula "57"))
                                                (rule "applyEq" (formula "9") (term "0") (ifseqformula "57"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "times_zero_2" (formula "9") (term "1,0"))
                                                (rule "add_zero_right" (formula "9") (term "0"))
                                                (rule "applyEq" (formula "56") (term "0") (ifseqformula "57"))
                                                (rule "qeq_literals" (formula "56"))
                                                (rule "closeFalse" (formula "56"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "self.concatenated.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "36"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "inEqSimp_geqRight" (formula "39"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "37") (term "0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "37") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "37") (term "0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "32") (ifseqformula "11"))
                                       (rule "replaceKnownSelect_taclet0000000100_7" (formula "32") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "32") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0000000100_1" (formula "32") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "32") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "ifthenelse_negated" (formula "3") (term "0"))
                                       (rule "ifthenelse_negated" (formula "2") (term "0"))
                                       (rule "narrowSelectArrayType" (formula "43") (term "1,0,1,0") (ifseqformula "9") (ifseqformula "46"))
                                       (rule "ifthenelse_negated" (formula "4") (term "0"))
                                       (rule "narrowSelectArrayType" (formula "59") (term "1,0") (ifseqformula "9") (ifseqformula "46"))
                                       (rule "eqSymm" (formula "59"))
                                       (rule "narrowSelectArrayType" (formula "31") (term "2,0,0,0,1,0") (ifseqformula "9") (ifseqformula "50"))
                                       (rule "narrowSelectArrayType" (formula "30") (term "2,0,0,0") (ifseqformula "9") (ifseqformula "50"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "25") (ifseqformula "46"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "17") (ifseqformula "46"))
                                       (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "38") (ifseqformula "46"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "1,0") (ifseqformula "9") (ifseqformula "46"))
                                       (rule "nonNull" (formula "37") (inst "i=i"))
                                       (rule "greater_literals" (formula "37") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "sub_literals" (formula "37") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "36") (inst "i=i"))
                                       (rule "greater_literals" (formula "36") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "sub_literals" (formula "36") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "35") (inst "i=i"))
                                       (rule "sub_literals" (formula "35") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "greater_literals" (formula "35") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "notLeft" (formula "35"))
                                       (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "34") (inst "i=i"))
                                       (rule "greater_literals" (formula "34") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "sub_literals" (formula "34") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "33") (inst "i=i"))
                                       (rule "greater_literals" (formula "33") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "sub_literals" (formula "33") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "andLeft" (formula "33"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "32") (inst "i=i"))
                                       (rule "greater_literals" (formula "32") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "sub_literals" (formula "32") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "55") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_22"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "54") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_22"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "53") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_22"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")) (ifInst ""  (formula "11")))
                                       (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "51") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_24"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                                       (rule "replaceKnownSelect_taclet0000000100_4" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "narrowSelectArrayType" (formula "15") (term "1,1,1,0") (ifseqformula "9") (ifseqformula "51"))
                                       (rule "pullOutSelect" (formula "37") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_22"))
                                       (rule "applyEq" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                       (rule "applyEq" (formula "51") (term "0") (ifseqformula "37"))
                                       (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "26"))
                                       (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "63")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "63")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "38") (term "1,0,0,1,0") (ifseqformula "37"))
                                       (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                                       (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "37"))
                                       (rule "hideAuxiliaryEq" (formula "37"))
                                       (rule "pullOutSelect" (formula "36") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_22"))
                                       (rule "applyEq" (formula "50") (term "0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                                       (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "26"))
                                       (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "63")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "63")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "37") (term "1,0,0,1,0") (ifseqformula "36"))
                                       (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                                       (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "36"))
                                       (rule "hideAuxiliaryEq" (formula "36"))
                                       (rule "pullOutSelect" (formula "35") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_22"))
                                       (rule "applyEq" (formula "49") (term "0") (ifseqformula "35"))
                                       (rule "applyEq" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "35"))
                                       (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "26"))
                                       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "63")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "35") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "63")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "36") (term "1,0,0,1,0") (ifseqformula "35"))
                                       (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "35"))
                                       (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "35"))
                                       (rule "hideAuxiliaryEq" (formula "35"))
                                       (rule "pullOutSelect" (formula "34") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_22"))
                                       (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                       (rule "applyEq" (formula "48") (term "0") (ifseqformula "34"))
                                       (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "26"))
                                       (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "63")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "63")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "34"))
                                       (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                       (rule "applyEqReverse" (formula "35") (term "1,0,0,1,0") (ifseqformula "34"))
                                       (rule "hideAuxiliaryEq" (formula "34"))
                                       (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_22"))
                                       (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                       (rule "applyEq" (formula "47") (term "0") (ifseqformula "33"))
                                       (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "26"))
                                       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "63")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "33") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "63")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
                                       (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "33"))
                                       (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                       (rule "hideAuxiliaryEq" (formula "33"))
                                       (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_22"))
                                       (rule "applyEq" (formula "46") (term "0") (ifseqformula "32"))
                                       (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                       (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "26"))
                                       (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "63")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "63")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
                                       (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "32"))
                                       (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                       (rule "hideAuxiliaryEq" (formula "32"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "44") (ifseqformula "11"))
                                       (rule "replaceKnownSelect_taclet0000000100_6" (formula "44") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "44") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0000000100_0" (formula "44") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "44") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "notLeft" (formula "45"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "notLeft" (formula "45"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "notLeft" (formula "45"))
                                       (rule "notLeft" (formula "44"))
                                       (rule "nonNull" (formula "49") (inst "i=i"))
                                       (rule "greater_literals" (formula "49") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "49"))
                                       (rule "sub_literals" (formula "49") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "49"))
                                       (rule "andLeft" (formula "49"))
                                       (rule "notLeft" (formula "49"))
                                       (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "49") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "48") (inst "i=i"))
                                       (rule "greater_literals" (formula "48") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "sub_literals" (formula "48") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "notLeft" (formula "48"))
                                       (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "48") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "47") (inst "i=i"))
                                       (rule "sub_literals" (formula "47") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "greater_literals" (formula "47") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "47") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "46") (inst "i=i"))
                                       (rule "greater_literals" (formula "46") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "sub_literals" (formula "46") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "46") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "45") (inst "i=i"))
                                       (rule "greater_literals" (formula "45") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "45"))
                                       (rule "sub_literals" (formula "45") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "45"))
                                       (rule "andLeft" (formula "45"))
                                       (rule "notLeft" (formula "45"))
                                       (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "45") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "44") (inst "i=i"))
                                       (rule "greater_literals" (formula "44") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "sub_literals" (formula "44") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "notLeft" (formula "44"))
                                       (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "44") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
                                       (rule "replaceKnownSelect_taclet1110000000100_16" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_18" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
                                       (rule "replaceKnownSelect_taclet1110000000100_19" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_21" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
                                       (rule "replaceKnownSelect_taclet1110000000100_22" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_24" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "56") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_25"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
                                       (rule "replaceKnownSelect_taclet1110000000100_25" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_26" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "57") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "49") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_23"))
                                       (rule "applyEq" (formula "56") (term "0") (ifseqformula "49"))
                                       (rule "applyEq" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                       (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "74")))
                                       (rule "replaceKnownSelect_taclet1110000000100_27" (formula "49") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_29" (formula "49") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "49") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "49"))
                                       (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "49"))
                                       (rule "applyEqReverse" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "49"))
                                       (rule "applyEqReverse" (formula "50") (term "1,0,0,1,0") (ifseqformula "49"))
                                       (rule "hideAuxiliaryEq" (formula "49"))
                                       (rule "pullOutSelect" (formula "48") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_23"))
                                       (rule "applyEq" (formula "49") (term "0,1,1,1,0,0") (ifseqformula "48"))
                                       (rule "applyEq" (formula "55") (term "0") (ifseqformula "48"))
                                       (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "73")))
                                       (rule "replaceKnownSelect_taclet1110000000100_30" (formula "48") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_32" (formula "48") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "48") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "applyEqReverse" (formula "49") (term "1,0,0,1,0") (ifseqformula "48"))
                                       (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,0") (ifseqformula "48"))
                                       (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "48"))
                                       (rule "hideAuxiliaryEq" (formula "48"))
                                       (rule "pullOutSelect" (formula "47") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_23"))
                                       (rule "applyEq" (formula "54") (term "0") (ifseqformula "47"))
                                       (rule "applyEq" (formula "48") (term "0,1,1,1,0,0") (ifseqformula "47"))
                                       (rule "simplifySelectOfAnonEQ" (formula "47") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "72")))
                                       (rule "replaceKnownSelect_taclet1110000000100_33" (formula "47") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_35" (formula "47") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "47") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0") (ifseqformula "47"))
                                       (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "47"))
                                       (rule "applyEqReverse" (formula "48") (term "1,0,0,1,0") (ifseqformula "47"))
                                       (rule "hideAuxiliaryEq" (formula "47"))
                                       (rule "pullOutSelect" (formula "46") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_23"))
                                       (rule "applyEq" (formula "53") (term "0") (ifseqformula "46"))
                                       (rule "applyEq" (formula "47") (term "0,1,1,1,0,0") (ifseqformula "46"))
                                       (rule "simplifySelectOfAnonEQ" (formula "46") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "71")))
                                       (rule "replaceKnownSelect_taclet1110000000100_36" (formula "46") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_38" (formula "46") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "46") (term "0,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "46") (term "0,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "46") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "46"))
                                       (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0") (ifseqformula "46"))
                                       (rule "applyEqReverse" (formula "47") (term "1,0,0,1,0") (ifseqformula "46"))
                                       (rule "hideAuxiliaryEq" (formula "46"))
                                       (rule "pullOutSelect" (formula "45") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_23"))
                                       (rule "applyEq" (formula "52") (term "0") (ifseqformula "45"))
                                       (rule "applyEq" (formula "46") (term "0,1,1,1,0,0") (ifseqformula "45"))
                                       (rule "simplifySelectOfAnonEQ" (formula "45") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "70")))
                                       (rule "replaceKnownSelect_taclet1110000000100_39" (formula "45") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_41" (formula "45") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "45") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "45"))
                                       (rule "applyEqReverse" (formula "46") (term "0,1,1,1,0,0") (ifseqformula "45"))
                                       (rule "applyEqReverse" (formula "46") (term "1,0,0,1,0") (ifseqformula "45"))
                                       (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "45"))
                                       (rule "hideAuxiliaryEq" (formula "45"))
                                       (rule "pullOutSelect" (formula "44") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_23"))
                                       (rule "applyEq" (formula "45") (term "0,1,1,1,0,0") (ifseqformula "44"))
                                       (rule "applyEq" (formula "51") (term "0") (ifseqformula "44"))
                                       (rule "simplifySelectOfAnonEQ" (formula "44") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "69")))
                                       (rule "replaceKnownSelect_taclet1110000000100_42" (formula "44") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_44" (formula "44") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "44") (term "0,0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "44"))
                                       (rule "applyEqReverse" (formula "45") (term "1,0,0,1,0") (ifseqformula "44"))
                                       (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,0") (ifseqformula "44"))
                                       (rule "hideAuxiliaryEq" (formula "44"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "16") (ifseqformula "11"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "nonNull" (formula "21") (inst "i=i"))
                                       (rule "greater_literals" (formula "21") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "60")))
                                       (rule "sub_literals" (formula "21") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "60"))
                                       (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "20") (inst "i=i"))
                                       (rule "greater_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "59")))
                                       (rule "sub_literals" (formula "20") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "59"))
                                       (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "19") (inst "i=i"))
                                       (rule "greater_literals" (formula "19") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "58")))
                                       (rule "sub_literals" (formula "19") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "58"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "18") (inst "i=i"))
                                       (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "57")))
                                       (rule "greater_literals" (formula "18") (term "0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "57"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "17") (inst "i=i"))
                                       (rule "greater_literals" (formula "17") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "56")))
                                       (rule "sub_literals" (formula "17") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "56"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "16") (inst "i=i"))
                                       (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "55")))
                                       (rule "greater_literals" (formula "16") (term "0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "55"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "8") (ifseqformula "11"))
                                       (rule "replaceKnownSelect_taclet0000000100_8" (formula "8") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_9" (formula "8") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet1110000000100_17" (formula "8") (term "0,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_18" (formula "8") (term "0,0,1,0"))
                                       (rule "replaceKnownSelect_taclet1110000000100_20" (formula "8") (term "0,0,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_21" (formula "8") (term "0,0,1,0,0"))
                                       (rule "replaceKnownSelect_taclet1110000000100_28" (formula "8") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1110000000100_23" (formula "8") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_29" (formula "8") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_24" (formula "8") (term "0,0,1,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1110000000100_31" (formula "8") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1110000000100_34" (formula "8") (term "1,1,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_32" (formula "8") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1110000000100_37" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_35" (formula "8") (term "1,1,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1110000000100_40" (formula "8") (term "1,1,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_38" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1110000000100_43" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_41" (formula "8") (term "1,1,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000100_44" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0000000100_4" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0000000100_2" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_5" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000000100_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "nonNull" (formula "13") (inst "i=i"))
                                       (rule "greater_literals" (formula "13") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "65")))
                                       (rule "sub_literals" (formula "13") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "12") (inst "i=i"))
                                       (rule "greater_literals" (formula "12") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "64")))
                                       (rule "sub_literals" (formula "12") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "11") (inst "i=i"))
                                       (rule "greater_literals" (formula "11") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "63")))
                                       (rule "sub_literals" (formula "11") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "10") (inst "i=i"))
                                       (rule "greater_literals" (formula "10") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "62")))
                                       (rule "sub_literals" (formula "10") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "9") (inst "i=i"))
                                       (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "61")))
                                       (rule "greater_literals" (formula "9") (term "0"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "8") (inst "i=i"))
                                       (rule "sub_literals" (formula "8") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "60")))
                                       (rule "greater_literals" (formula "8") (term "0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                       (rule "commute_or_2" (formula "51") (term "0"))
                                       (rule "commute_or_2" (formula "7") (term "0"))
                                       (rule "ifthenelse_split" (formula "6") (term "0"))
                                       (branch "result_3.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "54") (term "0,1,1,0,0") (ifseqformula "6"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "inEqSimp_contradEq7" (formula "53") (term "1") (ifseqformula "6"))
                                          (rule "times_zero_1" (formula "53") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "53") (term "0,0,1"))
                                          (rule "leq_literals" (formula "53") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "53"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                       (branch "result_3.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "53") (term "0,1,1,0,0") (ifseqformula "60"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "inEqSimp_geqRight" (formula "60"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "53") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "times_zero_2" (formula "7") (term "1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: array2seq(heapAfter_checkAndRemoveElectionId, result_2) = array2seq(heapAfter_checkAndRemoveTag_0, result_2) FALSE"
                              (rule "hide_right" (formula "40") (userinteraction))
                              (rule "array2seqDef" (formula "33") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seqDef" (formula "33") (term "1") (inst "u=u") (userinteraction))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "33") (inst "iv=iv") (userinteraction))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1") (ifseqformula "14"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1") (ifseqformula "27"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "20"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1") (ifseqformula "20"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "14"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,1") (ifseqformula "14"))
                              (rule "eqSymm" (formula "33") (term "0"))
                              (rule "eqSymm" (formula "30"))
                              (rule "eqSymm" (formula "17"))
                              (rule "eqSymm" (formula "24"))
                              (rule "eqSymm" (formula "33") (term "1,0,1"))
                              (rule "eqSymm" (formula "23"))
                              (rule "eqSymm" (formula "18"))
                              (rule "eqSymm" (formula "11"))
                              (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "38"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "lenOfSeqDef" (formula "33") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "33") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "33") (term "1,1,1,0,0,1"))
                              (rule "lenOfSeqDef" (formula "33") (term "0,0"))
                              (rule "eqSymm" (formula "33") (term "0"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,1,0"))
                              (rule "times_zero_2" (formula "33") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "1,1,0"))
                              (rule "getOfSeqDef" (formula "33") (term "1,1,0,1"))
                              (rule "castDel" (formula "33") (term "1,1,1,0,1"))
                              (rule "castDel" (formula "33") (term "2,1,1,0,1"))
                              (rule "add_zero_right" (formula "33") (term "0,2,1,1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,1,0,1,1,0,1"))
                              (rule "times_zero_2" (formula "33") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "33") (term "1,1,0,1,1,0,1"))
                              (rule "getOfSeqDef" (formula "33") (term "0,1,0,1"))
                              (rule "castDel" (formula "33") (term "1,0,1,0,1"))
                              (rule "castDel" (formula "33") (term "2,0,1,0,1"))
                              (rule "add_zero_right" (formula "33") (term "0,2,1,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0,1"))
                              (rule "times_zero_2" (formula "33") (term "1,1,1,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,0,1"))
                              (rule "lenOfSeqDef" (formula "33") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,0,0"))
                              (rule "times_zero_2" (formula "33") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "33") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "allRight" (formula "33") (inst "sk=iv_12"))
                              (rule "impRight" (formula "33"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "35") (term "0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0"))
                              (rule "eqSymm" (formula "35"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1"))
                              (rule "eqSymm" (formula "35"))
                              (rule "polySimp_addComm1" (formula "35") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "5"))
                              (rule "applyEq" (formula "13") (term "1") (ifseqformula "5"))
                              (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "5"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "array2seqDef" (formula "3") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "5") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "4") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                              (rule "array2seqDef" (formula "33") (term "0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "33"))
                              (rule "array2seqDef" (formula "5") (term "1") (inst "u=u"))
                              (rule "array2seqDef" (formula "32") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "32") (term "0,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "19") (term "0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "19"))
                              (rule "array2seqDef" (formula "26") (term "0,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "26") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "26"))
                              (rule "array2seqDef" (formula "25") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "20") (term "0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "20"))
                              (rule "array2seqDef" (formula "13") (term "0,0") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "13") (term "2,0,0") (ifseqformula "8") (ifseqformula "41"))
                              (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                              (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "13"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "13"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "13"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "13"))
                              (rule "array2seqDef" (formula "25") (term "0,1") (inst "u=u"))
                              (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "13"))
                              (rule "mFirstofmConcat" (formula "25") (term "1"))
                              (rule "array2seqDef" (formula "33") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "33"))
                              (rule "array2seqDef" (formula "19") (term "0,0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "19"))
                              (rule "array2seqDef" (formula "26") (term "1,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "20") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "20"))
                              (rule "array2seqDef" (formula "13") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "13"))
                              (rule "array2seqDef" (formula "4") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "4"))
                              (rule "array2seqDef" (formula "3") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "3"))
                              (rule "array2seqDef" (formula "5") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "5"))
                              (rule "eqSeqDef" (formula "25") (inst "iv=iv"))
                              (rule "andLeft" (formula "25"))
                              (rule "lenOfSeqDef" (formula "25") (term "1"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1"))
                              (rule "mul_literals" (formula "25") (term "1,1,1"))
                              (rule "add_zero_right" (formula "25") (term "1,1"))
                              (rule "getOfSeqDef" (formula "26") (term "1,1,0"))
                              (rule "castDel" (formula "26") (term "2,1,1,0"))
                              (rule "castDel" (formula "26") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "26") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "25") (term "0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                              (rule "mul_literals" (formula "25") (term "1,1,0"))
                              (rule "add_zero_right" (formula "25") (term "1,0"))
                              (rule "getOfSeqDef" (formula "26") (term "0,1,0"))
                              (rule "castDel" (formula "26") (term "1,0,1,0"))
                              (rule "castDel" (formula "26") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "lenOfSeqDef" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "26") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "26") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "26") (term "1,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
                              (rule "apply_eq_monomials" (formula "26") (term "1,0,0,1,0,0") (ifseqformula "25"))
                              (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                              (rule "eqSeqDef2" (formula "33") (inst "iv=iv") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "true_left" (formula "33"))
                              (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
                              (rule "andLeft" (formula "13"))
                              (rule "lenOfSeqDef" (formula "13") (term "1"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                              (rule "times_zero_2" (formula "13") (term "1,1,1"))
                              (rule "add_zero_right" (formula "13") (term "1,1"))
                              (rule "getOfSeqDef" (formula "14") (term "1,1,0"))
                              (rule "castDel" (formula "14") (term "1,1,1,0"))
                              (rule "castDel" (formula "14") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "14") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
                              (rule "add_zero_right" (formula "13") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
                              (rule "apply_eq_monomials" (formula "14") (term "1,0,1,0,0") (ifseqformula "13"))
                              (rule "polySimp_rightDist" (formula "14") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "1,0,1,0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "14") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,0,0"))
                              (rule "eqSeqDef" (formula "4") (inst "iv=iv"))
                              (rule "andLeft" (formula "4"))
                              (rule "getOfSeqDef" (formula "5") (term "1,1,0"))
                              (rule "castDel" (formula "5") (term "1,1,1,0"))
                              (rule "castDel" (formula "5") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "5") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "5") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "5") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "5") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "4") (term "1"))
                              (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                              (rule "times_zero_2" (formula "4") (term "1,1,1"))
                              (rule "add_zero_right" (formula "4") (term "1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                              (rule "add_zero_right" (formula "4") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,1,0"))
                              (rule "apply_eq_monomials" (formula "5") (term "1,0,1,0,0") (ifseqformula "4"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "5") (term "1,0,1,0,0"))
                              (rule "add_literals" (formula "5") (term "1,1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "5") (term "1,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "5") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                              (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
                              (rule "andLeft" (formula "3"))
                              (rule "getOfSeqDef" (formula "4") (term "1,1,0"))
                              (rule "castDel" (formula "4") (term "2,1,1,0"))
                              (rule "castDel" (formula "4") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "4") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "4") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "3") (term "1"))
                              (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                              (rule "times_zero_2" (formula "3") (term "1,1,1"))
                              (rule "add_zero_right" (formula "3") (term "1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                              (rule "add_zero_right" (formula "3") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
                              (rule "apply_eq_monomials" (formula "4") (term "1,0,1,0,0") (ifseqformula "3"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "1,0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1,0,0"))
                              (rule "eqSeqDef" (formula "7") (inst "iv=iv"))
                              (rule "andLeft" (formula "7"))
                              (rule "getOfSeqDef" (formula "8") (term "1,1,0"))
                              (rule "castDel" (formula "8") (term "2,1,1,0"))
                              (rule "castDel" (formula "8") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "8") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "8") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "7") (term "1"))
                              (rule "polySimp_elimSub" (formula "7") (term "1,1"))
                              (rule "times_zero_2" (formula "7") (term "1,1,1"))
                              (rule "add_zero_right" (formula "7") (term "1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
                              (rule "add_zero_right" (formula "7") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0"))
                              (rule "apply_eq_monomials" (formula "8") (term "1,0,1,0,0") (ifseqformula "7"))
                              (rule "polySimp_rightDist" (formula "8") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "8") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "38") (term "1,1") (inst "selectSK=arr_113"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "39"))
                              (rule "closeTrue" (formula "39"))
                           )
                        )
                        (branch "CUT: array2seq(heapAfter_checkAndRemoveTag_0, result_0) = array2seq(heapAfter_checkAndRemoveSignature, result_0) FALSE"
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "32") (inst "iv=iv") (userinteraction))
                           (rule "hide_right" (formula "39") (userinteraction))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1") (ifseqformula "13"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "1") (ifseqformula "26"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,1") (ifseqformula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1") (ifseqformula "13"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,1") (ifseqformula "13"))
                           (rule "eqSymm" (formula "17"))
                           (rule "eqSymm" (formula "29"))
                           (rule "eqSymm" (formula "22"))
                           (rule "eqSymm" (formula "16"))
                           (rule "eqSymm" (formula "10"))
                           (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "37"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1"))
                           (rule "applyEq" (formula "32") (term "0,1,1,0,1") (ifseqformula "2"))
                           (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "10") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                           (rule "lenOfSeqDefEQ" (formula "32") (term "1,0") (ifseqformula "2"))
                           (rule "eqSymm" (formula "32") (term "0"))
                           (rule "polySimp_elimSub" (formula "32") (term "1,0,0"))
                           (rule "times_zero_2" (formula "32") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "32") (term "1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                           (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "23") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "32") (term "0,0,1,0,1") (inst "u=u"))
                           (rule "getOfSeqDef" (formula "32") (term "0,1,0,1"))
                           (rule "castDel" (formula "32") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "32") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "32") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "32") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "32") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "32") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "30") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "30") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "23") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "17") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "17") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "29"))
                           (rule "array2seqDef" (formula "22") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "22"))
                           (rule "array2seqDef" (formula "16") (term "0,0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "16") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "5") (ifseqformula "38"))
                           (rule "array2seqDef" (formula "32") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "32") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "32") (term "0,1,0,1"))
                           (rule "castDel" (formula "32") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "32") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "32") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "32") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "32") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "32") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "10"))
                           (rule "applyEq" (formula "2") (term "1") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "10"))
                           (rule "array2seqDef" (formula "32") (term "0,1,1,1,0,0,1") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "32") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "32") (term "1,1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "32") (term "1,1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "32") (term "1,1,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "32") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,1,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,0,1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "32") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "32") (term "0"))
                           (rule "lenOfSeqDef" (formula "32") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "32") (term "1,0,0"))
                           (rule "times_zero_2" (formula "32") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "32") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,0,0,0"))
                           (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "29"))
                           (rule "array2seqDef" (formula "22") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "22"))
                           (rule "eqSeqDef2" (formula "23") (inst "iv=iv") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "eqSeqDef2" (formula "17") (inst "iv=iv") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "eqSeqDef2" (formula "28") (inst "iv=iv") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "2"))
                           (rule "andLeft" (formula "10"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "lenOfSeqDef" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "11") (term "1,1,0"))
                           (rule "castDel" (formula "11") (term "1,1,1,0"))
                           (rule "castDel" (formula "11") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "11") (term "0,1,0"))
                           (rule "castDel" (formula "11") (term "2,0,1,0"))
                           (rule "castDel" (formula "11") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "10") (term "1"))
                           (rule "polySimp_elimSub" (formula "10") (term "1,1"))
                           (rule "times_zero_2" (formula "10") (term "1,1,1"))
                           (rule "add_zero_right" (formula "10") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "10") (term "0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "polySimp_elimSub" (formula "10") (term "1,1"))
                           (rule "times_zero_2" (formula "10") (term "1,1,1"))
                           (rule "add_zero_right" (formula "10") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1"))
                           (rule "add_zero_right" (formula "10") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "10"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "eqSeqDef2" (formula "1") (inst "iv=iv") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "eqSeqDef2" (formula "1") (inst "iv=iv") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "eqSeqDef2" (formula "26") (inst "iv=iv") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "nnf_imp2or" (formula "26") (term "0,1"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "26") (term "0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "26") (term "1,0,0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1"))
                           (rule "commute_or_2" (formula "24"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "5"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "21"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "22"))
                           (rule "notLeft" (formula "21"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "22"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "21"))
                           (rule "notLeft" (formula "20"))
                           (rule "nonNull" (formula "25") (inst "i=i"))
                           (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "greater_literals" (formula "25") (term "0,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "24") (inst "i=i"))
                           (rule "greater_literals" (formula "24") (term "0,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "sub_literals" (formula "24") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "24"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "23") (inst "i=i"))
                           (rule "greater_literals" (formula "23") (term "0,1"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "sub_literals" (formula "23") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "23"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "22") (inst "i=i"))
                           (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "greater_literals" (formula "22") (term "0,1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "21") (inst "i=i"))
                           (rule "greater_literals" (formula "21") (term "0,1"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "sub_literals" (formula "21") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "notLeft" (formula "21"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "20") (inst "i=i"))
                           (rule "greater_literals" (formula "20") (term "0,1"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "sub_literals" (formula "20") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "20"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_20"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_20"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_20"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_20"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_14"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_21"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "narrowSelectArrayType" (formula "43") (term "1,0,1,0,1") (ifseqformula "3") (ifseqformula "37"))
                           (rule "narrowSelectArrayType" (formula "9") (term "1,0,1,0") (ifseqformula "3") (ifseqformula "37"))
                           (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_20"))
                           (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                           (rule "applyEq" (formula "37") (term "0") (ifseqformula "25"))
                           (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "48")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
                           (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "25"))
                           (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                           (rule "hideAuxiliaryEq" (formula "25"))
                           (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_20"))
                           (rule "applyEq" (formula "36") (term "0") (ifseqformula "24"))
                           (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                           (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "48")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
                           (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                           (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "24"))
                           (rule "hideAuxiliaryEq" (formula "24"))
                           (rule "pullOutSelect" (formula "23") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_20"))
                           (rule "applyEq" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                           (rule "applyEq" (formula "35") (term "0") (ifseqformula "23"))
                           (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "23") (term "0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "48")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0") (ifseqformula "23"))
                           (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "23"))
                           (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                           (rule "hideAuxiliaryEq" (formula "23"))
                           (rule "pullOutSelect" (formula "22") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_20"))
                           (rule "applyEq" (formula "34") (term "0") (ifseqformula "22"))
                           (rule "applyEq" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
                           (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "22") (term "0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "48")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "23") (term "1,0,0,1,0") (ifseqformula "22"))
                           (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
                           (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "22"))
                           (rule "hideAuxiliaryEq" (formula "22"))
                           (rule "pullOutSelect" (formula "21") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_20"))
                           (rule "applyEq" (formula "33") (term "0") (ifseqformula "21"))
                           (rule "applyEq" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
                           (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "21") (term "0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "48")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "22") (term "1,0,0,1,0") (ifseqformula "21"))
                           (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
                           (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "21"))
                           (rule "hideAuxiliaryEq" (formula "21"))
                           (rule "pullOutSelect" (formula "20") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_20"))
                           (rule "applyEq" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "32") (term "0") (ifseqformula "20"))
                           (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "48")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "48")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
                           (rule "hideAuxiliaryEq" (formula "20"))
                           (rule "nnf_imp2or" (formula "25") (term "0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "nnf_imp2or" (formula "23") (term "0"))
                           (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "2") (term "0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "29") (ifseqformula "4"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "notLeft" (formula "31"))
                           (rule "notLeft" (formula "30"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "notLeft" (formula "31"))
                           (rule "notLeft" (formula "30"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "notLeft" (formula "30"))
                           (rule "notLeft" (formula "29"))
                           (rule "nonNull" (formula "34") (inst "i=i"))
                           (rule "greater_literals" (formula "34") (term "0,1"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "sub_literals" (formula "34") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "andLeft" (formula "34"))
                           (rule "notLeft" (formula "34"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "33") (inst "i=i"))
                           (rule "sub_literals" (formula "33") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "greater_literals" (formula "33") (term "0,1"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "andLeft" (formula "33"))
                           (rule "notLeft" (formula "33"))
                           (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "32") (inst "i=i"))
                           (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "greater_literals" (formula "32") (term "0,1"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "notLeft" (formula "32"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "31") (inst "i=i"))
                           (rule "sub_literals" (formula "31") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "greater_literals" (formula "31") (term "0,1"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "notLeft" (formula "31"))
                           (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "30") (inst "i=i"))
                           (rule "greater_literals" (formula "30") (term "0,1"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "sub_literals" (formula "30") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "notLeft" (formula "30"))
                           (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "29") (inst "i=i"))
                           (rule "sub_literals" (formula "29") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "greater_literals" (formula "29") (term "0,1"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "notLeft" (formula "29"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_21"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                           (rule "replaceKnownSelect_taclet100000100_1" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_3" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "45") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_21"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                           (rule "replaceKnownSelect_taclet100000100_4" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_6" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_21"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                           (rule "replaceKnownSelect_taclet100000100_7" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_9" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_21"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                           (rule "replaceKnownSelect_taclet100000100_10" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_12" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_15"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                           (rule "replaceKnownSelect_taclet100000100_13" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_15" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_22"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                           (rule "replaceKnownSelect_taclet100000100_16" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_18" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "34") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_21"))
                           (rule "applyEq" (formula "41") (term "0") (ifseqformula "34"))
                           (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                           (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "58")))
                           (rule "replaceKnownSelect_taclet100000100_19" (formula "34") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_21" (formula "34") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0") (ifseqformula "16"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0,0") (ifseqformula "11"))
                           (rule "replace_known_left" (formula "34") (term "0,0,0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "applyEqReverse" (formula "35") (term "1,0,0,1,0") (ifseqformula "34"))
                           (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                           (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "34"))
                           (rule "hideAuxiliaryEq" (formula "34"))
                           (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_21"))
                           (rule "applyEq" (formula "40") (term "0") (ifseqformula "33"))
                           (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                           (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "57")))
                           (rule "replaceKnownSelect_taclet100000100_22" (formula "33") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_24" (formula "33") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,0") (ifseqformula "16"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,0,0") (ifseqformula "11"))
                           (rule "replace_known_left" (formula "33") (term "0,0,0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "33"))
                           (rule "hideAuxiliaryEq" (formula "33"))
                           (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_21"))
                           (rule "applyEq" (formula "39") (term "0") (ifseqformula "32"))
                           (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                           (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "56")))
                           (rule "replaceKnownSelect_taclet100000100_25" (formula "32") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_27" (formula "32") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "16"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0,0") (ifseqformula "11"))
                           (rule "replace_known_left" (formula "32") (term "0,0,0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
                           (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                           (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "32"))
                           (rule "hideAuxiliaryEq" (formula "32"))
                           (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_21"))
                           (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                           (rule "applyEq" (formula "38") (term "0") (ifseqformula "31"))
                           (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "55")))
                           (rule "replaceKnownSelect_taclet100000100_28" (formula "31") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_30" (formula "31") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0") (ifseqformula "16"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0,0") (ifseqformula "11"))
                           (rule "replace_known_left" (formula "31") (term "0,0,0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "31"))
                           (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                           (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
                           (rule "hideAuxiliaryEq" (formula "31"))
                           (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_21"))
                           (rule "applyEq" (formula "37") (term "0") (ifseqformula "30"))
                           (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                           (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "54")))
                           (rule "replaceKnownSelect_taclet100000100_31" (formula "30") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_33" (formula "30") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0") (ifseqformula "16"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0,0") (ifseqformula "11"))
                           (rule "replace_known_left" (formula "30") (term "0,0,0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                           (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                           (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "30"))
                           (rule "hideAuxiliaryEq" (formula "30"))
                           (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_21"))
                           (rule "applyEq" (formula "36") (term "0") (ifseqformula "29"))
                           (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                           (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "53")))
                           (rule "replaceKnownSelect_taclet100000100_34" (formula "29") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_36" (formula "29") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,0") (ifseqformula "16"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,0,0") (ifseqformula "11"))
                           (rule "replace_known_left" (formula "29") (term "0,0,0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                           (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "29"))
                           (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                           (rule "hideAuxiliaryEq" (formula "29"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "9") (ifseqformula "4"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "9"))
                           (rule "notLeft" (formula "9"))
                           (rule "nonNull" (formula "14") (inst "i=i"))
                           (rule "greater_literals" (formula "14") (term "0,1"))
                           (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "45")))
                           (rule "sub_literals" (formula "14") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "45"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "13") (inst "i=i"))
                           (rule "greater_literals" (formula "13") (term "0,1"))
                           (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "44")))
                           (rule "sub_literals" (formula "13") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "44"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "12") (inst "i=i"))
                           (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "43")))
                           (rule "greater_literals" (formula "12") (term "0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "43"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "11") (inst "i=i"))
                           (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "42")))
                           (rule "greater_literals" (formula "11") (term "0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "42"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "10") (inst "i=i"))
                           (rule "sub_literals" (formula "10") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "41")))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "41"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "9") (inst "i=i"))
                           (rule "greater_literals" (formula "9") (term "0,1"))
                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "40")))
                           (rule "sub_literals" (formula "9") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "40"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "1") (ifseqformula "4"))
                           (rule "replaceKnownSelect_taclet100000100_2" (formula "1") (term "0,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_3" (formula "1") (term "0,0,1"))
                           (rule "replaceKnownSelect_taclet100000100_5" (formula "1") (term "0,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_6" (formula "1") (term "0,0,1,0"))
                           (rule "replaceKnownSelect_taclet100000100_8" (formula "1") (term "0,0,1,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_9" (formula "1") (term "0,0,1,0,0"))
                           (rule "replaceKnownSelect_taclet100000100_20" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet100000100_11" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_21" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_12" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "replaceKnownSelect_taclet100000100_23" (formula "1") (term "1,1,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet100000100_26" (formula "1") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_24" (formula "1") (term "1,1,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet100000100_29" (formula "1") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_27" (formula "1") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet100000100_32" (formula "1") (term "1,1,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_30" (formula "1") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet100000100_35" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_33" (formula "1") (term "1,1,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_36" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet100000100_17" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet100000100_14" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_18" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100000100_15" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "3"))
                           (rule "notLeft" (formula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "nonNull" (formula "6") (inst "i=i"))
                           (rule "greater_literals" (formula "6") (term "0,1"))
                           (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "50")))
                           (rule "sub_literals" (formula "6") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "5") (inst "i=i"))
                           (rule "greater_literals" (formula "5") (term "0,1"))
                           (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "49")))
                           (rule "sub_literals" (formula "5") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "4") (inst "i=i"))
                           (rule "sub_literals" (formula "4") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "48")))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "3") (inst "i=i"))
                           (rule "greater_literals" (formula "3") (term "0,1"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")))
                           (rule "sub_literals" (formula "3") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "2") (inst "i=i"))
                           (rule "greater_literals" (formula "2") (term "0,1"))
                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "46")))
                           (rule "sub_literals" (formula "2") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "1") (inst "i=i"))
                           (rule "greater_literals" (formula "1") (term "0,1"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                           (rule "sub_literals" (formula "1") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "31") (term "0"))
                           (rule "nnf_imp2or" (formula "30") (term "0"))
                           (rule "nnf_imp2or" (formula "29") (term "0"))
                           (rule "commute_or_2" (formula "38") (term "0"))
                           (rule "nnf_notAnd" (formula "34") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "33") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                           (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                           (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "32") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                           (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                           (rule "cut_direct" (formula "23") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "cut_direct" (formula "28") (term "0,0"))
                              (branch "CUT: result_2.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "ifthenelse_split" (formula "57") (term "0,0"))
                                 (branch "result_0.length ≥ 1 TRUE"
                                    (rule "eqSymm" (formula "58") (term "0"))
                                    (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "1")))
                                    (rule "eqSymm" (formula "58") (term "1,0"))
                                    (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "replace_known_left" (formula "14") (term "0,1,1,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradEq7" (formula "58") (term "1,0") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "58") (term "1,0,0,1,0"))
                                    (rule "add_literals" (formula "58") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "58") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "58"))
                                    (rule "inEqSimp_subsumption1" (formula "58") (term "0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "58") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "58"))
                                    (rule "allRight" (formula "58") (inst "sk=iv_11"))
                                    (rule "orRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "60") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "1")))
                                    (rule "inEqSimp_homoInEq0" (formula "60") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "60") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "60") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "60") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "60") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "60") (term "1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,1"))
                                    (rule "mul_literals" (formula "60") (term "0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "60") (term "1,1,0,1"))
                                    (rule "replace_known_left" (formula "60") (term "0,1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "60"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "60") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "60") (term "1,0,0"))
                                    (rule "mul_literals" (formula "60") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "60") (term "1,1,0,0"))
                                    (rule "pullOutSelect" (formula "60") (term "1") (inst "selectSK=arr_112"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "27")))
                                    (rule "applyEqReverse" (formula "61") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "60") (term "1") (ifseqformula "10") (ifseqformula "63"))
                                    (rule "arrayLengthIsAShort" (formula "27") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "arrayLengthNotNegative" (formula "27") (term "1,0,0,0"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                    (rule "apply_eq_monomials" (formula "29") (term "1,0,1,0,0") (ifseqformula "28"))
                                    (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "29") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "0,1,0,0"))
                                    (rule "nnf_imp2or" (formula "50") (term "0"))
                                    (rule "nnf_imp2or" (formula "49") (term "0"))
                                    (rule "nnf_imp2or" (formula "48") (term "0"))
                                    (rule "nnf_imp2or" (formula "47") (term "0"))
                                    (rule "nnf_imp2or" (formula "46") (term "0"))
                                    (rule "nnf_imp2or" (formula "45") (term "0"))
                                    (rule "nnf_imp2or" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_imp2or" (formula "18") (term "0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0"))
                                    (rule "nnf_imp2or" (formula "9") (term "0"))
                                    (rule "nnf_imp2or" (formula "8") (term "0"))
                                    (rule "nnf_imp2or" (formula "7") (term "0"))
                                    (rule "nnf_imp2or" (formula "6") (term "0"))
                                    (rule "nnf_imp2or" (formula "5") (term "0"))
                                    (rule "nnf_imp2or" (formula "4") (term "0"))
                                    (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "37") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                    (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "29") (term "0"))
                                    (rule "nnf_notAnd" (formula "50") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0"))
                                    (rule "mul_literals" (formula "50") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "50") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0"))
                                    (rule "mul_literals" (formula "50") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "50") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "50") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "49") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "49") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0"))
                                    (rule "mul_literals" (formula "49") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "49") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "48") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                    (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                                    (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "47") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                                    (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "47") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "46") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "46") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0"))
                                    (rule "mul_literals" (formula "46") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "46") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0"))
                                    (rule "mul_literals" (formula "46") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "45") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                    (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                    (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "7") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                                    (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                    (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                    (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                    (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                    (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                    (rule "commute_or_2" (formula "40") (term "0"))
                                    (rule "commute_or_2" (formula "39") (term "0"))
                                    (rule "commute_or_2" (formula "38") (term "0"))
                                    (rule "commute_or_2" (formula "16") (term "0"))
                                    (rule "commute_or_2" (formula "37") (term "0"))
                                    (rule "commute_or_2" (formula "36") (term "0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "commute_or_2" (formula "50") (term "0"))
                                    (rule "commute_or_2" (formula "49") (term "0"))
                                    (rule "commute_or_2" (formula "48") (term "0"))
                                    (rule "commute_or_2" (formula "47") (term "0"))
                                    (rule "commute_or_2" (formula "46") (term "0"))
                                    (rule "commute_or_2" (formula "45") (term "0"))
                                    (rule "commute_or_2" (formula "22") (term "0"))
                                    (rule "ifthenelse_split" (formula "15") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "64") (term "0,0,0") (ifseqformula "16"))
                                       (rule "replace_known_left" (formula "64") (term "0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "64"))
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "16") (term "1,1,1,0,0,1,0,0") (ifseqformula "15"))
                                       (rule "eqSymm" (formula "16") (term "1,0,0"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "cut_direct" (formula "44") (term "0,0,0"))
                                       (branch "CUT: result_3.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "45"))
                                          (rule "true_left" (formula "45"))
                                          (rule "commute_or_2" (formula "20") (term "0"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or_2" (formula "9") (term "0"))
                                          (rule "commute_or_2" (formula "8") (term "0"))
                                          (rule "commute_or_2" (formula "7") (term "0"))
                                          (rule "lenNonNegative" (formula "29") (term "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "29"))
                                          (rule "lenNonNegative" (formula "30") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "30"))
                                          (rule "commute_or_2" (formula "6") (term "0"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "14"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "15"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "16"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "17"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "39") (term "0"))
                                          (rule "commute_or" (formula "50") (term "0,0"))
                                          (rule "commute_or" (formula "49") (term "0,0"))
                                          (rule "commute_or" (formula "48") (term "0,0"))
                                          (rule "commute_or" (formula "47") (term "0,0"))
                                          (rule "commute_or" (formula "46") (term "0,0"))
                                          (rule "commute_or" (formula "45") (term "0,0"))
                                          (rule "commute_or" (formula "60") (term "0,0"))
                                          (rule "commute_or" (formula "59") (term "0,0"))
                                          (rule "commute_or" (formula "58") (term "0,0"))
                                          (rule "commute_or" (formula "57") (term "0,0"))
                                          (rule "commute_or" (formula "56") (term "0,0"))
                                          (rule "commute_or" (formula "55") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "18"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "19"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "20"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "21"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "22"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or" (formula "33") (term "0,0"))
                                          (rule "commute_or" (formula "32") (term "0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "22") (term "0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0"))
                                          (rule "commute_or" (formula "19") (term "0,0"))
                                          (rule "commute_or" (formula "18") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or" (formula "44") (term "0,0"))
                                          (rule "ifthenelse_to_or_right" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0"))
                                          (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "0"))
                                          (rule "distr_forallAnd" (formula "29"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "cnf_rightDist" (formula "30") (term "0"))
                                          (rule "distr_forallAnd" (formula "30"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                          (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                          (rule "leq_literals" (formula "31") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "shift_paren_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                          (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "arrayLengthIsAShort" (formula "55") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "arrayLengthNotNegative" (formula "55") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "54") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "55") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "arrayLengthNotNegative" (formula "53") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "54") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "true_left" (formula "54"))
                                          (rule "arrayLengthNotNegative" (formula "52") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "53") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "52") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "52"))
                                          (rule "true_left" (formula "52"))
                                          (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "51"))
                                          (rule "true_left" (formula "51"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "16"))
                                          (rule "leq_literals" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "allLeft" (formula "29") (inst "t=iv_11"))
                                          (rule "replaceKnownSelect_taclet000100000100_62" (formula "29") (term "0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet000100000100_63" (formula "29") (term "0,0,0"))
                                          (rule "narrowSelectArrayType" (formula "29") (term "0,0,0") (ifseqformula "23") (ifseqformula "88"))
                                          (rule "eqSymm" (formula "29") (term "0,0"))
                                          (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "85"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "14"))
                                          (rule "qeq_literals" (formula "29") (term "0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "closeFalse" (formula "29"))
                                       )
                                       (branch "CUT: result_3.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "commute_or_2" (formula "20") (term "0"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or_2" (formula "9") (term "0"))
                                          (rule "commute_or_2" (formula "8") (term "0"))
                                          (rule "commute_or_2" (formula "7") (term "0"))
                                          (rule "lenNonNegative" (formula "29") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "29"))
                                          (rule "lenNonNegative" (formula "30") (term "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "30"))
                                          (rule "commute_or_2" (formula "6") (term "0"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "14"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "15"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "16"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "17"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "39") (term "0"))
                                          (rule "commute_or" (formula "50") (term "0,0"))
                                          (rule "commute_or" (formula "49") (term "0,0"))
                                          (rule "commute_or" (formula "48") (term "0,0"))
                                          (rule "commute_or" (formula "47") (term "0,0"))
                                          (rule "commute_or" (formula "46") (term "0,0"))
                                          (rule "commute_or" (formula "45") (term "0,0"))
                                          (rule "commute_or" (formula "60") (term "0,0"))
                                          (rule "commute_or" (formula "59") (term "0,0"))
                                          (rule "commute_or" (formula "58") (term "0,0"))
                                          (rule "commute_or" (formula "57") (term "0,0"))
                                          (rule "commute_or" (formula "56") (term "0,0"))
                                          (rule "commute_or" (formula "55") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "18"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "19"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "20"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "21"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "22"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or" (formula "33") (term "0,0"))
                                          (rule "commute_or" (formula "32") (term "0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "22") (term "0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0"))
                                          (rule "commute_or" (formula "19") (term "0,0"))
                                          (rule "commute_or" (formula "18") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or" (formula "44") (term "0,0"))
                                          (rule "ifthenelse_to_or_right" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0"))
                                          (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "0"))
                                          (rule "distr_forallAnd" (formula "29"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "cnf_rightDist" (formula "30") (term "0"))
                                          (rule "distr_forallAnd" (formula "30"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                          (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                          (rule "leq_literals" (formula "31") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "shift_paren_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                          (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "arrayLengthNotNegative" (formula "55") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "56") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "56"))
                                          (rule "true_left" (formula "56"))
                                          (rule "arrayLengthIsAShort" (formula "54") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "true_left" (formula "54"))
                                          (rule "arrayLengthNotNegative" (formula "54") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "53") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "arrayLengthNotNegative" (formula "53") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "52") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "52"))
                                          (rule "true_left" (formula "52"))
                                          (rule "arrayLengthNotNegative" (formula "52") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "51"))
                                          (rule "true_left" (formula "51"))
                                          (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "50"))
                                          (rule "true_left" (formula "50"))
                                          (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "16"))
                                          (rule "leq_literals" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "allLeft" (formula "29") (inst "t=iv_11"))
                                          (rule "replaceKnownSelect_taclet000100000100_62" (formula "29") (term "0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet000100000100_63" (formula "29") (term "0,0,0"))
                                          (rule "narrowSelectArrayType" (formula "29") (term "0,0,0") (ifseqformula "23") (ifseqformula "89"))
                                          (rule "eqSymm" (formula "29") (term "0,0"))
                                          (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "86"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "29"))
                                          (rule "qeq_literals" (formula "14") (term "0"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "closeFalse" (formula "14"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "15"))
                                       (rule "inEqSimp_geqRight" (formula "51"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "times_zero_2" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                                 (branch "result_0.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "58") (term "0"))
                                    (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "57")))
                                    (rule "replace_known_right" (formula "13") (term "0,1,1,0,0") (ifseqformula "57"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "57"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_geqRight" (formula "57"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "58") (term "0,0,1"))
                                    (rule "add_zero_right" (formula "58") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "58") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "notRight" (formula "58"))
                                    (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "59"))
                                    (rule "add_zero_right" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "59") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "59") (term "1,0,0"))
                                    (rule "add_literals" (formula "59") (term "0,0"))
                                    (rule "leq_literals" (formula "59") (term "0"))
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "false_right" (formula "59"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "CUT: result_2.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "ifthenelse_split" (formula "58") (term "1,0"))
                                 (branch "result_0.length ≥ 0 TRUE"
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "eqSymm" (formula "59") (term "1,0"))
                                    (rule "arrayLengthNotNegative" (formula "25") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "26") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                    (rule "apply_eq_monomials" (formula "27") (term "1,0,1,0,0") (ifseqformula "26"))
                                    (rule "polySimp_rightDist" (formula "27") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "27") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "27") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "27") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "0,1,0,0"))
                                    (rule "ifthenelse_split" (formula "13") (term "1"))
                                    (branch "result_0.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "15") (term "0,1,1,0,0") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "replace_known_left" (formula "63") (term "0,1,1,0,0,1") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "13")))
                                       (rule "allRight" (formula "63") (inst "sk=iv_10"))
                                       (rule "orRight" (formula "63"))
                                       (rule "orRight" (formula "63"))
                                       (rule "inEqSimp_leqRight" (formula "63"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "replace_known_left" (formula "65") (term "0,0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_geqRight" (formula "64"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "65") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "65") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "65") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "65") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "65") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "65") (term "1,0,1"))
                                       (rule "mul_literals" (formula "65") (term "0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "65") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "65") (term "1,1,0,1"))
                                       (rule "replace_known_left" (formula "65") (term "0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "65"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "65") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "65") (term "1,0,0"))
                                       (rule "mul_literals" (formula "65") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "65") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "65") (term "1,1,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "15"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "pullOutSelect" (formula "64") (term "1") (inst "selectSK=arr_111"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")) (ifInst ""  (formula "27")))
                                       (rule "applyEqReverse" (formula "65") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "narrowSelectArrayType" (formula "64") (term "1") (ifseqformula "9") (ifseqformula "67"))
                                       (rule "ifthenelse_split" (formula "15") (term "0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "65") (term "0,0,0") (ifseqformula "16"))
                                          (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "65"))
                                          (rule "applyEq" (formula "17") (term "1,1,1,0,0,1,0") (ifseqformula "16"))
                                          (rule "eqSymm" (formula "17") (term "1,0"))
                                          (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                          (rule "nnf_imp2or" (formula "50") (term "0"))
                                          (rule "nnf_imp2or" (formula "49") (term "0"))
                                          (rule "nnf_imp2or" (formula "48") (term "0"))
                                          (rule "nnf_imp2or" (formula "47") (term "0"))
                                          (rule "nnf_imp2or" (formula "46") (term "0"))
                                          (rule "nnf_imp2or" (formula "45") (term "0"))
                                          (rule "nnf_imp2or" (formula "22") (term "0"))
                                          (rule "nnf_imp2or" (formula "21") (term "0"))
                                          (rule "nnf_imp2or" (formula "20") (term "0"))
                                          (rule "nnf_imp2or" (formula "19") (term "0"))
                                          (rule "nnf_imp2or" (formula "18") (term "0"))
                                          (rule "nnf_imp2or" (formula "17") (term "0"))
                                          (rule "nnf_imp2or" (formula "8") (term "0"))
                                          (rule "nnf_imp2or" (formula "7") (term "0"))
                                          (rule "nnf_imp2or" (formula "6") (term "0"))
                                          (rule "nnf_imp2or" (formula "5") (term "0"))
                                          (rule "nnf_imp2or" (formula "4") (term "0"))
                                          (rule "nnf_imp2or" (formula "3") (term "0"))
                                          (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                          (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "37") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                          (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "29") (term "0"))
                                          (rule "nnf_notAnd" (formula "50") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0"))
                                          (rule "mul_literals" (formula "50") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "50") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0"))
                                          (rule "mul_literals" (formula "50") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "50") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "50") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "49") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "49") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "49") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "48") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                          (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "47") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "47") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                                          (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "46") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0"))
                                          (rule "mul_literals" (formula "46") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "46") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0"))
                                          (rule "mul_literals" (formula "46") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "46") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "45") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                          (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "7") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                          (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                          (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                          (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                          (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "3") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
                                          (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                          (rule "commute_or_2" (formula "40") (term "0"))
                                          (rule "commute_or_2" (formula "39") (term "0"))
                                          (rule "commute_or_2" (formula "38") (term "0"))
                                          (rule "commute_or_2" (formula "16") (term "0"))
                                          (rule "commute_or_2" (formula "37") (term "0"))
                                          (rule "commute_or_2" (formula "36") (term "0"))
                                          (rule "commute_or_2" (formula "35") (term "0"))
                                          (rule "commute_or_2" (formula "50") (term "0"))
                                          (rule "commute_or_2" (formula "49") (term "0"))
                                          (rule "commute_or_2" (formula "48") (term "0"))
                                          (rule "commute_or_2" (formula "47") (term "0"))
                                          (rule "commute_or_2" (formula "46") (term "0"))
                                          (rule "commute_or_2" (formula "45") (term "0"))
                                          (rule "commute_or_2" (formula "22") (term "0"))
                                          (rule "commute_or_2" (formula "21") (term "0"))
                                          (rule "cut_direct" (formula "44") (term "0,0,0"))
                                          (branch "CUT: result_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "true_left" (formula "45"))
                                             (rule "commute_or_2" (formula "20") (term "0"))
                                             (rule "commute_or_2" (formula "19") (term "0"))
                                             (rule "commute_or_2" (formula "18") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "commute_or_2" (formula "18") (term "0"))
                                             (rule "lenNonNegative" (formula "29") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "29"))
                                             (rule "lenNonNegative" (formula "30") (term "1"))
                                             (rule "inEqSimp_commuteLeq" (formula "30"))
                                             (rule "commute_or_2" (formula "9") (term "0"))
                                             (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
                                             (rule "leq_literals" (formula "15") (term "0"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "commute_or_2" (formula "8") (term "0"))
                                             (rule "commute_or_2" (formula "7") (term "0"))
                                             (rule "commute_or_2" (formula "6") (term "0"))
                                             (rule "commute_or_2" (formula "5") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                             (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                             (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "15"))
                                             (rule "leq_literals" (formula "16") (term "0"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "commute_or_2" (formula "4") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "11"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "12"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "13"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "16"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "commute_or_2" (formula "39") (term "0"))
                                             (rule "commute_or" (formula "50") (term "0,0"))
                                             (rule "commute_or" (formula "49") (term "0,0"))
                                             (rule "commute_or" (formula "48") (term "0,0"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "commute_or" (formula "47") (term "0,0"))
                                             (rule "commute_or" (formula "46") (term "0,0"))
                                             (rule "commute_or" (formula "45") (term "0,0"))
                                             (rule "commute_or" (formula "60") (term "0,0"))
                                             (rule "commute_or" (formula "59") (term "0,0"))
                                             (rule "commute_or" (formula "58") (term "0,0"))
                                             (rule "commute_or" (formula "57") (term "0,0"))
                                             (rule "commute_or" (formula "56") (term "0,0"))
                                             (rule "commute_or" (formula "55") (term "0,0"))
                                             (rule "commute_or" (formula "30") (term "0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0"))
                                             (rule "commute_or" (formula "28") (term "0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0"))
                                             (rule "commute_or" (formula "26") (term "0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "17"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "18"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "19"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "20"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "21"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "commute_or" (formula "30") (term "0,0"))
                                             (rule "commute_or" (formula "21") (term "0,0"))
                                             (rule "commute_or" (formula "20") (term "0,0"))
                                             (rule "commute_or" (formula "19") (term "0,0"))
                                             (rule "commute_or" (formula "18") (term "0,0"))
                                             (rule "commute_or" (formula "17") (term "0,0"))
                                             (rule "commute_or" (formula "16") (term "0,0"))
                                             (rule "commute_or" (formula "44") (term "0,0"))
                                             (rule "ifthenelse_to_or_right" (formula "29") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0"))
                                             (rule "commute_or_2" (formula "29") (term "0"))
                                             (rule "commute_or" (formula "29") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                             (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0"))
                                             (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                             (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                             (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                             (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                             (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0"))
                                             (rule "commute_or_2" (formula "29") (term "0"))
                                             (rule "commute_or" (formula "29") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "0"))
                                             (rule "distr_forallAnd" (formula "29"))
                                             (rule "andLeft" (formula "29"))
                                             (rule "commute_or" (formula "30") (term "0"))
                                             (rule "shift_paren_or" (formula "29") (term "0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "commute_or" (formula "30") (term "1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "cnf_rightDist" (formula "30") (term "0"))
                                             (rule "distr_forallAnd" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "commute_or_2" (formula "30") (term "0"))
                                             (rule "shift_paren_or" (formula "31") (term "0"))
                                             (rule "commute_or_2" (formula "31") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                             (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                             (rule "leq_literals" (formula "31") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "shift_paren_or" (formula "30") (term "0,0"))
                                             (rule "commute_or" (formula "30") (term "0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                             (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "arrayLengthNotNegative" (formula "55") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "56") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "true_left" (formula "56"))
                                             (rule "arrayLengthNotNegative" (formula "54") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "55") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "55"))
                                             (rule "true_left" (formula "55"))
                                             (rule "arrayLengthNotNegative" (formula "53") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "54") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "true_left" (formula "54"))
                                             (rule "arrayLengthNotNegative" (formula "52") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "53") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "true_left" (formula "53"))
                                             (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "52") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "52"))
                                             (rule "true_left" (formula "52"))
                                             (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "51"))
                                             (rule "true_left" (formula "51"))
                                             (rule "allLeft" (formula "29") (inst "t=iv_10"))
                                             (rule "replaceKnownSelect_taclet0010100000100_62" (formula "29") (term "0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet0010100000100_63" (formula "29") (term "0,0,0"))
                                             (rule "narrowSelectArrayType" (formula "29") (term "0,0,0") (ifseqformula "22") (ifseqformula "89"))
                                             (rule "eqSymm" (formula "29") (term "0,0"))
                                             (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "86"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "29") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "29"))
                                             (rule "andLeft" (formula "14"))
                                             (rule "inEqSimp_homoInEq1" (formula "14"))
                                             (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                                             (rule "add_literals" (formula "14") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "14") (term "1,0"))
                                             (rule "add_literals" (formula "14") (term "0"))
                                             (rule "leq_literals" (formula "14"))
                                             (rule "closeFalse" (formula "14"))
                                          )
                                          (branch "CUT: result_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "commute_or_2" (formula "20") (term "0"))
                                             (rule "commute_or_2" (formula "19") (term "0"))
                                             (rule "commute_or_2" (formula "18") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "71") (term "0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "commute_or_2" (formula "18") (term "0"))
                                             (rule "lenNonNegative" (formula "29") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "29"))
                                             (rule "lenNonNegative" (formula "30") (term "1"))
                                             (rule "inEqSimp_commuteLeq" (formula "30"))
                                             (rule "commute_or_2" (formula "9") (term "0"))
                                             (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
                                             (rule "leq_literals" (formula "15") (term "0"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "commute_or_2" (formula "8") (term "0"))
                                             (rule "commute_or_2" (formula "7") (term "0"))
                                             (rule "commute_or_2" (formula "6") (term "0"))
                                             (rule "commute_or_2" (formula "5") (term "0"))
                                             (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                             (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                             (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "15"))
                                             (rule "leq_literals" (formula "16") (term "0"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "commute_or_2" (formula "4") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "11"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "12"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "13"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "15"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "16"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "commute_or_2" (formula "39") (term "0"))
                                             (rule "commute_or" (formula "50") (term "0,0"))
                                             (rule "commute_or" (formula "49") (term "0,0"))
                                             (rule "commute_or" (formula "48") (term "0,0"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "commute_or" (formula "47") (term "0,0"))
                                             (rule "commute_or" (formula "46") (term "0,0"))
                                             (rule "commute_or" (formula "45") (term "0,0"))
                                             (rule "commute_or" (formula "60") (term "0,0"))
                                             (rule "commute_or" (formula "59") (term "0,0"))
                                             (rule "commute_or" (formula "58") (term "0,0"))
                                             (rule "commute_or" (formula "57") (term "0,0"))
                                             (rule "commute_or" (formula "56") (term "0,0"))
                                             (rule "commute_or" (formula "55") (term "0,0"))
                                             (rule "commute_or" (formula "30") (term "0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0"))
                                             (rule "commute_or" (formula "28") (term "0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0"))
                                             (rule "commute_or" (formula "26") (term "0,0"))
                                             (rule "commute_or" (formula "25") (term "0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "17"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "18"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "19"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "20"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "71") (term "0") (ifseqformula "21"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "commute_or" (formula "21") (term "0,0"))
                                             (rule "commute_or" (formula "20") (term "0,0"))
                                             (rule "commute_or" (formula "19") (term "0,0"))
                                             (rule "commute_or" (formula "18") (term "0,0"))
                                             (rule "commute_or" (formula "17") (term "0,0"))
                                             (rule "commute_or" (formula "16") (term "0,0"))
                                             (rule "commute_or" (formula "44") (term "0,0"))
                                             (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                             (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                             (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0"))
                                             (rule "commute_or_2" (formula "29") (term "0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                             (rule "commute_or" (formula "29") (term "1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                             (rule "add_literals" (formula "29") (term "1,1,0,0,1,1,0"))
                                             (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                             (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                             (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                             (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                             (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                             (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0"))
                                             (rule "commute_or_2" (formula "29") (term "0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                             (rule "commute_or" (formula "29") (term "1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "0"))
                                             (rule "distr_forallAnd" (formula "29"))
                                             (rule "andLeft" (formula "29"))
                                             (rule "commute_or" (formula "30") (term "0"))
                                             (rule "shift_paren_or" (formula "29") (term "0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "commute_or" (formula "30") (term "1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "cnf_rightDist" (formula "30") (term "0"))
                                             (rule "distr_forallAnd" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "commute_or_2" (formula "30") (term "0"))
                                             (rule "shift_paren_or" (formula "31") (term "0"))
                                             (rule "commute_or_2" (formula "31") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                             (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                             (rule "leq_literals" (formula "31") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "shift_paren_or" (formula "30") (term "0,0"))
                                             (rule "commute_or" (formula "30") (term "0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                             (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "arrayLengthNotNegative" (formula "55") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "56") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "true_left" (formula "56"))
                                             (rule "arrayLengthNotNegative" (formula "54") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "55") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "55"))
                                             (rule "true_left" (formula "55"))
                                             (rule "arrayLengthNotNegative" (formula "53") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "54") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "true_left" (formula "54"))
                                             (rule "arrayLengthNotNegative" (formula "52") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "53") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "true_left" (formula "53"))
                                             (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "52") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "52"))
                                             (rule "true_left" (formula "52"))
                                             (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "51"))
                                             (rule "true_left" (formula "51"))
                                             (rule "allLeft" (formula "29") (inst "t=iv_10"))
                                             (rule "replaceKnownSelect_taclet0010100000100_62" (formula "29") (term "0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet0010100000100_63" (formula "29") (term "0,0,0"))
                                             (rule "narrowSelectArrayType" (formula "29") (term "0,0,0") (ifseqformula "22") (ifseqformula "90"))
                                             (rule "eqSymm" (formula "29") (term "0,0"))
                                             (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "87"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "29") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "14"))
                                             (rule "andLeft" (formula "29"))
                                             (rule "inEqSimp_homoInEq1" (formula "29"))
                                             (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                             (rule "add_literals" (formula "29") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0"))
                                             (rule "add_zero_right" (formula "29") (term "0"))
                                             (rule "leq_literals" (formula "29"))
                                             (rule "closeFalse" (formula "29"))
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "15"))
                                          (rule "inEqSimp_geqRight" (formula "51"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "16"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "times_zero_2" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                          (rule "qeq_literals" (formula "15"))
                                          (rule "closeFalse" (formula "15"))
                                       )
                                    )
                                    (branch "result_0.length ≥ 1 FALSE"
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "replace_known_right" (formula "14") (term "0,1,1,0,0") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "replace_known_right" (formula "63") (term "0,0") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "49")))
                                       (rule "inEqSimp_geqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
                                       (rule "replace_known_left" (formula "64") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "64"))
                                       (rule "allRight" (formula "64") (inst "sk=iv_9"))
                                       (rule "orRight" (formula "64"))
                                       (rule "orRight" (formula "64"))
                                       (rule "replace_known_right" (formula "66") (term "0,0,0") (ifseqformula "65"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "65")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                 )
                                 (branch "result_0.length ≥ 0 FALSE"
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "inEqSimp_geqRight" (formula "58"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradEq3" (formula "59") (term "1,0") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "59") (term "1,0,0,1,0"))
                                    (rule "add_literals" (formula "59") (term "0,0,1,0"))
                                    (rule "qeq_literals" (formula "59") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "inEqSimp_contradInEq0" (formula "14") (term "0,1,1,0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "14") (term "0,0,1,1,0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradInEq0" (formula "13") (term "0,1") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "13") (term "0,0,1"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_contradInEq0" (formula "59") (term "0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "59") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "allRight" (formula "59") (inst "sk=iv_8"))
                                    (rule "orRight" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "inEqSimp_geqRight" (formula "60"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "60"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "61") (term "0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "1")))
                                    (rule "inEqSimp_homoInEq0" (formula "61") (term "0,0"))
                                    (rule "eqSymm" (formula "61"))
                                    (rule "polySimp_addComm1" (formula "61") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "61") (term "0,0"))
                                    (rule "eqSymm" (formula "61"))
                                    (rule "polySimp_addComm1" (formula "61") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "61") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "61") (term "1,0,0"))
                                    (rule "mul_literals" (formula "61") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "61") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "61") (term "1,0,1"))
                                    (rule "mul_literals" (formula "61") (term "0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "61") (term "1,1,0,1"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (term "0,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "2"))
                                    (rule "times_zero_2" (formula "2") (term "1,0"))
                                    (rule "add_zero_right" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "cut_direct" (formula "28") (term "0,0"))
                              (branch "CUT: result_2.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "ifthenelse_split" (formula "58") (term "0,0"))
                                 (branch "result_0.length ≥ 1 TRUE"
                                    (rule "eqSymm" (formula "59") (term "0"))
                                    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "1")))
                                    (rule "eqSymm" (formula "59") (term "1,0"))
                                    (rule "replace_known_left" (formula "14") (term "0,1,1,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_contradEq7" (formula "59") (term "1,0") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "59") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "59") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "59") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "inEqSimp_subsumption1" (formula "59") (term "0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "59") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "allRight" (formula "59") (inst "sk=iv_7"))
                                    (rule "orRight" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "inEqSimp_geqRight" (formula "60"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "60"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "61") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "1")))
                                    (rule "inEqSimp_homoInEq0" (formula "61") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "61") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "61") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "61") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "61") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "61") (term "1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,1"))
                                    (rule "mul_literals" (formula "61") (term "0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "61") (term "1,1,0,1"))
                                    (rule "replace_known_left" (formula "61") (term "0,1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "61"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "61") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "61") (term "1,0,0"))
                                    (rule "mul_literals" (formula "61") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0"))
                                    (rule "pullOutSelect" (formula "61") (term "1") (inst "selectSK=arr_110"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")) (ifInst ""  (formula "49")))
                                    (rule "applyEqReverse" (formula "62") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "61") (term "1") (ifseqformula "23") (ifseqformula "64"))
                                    (rule "arrayLengthNotNegative" (formula "27") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "28") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                    (rule "apply_eq_monomials" (formula "29") (term "1,0,1,0,0") (ifseqformula "28"))
                                    (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "29") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "0,1,0,0"))
                                    (rule "nnf_imp2or" (formula "50") (term "0"))
                                    (rule "nnf_imp2or" (formula "49") (term "0"))
                                    (rule "nnf_imp2or" (formula "48") (term "0"))
                                    (rule "nnf_imp2or" (formula "47") (term "0"))
                                    (rule "nnf_imp2or" (formula "46") (term "0"))
                                    (rule "nnf_imp2or" (formula "45") (term "0"))
                                    (rule "nnf_imp2or" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_imp2or" (formula "18") (term "0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0"))
                                    (rule "nnf_imp2or" (formula "9") (term "0"))
                                    (rule "nnf_imp2or" (formula "8") (term "0"))
                                    (rule "nnf_imp2or" (formula "7") (term "0"))
                                    (rule "nnf_imp2or" (formula "6") (term "0"))
                                    (rule "nnf_imp2or" (formula "5") (term "0"))
                                    (rule "nnf_imp2or" (formula "4") (term "0"))
                                    (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                    (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "29") (term "0"))
                                    (rule "nnf_notAnd" (formula "50") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "50") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "50") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0"))
                                    (rule "mul_literals" (formula "50") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "50") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "50") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "49") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "49") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0"))
                                    (rule "mul_literals" (formula "49") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "49") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                    (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "48") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                    (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "47") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                                    (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "47") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                                    (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "46") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "46") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "46") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0"))
                                    (rule "mul_literals" (formula "46") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "46") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                    (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                    (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "7") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                    (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                    (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                    (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                    (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "40") (term "0"))
                                    (rule "commute_or_2" (formula "39") (term "0"))
                                    (rule "commute_or_2" (formula "38") (term "0"))
                                    (rule "commute_or_2" (formula "16") (term "0"))
                                    (rule "commute_or_2" (formula "37") (term "0"))
                                    (rule "commute_or_2" (formula "36") (term "0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "commute_or_2" (formula "50") (term "0"))
                                    (rule "commute_or_2" (formula "49") (term "0"))
                                    (rule "commute_or_2" (formula "48") (term "0"))
                                    (rule "commute_or_2" (formula "47") (term "0"))
                                    (rule "commute_or_2" (formula "46") (term "0"))
                                    (rule "commute_or_2" (formula "45") (term "0"))
                                    (rule "commute_or_2" (formula "22") (term "0"))
                                    (rule "ifthenelse_split" (formula "15") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "16") (term "1,1,1,0,0,1,0,0") (ifseqformula "15"))
                                       (rule "eqSymm" (formula "16") (term "1,0,0"))
                                       (rule "applyEq" (formula "64") (term "0,0,0") (ifseqformula "15"))
                                       (rule "replace_known_left" (formula "64") (term "0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "64"))
                                       (rule "eqSymm" (formula "64"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "cut_direct" (formula "44") (term "0,0,0"))
                                       (branch "CUT: result_3.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "45"))
                                          (rule "true_left" (formula "45"))
                                          (rule "commute_or_2" (formula "20") (term "0"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or_2" (formula "9") (term "0"))
                                          (rule "commute_or_2" (formula "8") (term "0"))
                                          (rule "commute_or_2" (formula "7") (term "0"))
                                          (rule "lenNonNegative" (formula "29") (term "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "29"))
                                          (rule "lenNonNegative" (formula "30") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "30"))
                                          (rule "commute_or_2" (formula "6") (term "0"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "15"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "16"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "17"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "39") (term "0"))
                                          (rule "commute_or" (formula "50") (term "0,0"))
                                          (rule "commute_or" (formula "49") (term "0,0"))
                                          (rule "commute_or" (formula "48") (term "0,0"))
                                          (rule "commute_or" (formula "47") (term "0,0"))
                                          (rule "commute_or" (formula "46") (term "0,0"))
                                          (rule "commute_or" (formula "45") (term "0,0"))
                                          (rule "commute_or" (formula "60") (term "0,0"))
                                          (rule "commute_or" (formula "59") (term "0,0"))
                                          (rule "commute_or" (formula "58") (term "0,0"))
                                          (rule "commute_or" (formula "57") (term "0,0"))
                                          (rule "commute_or" (formula "56") (term "0,0"))
                                          (rule "commute_or" (formula "55") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "0") (ifseqformula "18"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "19"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "20"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "21"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "22"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or" (formula "33") (term "0,0"))
                                          (rule "commute_or" (formula "32") (term "0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "22") (term "0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0"))
                                          (rule "commute_or" (formula "19") (term "0,0"))
                                          (rule "commute_or" (formula "18") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or" (formula "44") (term "0,0"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0"))
                                          (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "0"))
                                          (rule "distr_forallAnd" (formula "29"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "cnf_rightDist" (formula "30") (term "0"))
                                          (rule "distr_forallAnd" (formula "30"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                          (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                          (rule "leq_literals" (formula "31") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "shift_paren_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                          (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "arrayLengthNotNegative" (formula "55") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "56") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "56"))
                                          (rule "true_left" (formula "56"))
                                          (rule "arrayLengthNotNegative" (formula "54") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "55") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "arrayLengthNotNegative" (formula "53") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "54") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "true_left" (formula "54"))
                                          (rule "arrayLengthIsAShort" (formula "52") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "52"))
                                          (rule "true_left" (formula "52"))
                                          (rule "arrayLengthNotNegative" (formula "52") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "52") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "52"))
                                          (rule "true_left" (formula "52"))
                                          (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "50"))
                                          (rule "true_left" (formula "50"))
                                          (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "16"))
                                          (rule "leq_literals" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "allLeft" (formula "29") (inst "t=iv_7"))
                                          (rule "replaceKnownSelect_taclet001100000100_62" (formula "29") (term "0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet001100000100_63" (formula "29") (term "0,0,0"))
                                          (rule "narrowSelectArrayType" (formula "29") (term "0,0,0") (ifseqformula "37") (ifseqformula "89"))
                                          (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "86"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "29"))
                                          (rule "qeq_literals" (formula "14") (term "0"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "closeFalse" (formula "14"))
                                       )
                                       (branch "CUT: result_3.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "commute_or_2" (formula "20") (term "0"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "71") (term "0") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or_2" (formula "9") (term "0"))
                                          (rule "commute_or_2" (formula "8") (term "0"))
                                          (rule "commute_or_2" (formula "7") (term "0"))
                                          (rule "lenNonNegative" (formula "29") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "29"))
                                          (rule "lenNonNegative" (formula "30") (term "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "30"))
                                          (rule "commute_or_2" (formula "6") (term "0"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "14"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "15"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "16"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "17"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "39") (term "0"))
                                          (rule "commute_or" (formula "50") (term "0,0"))
                                          (rule "commute_or" (formula "49") (term "0,0"))
                                          (rule "commute_or" (formula "48") (term "0,0"))
                                          (rule "commute_or" (formula "47") (term "0,0"))
                                          (rule "commute_or" (formula "46") (term "0,0"))
                                          (rule "commute_or" (formula "45") (term "0,0"))
                                          (rule "commute_or" (formula "60") (term "0,0"))
                                          (rule "commute_or" (formula "59") (term "0,0"))
                                          (rule "commute_or" (formula "58") (term "0,0"))
                                          (rule "commute_or" (formula "57") (term "0,0"))
                                          (rule "commute_or" (formula "56") (term "0,0"))
                                          (rule "commute_or" (formula "55") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "18"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "19"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "20"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "21"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "22"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or" (formula "33") (term "0,0"))
                                          (rule "commute_or" (formula "32") (term "0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "22") (term "0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0"))
                                          (rule "commute_or" (formula "19") (term "0,0"))
                                          (rule "commute_or" (formula "18") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or" (formula "44") (term "0,0"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1,1,0"))
                                          (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "0"))
                                          (rule "distr_forallAnd" (formula "29"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "cnf_rightDist" (formula "30") (term "0"))
                                          (rule "distr_forallAnd" (formula "30"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                          (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                          (rule "leq_literals" (formula "31") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "shift_paren_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                          (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "arrayLengthIsAShort" (formula "55") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "arrayLengthNotNegative" (formula "55") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "54") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "true_left" (formula "54"))
                                          (rule "arrayLengthNotNegative" (formula "54") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "53") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "54") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "true_left" (formula "54"))
                                          (rule "arrayLengthIsAShort" (formula "52") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "52"))
                                          (rule "true_left" (formula "52"))
                                          (rule "arrayLengthNotNegative" (formula "52") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "52") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "52"))
                                          (rule "true_left" (formula "52"))
                                          (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "50"))
                                          (rule "true_left" (formula "50"))
                                          (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "16"))
                                          (rule "leq_literals" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "allLeft" (formula "29") (inst "t=iv_7"))
                                          (rule "replaceKnownSelect_taclet001100000100_62" (formula "29") (term "0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet001100000100_63" (formula "29") (term "0,0,0"))
                                          (rule "narrowSelectArrayType" (formula "29") (term "0,0,0") (ifseqformula "37") (ifseqformula "90"))
                                          (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "87"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "14"))
                                          (rule "qeq_literals" (formula "29") (term "0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "closeFalse" (formula "29"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "15"))
                                       (rule "inEqSimp_geqRight" (formula "51"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "times_zero_2" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                                 (branch "result_0.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "59") (term "0"))
                                    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "58")))
                                    (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "58"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "replace_known_right" (formula "13") (term "0,1,1,0,0") (ifseqformula "58"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_geqRight" (formula "58"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "59") (term "0,0,1"))
                                    (rule "add_literals" (formula "59") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "59") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "notRight" (formula "59"))
                                    (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "60"))
                                    (rule "add_zero_right" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "60") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "60") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "60") (term "0,0"))
                                    (rule "leq_literals" (formula "60") (term "0"))
                                    (builtin "One Step Simplification" (formula "60"))
                                    (rule "false_right" (formula "60"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "CUT: result_2.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "ifthenelse_split" (formula "59") (term "0,0"))
                                 (branch "result_0.length ≥ 1 TRUE"
                                    (rule "eqSymm" (formula "60") (term "0"))
                                    (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "1")))
                                    (rule "eqSymm" (formula "60") (term "1,0"))
                                    (rule "replace_known_left" (formula "14") (term "0,1,1,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_contradEq7" (formula "60") (term "1,0") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "60") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "60") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "60") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "60"))
                                    (rule "inEqSimp_subsumption1" (formula "60") (term "0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "60") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "60"))
                                    (rule "allRight" (formula "60") (inst "sk=iv_6"))
                                    (rule "orRight" (formula "60"))
                                    (rule "orRight" (formula "60"))
                                    (rule "inEqSimp_geqRight" (formula "61"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "61"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "62") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "1")))
                                    (rule "inEqSimp_homoInEq0" (formula "62") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "62") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "62") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "62") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "62") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "62") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "62") (term "1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "62") (term "1,1,0,1"))
                                    (rule "mul_literals" (formula "62") (term "0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "62") (term "1,1,0,1"))
                                    (rule "replace_known_left" (formula "62") (term "0,1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "62"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "62") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "62") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "62") (term "1,0,0"))
                                    (rule "mul_literals" (formula "62") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "62") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "62") (term "1,1,0,0"))
                                    (rule "pullOutSelect" (formula "62") (term "1") (inst "selectSK=arr_109"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")) (ifInst ""  (formula "50")))
                                    (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "62") (term "1") (ifseqformula "23") (ifseqformula "65"))
                                    (rule "arrayLengthNotNegative" (formula "27") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "28") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                    (rule "apply_eq_monomials" (formula "29") (term "1,0,1,0,0") (ifseqformula "28"))
                                    (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "29") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "0,1,0,0"))
                                    (rule "nnf_imp2or" (formula "50") (term "0"))
                                    (rule "nnf_imp2or" (formula "49") (term "0"))
                                    (rule "nnf_imp2or" (formula "48") (term "0"))
                                    (rule "nnf_imp2or" (formula "47") (term "0"))
                                    (rule "nnf_imp2or" (formula "46") (term "0"))
                                    (rule "nnf_imp2or" (formula "45") (term "0"))
                                    (rule "nnf_imp2or" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_imp2or" (formula "18") (term "0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0"))
                                    (rule "nnf_imp2or" (formula "9") (term "0"))
                                    (rule "nnf_imp2or" (formula "8") (term "0"))
                                    (rule "nnf_imp2or" (formula "7") (term "0"))
                                    (rule "nnf_imp2or" (formula "6") (term "0"))
                                    (rule "nnf_imp2or" (formula "5") (term "0"))
                                    (rule "nnf_imp2or" (formula "4") (term "0"))
                                    (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                    (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "29") (term "0"))
                                    (rule "nnf_notAnd" (formula "50") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "50") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "50") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0"))
                                    (rule "mul_literals" (formula "50") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "50") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "50") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "49") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "49") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0"))
                                    (rule "mul_literals" (formula "49") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "49") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "48") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                    (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "47") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "47") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                                    (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "46") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "46") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "46") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0"))
                                    (rule "mul_literals" (formula "46") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "46") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                    (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                    (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "7") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                    (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                    (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                    (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                    (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                    (rule "commute_or_2" (formula "40") (term "0"))
                                    (rule "commute_or_2" (formula "39") (term "0"))
                                    (rule "commute_or_2" (formula "38") (term "0"))
                                    (rule "commute_or_2" (formula "16") (term "0"))
                                    (rule "commute_or_2" (formula "37") (term "0"))
                                    (rule "commute_or_2" (formula "36") (term "0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "commute_or_2" (formula "50") (term "0"))
                                    (rule "commute_or_2" (formula "49") (term "0"))
                                    (rule "commute_or_2" (formula "48") (term "0"))
                                    (rule "commute_or_2" (formula "47") (term "0"))
                                    (rule "commute_or_2" (formula "46") (term "0"))
                                    (rule "commute_or_2" (formula "45") (term "0"))
                                    (rule "commute_or_2" (formula "22") (term "0"))
                                    (rule "ifthenelse_split" (formula "15") (term "0"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "16") (term "1,1,1,0,0,1,0,0") (ifseqformula "15"))
                                       (rule "eqSymm" (formula "16") (term "1,0,0"))
                                       (rule "applyEq" (formula "65") (term "0,0,0") (ifseqformula "15"))
                                       (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "65"))
                                       (rule "eqSymm" (formula "65"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "commute_or_2" (formula "20") (term "0"))
                                       (rule "cut_direct" (formula "44") (term "0,0,0"))
                                       (branch "CUT: result_3.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "45"))
                                          (rule "true_left" (formula "45"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "71") (term "0") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or_2" (formula "9") (term "0"))
                                          (rule "commute_or_2" (formula "8") (term "0"))
                                          (rule "commute_or_2" (formula "7") (term "0"))
                                          (rule "lenNonNegative" (formula "29") (term "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "29"))
                                          (rule "lenNonNegative" (formula "30") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "30"))
                                          (rule "commute_or_2" (formula "6") (term "0"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "15"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "16"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "17"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "39") (term "0"))
                                          (rule "commute_or" (formula "50") (term "0,0"))
                                          (rule "commute_or" (formula "49") (term "0,0"))
                                          (rule "commute_or" (formula "48") (term "0,0"))
                                          (rule "commute_or" (formula "47") (term "0,0"))
                                          (rule "commute_or" (formula "46") (term "0,0"))
                                          (rule "commute_or" (formula "45") (term "0,0"))
                                          (rule "commute_or" (formula "60") (term "0,0"))
                                          (rule "commute_or" (formula "59") (term "0,0"))
                                          (rule "commute_or" (formula "58") (term "0,0"))
                                          (rule "commute_or" (formula "57") (term "0,0"))
                                          (rule "commute_or" (formula "56") (term "0,0"))
                                          (rule "commute_or" (formula "55") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "18"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "19"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "20"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "21"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "22"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or" (formula "32") (term "0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "22") (term "0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0"))
                                          (rule "commute_or" (formula "19") (term "0,0"))
                                          (rule "commute_or" (formula "18") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or" (formula "44") (term "0,0"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0"))
                                          (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "0"))
                                          (rule "distr_forallAnd" (formula "29"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "cnf_rightDist" (formula "30") (term "0"))
                                          (rule "distr_forallAnd" (formula "30"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                          (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                          (rule "leq_literals" (formula "31") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "shift_paren_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                          (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "arrayLengthIsAShort" (formula "55") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "arrayLengthNotNegative" (formula "55") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "54") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "55") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "arrayLengthIsAShort" (formula "53") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "arrayLengthNotNegative" (formula "53") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "52") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "52"))
                                          (rule "true_left" (formula "52"))
                                          (rule "arrayLengthNotNegative" (formula "52") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "51"))
                                          (rule "true_left" (formula "51"))
                                          (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "51"))
                                          (rule "true_left" (formula "51"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "16"))
                                          (rule "leq_literals" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "allLeft" (formula "29") (inst "t=iv_6"))
                                          (rule "replaceKnownSelect_taclet011100000100_62" (formula "29") (term "0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet011100000100_63" (formula "29") (term "0,0,0"))
                                          (rule "narrowSelectArrayType" (formula "29") (term "0,0,0") (ifseqformula "37") (ifseqformula "90"))
                                          (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "87"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "14"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "15"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "inEqSimp_homoInEq1" (formula "29"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                          (rule "add_literals" (formula "29") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0"))
                                          (rule "add_zero_right" (formula "29") (term "0"))
                                          (rule "leq_literals" (formula "29"))
                                          (rule "closeFalse" (formula "29"))
                                       )
                                       (branch "CUT: result_3.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "commute_or_2" (formula "18") (term "0"))
                                          (rule "commute_or_2" (formula "17") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "72") (term "0") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "73"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or_2" (formula "9") (term "0"))
                                          (rule "commute_or_2" (formula "8") (term "0"))
                                          (rule "commute_or_2" (formula "7") (term "0"))
                                          (rule "lenNonNegative" (formula "29") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "29"))
                                          (rule "lenNonNegative" (formula "30") (term "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "30"))
                                          (rule "commute_or_2" (formula "6") (term "0"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "15"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "16"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "17"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or_2" (formula "39") (term "0"))
                                          (rule "commute_or" (formula "50") (term "0,0"))
                                          (rule "commute_or" (formula "49") (term "0,0"))
                                          (rule "commute_or" (formula "48") (term "0,0"))
                                          (rule "commute_or" (formula "47") (term "0,0"))
                                          (rule "commute_or" (formula "46") (term "0,0"))
                                          (rule "commute_or" (formula "45") (term "0,0"))
                                          (rule "commute_or" (formula "60") (term "0,0"))
                                          (rule "commute_or" (formula "59") (term "0,0"))
                                          (rule "commute_or" (formula "58") (term "0,0"))
                                          (rule "commute_or" (formula "57") (term "0,0"))
                                          (rule "commute_or" (formula "56") (term "0,0"))
                                          (rule "commute_or" (formula "55") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "28") (term "0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "18"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "19"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "20"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "71") (term "0") (ifseqformula "21"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "22"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or" (formula "32") (term "0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "22") (term "0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0"))
                                          (rule "commute_or" (formula "19") (term "0,0"))
                                          (rule "commute_or" (formula "18") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or" (formula "44") (term "0,0"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1,1,0"))
                                          (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                          (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "0"))
                                          (rule "distr_forallAnd" (formula "29"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "cnf_rightDist" (formula "30") (term "0"))
                                          (rule "distr_forallAnd" (formula "30"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                          (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                          (rule "leq_literals" (formula "31") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "shift_paren_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                          (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "arrayLengthNotNegative" (formula "55") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "56") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "56"))
                                          (rule "true_left" (formula "56"))
                                          (rule "arrayLengthNotNegative" (formula "54") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "55") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "arrayLengthNotNegative" (formula "53") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "54") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "true_left" (formula "54"))
                                          (rule "arrayLengthNotNegative" (formula "52") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "53") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "51"))
                                          (rule "true_left" (formula "51"))
                                          (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "51"))
                                          (rule "true_left" (formula "51"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "16"))
                                          (rule "leq_literals" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "allLeft" (formula "29") (inst "t=iv_6"))
                                          (rule "replaceKnownSelect_taclet011100000100_62" (formula "29") (term "0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet011100000100_63" (formula "29") (term "0,0,0"))
                                          (rule "narrowSelectArrayType" (formula "29") (term "0,0,0") (ifseqformula "37") (ifseqformula "91"))
                                          (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "88"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "29"))
                                          (rule "qeq_literals" (formula "14") (term "0"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "closeFalse" (formula "14"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "15"))
                                       (rule "inEqSimp_geqRight" (formula "51"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                                 (branch "result_0.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "60") (term "0"))
                                    (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "59")))
                                    (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "59"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "replace_known_right" (formula "13") (term "0,1,1,0,0") (ifseqformula "59"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "60") (term "0,0,1"))
                                    (rule "add_literals" (formula "60") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "60") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "60"))
                                    (rule "orRight" (formula "60"))
                                    (rule "notRight" (formula "60"))
                                    (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "61"))
                                    (rule "add_zero_right" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "61") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "61") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "61") (term "0,0"))
                                    (rule "leq_literals" (formula "61") (term "0"))
                                    (builtin "One Step Simplification" (formula "61"))
                                    (rule "false_right" (formula "61"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: array2seq(heapAfter_checkAndRemoveSignature, self.unsigned@heapAfter_checkAndRemoveSignature) = array2seq(heap, self.unsigned) FALSE"
                        (rule "hide_right" (formula "38") (userinteraction))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "31") (inst "iv=iv") (userinteraction))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "12"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1") (ifseqformula "25"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "12"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1") (ifseqformula "18"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,1") (ifseqformula "12"))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "28"))
                        (rule "eqSymm" (formula "21"))
                        (rule "eqSymm" (formula "15"))
                        (rule "eqSymm" (formula "9"))
                        (rule "eqSymm" (formula "16"))
                        (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "36"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "32"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
                        (rule "array2seqDef" (formula "29") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "31") (term "0,0,0") (inst "u=u"))
                        (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,0,0"))
                        (rule "times_zero_2" (formula "31") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0,0,0,0"))
                        (rule "array2seqDef" (formula "31") (term "0,0,1,0,1") (inst "u=u"))
                        (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                        (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                        (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                        (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,1,0,0,1,0,1"))
                        (rule "times_zero_2" (formula "31") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0,1"))
                        (rule "array2seqDef" (formula "22") (term "0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "22"))
                        (rule "array2seqDef" (formula "31") (term "0,1,1,0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "31") (term "1,0,1"))
                        (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                        (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                        (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                        (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,1,0,0,1,0,1"))
                        (rule "times_zero_2" (formula "31") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1"))
                        (rule "eqSymm" (formula "31") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0,1"))
                        (rule "array2seqDef" (formula "31") (term "0,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "31") (term "0"))
                        (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,0,0"))
                        (rule "times_zero_2" (formula "31") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,0"))
                        (rule "eqSymm" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0,0,1,0"))
                        (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "1"))
                        (rule "lenOfSeqDefEQ" (formula "31") (term "1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_elimSub" (formula "31") (term "1,1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "1,1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "31") (term "1,1,1,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,1,1,1,0,0,1"))
                        (rule "array2seqDef" (formula "28") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "28") (term "0,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "21") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "21") (term "0,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "15") (term "0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "15"))
                        (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "9"))
                        (rule "array2seqDef" (formula "16") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "16") (term "0,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "22") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "22"))
                        (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "1"))
                        (rule "array2seqDef" (formula "15") (term "0,0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "15"))
                        (rule "array2seqDef" (formula "9") (term "0,1,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "9") (term "0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "9"))
                        (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "4") (ifseqformula "37"))
                        (rule "eqSymm" (formula "9"))
                        (rule "eqSeqDef2" (formula "29") (inst "iv=iv") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                        (rule "andLeft" (formula "1"))
                        (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                        (rule "getOfSeqDef" (formula "2") (term "1,1,0"))
                        (rule "castDel" (formula "2") (term "1,1,1,0"))
                        (rule "castDel" (formula "2") (term "2,1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,2,1,1,1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                        (rule "castDel" (formula "2") (term "1,0,1,0"))
                        (rule "castDel" (formula "2") (term "2,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "lenOfSeqDef" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                        (rule "times_zero_2" (formula "1") (term "1,1,1"))
                        (rule "add_zero_right" (formula "1") (term "1,1"))
                        (rule "lenOfSeqDef" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                        (rule "times_zero_2" (formula "1") (term "1,1,1"))
                        (rule "add_zero_right" (formula "1") (term "1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                        (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                        (rule "eqSeqDef2" (formula "22") (inst "iv=iv") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "eqSeqDef2" (formula "28") (inst "iv=iv") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "eqSeqDef2" (formula "17") (inst "iv=iv") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
                        (rule "eqSeqDef2" (formula "21") (inst "iv=iv") (ifseqformula "21"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "pullOutSelect" (formula "27") (term "1,1,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_12"))
                        (rule "applyEq" (formula "3") (term "1,1,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "28") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "3") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "28") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "28") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "7")))
                        (rule "applyEqReverse" (formula "28") (term "1,1,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "3") (term "1,1,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "2") (term "0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "3") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "28") (term "0,1,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "allRight" (formula "28") (inst "sk=iv_0"))
                        (rule "impRight" (formula "28"))
                        (rule "andLeft" (formula "1"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "29") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
                        (rule "mul_literals" (formula "29") (term "0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                        (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "pullOutSelect" (formula "28") (term "1,0") (inst "selectSK=arr_98"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "29"))
                        (rule "nnf_imp2or" (formula "5") (term "0"))
                        (rule "commute_or_2" (formula "27"))
                        (rule "nnf_notAnd" (formula "5") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                        (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                        (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "7") (term "0") (ifseqformula "10"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "12") (ifseqformula "9"))
                        (rule "andLeft" (formula "12"))
                        (rule "notLeft" (formula "13"))
                        (rule "andLeft" (formula "12"))
                        (rule "notLeft" (formula "13"))
                        (rule "andLeft" (formula "12"))
                        (rule "notLeft" (formula "13"))
                        (rule "andLeft" (formula "12"))
                        (rule "notLeft" (formula "13"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "notLeft" (formula "12"))
                        (rule "notLeft" (formula "12"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "narrowSelectArrayType" (formula "39") (term "1,0") (ifseqformula "7") (ifseqformula "34"))
                        (rule "eqSymm" (formula "39"))
                        (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "18") (ifseqformula "34"))
                        (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "7") (ifseqformula "34"))
                        (rule "nonNull" (formula "17") (inst "i=i"))
                        (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "greater_literals" (formula "17") (term "0,1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "16") (inst "i=i"))
                        (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "greater_literals" (formula "16") (term "0,1"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "notLeft" (formula "16"))
                        (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "15") (inst "i=i"))
                        (rule "greater_literals" (formula "15") (term "0,1"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "sub_literals" (formula "15") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "notLeft" (formula "15"))
                        (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "14") (inst "i=i"))
                        (rule "greater_literals" (formula "14") (term "0,1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "sub_literals" (formula "14") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "13") (inst "i=i"))
                        (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "greater_literals" (formula "13") (term "0,1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "13"))
                        (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "12") (inst "i=i"))
                        (rule "greater_literals" (formula "12") (term "0,1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "sub_literals" (formula "12") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "notLeft" (formula "12"))
                        (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "17") (term "0"))
                        (rule "nnf_imp2or" (formula "16") (term "0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_imp2or" (formula "13") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_notAnd" (formula "17") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                        (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "16") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "6") (ifseqformula "9"))
                        (rule "replaceKnownSelect_taclet10000100_1" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_2" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "notLeft" (formula "8"))
                        (rule "notLeft" (formula "7"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "notLeft" (formula "8"))
                        (rule "notLeft" (formula "7"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "notLeft" (formula "7"))
                        (rule "notLeft" (formula "6"))
                        (rule "nonNull" (formula "11") (inst "i=i"))
                        (rule "greater_literals" (formula "11") (term "0,1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "sub_literals" (formula "11") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "notLeft" (formula "11"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "10") (inst "i=i"))
                        (rule "greater_literals" (formula "10") (term "0,1"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "sub_literals" (formula "10") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "notLeft" (formula "10"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "9") (inst "i=i"))
                        (rule "greater_literals" (formula "9") (term "0,1"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "sub_literals" (formula "9") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "notLeft" (formula "9"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "8") (inst "i=i"))
                        (rule "sub_literals" (formula "8") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "greater_literals" (formula "8") (term "0,1"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "andLeft" (formula "8"))
                        (rule "notLeft" (formula "8"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "7") (inst "i=i"))
                        (rule "greater_literals" (formula "7") (term "0,1"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "sub_literals" (formula "7") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "andLeft" (formula "7"))
                        (rule "notLeft" (formula "7"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "6") (inst "i=i"))
                        (rule "sub_literals" (formula "6") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "greater_literals" (formula "6") (term "0,1"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "notLeft" (formula "6"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                        (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_11"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_11"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_11"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "45") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_11"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_11"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "11") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_11"))
                        (rule "applyEq" (formula "12") (term "0,1,1,1,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "44") (term "0") (ifseqformula "11"))
                        (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "61")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,0") (ifseqformula "11"))
                        (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "11"))
                        (rule "applyEqReverse" (formula "12") (term "1,0,0,1,0") (ifseqformula "11"))
                        (rule "hideAuxiliaryEq" (formula "11"))
                        (rule "pullOutSelect" (formula "10") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_11"))
                        (rule "applyEq" (formula "11") (term "0,1,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "43") (term "0") (ifseqformula "10"))
                        (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "60")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "11") (term "0,1,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "10"))
                        (rule "applyEqReverse" (formula "11") (term "1,0,0,1,0") (ifseqformula "10"))
                        (rule "hideAuxiliaryEq" (formula "10"))
                        (rule "pullOutSelect" (formula "9") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_11"))
                        (rule "applyEq" (formula "42") (term "0") (ifseqformula "9"))
                        (rule "applyEq" (formula "10") (term "0,1,1,1,0,0") (ifseqformula "9"))
                        (rule "simplifySelectOfAnonEQ" (formula "9") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "59")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "9"))
                        (rule "applyEqReverse" (formula "10") (term "1,0,0,1,0") (ifseqformula "9"))
                        (rule "applyEqReverse" (formula "10") (term "0,1,1,1,0,0") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "pullOutSelect" (formula "8") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_11"))
                        (rule "applyEq" (formula "9") (term "0,1,1,1,0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "41") (term "0") (ifseqformula "8"))
                        (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "58")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "9") (term "0,1,1,1,0,0") (ifseqformula "8"))
                        (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "8"))
                        (rule "applyEqReverse" (formula "9") (term "1,0,0,1,0") (ifseqformula "8"))
                        (rule "hideAuxiliaryEq" (formula "8"))
                        (rule "pullOutSelect" (formula "7") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_11"))
                        (rule "applyEq" (formula "8") (term "0,1,1,1,0,0") (ifseqformula "7"))
                        (rule "applyEq" (formula "40") (term "0") (ifseqformula "7"))
                        (rule "simplifySelectOfAnonEQ" (formula "7") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "57")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "8") (term "0,1,1,1,0,0") (ifseqformula "7"))
                        (rule "applyEqReverse" (formula "8") (term "1,0,0,1,0") (ifseqformula "7"))
                        (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "7"))
                        (rule "hideAuxiliaryEq" (formula "7"))
                        (rule "pullOutSelect" (formula "6") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_11"))
                        (rule "applyEq" (formula "39") (term "0") (ifseqformula "6"))
                        (rule "applyEq" (formula "7") (term "0,1,1,1,0,0") (ifseqformula "6"))
                        (rule "simplifySelectOfAnonEQ" (formula "6") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "56")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "6"))
                        (rule "applyEqReverse" (formula "7") (term "1,0,0,1,0") (ifseqformula "6"))
                        (rule "applyEqReverse" (formula "7") (term "0,1,1,1,0,0") (ifseqformula "6"))
                        (rule "hideAuxiliaryEq" (formula "6"))
                        (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "37") (ifseqformula "14"))
                        (rule "andLeft" (formula "37"))
                        (rule "notLeft" (formula "38"))
                        (rule "andLeft" (formula "37"))
                        (rule "notLeft" (formula "38"))
                        (rule "andLeft" (formula "37"))
                        (rule "notLeft" (formula "38"))
                        (rule "andLeft" (formula "37"))
                        (rule "notLeft" (formula "38"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "notLeft" (formula "38"))
                        (rule "notLeft" (formula "37"))
                        (rule "nonNull" (formula "42") (inst "i=i"))
                        (rule "sub_literals" (formula "42") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "42"))
                        (rule "greater_literals" (formula "42") (term "0,1"))
                        (builtin "One Step Simplification" (formula "42"))
                        (rule "andLeft" (formula "42"))
                        (rule "notLeft" (formula "42"))
                        (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "41") (inst "i=i"))
                        (rule "sub_literals" (formula "41") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "41"))
                        (rule "greater_literals" (formula "41") (term "0,1"))
                        (builtin "One Step Simplification" (formula "41"))
                        (rule "andLeft" (formula "41"))
                        (rule "notLeft" (formula "41"))
                        (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "40") (inst "i=i"))
                        (rule "sub_literals" (formula "40") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "40"))
                        (rule "greater_literals" (formula "40") (term "0,1"))
                        (builtin "One Step Simplification" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "notLeft" (formula "40"))
                        (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "39") (inst "i=i"))
                        (rule "sub_literals" (formula "39") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "39"))
                        (rule "greater_literals" (formula "39") (term "0,1"))
                        (builtin "One Step Simplification" (formula "39"))
                        (rule "andLeft" (formula "39"))
                        (rule "notLeft" (formula "39"))
                        (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "38") (inst "i=i"))
                        (rule "greater_literals" (formula "38") (term "0,1"))
                        (builtin "One Step Simplification" (formula "38"))
                        (rule "sub_literals" (formula "38") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "38"))
                        (rule "andLeft" (formula "38"))
                        (rule "notLeft" (formula "38"))
                        (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "37") (inst "i=i"))
                        (rule "greater_literals" (formula "37") (term "0,1"))
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "sub_literals" (formula "37") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "notLeft" (formula "37"))
                        (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                        (rule "pullOutSelect" (formula "54") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_12"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "72")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "30"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "72")))
                        (rule "replaceKnownSelect_taclet10000100_4" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_5" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "53") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_12"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "71")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "30"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "71")))
                        (rule "replaceKnownSelect_taclet10000100_6" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_7" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "52") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_12"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "30"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                        (rule "replaceKnownSelect_taclet10000100_8" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_9" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "51") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_12"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "30"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")))
                        (rule "replaceKnownSelect_taclet10000100_10" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_11" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_12"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "30"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")))
                        (rule "replaceKnownSelect_taclet10000100_12" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_13" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_13"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "30"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                        (rule "replaceKnownSelect_taclet10000100_1" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_2" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "42") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_12"))
                        (rule "applyEq" (formula "49") (term "0") (ifseqformula "42"))
                        (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                        (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "66")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "29"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "42") (term "0,0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "42"))
                        (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "66")))
                        (rule "replaceKnownSelect_taclet10000100_14" (formula "42") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_15" (formula "42") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "42") (term "0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "42"))
                        (rule "applyEqReverse" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "42"))
                        (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "42"))
                        (rule "applyEqReverse" (formula "43") (term "1,0,0,1,0") (ifseqformula "42"))
                        (rule "hideAuxiliaryEq" (formula "42"))
                        (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_12"))
                        (rule "applyEq" (formula "48") (term "0") (ifseqformula "41"))
                        (rule "applyEq" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                        (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "65")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0") (ifseqformula "29"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "41") (term "0,0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "41"))
                        (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "65")))
                        (rule "replaceKnownSelect_taclet10000100_16" (formula "41") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_17" (formula "41") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "41") (term "0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "41"))
                        (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
                        (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "41"))
                        (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
                        (rule "hideAuxiliaryEq" (formula "41"))
                        (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_12"))
                        (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                        (rule "applyEq" (formula "47") (term "0") (ifseqformula "40"))
                        (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "64")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "29"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "40"))
                        (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "64")))
                        (rule "replaceKnownSelect_taclet10000100_18" (formula "40") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_19" (formula "40") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "40") (term "0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "40"))
                        (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
                        (rule "applyEqReverse" (formula "41") (term "1,0,0,1,0") (ifseqformula "40"))
                        (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "40"))
                        (rule "hideAuxiliaryEq" (formula "40"))
                        (rule "pullOutSelect" (formula "39") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_12"))
                        (rule "applyEq" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                        (rule "applyEq" (formula "46") (term "0") (ifseqformula "39"))
                        (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "63")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "29"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "39") (term "0,0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "39"))
                        (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "63")))
                        (rule "replaceKnownSelect_taclet10000100_20" (formula "39") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_21" (formula "39") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "39") (term "0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "39"))
                        (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "39"))
                        (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
                        (rule "applyEqReverse" (formula "40") (term "1,0,0,1,0") (ifseqformula "39"))
                        (rule "hideAuxiliaryEq" (formula "39"))
                        (rule "pullOutSelect" (formula "38") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_12"))
                        (rule "applyEq" (formula "45") (term "0") (ifseqformula "38"))
                        (rule "applyEq" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                        (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "62")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "29"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "38") (term "0,0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "38"))
                        (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "62")))
                        (rule "replaceKnownSelect_taclet10000100_22" (formula "38") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_23" (formula "38") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "38") (term "0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "38"))
                        (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
                        (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "38"))
                        (rule "applyEqReverse" (formula "39") (term "1,0,0,1,0") (ifseqformula "38"))
                        (rule "hideAuxiliaryEq" (formula "38"))
                        (rule "pullOutSelect" (formula "37") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_12"))
                        (rule "applyEq" (formula "44") (term "0") (ifseqformula "37"))
                        (rule "applyEq" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                        (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "61")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "29"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "37") (term "0,0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "61")))
                        (rule "replaceKnownSelect_taclet10000100_24" (formula "37") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_25" (formula "37") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "applyEqReverse" (formula "38") (term "1,0,0,1,0") (ifseqformula "37"))
                        (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "37"))
                        (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
                        (rule "hideAuxiliaryEq" (formula "37"))
                        (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "32") (ifseqformula "14"))
                        (rule "replaceKnownSelect_taclet10000100_27" (formula "32") (term "0,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_28" (formula "32") (term "0,0,1"))
                        (rule "replaceKnownSelect_taclet10000100_30" (formula "32") (term "0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_31" (formula "32") (term "0,0,1,0"))
                        (rule "replaceKnownSelect_taclet10000100_33" (formula "32") (term "0,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_34" (formula "32") (term "0,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet10000100_45" (formula "32") (term "1,1,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10000100_36" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_46" (formula "32") (term "1,1,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_37" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet10000100_48" (formula "32") (term "1,1,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10000100_51" (formula "32") (term "1,1,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_49" (formula "32") (term "1,1,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10000100_54" (formula "32") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_52" (formula "32") (term "1,1,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10000100_57" (formula "32") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_55" (formula "32") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10000100_60" (formula "32") (term "1,1,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_58" (formula "32") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_61" (formula "32") (term "1,1,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10000100_42" (formula "32") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10000100_39" (formula "32") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_43" (formula "32") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000100_40" (formula "32") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                        (rule "andLeft" (formula "32"))
                        (rule "notLeft" (formula "33"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "notLeft" (formula "34"))
                        (rule "andLeft" (formula "32"))
                        (rule "notLeft" (formula "34"))
                        (rule "andLeft" (formula "32"))
                        (rule "notLeft" (formula "34"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "notLeft" (formula "33"))
                        (rule "notLeft" (formula "32"))
                        (rule "nonNull" (formula "37") (inst "i=i"))
                        (rule "greater_literals" (formula "37") (term "0,1"))
                        (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "53")))
                        (rule "sub_literals" (formula "37") (term "2,1,0"))
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "36") (inst "i=i"))
                        (rule "greater_literals" (formula "36") (term "0,1"))
                        (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "52")))
                        (rule "sub_literals" (formula "36") (term "2,1,0"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "35") (inst "i=i"))
                        (rule "greater_literals" (formula "35") (term "0,1"))
                        (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "51")))
                        (rule "sub_literals" (formula "35") (term "2,1,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "34") (inst "i=i"))
                        (rule "greater_literals" (formula "34") (term "0,1"))
                        (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "50")))
                        (rule "sub_literals" (formula "34") (term "2,1,0"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "33") (inst "i=i"))
                        (rule "sub_literals" (formula "33") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "49")))
                        (rule "greater_literals" (formula "33") (term "0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "32") (inst "i=i"))
                        (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "48")))
                        (rule "greater_literals" (formula "32") (term "0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                        (rule "commute_or_2" (formula "41") (term "0"))
                        (rule "commute_or_2" (formula "5") (term "0"))
                        (rule "cut_direct" (formula "26") (term "0"))
                        (branch "CUT: result_0.<created> = TRUE TRUE"
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "cut_direct" (formula "31") (term "0,0"))
                           (branch "CUT: result_2.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "nnf_imp2or" (formula "10") (term "0"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_imp2or" (formula "7") (term "0"))
                              (rule "commute_or_2" (formula "22") (term "0"))
                              (rule "arrayLengthNotNegative" (formula "27") (term "1,0,0,0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                              (rule "andLeft" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "apply_eq_monomials" (formula "29") (term "1,0,1,0,0") (ifseqformula "28"))
                              (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "29") (term "1,0,1,0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,1,0,0"))
                              (rule "arrayLengthIsAShort" (formula "30") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "ifthenelse_split" (formula "4") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "6") (term "0,1,1,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "3") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "nnf_imp2or" (formula "7") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "65") (term "0,0,0") (ifseqformula "6"))
                                    (rule "eqSymm" (formula "65"))
                                    (rule "replace_known_left" (formula "65") (term "0,1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "65"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "64") (term "0,0,0") (ifseqformula "5"))
                                    (rule "replace_known_left" (formula "64") (term "0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "64"))
                                    (rule "eqSymm" (formula "64"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "commute_or_2" (formula "20") (term "0"))
                                    (rule "commute_or_2" (formula "19") (term "0"))
                                    (rule "commute_or_2" (formula "18") (term "0"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "self.unsigned.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "65") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "65"))
                                       (rule "closeTrue" (formula "65"))
                                    )
                                    (branch "self.unsigned.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "52") (ifseqformula "60"))
                                       (rule "close" (formula "52") (ifseqformula "13"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "5"))
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "5") (term "0,1,1,0") (ifseqformula "51"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_geqRight" (formula "51"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "7") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "result_0.length ≥ 0 TRUE"
                                    (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "times_zero_2" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEq" (formula "6") (term "1,1,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "add_zero_right" (formula "6") (term "1,1,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "result_0.length ≥ 0 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "times_zero_2" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "3") (term "0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                              )
                           )
                           (branch "CUT: result_2.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "nnf_imp2or" (formula "10") (term "0"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_imp2or" (formula "7") (term "0"))
                              (rule "commute_or_2" (formula "22") (term "0"))
                              (rule "arrayLengthIsAShort" (formula "27") (term "1,0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "arrayLengthNotNegative" (formula "27") (term "1,0,1"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                              (rule "andLeft" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "apply_eq_monomials" (formula "29") (term "1,0,1,0,0") (ifseqformula "28"))
                              (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "29") (term "1,0,1,0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,1,0,0"))
                              (rule "ifthenelse_split" (formula "4") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "6") (term "0,1,1,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "3") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "nnf_imp2or" (formula "7") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "65") (term "0,0,0") (ifseqformula "5"))
                                    (rule "eqSymm" (formula "65"))
                                    (rule "replace_known_left" (formula "65") (term "0,1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "65"))
                                    (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "65") (term "0,0,0") (ifseqformula "5"))
                                    (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "65"))
                                    (rule "eqSymm" (formula "65"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "commute_or_2" (formula "20") (term "0"))
                                    (rule "commute_or_2" (formula "19") (term "0"))
                                    (rule "commute_or_2" (formula "18") (term "0"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "self.unsigned.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "66"))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch "self.unsigned.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "52") (ifseqformula "61"))
                                       (rule "close" (formula "52") (ifseqformula "13"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "5"))
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "5") (term "0,1,1,0") (ifseqformula "51"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_geqRight" (formula "51"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "7") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "result_0.length ≥ 0 TRUE"
                                    (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "6") (term "1,1,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "result_0.length ≥ 0 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: result_0.<created> = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "cut_direct" (formula "31") (term "0,0"))
                           (branch "CUT: result_2.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "nnf_imp2or" (formula "10") (term "0"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_imp2or" (formula "7") (term "0"))
                              (rule "commute_or_2" (formula "22") (term "0"))
                              (rule "arrayLengthNotNegative" (formula "27") (term "1,0,0,0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                              (rule "andLeft" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "apply_eq_monomials" (formula "29") (term "1,0,1,0,0") (ifseqformula "28"))
                              (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "29") (term "1,0,1,0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,1,0,0"))
                              (rule "arrayLengthIsAShort" (formula "30") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "ifthenelse_split" (formula "4") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "6") (term "0,1,1,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "3") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "nnf_imp2or" (formula "7") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "65") (term "0,0,0") (ifseqformula "5"))
                                    (rule "eqSymm" (formula "65"))
                                    (rule "replace_known_left" (formula "65") (term "0,1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "65"))
                                    (rule "applyEq" (formula "65") (term "0,0,0") (ifseqformula "5"))
                                    (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "65"))
                                    (rule "eqSymm" (formula "65"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "commute_or_2" (formula "20") (term "0"))
                                    (rule "commute_or_2" (formula "19") (term "0"))
                                    (rule "commute_or_2" (formula "18") (term "0"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "self.unsigned.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "66"))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch "self.unsigned.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "52") (ifseqformula "61"))
                                       (rule "close" (formula "52") (ifseqformula "13"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "5"))
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "times_zero_2" (formula "4") (term "1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0"))
                                    (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "5") (term "0,1,1,0") (ifseqformula "51"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_geqRight" (formula "51"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "7") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "result_0.length ≥ 0 TRUE"
                                    (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "6") (term "1,1,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                                 (branch "result_0.length ≥ 0 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "times_zero_2" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                           )
                           (branch "CUT: result_2.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "nnf_imp2or" (formula "10") (term "0"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_imp2or" (formula "7") (term "0"))
                              (rule "commute_or_2" (formula "22") (term "0"))
                              (rule "arrayLengthNotNegative" (formula "27") (term "1,0,1"))
                              (rule "arrayLengthIsAShort" (formula "28") (term "1,0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                              (rule "andLeft" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "apply_eq_monomials" (formula "29") (term "1,0,1,0,0") (ifseqformula "28"))
                              (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "29") (term "1,0,1,0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,1,0,0"))
                              (rule "ifthenelse_split" (formula "4") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "6") (term "0,1,1,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "3") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "nnf_imp2or" (formula "7") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "7") (term "1,1,1,0,0,1,0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "66") (term "0,0,0") (ifseqformula "5"))
                                    (rule "eqSymm" (formula "66"))
                                    (rule "replace_known_left" (formula "66") (term "0,1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "66"))
                                    (rule "applyEq" (formula "66") (term "0,0,0") (ifseqformula "5"))
                                    (rule "replace_known_left" (formula "66") (term "0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "66"))
                                    (rule "eqSymm" (formula "66"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "commute_or_2" (formula "20") (term "0"))
                                    (rule "commute_or_2" (formula "19") (term "0"))
                                    (rule "commute_or_2" (formula "18") (term "0"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "self.unsigned.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "67") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "67"))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch "self.unsigned.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "52") (ifseqformula "62"))
                                       (rule "close" (formula "52") (ifseqformula "13"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "5"))
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "5") (term "0,1,1,0") (ifseqformula "51"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_geqRight" (formula "51"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "7") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "result_0.length ≥ 0 TRUE"
                                    (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEq" (formula "6") (term "1,1,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                                 (branch "result_0.length ≥ 0 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "times_zero_2" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "3") (term "0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                              )
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1") (ifseqformula "25"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "12"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1") (ifseqformula "18"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "12"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,1") (ifseqformula "12"))
                     (rule "eqSymm" (formula "28"))
                     (rule "eqSymm" (formula "9"))
                     (rule "eqSymm" (formula "16"))
                     (rule "eqSymm" (formula "1"))
                     (rule "eqSymm" (formula "21"))
                     (rule "eqSymm" (formula "15"))
                     (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "30"))
                     (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "31")))
                     (rule "closeTrue" (formula "37"))
                  )
               )
               (branch "Case 2"
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1") (ifseqformula "25"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "12"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "12"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,1") (ifseqformula "12"))
                  (rule "allRight" (formula "37") (inst "sk=f_7"))
                  (rule "allRight" (formula "37") (inst "sk=o_7"))
                  (rule "orRight" (formula "37"))
                  (rule "eqSymm" (formula "9"))
                  (rule "eqSymm" (formula "16"))
                  (rule "eqSymm" (formula "28"))
                  (rule "eqSymm" (formula "21"))
                  (rule "eqSymm" (formula "15"))
                  (rule "eqSymm" (formula "1"))
                  (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "35"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "33"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "32"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "31"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "applyEq" (formula "1") (term "1") (ifseqformula "16"))
                  (rule "array2seqDef" (formula "22") (term "0") (inst "u=u"))
                  (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "29"))
                  (rule "array2seqDef" (formula "22") (term "0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "9") (term "0,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "9") (term "1,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
                  (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "4") (ifseqformula "36"))
                  (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "9"))
                  (rule "array2seqDef" (formula "16") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "16"))
                  (rule "array2seqDef" (formula "28") (term "0") (inst "u=u"))
                  (rule "array2seqDef" (formula "28") (term "0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "21") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "21"))
                  (rule "array2seqDef" (formula "15") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "15"))
                  (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                  (rule "array2seqDef" (formula "1") (term "0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "29"))
                  (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "16"))
                  (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "21"))
                  (rule "array2seqDef" (formula "15") (term "0,0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "15"))
                  (rule "eqSeqDef2" (formula "22") (inst "iv=iv") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "eqSeqDef2" (formula "26") (inst "iv=iv") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "eqSeqDef2" (formula "1") (inst "iv=iv") (ifseqformula "15"))
                  (rule "andLeft" (formula "1"))
                  (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                  (rule "castDel" (formula "2") (term "1,0,1,0"))
                  (rule "castDel" (formula "2") (term "2,0,1,0"))
                  (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                  (rule "eqSymm" (formula "2") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                  (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                  (rule "lenOfSeqDef" (formula "1") (term "1"))
                  (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                  (rule "times_zero_2" (formula "1") (term "1,1,1"))
                  (rule "add_zero_right" (formula "1") (term "1,1"))
                  (rule "lenOfSeqDef" (formula "1") (term "0"))
                  (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                  (rule "times_zero_2" (formula "1") (term "1,1,0"))
                  (rule "add_zero_right" (formula "1") (term "1,0"))
                  (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                  (rule "castDel" (formula "2") (term "2,0,1,0"))
                  (rule "castDel" (formula "2") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                  (rule "eqSymm" (formula "2") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "2") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "2") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                  (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "2") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "2") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "2") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                  (rule "eqSeqDef2" (formula "27") (inst "iv=iv") (ifseqformula "27"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "true_left" (formula "27"))
                  (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=f_7_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "13"))
                  (rule "eqSymm" (formula "34"))
                  (rule "pullOutSelect" (formula "2") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_9"))
                  (rule "applyEq" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "4") (term "1,1,0,1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                  (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "31")) (ifInst ""  (formula "8")))
                  (rule "applyEqReverse" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "4") (term "1,1,0,1,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_7_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "14"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_7_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "nnf_imp2or" (formula "4") (term "0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                  (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                  (rule "commute_or_2" (formula "26"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "9"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "notLeft" (formula "24"))
                  (rule "notLeft" (formula "23"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "notLeft" (formula "24"))
                  (rule "notLeft" (formula "23"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "notLeft" (formula "23"))
                  (rule "notLeft" (formula "22"))
                  (rule "nonNull" (formula "27") (inst "i=i"))
                  (rule "sub_literals" (formula "27") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "greater_literals" (formula "27") (term "0,1"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "andLeft" (formula "27"))
                  (rule "notLeft" (formula "27"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "26") (inst "i=i"))
                  (rule "greater_literals" (formula "26") (term "0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "sub_literals" (formula "26") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "andLeft" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "25") (inst "i=i"))
                  (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "greater_literals" (formula "25") (term "0,1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "andLeft" (formula "25"))
                  (rule "notLeft" (formula "25"))
                  (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "24") (inst "i=i"))
                  (rule "greater_literals" (formula "24") (term "0,1"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "sub_literals" (formula "24") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "23") (inst "i=i"))
                  (rule "greater_literals" (formula "23") (term "0,1"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "sub_literals" (formula "23") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "andLeft" (formula "23"))
                  (rule "notLeft" (formula "23"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "22") (inst "i=i"))
                  (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "greater_literals" (formula "22") (term "0,1"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "notLeft" (formula "22"))
                  (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                  (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_9"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "9")))
                  (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_9"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "9")))
                  (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_9"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "9")))
                  (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_9"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "9")))
                  (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_9"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "9")))
                  (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_10"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                  (rule "replaceKnownSelect_taclet100100_1" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_2" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_9"))
                  (rule "applyEq" (formula "39") (term "0") (ifseqformula "27"))
                  (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                  (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "27") (term "0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                  (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                  (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
                  (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "27"))
                  (rule "hideAuxiliaryEq" (formula "27"))
                  (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_9"))
                  (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                  (rule "applyEq" (formula "38") (term "0") (ifseqformula "26"))
                  (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                  (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "26"))
                  (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                  (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
                  (rule "hideAuxiliaryEq" (formula "26"))
                  (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_9"))
                  (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "25"))
                  (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                  (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "25"))
                  (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
                  (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                  (rule "hideAuxiliaryEq" (formula "25"))
                  (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_9"))
                  (rule "applyEq" (formula "36") (term "0") (ifseqformula "24"))
                  (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                  (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "24") (term "0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                  (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                  (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "24"))
                  (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
                  (rule "hideAuxiliaryEq" (formula "24"))
                  (rule "pullOutSelect" (formula "23") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_9"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "23"))
                  (rule "applyEq" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                  (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "23") (term "0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                  (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                  (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0") (ifseqformula "23"))
                  (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "23"))
                  (rule "hideAuxiliaryEq" (formula "23"))
                  (rule "pullOutSelect" (formula "22") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_9"))
                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "22"))
                  (rule "applyEq" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
                  (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "49")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "22") (term "0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                  (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
                  (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "22"))
                  (rule "applyEqReverse" (formula "23") (term "1,0,0,1,0") (ifseqformula "22"))
                  (rule "hideAuxiliaryEq" (formula "22"))
                  (rule "nnf_imp2or" (formula "27") (term "0"))
                  (rule "nnf_imp2or" (formula "26") (term "0"))
                  (rule "nnf_imp2or" (formula "25") (term "0"))
                  (rule "nnf_imp2or" (formula "24") (term "0"))
                  (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "31") (ifseqformula "8"))
                  (rule "andLeft" (formula "31"))
                  (rule "notLeft" (formula "32"))
                  (rule "andLeft" (formula "31"))
                  (rule "notLeft" (formula "32"))
                  (rule "andLeft" (formula "31"))
                  (rule "notLeft" (formula "32"))
                  (rule "andLeft" (formula "31"))
                  (rule "notLeft" (formula "32"))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "notLeft" (formula "31"))
                  (rule "notLeft" (formula "31"))
                  (rule "nonNull" (formula "36") (inst "i=i"))
                  (rule "sub_literals" (formula "36") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "greater_literals" (formula "36") (term "0,1"))
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "andLeft" (formula "36"))
                  (rule "notLeft" (formula "36"))
                  (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "35") (inst "i=i"))
                  (rule "sub_literals" (formula "35") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "greater_literals" (formula "35") (term "0,1"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "andLeft" (formula "35"))
                  (rule "notLeft" (formula "35"))
                  (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "34") (inst "i=i"))
                  (rule "greater_literals" (formula "34") (term "0,1"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "sub_literals" (formula "34") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "andLeft" (formula "34"))
                  (rule "notLeft" (formula "34"))
                  (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "33") (inst "i=i"))
                  (rule "greater_literals" (formula "33") (term "0,1"))
                  (builtin "One Step Simplification" (formula "33"))
                  (rule "sub_literals" (formula "33") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "33"))
                  (rule "andLeft" (formula "33"))
                  (rule "notLeft" (formula "33"))
                  (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "32") (inst "i=i"))
                  (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "32"))
                  (rule "greater_literals" (formula "32") (term "0,1"))
                  (builtin "One Step Simplification" (formula "32"))
                  (rule "andLeft" (formula "32"))
                  (rule "notLeft" (formula "32"))
                  (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "31") (inst "i=i"))
                  (rule "greater_literals" (formula "31") (term "0,1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "sub_literals" (formula "31") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "notLeft" (formula "31"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                  (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_10"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                  (rule "replaceKnownSelect_taclet100100_6" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_8" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_10"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                  (rule "replaceKnownSelect_taclet100100_9" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_11" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_10"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                  (rule "replaceKnownSelect_taclet100100_12" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_14" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "45") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_10"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                  (rule "replaceKnownSelect_taclet100100_15" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_17" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_11"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                  (rule "replaceKnownSelect_taclet100100_21" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_22" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_10"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                  (rule "replaceKnownSelect_taclet100100_18" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_20" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "36") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_10"))
                  (rule "applyEq" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                  (rule "applyEq" (formula "43") (term "0") (ifseqformula "36"))
                  (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "59")))
                  (rule "replaceKnownSelect_taclet100100_23" (formula "36") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_25" (formula "36") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0,0") (ifseqformula "13"))
                  (rule "replace_known_left" (formula "36") (term "0,0,0,0,0") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "36"))
                  (rule "applyEqReverse" (formula "37") (term "1,0,0,1,0") (ifseqformula "36"))
                  (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
                  (rule "hideAuxiliaryEq" (formula "36"))
                  (rule "pullOutSelect" (formula "35") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_10"))
                  (rule "applyEq" (formula "42") (term "0") (ifseqformula "35"))
                  (rule "applyEq" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "35"))
                  (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "58")))
                  (rule "replaceKnownSelect_taclet100100_26" (formula "35") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_28" (formula "35") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0,0") (ifseqformula "13"))
                  (rule "replace_known_left" (formula "35") (term "0,0,0,0,0") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "35"))
                  (rule "applyEqReverse" (formula "36") (term "1,0,0,1,0") (ifseqformula "35"))
                  (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "35"))
                  (rule "hideAuxiliaryEq" (formula "35"))
                  (rule "pullOutSelect" (formula "34") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_10"))
                  (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                  (rule "applyEq" (formula "41") (term "0") (ifseqformula "34"))
                  (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "57")))
                  (rule "replaceKnownSelect_taclet100100_29" (formula "34") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_31" (formula "34") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0,0") (ifseqformula "13"))
                  (rule "replace_known_left" (formula "34") (term "0,0,0,0,0") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "35") (term "1,0,0,1,0") (ifseqformula "34"))
                  (rule "hideAuxiliaryEq" (formula "34"))
                  (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_10"))
                  (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                  (rule "applyEq" (formula "40") (term "0") (ifseqformula "33"))
                  (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "56")))
                  (rule "replaceKnownSelect_taclet100100_32" (formula "33") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_34" (formula "33") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,0") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,0,0") (ifseqformula "13"))
                  (rule "replace_known_left" (formula "33") (term "0,0,0,0,0") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "33"))
                  (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "33"))
                  (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
                  (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                  (rule "hideAuxiliaryEq" (formula "33"))
                  (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_10"))
                  (rule "applyEq" (formula "39") (term "0") (ifseqformula "32"))
                  (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                  (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "55")))
                  (rule "replaceKnownSelect_taclet100100_35" (formula "32") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_37" (formula "32") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0,0") (ifseqformula "13"))
                  (rule "replace_known_left" (formula "32") (term "0,0,0,0,0") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "32"))
                  (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                  (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
                  (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "32"))
                  (rule "hideAuxiliaryEq" (formula "32"))
                  (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_10"))
                  (rule "applyEq" (formula "38") (term "0") (ifseqformula "31"))
                  (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                  (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "54")))
                  (rule "replaceKnownSelect_taclet100100_38" (formula "31") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_40" (formula "31") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0,0") (ifseqformula "13"))
                  (rule "replace_known_left" (formula "31") (term "0,0,0,0,0") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                  (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
                  (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "31"))
                  (rule "hideAuxiliaryEq" (formula "31"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "11") (ifseqformula "8"))
                  (rule "andLeft" (formula "11"))
                  (rule "notLeft" (formula "12"))
                  (rule "andLeft" (formula "11"))
                  (rule "notLeft" (formula "12"))
                  (rule "andLeft" (formula "11"))
                  (rule "notLeft" (formula "12"))
                  (rule "andLeft" (formula "11"))
                  (rule "notLeft" (formula "12"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "notLeft" (formula "12"))
                  (rule "notLeft" (formula "11"))
                  (rule "nonNull" (formula "16") (inst "i=i"))
                  (rule "greater_literals" (formula "16") (term "0,1"))
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "47")))
                  (rule "sub_literals" (formula "16") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "47"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "15") (inst "i=i"))
                  (rule "greater_literals" (formula "15") (term "0,1"))
                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "46")))
                  (rule "sub_literals" (formula "15") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "46"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "14") (inst "i=i"))
                  (rule "greater_literals" (formula "14") (term "0,1"))
                  (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "45")))
                  (rule "sub_literals" (formula "14") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "45"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "13") (inst "i=i"))
                  (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "44")))
                  (rule "greater_literals" (formula "13") (term "0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "44"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "12") (inst "i=i"))
                  (rule "greater_literals" (formula "12") (term "0,1"))
                  (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "43")))
                  (rule "sub_literals" (formula "12") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "43"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "11") (inst "i=i"))
                  (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "42")))
                  (rule "greater_literals" (formula "11") (term "0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "42"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "5") (ifseqformula "8"))
                  (rule "replaceKnownSelect_taclet100100_7" (formula "5") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_8" (formula "5") (term "0,0,1"))
                  (rule "replaceKnownSelect_taclet100100_10" (formula "5") (term "0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_11" (formula "5") (term "0,0,1,0"))
                  (rule "replaceKnownSelect_taclet100100_13" (formula "5") (term "0,0,1,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_14" (formula "5") (term "0,0,1,0,0"))
                  (rule "replaceKnownSelect_taclet100100_16" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownSelect_taclet100100_24" (formula "5") (term "1,1,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_17" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_25" (formula "5") (term "1,1,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100100_27" (formula "5") (term "1,1,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100100_30" (formula "5") (term "1,1,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_28" (formula "5") (term "1,1,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100100_33" (formula "5") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_31" (formula "5") (term "1,1,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100100_36" (formula "5") (term "1,1,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_34" (formula "5") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100100_39" (formula "5") (term "1,1,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_37" (formula "5") (term "1,1,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_40" (formula "5") (term "1,1,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100100_1" (formula "5") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet100100_19" (formula "5") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_2" (formula "5") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100100_20" (formula "5") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "andLeft" (formula "5"))
                  (rule "notLeft" (formula "6"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "notLeft" (formula "7"))
                  (rule "notLeft" (formula "6"))
                  (rule "andLeft" (formula "5"))
                  (rule "notLeft" (formula "6"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "notLeft" (formula "6"))
                  (rule "notLeft" (formula "5"))
                  (rule "nonNull" (formula "10") (inst "i=i"))
                  (rule "greater_literals" (formula "10") (term "0,1"))
                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "52")))
                  (rule "sub_literals" (formula "10") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "9") (inst "i=i"))
                  (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "51")))
                  (rule "greater_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "8") (inst "i=i"))
                  (rule "greater_literals" (formula "8") (term "0,1"))
                  (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "50")))
                  (rule "sub_literals" (formula "8") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "7") (inst "i=i"))
                  (rule "greater_literals" (formula "7") (term "0,1"))
                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "49")))
                  (rule "sub_literals" (formula "7") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "6") (inst "i=i"))
                  (rule "greater_literals" (formula "6") (term "0,1"))
                  (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "48")))
                  (rule "sub_literals" (formula "6") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "5") (inst "i=i"))
                  (rule "greater_literals" (formula "5") (term "0,1"))
                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "47")))
                  (rule "sub_literals" (formula "5") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "32") (term "0"))
                  (rule "nnf_imp2or" (formula "31") (term "0"))
                  (rule "commute_or_2" (formula "4") (term "0"))
                  (rule "commute_or_2" (formula "40") (term "0"))
                  (rule "nnf_notAnd" (formula "36") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                  (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                  (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "35") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                  (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                  (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "34") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                  (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                  (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "33") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                  (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                  (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                  (rule "cut_direct" (formula "65") (term "0,0"))
                  (branch "CUT: o_7 = null TRUE"
                     (builtin "One Step Simplification" (formula "66"))
                     (rule "false_right" (formula "66"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "66") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "65")))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: o_7 = null FALSE"
                     (builtin "One Step Simplification" (formula "66"))
                     (rule "notRight" (formula "66"))
                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "66"))
                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "65"))
                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "66")))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
            (branch
               (builtin "One Step Simplification" (formula "31"))
               (builtin "One Step Simplification" (formula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "12"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "12"))
               (rule "andLeft" (formula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1,0") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,0") (ifseqformula "18"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,1,0") (ifseqformula "12"))
               (rule "andLeft" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "andLeft" (formula "28"))
               (rule "notLeft" (formula "26"))
               (rule "eqSymm" (formula "21"))
               (rule "eqSymm" (formula "16"))
               (rule "eqSymm" (formula "35") (term "0,1,0,0,0,1"))
               (rule "eqSymm" (formula "1"))
               (rule "eqSymm" (formula "9"))
               (rule "eqSymm" (formula "15"))
               (rule "eqSymm" (formula "35") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "27") (term "0,1"))
               (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "33"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "29"))
               (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "30"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "29"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "replace_known_right" (formula "27") (term "0,0") (ifseqformula "28"))
               (builtin "One Step Simplification" (formula "27"))
               (rule "andLeft" (formula "27"))
               (rule "applyEq" (formula "1") (term "1") (ifseqformula "16"))
               (rule "array2seqDef" (formula "22") (term "0,1") (inst "u=u"))
               (rule "eqSymm" (formula "22"))
               (rule "array2seqDef" (formula "21") (term "0,1") (inst "u=u"))
               (rule "eqSymm" (formula "21"))
               (rule "array2seqDef" (formula "16") (term "0,1") (inst "u=u"))
               (rule "eqSymm" (formula "16"))
               (rule "array2seqDef" (formula "35") (term "0,0,1,0,0,0,1") (inst "u=u"))
               (rule "array2seqDef" (formula "35") (term "1,0,1,0,0,0,1") (inst "u=u"))
               (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
               (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
               (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "4") (ifseqformula "34"))
               (rule "array2seqDef" (formula "9") (term "1,1,0") (inst "u=u"))
               (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "9"))
               (rule "array2seqDef" (formula "15") (term "0,0,0") (inst "u=u"))
               (rule "array2seqDef" (formula "15") (term "0,1") (inst "u=u"))
               (rule "array2seqDef" (formula "1") (term "0,1") (inst "u=u"))
               (rule "array2seqDef" (formula "22") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "22"))
               (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "21"))
               (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "16"))
               (rule "eqSeqDef" (formula "35") (term "0,1,0,0,0,1") (inst "iv=iv"))
               (rule "getOfSeqDef" (formula "35") (term "1,1,0,1,0,1,0,0,0,1"))
               (rule "castDel" (formula "35") (term "1,1,1,0,1,0,1,0,0,0,1"))
               (rule "castDel" (formula "35") (term "2,1,1,0,1,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "0,2,1,1,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "35") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "times_zero_2" (formula "35") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "lenOfSeqDef" (formula "35") (term "0,0,0,1,0,0,0,1"))
               (rule "eqSymm" (formula "35") (term "0,0,1,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1,0,0,0,1"))
               (rule "times_zero_2" (formula "35") (term "1,1,1,0,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,0,0,0,1"))
               (rule "getOfSeqDef" (formula "35") (term "0,1,0,1,0,1,0,0,0,1"))
               (rule "castDel" (formula "35") (term "1,0,1,0,1,0,1,0,0,0,1"))
               (rule "castDel" (formula "35") (term "2,0,1,0,1,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "0,2,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "times_zero_2" (formula "35") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "lenOfSeqDef" (formula "35") (term "1,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "35") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "times_zero_2" (formula "35") (term "1,1,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "lenOfSeqDef" (formula "35") (term "0,0,0,1,0,0,0,1"))
               (rule "eqSymm" (formula "35") (term "0,0,1,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1,0,0,0,1"))
               (rule "times_zero_2" (formula "35") (term "1,1,1,0,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "0,0,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,0,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "0,0,1,0,0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,1,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "35") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "mul_literals" (formula "35") (term "0,1,1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1,0,0,1,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1,0,0,1,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "0,0,1,0,0,1,0,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,0,0,1,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,0,0,1,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "0,0,0,0,0,1,0,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0,0,0,1"))
               (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "array2seqDef" (formula "9") (term "0,1,1") (inst "u=u"))
               (rule "eqSeqDef2" (formula "1") (inst "iv=iv") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "eqSeqDef2" (formula "21") (inst "iv=iv") (ifseqformula "21"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "eqSeqDef2" (formula "15") (inst "iv=iv") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "eqSeqDef2" (formula "8") (inst "iv=iv") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "nnf_imp2or" (formula "30") (term "0,1,0,1,0,0,0,1"))
               (rule "nnf_notAnd" (formula "30") (term "0,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,0,1,0,0,0,1"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,1,0,1,0,0,0,1"))
               (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,0,1,0,0,0,1"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1,0,1,0,0,0,1"))
               (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,1,0,1,0,0,0,1"))
               (rule "commute_or_2" (formula "21"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "5"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "19"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "20"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "20"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "20"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "18"))
               (rule "notLeft" (formula "18"))
               (rule "nonNull" (formula "23") (inst "i=i"))
               (rule "greater_literals" (formula "23") (term "0,1"))
               (builtin "One Step Simplification" (formula "23"))
               (rule "sub_literals" (formula "23") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "notLeft" (formula "23"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "22") (inst "i=i"))
               (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "greater_literals" (formula "22") (term "0,1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "andLeft" (formula "22"))
               (rule "notLeft" (formula "22"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "21") (inst "i=i"))
               (rule "greater_literals" (formula "21") (term "0,1"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "sub_literals" (formula "21") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "notLeft" (formula "21"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "20") (inst "i=i"))
               (rule "greater_literals" (formula "20") (term "0,1"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "sub_literals" (formula "20") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "notLeft" (formula "20"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "19") (inst "i=i"))
               (rule "sub_literals" (formula "19") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "greater_literals" (formula "19") (term "0,1"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "19"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "18") (inst "i=i"))
               (rule "greater_literals" (formula "18") (term "0,1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "sub_literals" (formula "18") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "18"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
               (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "11"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
               (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "11"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
               (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "11"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
               (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "11"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
               (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "11"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
               (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "11"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
               (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "23") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_7"))
               (rule "applyEq" (formula "35") (term "0") (ifseqformula "23"))
               (rule "applyEq" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
               (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "23") (term "0,0,0,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "23"))
               (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "45")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "23"))
               (rule "hideAuxiliaryEq" (formula "23"))
               (rule "pullOutSelect" (formula "22") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_7"))
               (rule "applyEq" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
               (rule "applyEq" (formula "34") (term "0") (ifseqformula "22"))
               (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "22") (term "0,0,0,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "45")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "23") (term "1,0,0,1,0") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
               (rule "hideAuxiliaryEq" (formula "22"))
               (rule "pullOutSelect" (formula "21") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_7"))
               (rule "applyEq" (formula "33") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
               (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "21") (term "0,0,0,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "45")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,0,0,1,0") (ifseqformula "21"))
               (rule "hideAuxiliaryEq" (formula "21"))
               (rule "pullOutSelect" (formula "20") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_7"))
               (rule "applyEq" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
               (rule "applyEq" (formula "32") (term "0") (ifseqformula "20"))
               (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "45")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0") (ifseqformula "20"))
               (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "20"))
               (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
               (rule "hideAuxiliaryEq" (formula "20"))
               (rule "pullOutSelect" (formula "19") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_7"))
               (rule "applyEq" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
               (rule "applyEq" (formula "31") (term "0") (ifseqformula "19"))
               (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,0,0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "45")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "20") (term "1,0,0,1,0") (ifseqformula "19"))
               (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "19"))
               (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
               (rule "hideAuxiliaryEq" (formula "19"))
               (rule "pullOutSelect" (formula "18") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_7"))
               (rule "applyEq" (formula "30") (term "0") (ifseqformula "18"))
               (rule "applyEq" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "18"))
               (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "45")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,0,0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "18") (term "0,0,0,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "45")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "19") (term "1,0,0,1,0") (ifseqformula "18"))
               (rule "applyEqReverse" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "18"))
               (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "18"))
               (rule "hideAuxiliaryEq" (formula "18"))
               (rule "nnf_imp2or" (formula "23") (term "0"))
               (rule "nnf_imp2or" (formula "22") (term "0"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_imp2or" (formula "20") (term "0"))
               (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "2") (term "0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "1") (ifseqformula "4"))
               (rule "replaceKnownSelect_taclet10100_1" (formula "1") (term "0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_2" (formula "1") (term "0,0,1"))
               (rule "replaceKnownSelect_taclet10100_4" (formula "1") (term "0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_5" (formula "1") (term "0,0,1,0"))
               (rule "replaceKnownSelect_taclet10100_7" (formula "1") (term "0,0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_8" (formula "1") (term "0,0,1,0,0"))
               (rule "replaceKnownSelect_taclet10100_19" (formula "1") (term "1,1,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10100_10" (formula "1") (term "0,0,1,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_20" (formula "1") (term "1,1,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_11" (formula "1") (term "0,0,1,0,0,0"))
               (rule "replaceKnownSelect_taclet10100_22" (formula "1") (term "1,1,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10100_25" (formula "1") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_23" (formula "1") (term "1,1,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10100_28" (formula "1") (term "1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_26" (formula "1") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10100_31" (formula "1") (term "1,1,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_29" (formula "1") (term "1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10100_34" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_32" (formula "1") (term "1,1,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_35" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10100_16" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10100_13" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_17" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_14" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "2"))
               (rule "notLeft" (formula "1"))
               (rule "nonNull" (formula "6") (inst "i=i"))
               (rule "greater_literals" (formula "6") (term "0,1"))
               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "38")))
               (rule "sub_literals" (formula "6") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "5") (inst "i=i"))
               (rule "greater_literals" (formula "5") (term "0,1"))
               (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "37")))
               (rule "sub_literals" (formula "5") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "4") (inst "i=i"))
               (rule "sub_literals" (formula "4") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "36")))
               (rule "greater_literals" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
               (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "3") (inst "i=i"))
               (rule "greater_literals" (formula "3") (term "0,1"))
               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "35")))
               (rule "sub_literals" (formula "3") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "2") (inst "i=i"))
               (rule "greater_literals" (formula "2") (term "0,1"))
               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "34")))
               (rule "sub_literals" (formula "2") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
               (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "1") (inst "i=i"))
               (rule "sub_literals" (formula "1") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
               (rule "greater_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "12") (ifseqformula "9"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "13"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "14"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "14"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "14"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "13"))
               (rule "notLeft" (formula "12"))
               (rule "nonNull" (formula "17") (inst "i=i"))
               (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "43")))
               (rule "greater_literals" (formula "17") (term "0"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "43"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "16") (inst "i=i"))
               (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "42")))
               (rule "greater_literals" (formula "16") (term "0"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "42"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "15") (inst "i=i"))
               (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "41")))
               (rule "greater_literals" (formula "15") (term "0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "41"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "14") (inst "i=i"))
               (rule "greater_literals" (formula "14") (term "0,1"))
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "40")))
               (rule "sub_literals" (formula "14") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "40"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "13") (inst "i=i"))
               (rule "greater_literals" (formula "13") (term "0,1"))
               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "39")))
               (rule "sub_literals" (formula "13") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "39"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "12") (inst "i=i"))
               (rule "greater_literals" (formula "12") (term "0,1"))
               (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "38")))
               (rule "sub_literals" (formula "12") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "38"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "36") (ifseqformula "9"))
               (rule "andLeft" (formula "36"))
               (rule "notLeft" (formula "37"))
               (rule "andLeft" (formula "36"))
               (rule "notLeft" (formula "37"))
               (rule "andLeft" (formula "36"))
               (rule "notLeft" (formula "37"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "notLeft" (formula "38"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "notLeft" (formula "36"))
               (rule "notLeft" (formula "36"))
               (rule "nonNull" (formula "41") (inst "i=i"))
               (rule "greater_literals" (formula "41") (term "0,1"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "sub_literals" (formula "41") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "andLeft" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "40") (inst "i=i"))
               (rule "sub_literals" (formula "40") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "40"))
               (rule "greater_literals" (formula "40") (term "0,1"))
               (builtin "One Step Simplification" (formula "40"))
               (rule "andLeft" (formula "40"))
               (rule "notLeft" (formula "40"))
               (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
               (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "39") (inst "i=i"))
               (rule "sub_literals" (formula "39") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "39"))
               (rule "greater_literals" (formula "39") (term "0,1"))
               (builtin "One Step Simplification" (formula "39"))
               (rule "andLeft" (formula "39"))
               (rule "notLeft" (formula "39"))
               (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
               (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "38") (inst "i=i"))
               (rule "greater_literals" (formula "38") (term "0,1"))
               (builtin "One Step Simplification" (formula "38"))
               (rule "sub_literals" (formula "38") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "38"))
               (rule "andLeft" (formula "38"))
               (rule "notLeft" (formula "38"))
               (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "37") (inst "i=i"))
               (rule "sub_literals" (formula "37") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "37"))
               (rule "greater_literals" (formula "37") (term "0,1"))
               (builtin "One Step Simplification" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "notLeft" (formula "37"))
               (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "36") (inst "i=i"))
               (rule "greater_literals" (formula "36") (term "0,1"))
               (builtin "One Step Simplification" (formula "36"))
               (rule "sub_literals" (formula "36") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "notLeft" (formula "36"))
               (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
               (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
               (rule "pullOutSelect" (formula "54") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_8"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "71")))
               (rule "replaceKnownSelect_taclet10100_0" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_2" (formula "1") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "53") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_8"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
               (rule "replaceKnownSelect_taclet10100_3" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_5" (formula "1") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "52") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_8"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")))
               (rule "replaceKnownSelect_taclet10100_6" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_8" (formula "1") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "51") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_8"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")))
               (rule "replaceKnownSelect_taclet10100_9" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_11" (formula "1") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_8"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
               (rule "replaceKnownSelect_taclet10100_12" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_14" (formula "1") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_8"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
               (rule "replaceKnownSelect_taclet10100_15" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_17" (formula "1") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_8"))
               (rule "applyEq" (formula "49") (term "0") (ifseqformula "41"))
               (rule "applyEq" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
               (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "65")))
               (rule "replaceKnownSelect_taclet10100_18" (formula "41") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_20" (formula "41") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0") (ifseqformula "24"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0,0") (ifseqformula "19"))
               (rule "replace_known_left" (formula "41") (term "0,0,0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0") (ifseqformula "41"))
               (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0") (ifseqformula "41"))
               (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "41"))
               (rule "hideAuxiliaryEq" (formula "41"))
               (rule "pullOutSelect" (formula "40") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_8"))
               (rule "applyEq" (formula "48") (term "0") (ifseqformula "40"))
               (rule "applyEq" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
               (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "64")))
               (rule "replaceKnownSelect_taclet10100_21" (formula "40") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_23" (formula "40") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "24"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "19"))
               (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "40"))
               (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0") (ifseqformula "40"))
               (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "40"))
               (rule "applyEqReverse" (formula "41") (term "1,0,0,1,0") (ifseqformula "40"))
               (rule "hideAuxiliaryEq" (formula "40"))
               (rule "pullOutSelect" (formula "39") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_8"))
               (rule "applyEq" (formula "47") (term "0") (ifseqformula "39"))
               (rule "applyEq" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
               (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "63")))
               (rule "replaceKnownSelect_taclet10100_24" (formula "39") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_26" (formula "39") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "24"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0,0") (ifseqformula "19"))
               (rule "replace_known_left" (formula "39") (term "0,0,0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "39"))
               (rule "applyEqReverse" (formula "40") (term "1,0,0,1,0") (ifseqformula "39"))
               (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "39"))
               (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "39"))
               (rule "hideAuxiliaryEq" (formula "39"))
               (rule "pullOutSelect" (formula "38") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_8"))
               (rule "applyEq" (formula "46") (term "0") (ifseqformula "38"))
               (rule "applyEq" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
               (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "62")))
               (rule "replaceKnownSelect_taclet10100_27" (formula "38") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_29" (formula "38") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "24"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0,0") (ifseqformula "19"))
               (rule "replace_known_left" (formula "38") (term "0,0,0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "38"))
               (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "38"))
               (rule "applyEqReverse" (formula "39") (term "1,0,0,1,0") (ifseqformula "38"))
               (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "38"))
               (rule "hideAuxiliaryEq" (formula "38"))
               (rule "pullOutSelect" (formula "37") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_8"))
               (rule "applyEq" (formula "45") (term "0") (ifseqformula "37"))
               (rule "applyEq" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
               (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "61")))
               (rule "replaceKnownSelect_taclet10100_30" (formula "37") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_32" (formula "37") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "24"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0") (ifseqformula "19"))
               (rule "replace_known_left" (formula "37") (term "0,0,0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "37"))
               (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0") (ifseqformula "37"))
               (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "37"))
               (rule "applyEqReverse" (formula "38") (term "1,0,0,1,0") (ifseqformula "37"))
               (rule "hideAuxiliaryEq" (formula "37"))
               (rule "pullOutSelect" (formula "36") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_8"))
               (rule "applyEq" (formula "44") (term "0") (ifseqformula "36"))
               (rule "applyEq" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
               (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "60")))
               (rule "replaceKnownSelect_taclet10100_33" (formula "36") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10100_35" (formula "36") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0") (ifseqformula "24"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0,0") (ifseqformula "19"))
               (rule "replace_known_left" (formula "36") (term "0,0,0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "36"))
               (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "36"))
               (rule "applyEqReverse" (formula "37") (term "1,0,0,1,0") (ifseqformula "36"))
               (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "36"))
               (rule "hideAuxiliaryEq" (formula "36"))
               (rule "nnf_imp2or" (formula "28") (term "0"))
               (rule "nnf_imp2or" (formula "27") (term "0"))
               (rule "commute_or_2" (formula "35") (term "0"))
               (rule "nnf_notAnd" (formula "32") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
               (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
               (rule "mul_literals" (formula "32") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "31") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
               (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "30") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
               (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
               (rule "nnf_imp2or" (formula "6") (term "0"))
               (rule "nnf_imp2or" (formula "5") (term "0"))
               (rule "nnf_imp2or" (formula "4") (term "0"))
               (rule "nnf_imp2or" (formula "3") (term "0"))
               (rule "nnf_imp2or" (formula "2") (term "0"))
               (rule "methodCallParamThrow" (formula "61") (term "1"))
               (rule "nnf_imp2or" (formula "1") (term "0"))
               (rule "nnf_imp2or" (formula "17") (term "0"))
               (rule "nnf_imp2or" (formula "16") (term "0"))
               (rule "nnf_imp2or" (formula "15") (term "0"))
               (rule "nnf_imp2or" (formula "14") (term "0"))
               (rule "arrayLengthNotNegative" (formula "22") (term "1,0,0,0"))
               (rule "arrayLengthIsAShort" (formula "23") (term "1,0,0,0"))
               (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "23") (inst "iv=iv"))
               (rule "andLeft" (formula "23"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
               (rule "apply_eq_monomials" (formula "24") (term "1,0,1,0,0") (ifseqformula "23"))
               (rule "polySimp_rightDist" (formula "24") (term "0,1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "24") (term "1,0,1,0,0"))
               (rule "add_literals" (formula "24") (term "1,1,1,0,1,0,0"))
               (rule "times_zero_1" (formula "24") (term "1,1,0,1,0,0"))
               (rule "add_zero_right" (formula "24") (term "1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0"))
               (rule "nnf_imp2or" (formula "13") (term "0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_imp2or" (formula "44") (term "0"))
               (rule "nnf_imp2or" (formula "43") (term "0"))
               (rule "nnf_imp2or" (formula "42") (term "0"))
               (rule "nnf_imp2or" (formula "41") (term "0"))
               (rule "nnf_imp2or" (formula "40") (term "0"))
               (rule "nnf_imp2or" (formula "39") (term "0"))
               (rule "nnf_notAnd" (formula "31") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
               (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "30") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
               (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "6") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
               (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
               (rule "mul_literals" (formula "6") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "5") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
               (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
               (rule "mul_literals" (formula "5") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "4") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
               (rule "mul_literals" (formula "4") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "3") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
               (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
               (rule "mul_literals" (formula "3") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "2") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "16") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "14") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "24") (term "0"))
               (rule "nnf_notAnd" (formula "13") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "44") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "44") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0"))
               (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "44") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
               (rule "mul_literals" (formula "44") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "43") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0"))
               (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "43") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
               (rule "mul_literals" (formula "43") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "43") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "42") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
               (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "42") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
               (rule "mul_literals" (formula "42") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "41") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
               (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "41") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
               (rule "mul_literals" (formula "41") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "40") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "40") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0"))
               (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "40") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
               (rule "mul_literals" (formula "40") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "39") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "39") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0"))
               (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "39") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
               (rule "mul_literals" (formula "39") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "35") (term "0"))
               (rule "commute_or_2" (formula "34") (term "0"))
               (rule "nnf_notAnd" (formula "24") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "33") (term "0"))
               (rule "commute_or_2" (formula "32") (term "0"))
               (rule "commute_or_2" (formula "31") (term "0"))
               (rule "commute_or_2" (formula "30") (term "0"))
               (rule "commute_or_2" (formula "6") (term "0"))
               (rule "commute_or_2" (formula "5") (term "0"))
               (rule "commute_or_2" (formula "4") (term "0"))
               (rule "commute_or_2" (formula "3") (term "0"))
               (rule "tryCatchThrow" (formula "64") (term "1"))
               (rule "commute_or_2" (formula "2") (term "0"))
               (rule "commute_or_2" (formula "1") (term "0"))
               (rule "commute_or_2" (formula "17") (term "0"))
               (rule "commute_or_2" (formula "16") (term "0"))
               (rule "commute_or_2" (formula "15") (term "0"))
               (rule "commute_or_2" (formula "14") (term "0"))
               (rule "commute_or_2" (formula "13") (term "0"))
               (rule "commute_or_2" (formula "12") (term "0"))
               (rule "commute_or_2" (formula "44") (term "0"))
               (rule "commute_or_2" (formula "43") (term "0"))
               (rule "commute_or_2" (formula "42") (term "0"))
               (rule "commute_or_2" (formula "41") (term "0"))
               (rule "commute_or_2" (formula "40") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "commute_or_2" (formula "40") (term "0"))
               (rule "lenNonNegative" (formula "24") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "lenNonNegative" (formula "25") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "25"))
               (rule "commute_or_2" (formula "27") (term "0"))
               (rule "commute_or" (formula "38") (term "0,0"))
               (rule "commute_or" (formula "37") (term "0,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "8"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "9"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "10"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "11"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "12"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "13"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "14"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "commute_or" (formula "43") (term "0,0"))
               (rule "commute_or" (formula "42") (term "0,0"))
               (rule "commute_or" (formula "41") (term "0,0"))
               (rule "commute_or" (formula "40") (term "0,0"))
               (rule "commute_or" (formula "14") (term "0,0"))
               (rule "commute_or" (formula "13") (term "0,0"))
               (rule "commute_or" (formula "12") (term "0,0"))
               (rule "commute_or" (formula "11") (term "0,0"))
               (rule "commute_or" (formula "10") (term "0,0"))
               (rule "commute_or" (formula "9") (term "0,0"))
               (rule "commute_or" (formula "25") (term "0,0"))
               (rule "commute_or" (formula "24") (term "0,0"))
               (rule "commute_or" (formula "23") (term "0,0"))
               (rule "commute_or" (formula "22") (term "0,0"))
               (rule "commute_or" (formula "21") (term "0,0"))
               (rule "commute_or" (formula "20") (term "0,0"))
               (rule "commute_or" (formula "54") (term "0,0"))
               (rule "commute_or" (formula "53") (term "0,0"))
               (rule "commute_or" (formula "52") (term "0,0"))
               (rule "commute_or" (formula "51") (term "0,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "15"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "16"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "commute_or" (formula "52") (term "0,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "17"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "0") (ifseqformula "18"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "commute_or" (formula "53") (term "0,0"))
               (rule "commute_or" (formula "38") (term "0,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "19"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "ifElseUnfold" (formula "79") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "79") (term "1") (newnames "x_3"))
               (rule "equality_comparison_simple" (formula "79") (term "1"))
               (builtin "One Step Simplification" (formula "79"))
               (rule "replace_known_right" (formula "79") (term "0,0,1,0") (ifseqformula "73"))
               (builtin "One Step Simplification" (formula "79"))
               (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "50"))
               (rule "true_left" (formula "50"))
               (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0"))
               (rule "arrayLengthIsAShort" (formula "49") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "49"))
               (rule "true_left" (formula "49"))
               (rule "arrayLengthNotNegative" (formula "49") (term "1,1,0"))
               (rule "arrayLengthNotNegative" (formula "48") (term "1,1,0"))
               (rule "arrayLengthIsAShort" (formula "49") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "49"))
               (rule "true_left" (formula "49"))
               (rule "arrayLengthIsAShort" (formula "47") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "47"))
               (rule "true_left" (formula "47"))
               (rule "arrayLengthNotNegative" (formula "47") (term "1,1,0"))
               (rule "arrayLengthNotNegative" (formula "46") (term "1,1,0"))
               (rule "arrayLengthIsAShort" (formula "47") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "47"))
               (rule "true_left" (formula "47"))
               (rule "arrayLengthNotNegative" (formula "45") (term "1,1,0"))
               (rule "arrayLengthIsAShort" (formula "46") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "46"))
               (rule "true_left" (formula "46"))
               (rule "ifElseSplit" (formula "85"))
               (branch "if x_3 true"
                  (builtin "One Step Simplification" (formula "86"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_3 false"
                  (builtin "One Step Simplification" (formula "86"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "ifElseSplit" (formula "85"))
                  (branch "if exc_3 instanceof java.lang.Throwable true"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                     (rule "true_left" (formula "1"))
                     (rule "variableDeclaration" (formula "85") (term "1") (newnames "e_3"))
                     (rule "reference_type_cast" (formula "85") (term "1"))
                     (branch "Normal Execution (exc_3 instanceof java.lang.Throwable)"
                        (builtin "One Step Simplification" (formula "86"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment" (formula "85") (term "1"))
                        (builtin "One Step Simplification" (formula "85"))
                        (rule "emptyModality" (formula "85") (term "1"))
                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "79")) (ifInst ""  (formula "79")) (ifInst ""  (formula "66")))
                        (rule "eqSymm" (formula "85") (term "1,0,0,1"))
                        (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "85") (term "0") (ifseqformula "22"))
                        (rule "replaceKnownSelect_taclet10100_36" (formula "85") (term "0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_37" (formula "85") (term "0,0,1,0"))
                        (rule "replaceKnownSelect_taclet10100_38" (formula "85") (term "0,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_39" (formula "85") (term "0,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet10100_40" (formula "85") (term "0,0,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_41" (formula "85") (term "0,0,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100_48" (formula "85") (term "1,1,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100_42" (formula "85") (term "0,0,1,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_49" (formula "85") (term "1,1,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_43" (formula "85") (term "0,0,1,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100_50" (formula "85") (term "1,1,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100_52" (formula "85") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_51" (formula "85") (term "1,1,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100_54" (formula "85") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_53" (formula "85") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100_56" (formula "85") (term "1,1,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_55" (formula "85") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100_58" (formula "85") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_57" (formula "85") (term "1,1,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_59" (formula "85") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100_46" (formula "85") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100_44" (formula "85") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_47" (formula "85") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100_45" (formula "85") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "replace_known_right" (formula "85") (term "0,1,0,0,0") (ifseqformula "76"))
                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "74")) (ifInst ""  (formula "73")) (ifInst ""  (formula "75")) (ifInst ""  (formula "77")) (ifInst ""  (formula "78")))
                        (rule "nonNull" (formula "85") (term "1,0") (inst "i=i"))
                        (rule "greater_literals" (formula "85") (term "0,1,1,0"))
                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "72")))
                        (rule "sub_literals" (formula "85") (term "2,1,0,1,0"))
                        (builtin "One Step Simplification" (formula "85"))
                        (rule "inEqSimp_ltToLeq" (formula "85") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "85") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,1,0,0,1,0"))
                        (rule "nonNull" (formula "85") (term "1,0,0") (inst "i=i"))
                        (rule "sub_literals" (formula "85") (term "2,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "71")))
                        (rule "greater_literals" (formula "85") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "85"))
                        (rule "inEqSimp_ltToLeq" (formula "85") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "85") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,1,0,0,1,0,0"))
                        (rule "nonNull" (formula "85") (term "1,0,0,0") (inst "i=i"))
                        (rule "sub_literals" (formula "85") (term "2,1,0,1,1,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "70")))
                        (rule "greater_literals" (formula "85") (term "0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "85"))
                        (rule "inEqSimp_ltToLeq" (formula "85") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,0,0,1,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "85") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,1,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,1,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,1,0,0,1,0,0,0"))
                        (rule "nonNull" (formula "85") (term "0,0,0,0,0,0") (inst "i=i"))
                        (rule "sub_literals" (formula "85") (term "2,1,0,1,1,0,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "67")))
                        (rule "greater_literals" (formula "85") (term "0,0,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "85"))
                        (rule "inEqSimp_ltToLeq" (formula "85") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "85") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,1,0,0,0,0,0,0,0,0"))
                        (rule "nonNull" (formula "85") (term "1,0,0,0,0") (inst "i=i"))
                        (rule "greater_literals" (formula "85") (term "0,1,1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "69")))
                        (rule "sub_literals" (formula "85") (term "2,1,0,1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "85"))
                        (rule "inEqSimp_ltToLeq" (formula "85") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,0,0,1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "85") (term "0,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,1,0,0,1,0,0,0,0"))
                        (rule "nonNull" (formula "85") (term "1,0,0,0,0,0") (inst "i=i"))
                        (rule "greater_literals" (formula "85") (term "0,1,1,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "68")))
                        (rule "sub_literals" (formula "85") (term "2,1,0,1,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "85"))
                        (rule "inEqSimp_ltToLeq" (formula "85") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,0,0,1,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "85") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "85") (term "1,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,1,0,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,1,0,0,1,0,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "85") (term "0,1,0"))
                        (rule "nnf_imp2or" (formula "85") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "85") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "85") (term "0,0,0,1,0"))
                        (rule "times_zero_1" (formula "85") (term "1,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "85") (term "0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "0,0,0,1,0"))
                        (rule "mul_literals" (formula "85") (term "1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "85") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "85") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "85") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "85") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "85") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "85") (term "0,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "85") (term "0,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "85") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "85") (term "0,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "85") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "85") (term "0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "85") (term "1,0,0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "85") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "85") (term "0,0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "85") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "85") (term "0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "85") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,0,0,1,0,0"))
                        (rule "nnf_imp2or" (formula "85") (term "0,0,0,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "85") (term "0,1,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "85") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "85") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,0,0,1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,0,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "85") (term "0,0,1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "85") (term "0,0,0,1,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "85") (term "0,0,1,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "85") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,0,0,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "85") (term "0,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "85") (term "1,0,0,0,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "85") (term "0,0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "1,0,0,0,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "85") (term "0,0,1,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "85") (term "0,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "85") (term "1,0,0,0,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "85") (term "0,0,0,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "0,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "1,0,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "85") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,0,0,1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,0,0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "85") (term "0,0,1,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "85") (term "0,0,0,1,0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "85") (term "0,0,1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "85") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "85") (term "0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "85") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "85") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "85") (term "0,0,0,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "1,0,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "85") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "85") (term "0,0,1,0,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "85") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "85") (term "0,0,1,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "85") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "85") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "85") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "1,0,0,0,0,0,1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "85") (term "0,0,0,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "85") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "1,0,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "85") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "85") (term "1,0,0,1,0,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "85") (term "0,1,0,0,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "85") (term "0,0,1,0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "85") (term "0,0,0,1,0,0,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "85") (term "0,0,1,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "85") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "85") (term "1,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "85") (term "1,1,0,0,1,0,0,0,0,0"))
                        (rule "andRight" (formula "85"))
                        (branch "Case 1"
                           (rule "andRight" (formula "85"))
                           (branch "Case 1"
                              (rule "andRight" (formula "85"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "85"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "85"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "85"))
                                       (branch "Case 1"
                                          (rule "allRight" (formula "85") (inst "sk=i_97"))
                                          (rule "orRight" (formula "85"))
                                          (rule "orRight" (formula "85"))
                                          (rule "notRight" (formula "87"))
                                          (rule "inEqSimp_geqRight" (formula "87"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "87"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_97"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "62"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "71")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "46"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "36"))
                                          (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "46"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "71")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "36"))
                                          (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "36"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "71")) (ifInst ""  (formula "5")))
                                          (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "70"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "cut_direct" (formula "69") (term "1,0"))
                                             (branch "CUT: java.lang.RuntimeException::instance(exc_3) = TRUE TRUE"
                                                (rule "instanceof_not_compatible_5" (formula "70") (term "1") (ifseqformula "69"))
                                                (rule "instanceof_not_compatible_5" (formula "70") (term "0,0") (ifseqformula "69"))
                                                (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "83")) (ifInst ""  (formula "83")))
                                                (rule "true_left" (formula "70"))
                                                (rule "cut_direct" (formula "37") (term "0"))
                                                (branch "CUT: result_0.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                )
                                                (branch "CUT: result_0.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: java.lang.RuntimeException::instance(exc_3) = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "69"))
                                                (rule "cut_direct" (formula "37") (term "0"))
                                                (branch "CUT: result_0.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "28"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0"))
                                                      (rule "add_literals" (formula "28") (term "0"))
                                                      (rule "leq_literals" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "28"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                                (branch "CUT: result_0.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "28"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "cut_direct" (formula "69") (term "1,0"))
                                             (branch "CUT: java.lang.RuntimeException::instance(exc_3) = TRUE TRUE"
                                                (rule "instanceof_not_compatible_5" (formula "70") (term "1") (ifseqformula "69"))
                                                (rule "instanceof_not_compatible_5" (formula "70") (term "0,0") (ifseqformula "69"))
                                                (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "84")) (ifInst ""  (formula "84")))
                                                (rule "true_left" (formula "70"))
                                                (rule "cut_direct" (formula "37") (term "0"))
                                                (branch "CUT: result_0.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "28"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0"))
                                                      (rule "add_zero_right" (formula "28") (term "0"))
                                                      (rule "leq_literals" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "28"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                                (branch "CUT: result_0.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "28"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0"))
                                                      (rule "add_literals" (formula "28") (term "0"))
                                                      (rule "leq_literals" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: java.lang.RuntimeException::instance(exc_3) = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "69"))
                                                (rule "cut_direct" (formula "37") (term "0"))
                                                (branch "CUT: result_0.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "28"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0"))
                                                      (rule "add_zero_right" (formula "28") (term "0"))
                                                      (rule "leq_literals" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                )
                                                (branch "CUT: result_0.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "28") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "28"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0"))
                                                      (rule "add_zero_right" (formula "28") (term "0"))
                                                      (rule "leq_literals" (formula "28"))
                                                      (rule "closeFalse" (formula "28"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "28") (inst "t=i_97"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "28") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "28") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "28"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "allRight" (formula "85") (inst "sk=i_96"))
                                          (rule "orRight" (formula "85"))
                                          (rule "orRight" (formula "85"))
                                          (rule "notRight" (formula "87"))
                                          (rule "inEqSimp_geqRight" (formula "87"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "87"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_96"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "62"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "72")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "46"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "36"))
                                          (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "46"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "72")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "36"))
                                          (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "36"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "72")) (ifInst ""  (formula "7")))
                                          (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "71"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "cut_direct" (formula "69") (term "1,0"))
                                             (branch "CUT: java.lang.RuntimeException::instance(exc_3) = TRUE TRUE"
                                                (rule "instanceof_not_compatible_5" (formula "70") (term "1") (ifseqformula "69"))
                                                (rule "instanceof_not_compatible_5" (formula "70") (term "0,0") (ifseqformula "69"))
                                                (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "83")) (ifInst ""  (formula "83")))
                                                (rule "true_left" (formula "70"))
                                                (rule "cut_direct" (formula "37") (term "0"))
                                                (branch "CUT: result_0.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_zero_right" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                )
                                                (branch "CUT: result_0.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: java.lang.RuntimeException::instance(exc_3) = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "69"))
                                                (rule "cut_direct" (formula "37") (term "0"))
                                                (branch "CUT: result_0.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "29"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0"))
                                                      (rule "add_literals" (formula "29") (term "0"))
                                                      (rule "leq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                )
                                                (branch "CUT: result_0.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "29"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "29"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0"))
                                                      (rule "add_zero_right" (formula "29") (term "0"))
                                                      (rule "leq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "cut_direct" (formula "69") (term "1,0"))
                                             (branch "CUT: java.lang.RuntimeException::instance(exc_3) = TRUE TRUE"
                                                (rule "instanceof_not_compatible_5" (formula "70") (term "1") (ifseqformula "69"))
                                                (rule "instanceof_not_compatible_5" (formula "70") (term "0,0") (ifseqformula "69"))
                                                (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "84")) (ifInst ""  (formula "84")))
                                                (rule "true_left" (formula "70"))
                                                (rule "cut_direct" (formula "37") (term "0"))
                                                (branch "CUT: result_0.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "29"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0"))
                                                      (rule "add_zero_right" (formula "29") (term "0"))
                                                      (rule "leq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "29"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                                (branch "CUT: result_0.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "29"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0"))
                                                      (rule "add_literals" (formula "29") (term "0"))
                                                      (rule "leq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: java.lang.RuntimeException::instance(exc_3) = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "69"))
                                                (rule "cut_direct" (formula "37") (term "0"))
                                                (branch "CUT: result_0.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "29"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0"))
                                                      (rule "add_zero_right" (formula "29") (term "0"))
                                                      (rule "leq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                )
                                                (branch "CUT: result_0.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cut_direct" (formula "47") (term "0,0"))
                                                   (branch "CUT: result_2.<created> = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "true_left" (formula "48"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "29") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "29"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0"))
                                                      (rule "add_zero_right" (formula "29") (term "0"))
                                                      (rule "leq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                   (branch "CUT: result_2.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allLeft" (formula "29") (inst "t=i_96"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "29"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "85") (inst "sk=i_95"))
                                       (rule "orRight" (formula "85"))
                                       (rule "orRight" (formula "85"))
                                       (rule "notRight" (formula "87"))
                                       (rule "inEqSimp_geqRight" (formula "87"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "87"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_95"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "62"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "73")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "46"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "36"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "8"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "73")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "36"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "8"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "73")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "72"))
                                       (rule "cut_direct" (formula "69") (term "0,0"))
                                       (branch "CUT: java.lang.Error::instance(exc_3) = TRUE TRUE"
                                          (rule "instanceof_not_compatible_5" (formula "70") (term "1") (ifseqformula "69"))
                                          (rule "instanceof_not_compatible_5" (formula "70") (term "1,0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "83")) (ifInst ""  (formula "83")))
                                          (rule "true_left" (formula "70"))
                                          (rule "cut_direct" (formula "37") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "cut_direct" (formula "62") (term "0,0,0"))
                                             (branch "CUT: exc_3.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "63"))
                                                (rule "true_left" (formula "63"))
                                                (rule "cut_direct" (formula "47") (term "0,0"))
                                                (branch "CUT: result_2.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "true_left" (formula "48"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "closeFalse" (formula "30"))
                                                )
                                                (branch "CUT: result_2.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "30"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                             (branch "CUT: exc_3.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "62"))
                                                (rule "cut_direct" (formula "47") (term "0,0"))
                                                (branch "CUT: result_2.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "true_left" (formula "48"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "30"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0"))
                                                   (rule "add_zero_right" (formula "30") (term "0"))
                                                   (rule "leq_literals" (formula "30"))
                                                   (rule "closeFalse" (formula "30"))
                                                )
                                                (branch "CUT: result_2.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "closeFalse" (formula "30"))
                                                )
                                             )
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "cut_direct" (formula "62") (term "0,0,0"))
                                             (branch "CUT: exc_3.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "63"))
                                                (rule "true_left" (formula "63"))
                                                (rule "cut_direct" (formula "47") (term "0,0"))
                                                (branch "CUT: result_2.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "true_left" (formula "48"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "closeFalse" (formula "30"))
                                                )
                                                (branch "CUT: result_2.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "30"))
                                                   (rule "qeq_literals" (formula "1") (term "0"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch "CUT: exc_3.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "62"))
                                                (rule "cut_direct" (formula "47") (term "0,0"))
                                                (branch "CUT: result_2.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "true_left" (formula "48"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "30"))
                                                   (rule "qeq_literals" (formula "1") (term "0"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "CUT: result_2.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "30"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0"))
                                                   (rule "add_literals" (formula "30") (term "0"))
                                                   (rule "leq_literals" (formula "30"))
                                                   (rule "closeFalse" (formula "30"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: java.lang.Error::instance(exc_3) = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "69"))
                                          (rule "cut_direct" (formula "37") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "cut_direct" (formula "62") (term "0,0,0"))
                                             (branch "CUT: exc_3.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "63"))
                                                (rule "true_left" (formula "63"))
                                                (rule "cut_direct" (formula "47") (term "0,0"))
                                                (branch "CUT: result_2.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "true_left" (formula "48"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "30"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0"))
                                                   (rule "add_literals" (formula "30") (term "0"))
                                                   (rule "leq_literals" (formula "30"))
                                                   (rule "closeFalse" (formula "30"))
                                                )
                                                (branch "CUT: result_2.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "closeFalse" (formula "30"))
                                                )
                                             )
                                             (branch "CUT: exc_3.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "62"))
                                                (rule "cut_direct" (formula "47") (term "0,0"))
                                                (branch "CUT: result_2.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "true_left" (formula "48"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "30") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "30"))
                                                   (rule "qeq_literals" (formula "1") (term "0"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "CUT: result_2.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "30"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "cut_direct" (formula "62") (term "0,0,0"))
                                             (branch "CUT: exc_3.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "63"))
                                                (rule "true_left" (formula "63"))
                                                (rule "cut_direct" (formula "47") (term "0,0"))
                                                (branch "CUT: result_2.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "true_left" (formula "48"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "30"))
                                                   (rule "qeq_literals" (formula "1") (term "0"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "CUT: result_2.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "30"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0"))
                                                   (rule "add_zero_right" (formula "30") (term "0"))
                                                   (rule "leq_literals" (formula "30"))
                                                   (rule "closeFalse" (formula "30"))
                                                )
                                             )
                                             (branch "CUT: exc_3.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "62"))
                                                (rule "cut_direct" (formula "47") (term "0,0"))
                                                (branch "CUT: result_2.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "true_left" (formula "48"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "30"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "CUT: result_2.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "allLeft" (formula "30") (inst "t=i_95"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "30") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "30") (term "0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "closeFalse" (formula "30"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "85") (inst "sk=i_94"))
                                    (rule "orRight" (formula "85"))
                                    (rule "orRight" (formula "85"))
                                    (rule "notRight" (formula "87"))
                                    (rule "inEqSimp_geqRight" (formula "87"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "87"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_94"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "62"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "74")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "46"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "36"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "46"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "74")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "36"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "74")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "73"))
                                    (rule "cut_direct" (formula "69") (term "0,0"))
                                    (branch "CUT: java.lang.Error::instance(exc_3) = TRUE TRUE"
                                       (rule "instanceof_not_compatible_5" (formula "70") (term "1") (ifseqformula "69"))
                                       (rule "instanceof_not_compatible_5" (formula "70") (term "1,0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "83")) (ifInst ""  (formula "83")))
                                       (rule "true_left" (formula "70"))
                                       (rule "cut_direct" (formula "62") (term "0,0,0"))
                                       (branch "CUT: exc_3.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "63"))
                                          (rule "true_left" (formula "63"))
                                          (rule "cut_direct" (formula "37") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "cut_direct" (formula "47") (term "0,0"))
                                             (branch "CUT: result_2.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "true_left" (formula "48"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                             (branch "CUT: result_2.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "cut_direct" (formula "47") (term "0,0"))
                                             (branch "CUT: result_2.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "true_left" (formula "48"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                             (branch "CUT: result_2.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                       )
                                       (branch "CUT: exc_3.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "62"))
                                          (rule "cut_direct" (formula "37") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "cut_direct" (formula "47") (term "0,0"))
                                             (branch "CUT: result_2.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "true_left" (formula "48"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "inEqSimp_homoInEq1" (formula "31"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                                                (rule "add_literals" (formula "31") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "31") (term "1,0"))
                                                (rule "add_zero_right" (formula "31") (term "0"))
                                                (rule "leq_literals" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                             (branch "CUT: result_2.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "cut_direct" (formula "47") (term "0,0"))
                                             (branch "CUT: result_2.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "true_left" (formula "48"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "CUT: result_2.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "inEqSimp_homoInEq1" (formula "31"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                                                (rule "add_literals" (formula "31") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "31") (term "1,0"))
                                                (rule "add_literals" (formula "31") (term "0"))
                                                (rule "leq_literals" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: java.lang.Error::instance(exc_3) = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "69"))
                                       (rule "cut_direct" (formula "62") (term "0,0,0"))
                                       (branch "CUT: exc_3.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "63"))
                                          (rule "true_left" (formula "63"))
                                          (rule "cut_direct" (formula "37") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "cut_direct" (formula "47") (term "0,0"))
                                             (branch "CUT: result_2.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "true_left" (formula "48"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "inEqSimp_homoInEq1" (formula "31"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                                                (rule "add_literals" (formula "31") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "31") (term "1,0"))
                                                (rule "add_literals" (formula "31") (term "0"))
                                                (rule "leq_literals" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                             (branch "CUT: result_2.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "cut_direct" (formula "47") (term "0,0"))
                                             (branch "CUT: result_2.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "true_left" (formula "48"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "CUT: result_2.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "inEqSimp_homoInEq1" (formula "31"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                                                (rule "add_literals" (formula "31") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "31") (term "1,0"))
                                                (rule "add_zero_right" (formula "31") (term "0"))
                                                (rule "leq_literals" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                          )
                                       )
                                       (branch "CUT: exc_3.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "62"))
                                          (rule "cut_direct" (formula "37") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "cut_direct" (formula "47") (term "0,0"))
                                             (branch "CUT: result_2.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "true_left" (formula "48"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                             (branch "CUT: result_2.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "inEqSimp_homoInEq1" (formula "31"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                                                (rule "add_literals" (formula "31") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "31") (term "1,0"))
                                                (rule "add_zero_right" (formula "31") (term "0"))
                                                (rule "leq_literals" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "cut_direct" (formula "47") (term "0,0"))
                                             (branch "CUT: result_2.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "true_left" (formula "48"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "inEqSimp_homoInEq1" (formula "31"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                                                (rule "add_literals" (formula "31") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "31") (term "1,0"))
                                                (rule "add_zero_right" (formula "31") (term "0"))
                                                (rule "leq_literals" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                             (branch "CUT: result_2.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allLeft" (formula "31") (inst "t=i_94"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "85") (inst "sk=i_93"))
                                 (rule "orRight" (formula "85"))
                                 (rule "orRight" (formula "85"))
                                 (rule "notRight" (formula "87"))
                                 (rule "inEqSimp_geqRight" (formula "87"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "87"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_93"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "62"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "46"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "36"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "46"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "36"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "36"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")) (ifInst ""  (formula "9")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "74"))
                                 (rule "cut_direct" (formula "37") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "true_left" (formula "38"))
                                    (rule "cut_direct" (formula "69") (term "1"))
                                    (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_3) = TRUE TRUE"
                                       (rule "instanceof_not_compatible_5" (formula "70") (term "0,0") (ifseqformula "69"))
                                       (rule "instanceof_not_compatible_5" (formula "70") (term "1,0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "83")) (ifInst ""  (formula "83")))
                                       (rule "true_left" (formula "70"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "0,0,1"))
                                             (rule "leq_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "closeFalse" (formula "32"))
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
                                             (rule "andLeft" (formula "32"))
                                             (rule "inEqSimp_homoInEq1" (formula "32"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                                             (rule "add_literals" (formula "32") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0"))
                                             (rule "add_zero_right" (formula "32") (term "0"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "closeFalse" (formula "32"))
                                          )
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "32"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "0,0,1"))
                                             (rule "leq_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_3) = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "69"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "32") (term "0,0,1"))
                                             (rule "leq_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
                                             (rule "andLeft" (formula "32"))
                                             (rule "inEqSimp_homoInEq1" (formula "32"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                                             (rule "add_literals" (formula "32") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0"))
                                             (rule "add_zero_right" (formula "32") (term "0"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "closeFalse" (formula "32"))
                                          )
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "0,0,1"))
                                             (rule "leq_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "closeFalse" (formula "32"))
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "32"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "cut_direct" (formula "69") (term "1"))
                                    (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_3) = TRUE TRUE"
                                       (rule "instanceof_not_compatible_5" (formula "70") (term "1,0") (ifseqformula "69"))
                                       (rule "instanceof_not_compatible_5" (formula "70") (term "0,0") (ifseqformula "69"))
                                       (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "84")) (ifInst ""  (formula "84")))
                                       (rule "true_left" (formula "70"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "0,0,1"))
                                             (rule "leq_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "closeFalse" (formula "32"))
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "0,0,1"))
                                             (rule "leq_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "closeFalse" (formula "32"))
                                          )
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "0,0,1"))
                                             (rule "leq_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "32"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0"))
                                             (rule "add_literals" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                       )
                                    )
                                    (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_3) = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "69"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "0,0,1"))
                                             (rule "leq_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "closeFalse" (formula "32"))
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
                                             (rule "andLeft" (formula "32"))
                                             (rule "inEqSimp_homoInEq1" (formula "32"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                                             (rule "add_literals" (formula "32") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0"))
                                             (rule "add_zero_right" (formula "32") (term "0"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "closeFalse" (formula "32"))
                                          )
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "cut_direct" (formula "62") (term "0,0,0"))
                                          (branch "CUT: exc_3.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "63"))
                                             (rule "true_left" (formula "63"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "32") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "32"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "CUT: exc_3.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "62"))
                                             (rule "allLeft" (formula "32") (inst "t=i_93"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "0,0,1"))
                                             (rule "leq_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "85") (inst "sk=i_92"))
                              (rule "orRight" (formula "85"))
                              (rule "orRight" (formula "85"))
                              (rule "notRight" (formula "87"))
                              (rule "inEqSimp_geqRight" (formula "87"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "87"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_92"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "62"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "46"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "36"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "46"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "36"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")) (ifInst ""  (formula "10")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "75"))
                              (rule "cut_direct" (formula "69") (term "0,0"))
                              (branch "CUT: java.lang.Error::instance(exc_3) = TRUE TRUE"
                                 (rule "instanceof_not_compatible_5" (formula "70") (term "1") (ifseqformula "69"))
                                 (rule "instanceof_not_compatible_5" (formula "70") (term "1,0") (ifseqformula "69"))
                                 (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "83")) (ifInst ""  (formula "83")))
                                 (rule "true_left" (formula "70"))
                                 (rule "cut_direct" (formula "37") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "true_left" (formula "38"))
                                    (rule "cut_direct" (formula "62") (term "0,0,0"))
                                    (branch "CUT: exc_3.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "63"))
                                       (rule "true_left" (formula "63"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "33") (term "0,0,1"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "33") (term "0,0,1"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                    )
                                    (branch "CUT: exc_3.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "62"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "33"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                          (rule "add_literals" (formula "33") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0"))
                                          (rule "add_zero_right" (formula "33") (term "0"))
                                          (rule "leq_literals" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "33") (term "0,0,1"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "cut_direct" (formula "62") (term "0,0,0"))
                                    (branch "CUT: exc_3.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "63"))
                                       (rule "true_left" (formula "63"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "33") (term "0,0,1"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "33"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "33") (term "0,0,1"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                    )
                                    (branch "CUT: exc_3.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "62"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "33"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "33"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                          (rule "add_literals" (formula "33") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0"))
                                          (rule "add_literals" (formula "33") (term "0"))
                                          (rule "leq_literals" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: java.lang.Error::instance(exc_3) = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "69"))
                                 (rule "cut_direct" (formula "62") (term "0,0,0"))
                                 (branch "CUT: exc_3.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "63"))
                                    (rule "true_left" (formula "63"))
                                    (rule "cut_direct" (formula "37") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "true_left" (formula "38"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "33"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                          (rule "add_literals" (formula "33") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0"))
                                          (rule "add_literals" (formula "33") (term "0"))
                                          (rule "leq_literals" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "33") (term "0,0,1"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "33"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "33") (term "0,0,1"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "33"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "33"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                          (rule "add_literals" (formula "33") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0"))
                                          (rule "add_zero_right" (formula "33") (term "0"))
                                          (rule "leq_literals" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                    )
                                 )
                                 (branch "CUT: exc_3.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "62"))
                                    (rule "cut_direct" (formula "37") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "true_left" (formula "38"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "33"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "33"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "allLeft" (formula "33") (inst "t=i_92"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "33") (term "0,0,1"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "33") (term "0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "85") (inst "sk=f_6"))
                           (rule "allRight" (formula "85") (inst "sk=o_6"))
                           (rule "orRight" (formula "85"))
                           (rule "pullOutSelect" (formula "86") (term "0") (inst "selectSK=f_6_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "59"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "43"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "33"))
                           (rule "eqSymm" (formula "87"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_6_1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "34"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_6_2"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "88")))
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "cut_direct" (formula "68") (term "0,0"))
                           (branch "CUT: java.lang.Error::instance(exc_3) = TRUE TRUE"
                              (rule "instanceof_not_compatible_5" (formula "69") (term "1") (ifseqformula "68"))
                              (rule "instanceof_not_compatible_5" (formula "69") (term "1,0") (ifseqformula "68"))
                              (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "82")))
                              (rule "true_left" (formula "69"))
                              (rule "cut_direct" (formula "61") (term "0,0,0"))
                              (branch "CUT: exc_3.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "62"))
                                 (rule "true_left" (formula "62"))
                                 (rule "cut_direct" (formula "36") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "cut_direct" (formula "46") (term "0,0"))
                                    (branch "CUT: result_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "69"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")) (ifInst ""  (formula "69")))
                                          (rule "replace_known_right" (formula "89") (term "0,1") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "70")))
                                          (rule "closeTrue" (formula "89"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "69"))
                                             (rule "orRight" (formula "69"))
                                             (rule "applyEqReverse" (formula "92") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "91"))
                                             (rule "replace_known_right" (formula "90") (term "0,0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "68")))
                                             (rule "closeTrue" (formula "90"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "89") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")) (ifInst ""  (formula "69")))
                                          (rule "replace_known_right" (formula "90") (term "0,1") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "68")))
                                          (rule "closeTrue" (formula "90"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "69"))
                                             (rule "orRight" (formula "69"))
                                             (rule "applyEqReverse" (formula "93") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "92"))
                                             (rule "replace_known_right" (formula "91") (term "0,0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "68")))
                                             (rule "closeTrue" (formula "91"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "90") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "cut_direct" (formula "46") (term "0,0"))
                                    (branch "CUT: result_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")) (ifInst ""  (formula "70")))
                                          (rule "replace_known_right" (formula "90") (term "0,1") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "68")))
                                          (rule "closeTrue" (formula "90"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "applyEqReverse" (formula "93") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "92"))
                                             (rule "replace_known_right" (formula "91") (term "0,1") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "70")))
                                             (rule "closeTrue" (formula "91"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "90") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")) (ifInst ""  (formula "70")))
                                          (rule "replace_known_right" (formula "91") (term "0,1") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "68")))
                                          (rule "closeTrue" (formula "91"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "69"))
                                             (rule "orRight" (formula "69"))
                                             (rule "applyEqReverse" (formula "94") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "93"))
                                             (rule "replace_known_right" (formula "92") (term "0,0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "68")))
                                             (rule "closeTrue" (formula "92"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "91") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: exc_3.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "61"))
                                 (rule "cut_direct" (formula "36") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "cut_direct" (formula "46") (term "0,0"))
                                    (branch "CUT: result_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")) (ifInst ""  (formula "70")))
                                          (rule "replace_known_right" (formula "90") (term "0,0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "69")))
                                          (rule "closeTrue" (formula "90"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "applyEqReverse" (formula "93") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "92"))
                                             (rule "replace_known_right" (formula "91") (term "0,1") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "70")))
                                             (rule "closeTrue" (formula "91"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "90") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")) (ifInst ""  (formula "70")))
                                          (rule "replace_known_right" (formula "91") (term "0,1") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "68")))
                                          (rule "closeTrue" (formula "91"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "69"))
                                             (rule "orRight" (formula "69"))
                                             (rule "applyEqReverse" (formula "94") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "93"))
                                             (rule "replace_known_right" (formula "92") (term "0,1") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "67")))
                                             (rule "closeTrue" (formula "92"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "91") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "cut_direct" (formula "46") (term "0,0"))
                                    (branch "CUT: result_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "69"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")) (ifInst ""  (formula "68")))
                                          (rule "replace_known_right" (formula "91") (term "0,0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "68")))
                                          (rule "closeTrue" (formula "91"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "applyEqReverse" (formula "94") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "93"))
                                             (rule "replace_known_right" (formula "92") (term "0,1") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "70")))
                                             (rule "closeTrue" (formula "92"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "91") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "69"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")) (ifInst ""  (formula "68")))
                                          (rule "replace_known_right" (formula "92") (term "0,0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "68")))
                                          (rule "closeTrue" (formula "92"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "69"))
                                             (rule "orRight" (formula "69"))
                                             (rule "applyEqReverse" (formula "95") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "94"))
                                             (rule "replace_known_right" (formula "93") (term "0,0") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "68")))
                                             (rule "closeTrue" (formula "93"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "92") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: java.lang.Error::instance(exc_3) = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "68"))
                              (rule "cut_direct" (formula "61") (term "0,0,0"))
                              (branch "CUT: exc_3.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "62"))
                                 (rule "true_left" (formula "62"))
                                 (rule "cut_direct" (formula "36") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "cut_direct" (formula "46") (term "0,0"))
                                    (branch "CUT: result_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")) (ifInst ""  (formula "70")))
                                          (rule "replace_known_right" (formula "90") (term "0,1") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "68")))
                                          (rule "closeTrue" (formula "90"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "applyEqReverse" (formula "93") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "92"))
                                             (rule "replace_known_right" (formula "91") (term "0,1") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "70")))
                                             (rule "closeTrue" (formula "91"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "90") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")) (ifInst ""  (formula "70")))
                                          (rule "replace_known_right" (formula "91") (term "0,1") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "68")))
                                          (rule "closeTrue" (formula "91"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "applyEqReverse" (formula "94") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "93"))
                                             (rule "replace_known_right" (formula "92") (term "0,0") (ifseqformula "70"))
                                             (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "67")))
                                             (rule "closeTrue" (formula "92"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "91") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "cut_direct" (formula "46") (term "0,0"))
                                    (branch "CUT: result_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")) (ifInst ""  (formula "69")))
                                          (rule "replace_known_right" (formula "91") (term "0,0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "69")))
                                          (rule "closeTrue" (formula "91"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "69"))
                                             (rule "orRight" (formula "69"))
                                             (rule "applyEqReverse" (formula "94") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "93"))
                                             (rule "replace_known_right" (formula "92") (term "0,1") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "67")))
                                             (rule "closeTrue" (formula "92"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "91") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "69"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")) (ifInst ""  (formula "68")))
                                          (rule "replace_known_right" (formula "92") (term "0,1") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "70")))
                                          (rule "closeTrue" (formula "92"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "69"))
                                             (rule "orRight" (formula "69"))
                                             (rule "applyEqReverse" (formula "95") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "94"))
                                             (rule "replace_known_right" (formula "93") (term "0,1") (ifseqformula "68"))
                                             (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "67")))
                                             (rule "closeTrue" (formula "93"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "92") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: exc_3.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "61"))
                                 (rule "cut_direct" (formula "36") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "cut_direct" (formula "46") (term "0,0"))
                                    (branch "CUT: result_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "70"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")) (ifInst ""  (formula "69")))
                                          (rule "replace_known_right" (formula "91") (term "0,0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "69")))
                                          (rule "closeTrue" (formula "91"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "applyEqReverse" (formula "94") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "93"))
                                             (rule "replace_known_right" (formula "92") (term "0,0") (ifseqformula "70"))
                                             (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "67")))
                                             (rule "closeTrue" (formula "92"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "91") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "69"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")) (ifInst ""  (formula "69")))
                                          (rule "replace_known_right" (formula "92") (term "0,1") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "70")))
                                          (rule "closeTrue" (formula "92"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "applyEqReverse" (formula "95") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "94"))
                                             (rule "replace_known_right" (formula "93") (term "0,1") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "70")))
                                             (rule "closeTrue" (formula "93"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "92") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "cut_direct" (formula "46") (term "0,0"))
                                    (branch "CUT: result_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")) (ifInst ""  (formula "70")))
                                          (rule "replace_known_right" (formula "92") (term "0,1") (ifseqformula "69"))
                                          (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "68")))
                                          (rule "closeTrue" (formula "92"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "applyEqReverse" (formula "95") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "94"))
                                             (rule "replace_known_right" (formula "93") (term "0,1") (ifseqformula "67"))
                                             (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "70")))
                                             (rule "closeTrue" (formula "93"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "92") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "70"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")) (ifInst ""  (formula "70")))
                                          (rule "replace_known_right" (formula "93") (term "0,0") (ifseqformula "68"))
                                          (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "69")))
                                          (rule "closeTrue" (formula "93"))
                                       )
                                       (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "applyEqReverse" (formula "96") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "95"))
                                             (rule "replace_known_right" (formula "94") (term "0,0") (ifseqformula "70"))
                                             (builtin "One Step Simplification" (formula "94") (ifInst ""  (formula "67")))
                                             (rule "closeTrue" (formula "94"))
                                          )
                                          (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE ∨ o_6.<created>@anon_heap_checkAndRemoveTag_0«anonHeapFunction» = TRUE) FALSE"
                                             (rule "close" (formula "93") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "ClassCastException (!(exc_3 instanceof java.lang.Throwable))"
                        (builtin "One Step Simplification" (formula "85"))
                        (rule "closeTrue" (formula "85"))
                     )
                  )
                  (branch "if exc_3 instanceof java.lang.Throwable false"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Pre (checkAndRemoveElectionId)"
               (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "12"))
               (rule "wellFormedAnonEQ" (formula "29") (term "0") (ifseqformula "18"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1") (ifseqformula "18"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "12"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1") (ifseqformula "12"))
               (rule "wellFormedAnonEQ" (formula "29") (term "0,0") (ifseqformula "12"))
               (rule "eqSymm" (formula "16"))
               (rule "eqSymm" (formula "1"))
               (rule "eqSymm" (formula "9"))
               (rule "eqSymm" (formula "15"))
               (rule "eqSymm" (formula "21"))
               (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "27"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "replace_known_left" (formula "29") (term "1,0") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "4")) (ifInst ""  (formula "11")))
               (rule "orRight" (formula "29"))
               (rule "orRight" (formula "29"))
               (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "24"))
               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "29")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")))
               (rule "closeFalse" (formula "20"))
            )
         )
         (branch "Exceptional Post (checkAndRemoveTag)"
            (builtin "One Step Simplification" (formula "19"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "12"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "19"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "19"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,0") (ifseqformula "12"))
            (rule "notLeft" (formula "17"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "19"))
            (rule "notLeft" (formula "19"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "16"))
            (rule "eqSymm" (formula "15"))
            (rule "eqSymm" (formula "9"))
            (rule "eqSymm" (formula "27") (term "0,1,0,0,0,1"))
            (rule "eqSymm" (formula "27") (term "1,0,0,1,0,1"))
            (rule "eqSymm" (formula "20") (term "0,1"))
            (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "21"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "16"))
            (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
            (rule "array2seqDef" (formula "16") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "16"))
            (rule "array2seqDef" (formula "15") (term "0,0,0") (inst "u=u"))
            (rule "array2seqDef" (formula "15") (term "0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "9") (term "1,1,0") (inst "u=u"))
            (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
            (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "4") (ifseqformula "26"))
            (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "9"))
            (rule "array2seqDef" (formula "27") (term "1,0,1,0,0,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "27") (term "0,1,0,0,0,1"))
            (rule "array2seqDef" (formula "1") (term "0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "16"))
            (rule "array2seqDef" (formula "9") (term "0,1,1") (inst "u=u"))
            (rule "array2seqDef" (formula "27") (term "1,0,1,0,0,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "27") (term "0,1,0,0,0,1"))
            (rule "eqSeqDef2" (formula "1") (inst "iv=iv") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "eqSeqDef" (formula "26") (term "0,1,0,0,0,1") (inst "iv=iv"))
            (rule "lenOfSeqDef" (formula "26") (term "1,1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "26") (term "1,1,1,1,0,0,1,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "26") (term "1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "26") (term "1,1,0,1,0,1,0,0,0,1"))
            (rule "castDel" (formula "26") (term "1,1,1,0,1,0,1,0,0,0,1"))
            (rule "castDel" (formula "26") (term "2,1,1,0,1,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "0,2,1,1,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "26") (term "0,1,0,1,0,1,0,0,0,1"))
            (rule "castDel" (formula "26") (term "1,0,1,0,1,0,1,0,0,0,1"))
            (rule "castDel" (formula "26") (term "2,0,1,0,1,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "26") (term "0,0,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "26") (term "1,0,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "26") (term "1,1,0,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "1,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "0,0,1,1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,0,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "26") (term "0,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
            (rule "eqSeqDef2" (formula "8") (inst "iv=iv") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "nnf_imp2or" (formula "24") (term "0,1,0,1,0,0,0,1"))
            (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0,1,0,0,0,1"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
            (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,1,0,0,0,1"))
            (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,1,0,0,0,1"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "8") (ifseqformula "5"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "9"))
            (rule "notLeft" (formula "8"))
            (rule "nonNull" (formula "13") (inst "i=i"))
            (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "greater_literals" (formula "13") (term "0,1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "notLeft" (formula "13"))
            (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "24"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "12") (inst "i=i"))
            (rule "greater_literals" (formula "12") (term "0,1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "sub_literals" (formula "12") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "notLeft" (formula "12"))
            (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "24"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "11") (inst "i=i"))
            (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "greater_literals" (formula "11") (term "0,1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "11"))
            (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "24"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "10") (inst "i=i"))
            (rule "greater_literals" (formula "10") (term "0,1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "sub_literals" (formula "10") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "10"))
            (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "24"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "9") (inst "i=i"))
            (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "greater_literals" (formula "9") (term "0,1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "notLeft" (formula "9"))
            (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "24"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "8") (inst "i=i"))
            (rule "greater_literals" (formula "8") (term "0,1"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "sub_literals" (formula "8") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "8"))
            (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "24"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "13") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_imp2or" (formula "10") (term "0"))
            (rule "nnf_imp2or" (formula "9") (term "0"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
            (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "2") (term "0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "1") (ifseqformula "4"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "3"))
            (rule "notLeft" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "3"))
            (rule "notLeft" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "2"))
            (rule "notLeft" (formula "1"))
            (rule "nonNull" (formula "6") (inst "i=i"))
            (rule "greater_literals" (formula "6") (term "0,1"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "sub_literals" (formula "6") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "notLeft" (formula "6"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "5") (inst "i=i"))
            (rule "sub_literals" (formula "5") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "greater_literals" (formula "5") (term "0,1"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "notLeft" (formula "5"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "4") (inst "i=i"))
            (rule "sub_literals" (formula "4") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "greater_literals" (formula "4") (term "0,1"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "notLeft" (formula "4"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "3") (inst "i=i"))
            (rule "greater_literals" (formula "3") (term "0,1"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "sub_literals" (formula "3") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "notLeft" (formula "3"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "2") (inst "i=i"))
            (rule "sub_literals" (formula "2") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "greater_literals" (formula "2") (term "0,1"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "1") (inst "i=i"))
            (rule "sub_literals" (formula "1") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "greater_literals" (formula "1") (term "0,1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
            (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "6") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_2"))
            (rule "applyEq" (formula "34") (term "0") (ifseqformula "6"))
            (rule "applyEq" (formula "7") (term "0,1,1,1,0,0") (ifseqformula "6"))
            (rule "simplifySelectOfAnonEQ" (formula "6") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "49")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "7") (term "1,0,0,1,0") (ifseqformula "6"))
            (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "6"))
            (rule "applyEqReverse" (formula "7") (term "0,1,1,1,0,0") (ifseqformula "6"))
            (rule "hideAuxiliaryEq" (formula "6"))
            (rule "pullOutSelect" (formula "5") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_2"))
            (rule "applyEq" (formula "6") (term "0,1,1,1,0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "33") (term "0") (ifseqformula "5"))
            (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "48")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "6") (term "1,0,0,1,0") (ifseqformula "5"))
            (rule "applyEqReverse" (formula "6") (term "0,1,1,1,0,0") (ifseqformula "5"))
            (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "pullOutSelect" (formula "4") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_2"))
            (rule "applyEq" (formula "5") (term "0,1,1,1,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "32") (term "0") (ifseqformula "4"))
            (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "47")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "5") (term "0,1,1,1,0,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "pullOutSelect" (formula "3") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_2"))
            (rule "applyEq" (formula "4") (term "0,1,1,1,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "31") (term "0") (ifseqformula "3"))
            (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "4") (term "0,1,1,1,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "pullOutSelect" (formula "2") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_2"))
            (rule "applyEq" (formula "30") (term "0") (ifseqformula "2"))
            (rule "applyEq" (formula "3") (term "0,1,1,1,0,0") (ifseqformula "2"))
            (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "45")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0") (ifseqformula "2"))
            (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "2"))
            (rule "applyEqReverse" (formula "3") (term "0,1,1,1,0,0") (ifseqformula "2"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "pullOutSelect" (formula "1") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_2"))
            (rule "applyEq" (formula "2") (term "0,1,1,1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "9")))
            (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "2") (term "0,1,1,1,0,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "26") (ifseqformula "9"))
            (rule "andLeft" (formula "26"))
            (rule "notLeft" (formula "27"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "notLeft" (formula "28"))
            (rule "notLeft" (formula "27"))
            (rule "andLeft" (formula "26"))
            (rule "notLeft" (formula "27"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "notLeft" (formula "27"))
            (rule "notLeft" (formula "26"))
            (rule "nonNull" (formula "31") (inst "i=i"))
            (rule "sub_literals" (formula "31") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "31"))
            (rule "greater_literals" (formula "31") (term "0,1"))
            (builtin "One Step Simplification" (formula "31"))
            (rule "andLeft" (formula "31"))
            (rule "notLeft" (formula "31"))
            (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
            (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "30") (inst "i=i"))
            (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "greater_literals" (formula "30") (term "0,1"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "andLeft" (formula "30"))
            (rule "notLeft" (formula "30"))
            (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "29") (inst "i=i"))
            (rule "sub_literals" (formula "29") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "29"))
            (rule "greater_literals" (formula "29") (term "0,1"))
            (builtin "One Step Simplification" (formula "29"))
            (rule "andLeft" (formula "29"))
            (rule "notLeft" (formula "29"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "28") (inst "i=i"))
            (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "28"))
            (rule "greater_literals" (formula "28") (term "0,1"))
            (builtin "One Step Simplification" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "notLeft" (formula "28"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
            (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "27") (inst "i=i"))
            (rule "greater_literals" (formula "27") (term "0,1"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "sub_literals" (formula "27") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "27"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "26") (inst "i=i"))
            (rule "greater_literals" (formula "26") (term "0,1"))
            (builtin "One Step Simplification" (formula "26"))
            (rule "sub_literals" (formula "26") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "notLeft" (formula "26"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
            (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_3"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
            (rule "replaceKnownSelect_taclet1100_0" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_1" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_3"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
            (rule "replaceKnownSelect_taclet1100_2" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_3" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_3"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
            (rule "replaceKnownSelect_taclet1100_4" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_5" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_3"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
            (rule "replaceKnownSelect_taclet1100_6" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_7" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_3"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
            (rule "replaceKnownSelect_taclet1100_8" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_9" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_3"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
            (rule "replaceKnownSelect_taclet1100_10" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_11" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_3"))
            (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
            (rule "applyEq" (formula "39") (term "0") (ifseqformula "31"))
            (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "54")))
            (rule "replaceKnownSelect_taclet1100_12" (formula "31") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_13" (formula "31") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "31"))
            (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
            (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "31"))
            (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
            (rule "hideAuxiliaryEq" (formula "31"))
            (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_3"))
            (rule "applyEq" (formula "38") (term "0") (ifseqformula "30"))
            (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
            (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "53")))
            (rule "replaceKnownSelect_taclet1100_14" (formula "30") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_15" (formula "30") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
            (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "30"))
            (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
            (rule "hideAuxiliaryEq" (formula "30"))
            (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_3"))
            (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "37") (term "0") (ifseqformula "29"))
            (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "52")))
            (rule "replaceKnownSelect_taclet1100_16" (formula "29") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_17" (formula "29") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "29"))
            (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
            (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "29"))
            (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
            (rule "hideAuxiliaryEq" (formula "29"))
            (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_3"))
            (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
            (rule "applyEq" (formula "36") (term "0") (ifseqformula "28"))
            (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "51")))
            (rule "replaceKnownSelect_taclet1100_18" (formula "28") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_19" (formula "28") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "28") (term "0,0,0,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "28"))
            (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "28"))
            (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
            (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
            (rule "hideAuxiliaryEq" (formula "28"))
            (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_3"))
            (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "35") (term "0") (ifseqformula "27"))
            (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "50")))
            (rule "replaceKnownSelect_taclet1100_20" (formula "27") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_21" (formula "27") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "27") (term "0,0,0,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "27"))
            (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
            (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
            (rule "hideAuxiliaryEq" (formula "27"))
            (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_3"))
            (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
            (rule "applyEq" (formula "34") (term "0") (ifseqformula "26"))
            (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "49")))
            (rule "replaceKnownSelect_taclet1100_22" (formula "26") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1100_23" (formula "26") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "26"))
            (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "26"))
            (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
            (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
            (rule "hideAuxiliaryEq" (formula "26"))
            (rule "nnf_imp2or" (formula "6") (term "0"))
            (rule "nnf_imp2or" (formula "5") (term "0"))
            (rule "nnf_imp2or" (formula "4") (term "0"))
            (rule "methodCallParamThrow" (formula "50") (term "1"))
            (rule "nnf_imp2or" (formula "3") (term "0"))
            (rule "commute_or_2" (formula "17") (term "0"))
            (rule "nnf_imp2or" (formula "2") (term "0"))
            (rule "nnf_imp2or" (formula "1") (term "0"))
            (rule "commute_or_2" (formula "16") (term "0"))
            (rule "commute_or_2" (formula "15") (term "0"))
            (rule "commute_or_2" (formula "14") (term "0"))
            (rule "commute_or_2" (formula "13") (term "0"))
            (rule "commute_or_2" (formula "12") (term "0"))
            (rule "arrayLengthIsAShort" (formula "22") (term "1,0,0,0"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "arrayLengthNotNegative" (formula "22") (term "1,0,0,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "23") (inst "iv=iv"))
            (rule "andLeft" (formula "23"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
            (rule "apply_eq_monomials" (formula "24") (term "1,0,1,0,0") (ifseqformula "23"))
            (rule "polySimp_rightDist" (formula "24") (term "0,1,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "1,0,1,0,0"))
            (rule "add_literals" (formula "24") (term "1,1,1,0,1,0,0"))
            (rule "times_zero_1" (formula "24") (term "1,1,0,1,0,0"))
            (rule "add_zero_right" (formula "24") (term "1,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0"))
            (rule "nnf_imp2or" (formula "34") (term "0"))
            (rule "nnf_imp2or" (formula "33") (term "0"))
            (rule "nnf_imp2or" (formula "32") (term "0"))
            (rule "nnf_imp2or" (formula "31") (term "0"))
            (rule "nnf_imp2or" (formula "30") (term "0"))
            (rule "nnf_imp2or" (formula "29") (term "0"))
            (rule "nnf_notAnd" (formula "6") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "5") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "4") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
            (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
            (rule "mul_literals" (formula "4") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "3") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
            (rule "mul_literals" (formula "3") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "24") (term "0"))
            (rule "nnf_notAnd" (formula "34") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
            (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
            (rule "mul_literals" (formula "34") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "33") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
            (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
            (rule "mul_literals" (formula "33") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "32") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
            (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
            (rule "mul_literals" (formula "32") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "31") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
            (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
            (rule "mul_literals" (formula "31") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "30") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
            (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
            (rule "mul_literals" (formula "30") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "29") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
            (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "24") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
            (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0"))
            (rule "commute_or" (formula "17") (term "0,0"))
            (rule "commute_or" (formula "16") (term "0,0"))
            (rule "commute_or" (formula "15") (term "0,0"))
            (rule "commute_or" (formula "14") (term "0,0"))
            (rule "commute_or" (formula "13") (term "0,0"))
            (rule "commute_or" (formula "12") (term "0,0"))
            (rule "commute_or_2" (formula "6") (term "0"))
            (rule "commute_or_2" (formula "5") (term "0"))
            (rule "commute_or_2" (formula "4") (term "0"))
            (rule "commute_or_2" (formula "3") (term "0"))
            (rule "commute_or_2" (formula "2") (term "0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "tryCatchThrow" (formula "53") (term "1"))
            (rule "commute_or_2" (formula "34") (term "0"))
            (rule "commute_or_2" (formula "33") (term "0"))
            (rule "commute_or_2" (formula "32") (term "0"))
            (rule "commute_or_2" (formula "31") (term "0"))
            (rule "commute_or_2" (formula "30") (term "0"))
            (rule "commute_or_2" (formula "29") (term "0"))
            (rule "commute_or_2" (formula "24") (term "0"))
            (rule "commute_or" (formula "6") (term "0,0"))
            (rule "commute_or" (formula "5") (term "0,0"))
            (rule "commute_or" (formula "4") (term "0,0"))
            (rule "commute_or" (formula "3") (term "0,0"))
            (rule "commute_or" (formula "2") (term "0,0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "commute_or" (formula "34") (term "0,0"))
            (rule "commute_or" (formula "33") (term "0,0"))
            (rule "commute_or" (formula "32") (term "0,0"))
            (rule "commute_or" (formula "31") (term "0,0"))
            (rule "commute_or" (formula "30") (term "0,0"))
            (rule "commute_or" (formula "29") (term "0,0"))
            (rule "commute_or" (formula "24") (term "0,0"))
            (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "arrayLengthNotNegative" (formula "17") (term "1,1,0"))
            (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
            (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "7"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
            (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
            (rule "arrayLengthIsAShort" (formula "14") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "arrayLengthNotNegative" (formula "14") (term "1,1,0"))
            (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
            (rule "arrayLengthIsAShort" (formula "14") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "lenNonNegative" (formula "30") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "30"))
            (rule "lenNonNegative" (formula "31") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "31"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "8"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "9"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "10"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "11"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "12"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "13"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "14"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "15"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "16"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "17"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "18"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "19"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "ifElseUnfold" (formula "74") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "74") (term "1") (newnames "x_1"))
            (rule "equality_comparison_simple" (formula "74") (term "1"))
            (builtin "One Step Simplification" (formula "74"))
            (rule "replace_known_right" (formula "74") (term "0,0,1,0") (ifseqformula "69"))
            (builtin "One Step Simplification" (formula "74"))
            (rule "ifElseSplit" (formula "74"))
            (branch "if x_1 true"
               (builtin "One Step Simplification" (formula "75"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_1 false"
               (builtin "One Step Simplification" (formula "75"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifElseSplit" (formula "74"))
               (branch "if exc_2 instanceof java.lang.Throwable true"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclaration" (formula "74") (term "1") (newnames "e_1"))
                  (rule "reference_type_cast" (formula "74") (term "1"))
                  (branch "Normal Execution (exc_2 instanceof java.lang.Throwable)"
                     (builtin "One Step Simplification" (formula "75"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "assignment" (formula "74") (term "1"))
                     (builtin "One Step Simplification" (formula "74"))
                     (rule "emptyModality" (formula "74") (term "1"))
                     (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "69")) (ifInst ""  (formula "69")) (ifInst ""  (formula "56")))
                     (rule "eqSymm" (formula "74") (term "1,0,0,1"))
                     (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "74") (term "0") (ifseqformula "22"))
                     (rule "replaceKnownSelect_taclet1100_24" (formula "74") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_25" (formula "74") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet1100_26" (formula "74") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_27" (formula "74") (term "0,0,1,0,0"))
                     (rule "replaceKnownSelect_taclet1100_28" (formula "74") (term "0,0,1,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_29" (formula "74") (term "0,0,1,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100_36" (formula "74") (term "1,1,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100_30" (formula "74") (term "0,0,1,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_37" (formula "74") (term "1,1,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_31" (formula "74") (term "0,0,1,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100_38" (formula "74") (term "1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100_40" (formula "74") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_39" (formula "74") (term "1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100_42" (formula "74") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_41" (formula "74") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100_44" (formula "74") (term "1,1,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_43" (formula "74") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100_46" (formula "74") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_45" (formula "74") (term "1,1,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_47" (formula "74") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100_32" (formula "74") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100_34" (formula "74") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_33" (formula "74") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100_35" (formula "74") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "74") (term "0,1,0,0,0") (ifseqformula "66"))
                     (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "63")) (ifInst ""  (formula "64")) (ifInst ""  (formula "65")) (ifInst ""  (formula "67")) (ifInst ""  (formula "68")))
                     (rule "nonNull" (formula "74") (term "1,0,0,0,0,0") (inst "i=i"))
                     (rule "greater_literals" (formula "74") (term "0,1,1,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "58")))
                     (rule "sub_literals" (formula "74") (term "2,1,0,1,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "74"))
                     (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,1,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,1,0,0,0,0,0"))
                     (rule "nonNull" (formula "74") (term "1,0,0,0,0") (inst "i=i"))
                     (rule "greater_literals" (formula "74") (term "0,1,1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "59")))
                     (rule "sub_literals" (formula "74") (term "2,1,0,1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "74"))
                     (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,1,0,0,1,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,1,0,0,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,1,0,0,0,0"))
                     (rule "nonNull" (formula "74") (term "1,0,0") (inst "i=i"))
                     (rule "greater_literals" (formula "74") (term "0,1,1,0,0"))
                     (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "61")))
                     (rule "sub_literals" (formula "74") (term "2,1,0,1,0,0"))
                     (builtin "One Step Simplification" (formula "74"))
                     (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,1,0,0"))
                     (rule "nonNull" (formula "74") (term "0,0,0,0,0,0") (inst "i=i"))
                     (rule "greater_literals" (formula "74") (term "0,1,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "57")))
                     (rule "sub_literals" (formula "74") (term "2,1,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "74"))
                     (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,0,0,0,0,0,0"))
                     (rule "nonNull" (formula "74") (term "1,0,0,0") (inst "i=i"))
                     (rule "greater_literals" (formula "74") (term "0,1,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "60")))
                     (rule "sub_literals" (formula "74") (term "2,1,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "74"))
                     (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,1,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,1,0,0,0"))
                     (rule "nonNull" (formula "74") (term "1,0") (inst "i=i"))
                     (rule "greater_literals" (formula "74") (term "0,1,1,0"))
                     (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "62")))
                     (rule "sub_literals" (formula "74") (term "2,1,0,1,0"))
                     (builtin "One Step Simplification" (formula "74"))
                     (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,1,0"))
                     (rule "nnf_imp2or" (formula "74") (term "0,1,0"))
                     (rule "nnf_imp2or" (formula "74") (term "0,1,0,0"))
                     (rule "nnf_notAnd" (formula "74") (term "0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "74") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "74") (term "0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "74") (term "0,0,0,1,0"))
                     (rule "times_zero_1" (formula "74") (term "1,0,0,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "74") (term "0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0,1,0"))
                     (rule "mul_literals" (formula "74") (term "1,0,0,0,1,0"))
                     (rule "nnf_imp2or" (formula "74") (term "0,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "74") (term "0,1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "74") (term "0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "74") (term "0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "74") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "74") (term "0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "74") (term "1,0,0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "74") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "74") (term "0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,1,0,0"))
                     (rule "nnf_imp2or" (formula "74") (term "0,0,0,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "74") (term "0,1,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "74") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "74") (term "0,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "74") (term "1,0,0,0,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "74") (term "0,0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "1,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "74") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "74") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "74") (term "0,0,1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "74") (term "0,0,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "74") (term "1,0,0,0,0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "74") (term "0,0,0,0,0,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0,1,0,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "1,0,0,0,1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "74") (term "1,0,0,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,1,0,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,1,0,0,0,0"))
                     (rule "add_zero_left" (formula "74") (term "0,0,1,0,0,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "1,0,0,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "74") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "74") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "74") (term "0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "74") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "74") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "74") (term "0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "74") (term "0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "74") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,1,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "74") (term "0,0,1,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "74") (term "0,0,0,1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "74") (term "1,0,0,0,0,0,1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "74") (term "0,0,0,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "74") (term "1,0,0,0,1,0,0,0,0,0"))
                     (rule "andRight" (formula "74"))
                     (branch "Case 1"
                        (rule "andRight" (formula "74"))
                        (branch "Case 1"
                           (rule "andRight" (formula "74"))
                           (branch "Case 1"
                              (rule "andRight" (formula "74"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "74"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "74"))
                                    (branch "Case 1"
                                       (rule "allRight" (formula "74") (inst "sk=i_41"))
                                       (rule "orRight" (formula "74"))
                                       (rule "orRight" (formula "74"))
                                       (rule "notRight" (formula "76"))
                                       (rule "inEqSimp_geqRight" (formula "76"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "76"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_41"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "52"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "61")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "42"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "61")) (ifInst ""  (formula "5")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "60"))
                                       (rule "cut_direct" (formula "59") (term "0,0"))
                                       (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                                          (rule "instanceof_not_compatible_5" (formula "60") (term "1") (ifseqformula "59"))
                                          (rule "instanceof_not_compatible_5" (formula "60") (term "1,0") (ifseqformula "59"))
                                          (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "73")) (ifInst ""  (formula "73")))
                                          (rule "true_left" (formula "60"))
                                          (rule "cut_direct" (formula "52") (term "0,0"))
                                          (branch "CUT: exc_2.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "true_left" (formula "53"))
                                             (rule "cut_direct" (formula "43") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "allLeft" (formula "29") (inst "t=i_41"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "29") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                                                (rule "andLeft" (formula "29"))
                                                (rule "inEqSimp_homoInEq1" (formula "29"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                (rule "add_literals" (formula "29") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0"))
                                                (rule "add_literals" (formula "29") (term "0"))
                                                (rule "leq_literals" (formula "29"))
                                                (rule "closeFalse" (formula "29"))
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "allLeft" (formula "29") (inst "t=i_41"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                                (rule "leq_literals" (formula "29") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "29") (term "0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "closeFalse" (formula "29"))
                                             )
                                          )
                                          (branch "CUT: exc_2.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "52"))
                                             (rule "cut_direct" (formula "43") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "allLeft" (formula "29") (inst "t=i_41"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                                (rule "leq_literals" (formula "29") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "29") (term "0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "closeFalse" (formula "29"))
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "allLeft" (formula "29") (inst "t=i_41"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "29") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                                                (rule "andLeft" (formula "29"))
                                                (rule "inEqSimp_homoInEq1" (formula "29"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                (rule "add_literals" (formula "29") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0"))
                                                (rule "add_zero_right" (formula "29") (term "0"))
                                                (rule "leq_literals" (formula "29"))
                                                (rule "closeFalse" (formula "29"))
                                             )
                                          )
                                       )
                                       (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "59"))
                                          (rule "cut_direct" (formula "52") (term "0,0"))
                                          (branch "CUT: exc_2.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "true_left" (formula "53"))
                                             (rule "cut_direct" (formula "43") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "allLeft" (formula "29") (inst "t=i_41"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "29") (term "0,0,1"))
                                                (rule "leq_literals" (formula "29") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "29") (term "0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "closeFalse" (formula "29"))
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "allLeft" (formula "29") (inst "t=i_41"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "29") (term "0,0,1"))
                                                (rule "leq_literals" (formula "29") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "29") (term "0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "closeFalse" (formula "29"))
                                             )
                                          )
                                          (branch "CUT: exc_2.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "52"))
                                             (rule "cut_direct" (formula "43") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "allLeft" (formula "29") (inst "t=i_41"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "29") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "allLeft" (formula "29") (inst "t=i_41"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "29") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                                                (rule "andLeft" (formula "29"))
                                                (rule "inEqSimp_homoInEq1" (formula "29"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                (rule "add_literals" (formula "29") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0"))
                                                (rule "add_literals" (formula "29") (term "0"))
                                                (rule "leq_literals" (formula "29"))
                                                (rule "closeFalse" (formula "29"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "74") (inst "sk=i_40"))
                                       (rule "orRight" (formula "74"))
                                       (rule "orRight" (formula "74"))
                                       (rule "notRight" (formula "76"))
                                       (rule "inEqSimp_geqRight" (formula "76"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "76"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_40"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "52"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "62")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "42"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "6"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "62")) (ifInst ""  (formula "6")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "61"))
                                       (rule "cut_direct" (formula "59") (term "0,0"))
                                       (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                                          (rule "instanceof_not_compatible_5" (formula "60") (term "1") (ifseqformula "59"))
                                          (rule "instanceof_not_compatible_5" (formula "60") (term "1,0") (ifseqformula "59"))
                                          (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "73")) (ifInst ""  (formula "73")))
                                          (rule "true_left" (formula "60"))
                                          (rule "cut_direct" (formula "52") (term "0,0"))
                                          (branch "CUT: exc_2.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "true_left" (formula "53"))
                                             (rule "cut_direct" (formula "43") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "allLeft" (formula "31") (inst "t=i_40"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "allLeft" (formula "31") (inst "t=i_40"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "inEqSimp_homoInEq1" (formula "31"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                                                (rule "add_literals" (formula "31") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "31") (term "1,0"))
                                                (rule "add_zero_right" (formula "31") (term "0"))
                                                (rule "leq_literals" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                          )
                                          (branch "CUT: exc_2.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "52"))
                                             (rule "cut_direct" (formula "43") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "allLeft" (formula "31") (inst "t=i_40"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "allLeft" (formula "31") (inst "t=i_40"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                       )
                                       (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "59"))
                                          (rule "cut_direct" (formula "52") (term "0,0"))
                                          (branch "CUT: exc_2.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "true_left" (formula "53"))
                                             (rule "cut_direct" (formula "43") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "allLeft" (formula "31") (inst "t=i_40"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "allLeft" (formula "31") (inst "t=i_40"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "inEqSimp_homoInEq1" (formula "31"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                                                (rule "add_literals" (formula "31") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "31") (term "1,0"))
                                                (rule "add_literals" (formula "31") (term "0"))
                                                (rule "leq_literals" (formula "31"))
                                                (rule "closeFalse" (formula "31"))
                                             )
                                          )
                                          (branch "CUT: exc_2.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "52"))
                                             (rule "cut_direct" (formula "43") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "allLeft" (formula "31") (inst "t=i_40"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "31"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "allLeft" (formula "31") (inst "t=i_40"))
                                                (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "31") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "31"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_literals" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "74") (inst "sk=i_39"))
                                    (rule "orRight" (formula "74"))
                                    (rule "orRight" (formula "74"))
                                    (rule "notRight" (formula "76"))
                                    (rule "inEqSimp_leqRight" (formula "75"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "76"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_39"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "52"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "63")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "42"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "7"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "63")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "62"))
                                    (rule "cut_direct" (formula "59") (term "0,0"))
                                    (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                                       (rule "instanceof_not_compatible_5" (formula "60") (term "1") (ifseqformula "59"))
                                       (rule "instanceof_not_compatible_5" (formula "60") (term "1,0") (ifseqformula "59"))
                                       (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "73")) (ifInst ""  (formula "73")))
                                       (rule "true_left" (formula "60"))
                                       (rule "cut_direct" (formula "52") (term "0,0"))
                                       (branch "CUT: exc_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "cut_direct" (formula "43") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "allLeft" (formula "33") (inst "t=i_39"))
                                             (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "33") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "1"))
                                             (rule "andLeft" (formula "33"))
                                             (rule "inEqSimp_homoInEq1" (formula "33"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                             (rule "add_literals" (formula "33") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "33") (term "1,0"))
                                             (rule "add_literals" (formula "33") (term "0"))
                                             (rule "leq_literals" (formula "33"))
                                             (rule "closeFalse" (formula "33"))
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "allLeft" (formula "33") (inst "t=i_39"))
                                             (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                             (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                             (rule "leq_literals" (formula "33") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "33") (term "0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "closeFalse" (formula "33"))
                                          )
                                       )
                                       (branch "CUT: exc_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "52"))
                                          (rule "cut_direct" (formula "43") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "allLeft" (formula "33") (inst "t=i_39"))
                                             (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                             (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                             (rule "leq_literals" (formula "33") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "33"))
                                             (rule "qeq_literals" (formula "2") (term "0"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "allLeft" (formula "33") (inst "t=i_39"))
                                             (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                             (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                             (rule "leq_literals" (formula "33") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "33"))
                                             (rule "qeq_literals" (formula "2") (term "0"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                       )
                                    )
                                    (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "59"))
                                       (rule "cut_direct" (formula "52") (term "0,0"))
                                       (branch "CUT: exc_2.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "cut_direct" (formula "43") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "allLeft" (formula "33") (inst "t=i_39"))
                                             (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                             (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "33") (term "0,0,1"))
                                             (rule "leq_literals" (formula "33") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "33"))
                                             (rule "qeq_literals" (formula "2") (term "0"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "allLeft" (formula "33") (inst "t=i_39"))
                                             (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                             (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "33") (term "0,0,1"))
                                             (rule "leq_literals" (formula "33") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "33") (term "0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "closeFalse" (formula "33"))
                                          )
                                       )
                                       (branch "CUT: exc_2.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "52"))
                                          (rule "cut_direct" (formula "43") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "allLeft" (formula "33") (inst "t=i_39"))
                                             (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                             (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                             (rule "leq_literals" (formula "33") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "33") (term "0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "closeFalse" (formula "33"))
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "allLeft" (formula "33") (inst "t=i_39"))
                                             (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                             (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                             (rule "leq_literals" (formula "33") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "33") (term "0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "closeFalse" (formula "33"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "74") (inst "sk=i_38"))
                                 (rule "orRight" (formula "74"))
                                 (rule "orRight" (formula "74"))
                                 (rule "notRight" (formula "76"))
                                 (rule "inEqSimp_leqRight" (formula "75"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "76"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_38"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "52"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "64")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "42"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "64")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "63"))
                                 (rule "cut_direct" (formula "59") (term "0,0"))
                                 (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                                    (rule "instanceof_not_compatible_5" (formula "60") (term "1") (ifseqformula "59"))
                                    (rule "instanceof_not_compatible_5" (formula "60") (term "1,0") (ifseqformula "59"))
                                    (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "73")) (ifInst ""  (formula "73")))
                                    (rule "true_left" (formula "60"))
                                    (rule "cut_direct" (formula "52") (term "0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "53"))
                                       (rule "true_left" (formula "53"))
                                       (rule "cut_direct" (formula "43") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "true_left" (formula "44"))
                                          (rule "allLeft" (formula "35") (inst "t=i_38"))
                                          (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "35") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "1"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "inEqSimp_homoInEq1" (formula "35"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                          (rule "add_literals" (formula "35") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0"))
                                          (rule "add_literals" (formula "35") (term "0"))
                                          (rule "leq_literals" (formula "35"))
                                          (rule "closeFalse" (formula "35"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "allLeft" (formula "35") (inst "t=i_38"))
                                          (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                          (rule "leq_literals" (formula "35") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "cut_direct" (formula "43") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "true_left" (formula "44"))
                                          (rule "allLeft" (formula "35") (inst "t=i_38"))
                                          (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                          (rule "leq_literals" (formula "35") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "allLeft" (formula "35") (inst "t=i_38"))
                                          (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                          (rule "leq_literals" (formula "35") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "35") (term "0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "closeFalse" (formula "35"))
                                       )
                                    )
                                 )
                                 (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "cut_direct" (formula "52") (term "0,0"))
                                    (branch "CUT: exc_2.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "53"))
                                       (rule "true_left" (formula "53"))
                                       (rule "cut_direct" (formula "43") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "true_left" (formula "44"))
                                          (rule "allLeft" (formula "35") (inst "t=i_38"))
                                          (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "35") (term "0,0,1"))
                                          (rule "leq_literals" (formula "35") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "allLeft" (formula "35") (inst "t=i_38"))
                                          (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "35") (term "0,0,1"))
                                          (rule "leq_literals" (formula "35") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "35") (term "0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "closeFalse" (formula "35"))
                                       )
                                    )
                                    (branch "CUT: exc_2.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "52"))
                                       (rule "cut_direct" (formula "43") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "true_left" (formula "44"))
                                          (rule "allLeft" (formula "35") (inst "t=i_38"))
                                          (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                          (rule "leq_literals" (formula "35") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "allLeft" (formula "35") (inst "t=i_38"))
                                          (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                          (rule "leq_literals" (formula "35") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "35"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "74") (inst "sk=i_37"))
                              (rule "orRight" (formula "74"))
                              (rule "orRight" (formula "74"))
                              (rule "notRight" (formula "76"))
                              (rule "inEqSimp_leqRight" (formula "75"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "76"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_37"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "52"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "65")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "42"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "65")) (ifInst ""  (formula "9")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "64"))
                              (rule "cut_direct" (formula "52") (term "0,0"))
                              (branch "CUT: exc_2.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "53"))
                                 (rule "true_left" (formula "53"))
                                 (rule "cut_direct" (formula "59") (term "0,0"))
                                 (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                                    (rule "instanceof_not_compatible_5" (formula "60") (term "1") (ifseqformula "59"))
                                    (rule "instanceof_not_compatible_5" (formula "60") (term "1,0") (ifseqformula "59"))
                                    (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "73")) (ifInst ""  (formula "73")))
                                    (rule "true_left" (formula "60"))
                                    (rule "cut_direct" (formula "43") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "allLeft" (formula "37") (inst "t=i_37"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "37") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "1"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "inEqSimp_homoInEq1" (formula "37"))
                                       (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                       (rule "add_literals" (formula "37") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "37") (term "1,0"))
                                       (rule "add_literals" (formula "37") (term "0"))
                                       (rule "leq_literals" (formula "37"))
                                       (rule "closeFalse" (formula "37"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "43"))
                                       (rule "allLeft" (formula "37") (inst "t=i_37"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                       (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                       (rule "leq_literals" (formula "37") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "37"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                                 (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "cut_direct" (formula "43") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "allLeft" (formula "37") (inst "t=i_37"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "37") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "37"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "43"))
                                       (rule "allLeft" (formula "37") (inst "t=i_37"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                       (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "37") (term "0,0,1"))
                                       (rule "leq_literals" (formula "37") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "37") (term "0"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "closeFalse" (formula "37"))
                                    )
                                 )
                              )
                              (branch "CUT: exc_2.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "cut_direct" (formula "59") (term "0,0"))
                                 (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                                    (rule "instanceof_not_compatible_5" (formula "60") (term "1") (ifseqformula "59"))
                                    (rule "instanceof_not_compatible_5" (formula "60") (term "1,0") (ifseqformula "59"))
                                    (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "74")) (ifInst ""  (formula "74")))
                                    (rule "true_left" (formula "60"))
                                    (rule "cut_direct" (formula "43") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "allLeft" (formula "37") (inst "t=i_37"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                       (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                       (rule "leq_literals" (formula "37") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "37"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "43"))
                                       (rule "allLeft" (formula "37") (inst "t=i_37"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                       (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                       (rule "leq_literals" (formula "37") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "37") (term "0"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "closeFalse" (formula "37"))
                                    )
                                 )
                                 (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "59"))
                                    (rule "cut_direct" (formula "43") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "allLeft" (formula "37") (inst "t=i_37"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                       (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                       (rule "leq_literals" (formula "37") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "37") (term "0"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "closeFalse" (formula "37"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "43"))
                                       (rule "allLeft" (formula "37") (inst "t=i_37"))
                                       (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                       (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                       (rule "leq_literals" (formula "37") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "37"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "74") (inst "sk=i_36"))
                           (rule "orRight" (formula "74"))
                           (rule "orRight" (formula "74"))
                           (rule "notRight" (formula "76"))
                           (rule "inEqSimp_leqRight" (formula "75"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "76"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_36"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "52"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "66")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "42"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "66")) (ifInst ""  (formula "12")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "23") (ifseqformula "65"))
                           (rule "cut_direct" (formula "59") (term "0,0"))
                           (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                              (rule "instanceof_not_compatible_5" (formula "60") (term "1") (ifseqformula "59"))
                              (rule "instanceof_not_compatible_5" (formula "60") (term "1,0") (ifseqformula "59"))
                              (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "73")) (ifInst ""  (formula "73")))
                              (rule "true_left" (formula "60"))
                              (rule "cut_direct" (formula "52") (term "0,0"))
                              (branch "CUT: exc_2.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "53"))
                                 (rule "true_left" (formula "53"))
                                 (rule "cut_direct" (formula "43") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "allLeft" (formula "39") (inst "t=i_36"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "39") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "1"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "inEqSimp_homoInEq1" (formula "39"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0"))
                                    (rule "add_literals" (formula "39") (term "0"))
                                    (rule "leq_literals" (formula "39"))
                                    (rule "closeFalse" (formula "39"))
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "allLeft" (formula "39") (inst "t=i_36"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                    (rule "leq_literals" (formula "39") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "39") (term "0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "closeFalse" (formula "39"))
                                 )
                              )
                              (branch "CUT: exc_2.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "cut_direct" (formula "43") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "allLeft" (formula "39") (inst "t=i_36"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                    (rule "leq_literals" (formula "39") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "39") (term "0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "closeFalse" (formula "39"))
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "allLeft" (formula "39") (inst "t=i_36"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "39") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "1"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "inEqSimp_homoInEq1" (formula "39"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0"))
                                    (rule "add_zero_right" (formula "39") (term "0"))
                                    (rule "leq_literals" (formula "39"))
                                    (rule "closeFalse" (formula "39"))
                                 )
                              )
                           )
                           (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "59"))
                              (rule "cut_direct" (formula "52") (term "0,0"))
                              (branch "CUT: exc_2.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "53"))
                                 (rule "true_left" (formula "53"))
                                 (rule "cut_direct" (formula "43") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "allLeft" (formula "39") (inst "t=i_36"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "39") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "39"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "allLeft" (formula "39") (inst "t=i_36"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "39") (term "0,0,1"))
                                    (rule "leq_literals" (formula "39") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "39") (term "0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "closeFalse" (formula "39"))
                                 )
                              )
                              (branch "CUT: exc_2.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "cut_direct" (formula "43") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "allLeft" (formula "39") (inst "t=i_36"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                    (rule "leq_literals" (formula "39") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "39") (term "0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "closeFalse" (formula "39"))
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "allLeft" (formula "39") (inst "t=i_36"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                    (rule "leq_literals" (formula "39") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "39"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                              )
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "74") (inst "sk=f_4"))
                        (rule "allRight" (formula "74") (inst "sk=o_4"))
                        (rule "orRight" (formula "74"))
                        (rule "pullOutSelect" (formula "75") (term "0") (inst "selectSK=f_4_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "39"))
                        (rule "eqSymm" (formula "76"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_4_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "cut_direct" (formula "57") (term "0,0"))
                        (branch "CUT: java.lang.Error::instance(exc_2) = TRUE TRUE"
                           (rule "instanceof_not_compatible_5" (formula "58") (term "1") (ifseqformula "57"))
                           (rule "instanceof_not_compatible_5" (formula "58") (term "1,0") (ifseqformula "57"))
                           (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "71")) (ifInst ""  (formula "71")))
                           (rule "true_left" (formula "58"))
                           (rule "cut_direct" (formula "50") (term "0,0"))
                           (branch "CUT: exc_2.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "51"))
                              (rule "true_left" (formula "51"))
                              (rule "cut_direct" (formula "41") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "58"))
                                    (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "78"))
                                    (rule "replace_known_right" (formula "77") (term "0,0") (ifseqformula "59"))
                                    (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "57")))
                                    (rule "closeTrue" (formula "77"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "77") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "59"))
                                    (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "79"))
                                    (rule "replace_known_right" (formula "78") (term "0,1") (ifseqformula "58"))
                                    (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "57")))
                                    (rule "closeTrue" (formula "78"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "78") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "CUT: exc_2.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "50"))
                              (rule "cut_direct" (formula "41") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "58"))
                                    (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "79"))
                                    (rule "replace_known_right" (formula "78") (term "0,0") (ifseqformula "59"))
                                    (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "57")))
                                    (rule "closeTrue" (formula "78"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "78") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "59"))
                                    (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "80"))
                                    (rule "replace_known_right" (formula "79") (term "0,1") (ifseqformula "58"))
                                    (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "57")))
                                    (rule "closeTrue" (formula "79"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "79") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: java.lang.Error::instance(exc_2) = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "57"))
                           (rule "cut_direct" (formula "50") (term "0,0"))
                           (branch "CUT: exc_2.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "51"))
                              (rule "true_left" (formula "51"))
                              (rule "cut_direct" (formula "41") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "58"))
                                    (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "79"))
                                    (rule "replace_known_right" (formula "78") (term "0,0") (ifseqformula "59"))
                                    (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "57")))
                                    (rule "closeTrue" (formula "78"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "78") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "59"))
                                    (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "80"))
                                    (rule "replace_known_right" (formula "79") (term "0,0") (ifseqformula "57"))
                                    (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "58")))
                                    (rule "closeTrue" (formula "79"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "79") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "CUT: exc_2.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "50"))
                              (rule "cut_direct" (formula "41") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "58"))
                                    (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "80"))
                                    (rule "replace_known_right" (formula "79") (term "0,1") (ifseqformula "57"))
                                    (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "59")))
                                    (rule "closeTrue" (formula "79"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "79") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "59"))
                                    (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "81"))
                                    (rule "replace_known_right" (formula "80") (term "0,0") (ifseqformula "57"))
                                    (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "58")))
                                    (rule "closeTrue" (formula "80"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndRemoveSignature«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "80") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                     )
                  )
                  (branch "ClassCastException (!(exc_2 instanceof java.lang.Throwable))"
                     (builtin "One Step Simplification" (formula "74"))
                     (rule "closeTrue" (formula "74"))
                  )
               )
               (branch "if exc_2 instanceof java.lang.Throwable false"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Pre (checkAndRemoveTag)"
            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")) (ifInst ""  (formula "14")))
            (rule "wellFormedAnonEQ" (formula "21") (term "1") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "12"))
            (rule "andLeft" (formula "17"))
            (rule "notLeft" (formula "17"))
            (rule "eqSymm" (formula "16"))
            (rule "eqSymm" (formula "9"))
            (rule "eqSymm" (formula "15"))
            (rule "eqSymm" (formula "1"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_right" (formula "21") (term "0,1,0") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "4")) (ifInst ""  (formula "11")))
            (rule "notRight" (formula "21"))
            (rule "applyEq" (formula "2") (term "1") (ifseqformula "17"))
            (rule "array2seqDef" (formula "17") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "17"))
            (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "10"))
            (rule "array2seqDef" (formula "16") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "16"))
            (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
            (rule "array2seqDef" (formula "2") (term "0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "17"))
            (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
            (rule "array2seqDef" (formula "10") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "10"))
            (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "5") (ifseqformula "21"))
            (rule "eqSymm" (formula "10"))
            (rule "array2seqDef" (formula "16") (term "0,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "16"))
            (rule "array2seqDef" (formula "10") (term "0,1,1") (inst "u=u"))
            (rule "eqSeqDef2" (formula "2") (inst "iv=iv") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
            (rule "close" (formula "19") (ifseqformula "2"))
         )
      )
   )
   (branch "CUT: self.uniqueSignedObject(result_0) @heapAfter_checkAndRemoveSignature = TRUE FALSE"
      (rule "Definition_axiom_for_uniqueSignedObject_in_verif_selectvoting_system_core_MixServer" (formula "15") (term "0") (ifseqformula "3") (userinteraction))
      (builtin "One Step Simplification" (formula "15"))
      (rule "closeTrue" (formula "15") (userinteraction))
   )
)
(branch "Exceptional Post (checkAndRemoveSignature)"
   (builtin "One Step Simplification" (formula "3"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "4"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "5") (term "1,0") (ifseqformula "4"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "10"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "2"))
   (rule "eqSymm" (formula "17") (term "1,0,0,1,0,1"))
   (rule "eqSymm" (formula "17") (term "0,1,0,0,0,1"))
   (rule "eqSymm" (formula "6"))
   (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "15"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "array2seqDef" (formula "17") (term "0,0,1,0,0,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "17") (term "1,0,1,0,0,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "6") (term "0,0") (inst "u=u"))
   (rule "narrowSelectArrayType" (formula "6") (term "2,0,0") (ifseqformula "1") (ifseqformula "16"))
   (rule "array2seqDef" (formula "6") (term "1") (inst "u=u"))
   (rule "eqSymm" (formula "6"))
   (rule "eqSeqDef" (formula "17") (term "0,1,0,0,0,1") (inst "iv=iv"))
   (rule "lenOfSeqDef" (formula "17") (term "0,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "17") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "17") (term "1,1,1,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,0,0,0,1"))
   (rule "getOfSeqDef" (formula "17") (term "1,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "17") (term "2,1,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "17") (term "1,1,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,2,1,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "17") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "17") (term "1,1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "getOfSeqDef" (formula "17") (term "0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "17") (term "1,0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "17") (term "2,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "17") (term "0,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "17") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "1,1,1,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "array2seqDef" (formula "6") (term "1,1,1") (inst "u=u"))
   (rule "array2seqDef" (formula "6") (term "0,1,1") (inst "u=u"))
   (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "nnf_imp2or" (formula "16") (term "0,1,0,1,0,0,0,1"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,0,1,0,0,0,1"))
   (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,1,0,0,0,1"))
   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "10") (ifseqformula "3"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "12"))
   (rule "notLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "11"))
   (rule "notLeft" (formula "10"))
   (rule "nonNull" (formula "15") (inst "i=i"))
   (rule "greater_literals" (formula "15") (term "0,1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "sub_literals" (formula "15") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "15"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "14") (inst "i=i"))
   (rule "greater_literals" (formula "14") (term "0,1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "sub_literals" (formula "14") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "14"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "13") (inst "i=i"))
   (rule "greater_literals" (formula "13") (term "0,1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "sub_literals" (formula "13") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "13"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "12") (inst "i=i"))
   (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "greater_literals" (formula "12") (term "0,1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "12"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "11") (inst "i=i"))
   (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "greater_literals" (formula "11") (term "0,1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "10") (inst "i=i"))
   (rule "greater_literals" (formula "10") (term "0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "sub_literals" (formula "10") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "15") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_0"))
   (rule "applyEq" (formula "16") (term "0,1,1,1,0,0") (ifseqformula "15"))
   (rule "applyEq" (formula "23") (term "0") (ifseqformula "15"))
   (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "16") (term "1,0,0,1,0") (ifseqformula "15"))
   (rule "applyEqReverse" (formula "16") (term "0,1,1,1,0,0") (ifseqformula "15"))
   (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "15"))
   (rule "hideAuxiliaryEq" (formula "15"))
   (rule "pullOutSelect" (formula "14") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_0"))
   (rule "applyEq" (formula "15") (term "0,1,1,1,0,0") (ifseqformula "14"))
   (rule "applyEq" (formula "22") (term "0") (ifseqformula "14"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "15") (term "1,0,0,1,0") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "15") (term "0,1,1,1,0,0") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "14"))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "pullOutSelect" (formula "13") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_0"))
   (rule "applyEq" (formula "21") (term "0") (ifseqformula "13"))
   (rule "applyEq" (formula "14") (term "0,1,1,1,0,0") (ifseqformula "13"))
   (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "14") (term "1,0,0,1,0") (ifseqformula "13"))
   (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "13"))
   (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,0") (ifseqformula "13"))
   (rule "hideAuxiliaryEq" (formula "13"))
   (rule "pullOutSelect" (formula "12") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_0"))
   (rule "applyEq" (formula "13") (term "0,1,1,1,0,0") (ifseqformula "12"))
   (rule "applyEq" (formula "20") (term "0") (ifseqformula "12"))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "13") (term "1,0,0,1,0") (ifseqformula "12"))
   (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,0") (ifseqformula "12"))
   (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "12"))
   (rule "hideAuxiliaryEq" (formula "12"))
   (rule "pullOutSelect" (formula "11") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_0"))
   (rule "applyEq" (formula "12") (term "0,1,1,1,0,0") (ifseqformula "11"))
   (rule "applyEq" (formula "19") (term "0") (ifseqformula "11"))
   (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "12") (term "1,0,0,1,0") (ifseqformula "11"))
   (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,0") (ifseqformula "11"))
   (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "11"))
   (rule "hideAuxiliaryEq" (formula "11"))
   (rule "pullOutSelect" (formula "10") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_0"))
   (rule "applyEq" (formula "11") (term "0,1,1,1,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "18") (term "0") (ifseqformula "10"))
   (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "11") (term "1,0,0,1,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "11") (term "0,1,1,1,0,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "10"))
   (rule "hideAuxiliaryEq" (formula "10"))
   (rule "nnf_imp2or" (formula "15") (term "0"))
   (rule "nnf_imp2or" (formula "14") (term "0"))
   (rule "nnf_imp2or" (formula "13") (term "0"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "13") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
   (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "6") (ifseqformula "3"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "7"))
   (rule "notLeft" (formula "6"))
   (rule "nonNull" (formula "11") (inst "i=i"))
   (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "27")))
   (rule "greater_literals" (formula "11") (term "0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "27"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "10") (inst "i=i"))
   (rule "greater_literals" (formula "10") (term "0,1"))
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "26")))
   (rule "sub_literals" (formula "10") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "26"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "9") (inst "i=i"))
   (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "25")))
   (rule "greater_literals" (formula "9") (term "0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "25"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "8") (inst "i=i"))
   (rule "greater_literals" (formula "8") (term "0,1"))
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "24")))
   (rule "sub_literals" (formula "8") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "24"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "7") (inst "i=i"))
   (rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "23")))
   (rule "greater_literals" (formula "7") (term "0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "23"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "6") (inst "i=i"))
   (rule "greater_literals" (formula "6") (term "0,1"))
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "22")))
   (rule "sub_literals" (formula "6") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "22"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "methodCallParamThrow" (formula "38") (term "1"))
   (rule "nnf_imp2or" (formula "6") (term "0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "7") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0"))
   (rule "commute_or_2" (formula "20") (term "0"))
   (rule "commute_or_2" (formula "19") (term "0"))
   (rule "commute_or_2" (formula "18") (term "0"))
   (rule "commute_or_2" (formula "17") (term "0"))
   (rule "commute_or_2" (formula "16") (term "0"))
   (rule "commute_or_2" (formula "15") (term "0"))
   (rule "commute_or_2" (formula "11") (term "0"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "commute_or_2" (formula "9") (term "0"))
   (rule "commute_or_2" (formula "8") (term "0"))
   (rule "commute_or_2" (formula "7") (term "0"))
   (rule "commute_or_2" (formula "6") (term "0"))
   (rule "commute_or" (formula "20") (term "0,0"))
   (rule "commute_or" (formula "19") (term "0,0"))
   (rule "commute_or" (formula "18") (term "0,0"))
   (rule "commute_or" (formula "17") (term "0,0"))
   (rule "commute_or" (formula "16") (term "0,0"))
   (rule "commute_or" (formula "15") (term "0,0"))
   (rule "commute_or" (formula "11") (term "0,0"))
   (rule "commute_or" (formula "10") (term "0,0"))
   (rule "commute_or" (formula "9") (term "0,0"))
   (rule "commute_or" (formula "8") (term "0,0"))
   (rule "commute_or" (formula "7") (term "0,0"))
   (rule "commute_or" (formula "6") (term "0,0"))
   (rule "tryCatchThrow" (formula "38") (term "1"))
   (rule "ifElseUnfold" (formula "38") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "38") (term "1") (newnames "x"))
   (rule "equality_comparison_simple" (formula "38") (term "1"))
   (builtin "One Step Simplification" (formula "38"))
   (rule "replace_known_right" (formula "38") (term "0,0,1,0") (ifseqformula "36"))
   (builtin "One Step Simplification" (formula "38"))
   (rule "ifElseSplit" (formula "38"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "39"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "39"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifElseSplit" (formula "38"))
      (branch "if exc_0 instanceof java.lang.Throwable true"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
         (rule "true_left" (formula "1"))
         (rule "variableDeclaration" (formula "38") (term "1") (newnames "e"))
         (rule "reference_type_cast" (formula "38") (term "1"))
         (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
            (builtin "One Step Simplification" (formula "39"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "38") (term "1"))
            (builtin "One Step Simplification" (formula "38"))
            (rule "emptyModality" (formula "38") (term "1"))
            (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "36")) (ifInst ""  (formula "36")) (ifInst ""  (formula "21")))
            (rule "eqSymm" (formula "38") (term "1,0,0,1"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "38") (term "0") (ifseqformula "3"))
            (rule "replaceKnownSelect_taclet1_0" (formula "38") (term "0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "38") (term "0,0,1,0"))
            (rule "replaceKnownSelect_taclet1_2" (formula "38") (term "0,0,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "38") (term "0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet1_4" (formula "38") (term "0,0,1,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "38") (term "0,0,1,0,0,0"))
            (rule "replaceKnownSelect_taclet1_12" (formula "38") (term "1,1,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_6" (formula "38") (term "0,0,1,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_13" (formula "38") (term "1,1,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_7" (formula "38") (term "0,0,1,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_14" (formula "38") (term "1,1,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_16" (formula "38") (term "1,1,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_15" (formula "38") (term "1,1,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_18" (formula "38") (term "1,1,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_17" (formula "38") (term "1,1,0,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_20" (formula "38") (term "1,1,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_19" (formula "38") (term "1,1,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_22" (formula "38") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_21" (formula "38") (term "1,1,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_23" (formula "38") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_10" (formula "38") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_8" (formula "38") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_11" (formula "38") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_9" (formula "38") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "38") (term "0,1,0,0") (ifseqformula "32"))
            (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "33")))
            (rule "nonNull" (formula "38") (term "1,0,0") (inst "i=i"))
            (rule "greater_literals" (formula "38") (term "0,1,1,0,0"))
            (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "26")))
            (rule "sub_literals" (formula "38") (term "2,1,0,1,0,0"))
            (builtin "One Step Simplification" (formula "38"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,0"))
            (rule "nonNull" (formula "38") (term "1,0,0,0,0") (inst "i=i"))
            (rule "sub_literals" (formula "38") (term "2,1,0,1,1,1,0,0,0,0"))
            (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "24")))
            (rule "greater_literals" (formula "38") (term "0,1,0,0,0,0"))
            (builtin "One Step Simplification" (formula "38"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,0,0,0"))
            (rule "nonNull" (formula "38") (term "1,0,0,0,0,0") (inst "i=i"))
            (rule "greater_literals" (formula "38") (term "0,1,1,0,0,0,0,0"))
            (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "23")))
            (rule "sub_literals" (formula "38") (term "2,1,0,1,0,0,0,0,0"))
            (builtin "One Step Simplification" (formula "38"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,0,0,0,0"))
            (rule "nonNull" (formula "38") (term "0,0,0,0,0,0") (inst "i=i"))
            (rule "sub_literals" (formula "38") (term "2,1,0,1,1,0,0,0,0,0,0"))
            (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "22")))
            (rule "greater_literals" (formula "38") (term "0,0,0,0,0,0,0"))
            (builtin "One Step Simplification" (formula "38"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0,0,0,0,0,0"))
            (rule "nonNull" (formula "38") (term "1,0") (inst "i=i"))
            (rule "greater_literals" (formula "38") (term "0,1,1,0"))
            (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "27")))
            (rule "sub_literals" (formula "38") (term "2,1,0,1,0"))
            (builtin "One Step Simplification" (formula "38"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0"))
            (rule "nonNull" (formula "38") (term "1,0,0,0") (inst "i=i"))
            (rule "greater_literals" (formula "38") (term "0,1,1,0,0,0"))
            (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "25")))
            (rule "sub_literals" (formula "38") (term "2,1,0,1,0,0,0"))
            (builtin "One Step Simplification" (formula "38"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,0,0"))
            (rule "nnf_imp2or" (formula "38") (term "0,1,0"))
            (rule "nnf_imp2or" (formula "38") (term "0,1,0,0"))
            (rule "nnf_notAnd" (formula "38") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "38") (term "1,0,0,0,1,0"))
            (rule "nnf_imp2or" (formula "38") (term "0,1,0,0,0"))
            (rule "nnf_imp2or" (formula "38") (term "0,1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "38") (term "0,0,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0,0"))
            (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,1,0,0"))
            (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0,0"))
            (rule "mul_literals" (formula "38") (term "1,0,0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "38") (term "0,0,0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "38") (term "0,1,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "38") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0,0,0"))
            (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "38") (term "1,0,0,0,1,0,0,0"))
            (rule "nnf_notAnd" (formula "38") (term "0,0,1,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,0,0,0"))
            (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,0,0,0"))
            (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,1,0,0,0,0"))
            (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "1,0,0,0,1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "38") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "38") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0,0,0,0,0"))
            (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "1,0,0,0,1,0,0,0,0,0"))
            (rule "cut_direct" (formula "14") (term "0"))
            (branch "CUT: exc_0.<created> = TRUE TRUE"
               (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "1"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "arrayLengthIsAShort" (formula "21") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "cut_direct" (formula "22") (term "1"))
               (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_0) = TRUE TRUE"
                  (rule "instanceof_not_compatible_5" (formula "23") (term "1,0") (ifseqformula "22"))
                  (rule "instanceof_not_compatible_5" (formula "23") (term "0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "38")) (ifInst ""  (formula "38")))
                  (rule "true_left" (formula "23"))
                  (rule "arrayLengthNotNegative" (formula "21") (term "1,1,0"))
                  (rule "arrayLengthNotNegative" (formula "20") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "21") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "arrayLengthIsAShort" (formula "19") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "arrayLengthNotNegative" (formula "19") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "18") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "arrayLengthNotNegative" (formula "18") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthNotNegative" (formula "17") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "16") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "8"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "9"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "10"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "11"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "12"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "13"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "andRight" (formula "57"))
                  (branch "Case 1"
                     (rule "andRight" (formula "57"))
                     (branch "Case 1"
                        (rule "andRight" (formula "57"))
                        (branch "Case 1"
                           (rule "andRight" (formula "57"))
                           (branch "Case 1"
                              (rule "andRight" (formula "57"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "57"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "57") (inst "sk=i_23"))
                                    (rule "orRight" (formula "57"))
                                    (rule "notRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_23"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "44"))
                                    (rule "allLeft" (formula "22") (inst "t=i_23"))
                                    (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                    (rule "leq_literals" (formula "22") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "22") (term "0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "closeFalse" (formula "22"))
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "57") (inst "sk=i_22"))
                                    (rule "orRight" (formula "57"))
                                    (rule "notRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_22"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "45"))
                                    (rule "allLeft" (formula "23") (inst "t=i_22"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                    (rule "leq_literals" (formula "23") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "23") (term "0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "closeFalse" (formula "23"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "57") (inst "sk=i_21"))
                                 (rule "orRight" (formula "57"))
                                 (rule "notRight" (formula "58"))
                                 (rule "orRight" (formula "58"))
                                 (rule "inEqSimp_geqRight" (formula "59"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "59"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_21"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "46"))
                                 (rule "allLeft" (formula "24") (inst "t=i_21"))
                                 (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "24") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "24"))
                                 (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                 (rule "add_literals" (formula "24") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0"))
                                 (rule "add_literals" (formula "24") (term "0"))
                                 (rule "leq_literals" (formula "24"))
                                 (rule "closeFalse" (formula "24"))
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "57") (inst "sk=i_20"))
                              (rule "orRight" (formula "57"))
                              (rule "notRight" (formula "58"))
                              (rule "orRight" (formula "58"))
                              (rule "inEqSimp_geqRight" (formula "59"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "59"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_20"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "8")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "47"))
                              (rule "allLeft" (formula "25") (inst "t=i_20"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "57") (inst "sk=i_19"))
                           (rule "orRight" (formula "57"))
                           (rule "notRight" (formula "58"))
                           (rule "orRight" (formula "58"))
                           (rule "inEqSimp_geqRight" (formula "59"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "59"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_19"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "9")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "48"))
                           (rule "allLeft" (formula "26") (inst "t=i_19"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "26") (term "0,0,1"))
                           (rule "leq_literals" (formula "26") (term "0,1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "57") (inst "sk=i_18"))
                        (rule "orRight" (formula "57"))
                        (rule "notRight" (formula "58"))
                        (rule "orRight" (formula "58"))
                        (rule "inEqSimp_geqRight" (formula "59"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "59"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_18"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "10")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "49"))
                        (rule "allLeft" (formula "27") (inst "t=i_18"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "27") (term "0,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "2"))
                        (rule "andLeft" (formula "27"))
                        (rule "inEqSimp_homoInEq1" (formula "27"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                        (rule "add_literals" (formula "27") (term "1,1,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0"))
                        (rule "add_literals" (formula "27") (term "0"))
                        (rule "leq_literals" (formula "27"))
                        (rule "closeFalse" (formula "27"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "57") (inst "sk=f_3"))
                     (rule "allRight" (formula "57") (inst "sk=o_3"))
                     (rule "orRight" (formula "57"))
                     (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=f_3_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                     (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "59"))
                     (rule "closeTrue" (formula "59"))
                  )
               )
               (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_0) = TRUE FALSE"
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "arrayLengthNotNegative" (formula "21") (term "1,1,0"))
                  (rule "arrayLengthNotNegative" (formula "20") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "21") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "arrayLengthIsAShort" (formula "19") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "arrayLengthNotNegative" (formula "19") (term "1,1,0"))
                  (rule "arrayLengthNotNegative" (formula "18") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "19") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthNotNegative" (formula "17") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "16") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "8"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "9"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "10"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "11"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "12"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "13"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "andRight" (formula "58"))
                  (branch "Case 1"
                     (rule "andRight" (formula "58"))
                     (branch "Case 1"
                        (rule "andRight" (formula "58"))
                        (branch "Case 1"
                           (rule "andRight" (formula "58"))
                           (branch "Case 1"
                              (rule "andRight" (formula "58"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "58"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "58") (inst "sk=i_17"))
                                    (rule "orRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "notRight" (formula "60"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "60"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_17"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "5")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "45"))
                                    (rule "allLeft" (formula "22") (inst "t=i_17"))
                                    (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                    (rule "leq_literals" (formula "22") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "22") (term "0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "closeFalse" (formula "22"))
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "58") (inst "sk=i_16"))
                                    (rule "orRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "notRight" (formula "60"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "60"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_16"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "46"))
                                    (rule "allLeft" (formula "23") (inst "t=i_16"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                    (rule "leq_literals" (formula "23") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "23") (term "0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "closeFalse" (formula "23"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "58") (inst "sk=i_15"))
                                 (rule "orRight" (formula "58"))
                                 (rule "orRight" (formula "58"))
                                 (rule "notRight" (formula "60"))
                                 (rule "inEqSimp_geqRight" (formula "60"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "60"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "47"))
                                 (rule "allLeft" (formula "24") (inst "t=i_15"))
                                 (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                 (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                 (rule "leq_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "58") (inst "sk=i_14"))
                              (rule "orRight" (formula "58"))
                              (rule "orRight" (formula "58"))
                              (rule "notRight" (formula "60"))
                              (rule "inEqSimp_geqRight" (formula "60"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "60"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_14"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "9")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "48"))
                              (rule "allLeft" (formula "25") (inst "t=i_14"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "58") (inst "sk=i_13"))
                           (rule "orRight" (formula "58"))
                           (rule "orRight" (formula "58"))
                           (rule "notRight" (formula "60"))
                           (rule "inEqSimp_geqRight" (formula "60"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "60"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_13"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "8")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "49"))
                           (rule "allLeft" (formula "26") (inst "t=i_13"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "26") (term "0,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "26"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "58") (inst "sk=i_12"))
                        (rule "orRight" (formula "58"))
                        (rule "orRight" (formula "58"))
                        (rule "notRight" (formula "60"))
                        (rule "inEqSimp_geqRight" (formula "60"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "60"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_12"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "11")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "50"))
                        (rule "allLeft" (formula "27") (inst "t=i_12"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "27") (term "0,0,1"))
                        (rule "leq_literals" (formula "27") (term "0,1"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "27") (term "0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "closeFalse" (formula "27"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "58") (inst "sk=f_2"))
                     (rule "allRight" (formula "58") (inst "sk=o_2"))
                     (rule "orRight" (formula "58"))
                     (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=f_2_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                     (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "60"))
                     (rule "closeTrue" (formula "60"))
                  )
               )
            )
            (branch "CUT: exc_0.<created> = TRUE FALSE"
               (builtin "One Step Simplification" (formula "14"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "1"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "arrayLengthIsAShort" (formula "21") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "cut_direct" (formula "22") (term "1"))
               (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_0) = TRUE TRUE"
                  (rule "instanceof_not_compatible_5" (formula "23") (term "0,0") (ifseqformula "22"))
                  (rule "instanceof_not_compatible_5" (formula "23") (term "1,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "39")) (ifInst ""  (formula "39")))
                  (rule "true_left" (formula "23"))
                  (rule "arrayLengthNotNegative" (formula "21") (term "1,1,0"))
                  (rule "arrayLengthNotNegative" (formula "20") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "21") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "arrayLengthIsAShort" (formula "19") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "arrayLengthNotNegative" (formula "19") (term "1,1,0"))
                  (rule "arrayLengthNotNegative" (formula "18") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "19") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthNotNegative" (formula "17") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "16") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "8"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "9"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "10"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "11"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "12"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "13"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "andRight" (formula "58"))
                  (branch "Case 1"
                     (rule "andRight" (formula "58"))
                     (branch "Case 1"
                        (rule "andRight" (formula "58"))
                        (branch "Case 1"
                           (rule "andRight" (formula "58"))
                           (branch "Case 1"
                              (rule "andRight" (formula "58"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "58"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "58") (inst "sk=i_11"))
                                    (rule "orRight" (formula "58"))
                                    (rule "notRight" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "60"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_11"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "5")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "45"))
                                    (rule "allLeft" (formula "22") (inst "t=i_11"))
                                    (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "22") (term "0,0,1"))
                                    (rule "leq_literals" (formula "22") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "58") (inst "sk=i_10"))
                                    (rule "orRight" (formula "58"))
                                    (rule "notRight" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "60"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_10"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "46"))
                                    (rule "allLeft" (formula "23") (inst "t=i_10"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "23") (term "0,0,1"))
                                    (rule "leq_literals" (formula "23") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "58") (inst "sk=i_9"))
                                 (rule "orRight" (formula "58"))
                                 (rule "orRight" (formula "58"))
                                 (rule "notRight" (formula "60"))
                                 (rule "inEqSimp_leqRight" (formula "59"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "60"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_9"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "47"))
                                 (rule "allLeft" (formula "24") (inst "t=i_9"))
                                 (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                 (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "24") (term "0,0,1"))
                                 (rule "leq_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "58") (inst "sk=i_8"))
                              (rule "orRight" (formula "58"))
                              (rule "orRight" (formula "58"))
                              (rule "notRight" (formula "60"))
                              (rule "inEqSimp_leqRight" (formula "59"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "60"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_8"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "48"))
                              (rule "allLeft" (formula "25") (inst "t=i_8"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "58") (inst "sk=i_7"))
                           (rule "orRight" (formula "58"))
                           (rule "notRight" (formula "59"))
                           (rule "orRight" (formula "59"))
                           (rule "inEqSimp_leqRight" (formula "59"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "60"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_7"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "49"))
                           (rule "allLeft" (formula "26") (inst "t=i_7"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                           (rule "add_literals" (formula "26") (term "0,0,1"))
                           (rule "leq_literals" (formula "26") (term "0,1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "26") (term "0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "closeFalse" (formula "26"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "58") (inst "sk=i_6"))
                        (rule "orRight" (formula "58"))
                        (rule "orRight" (formula "58"))
                        (rule "notRight" (formula "60"))
                        (rule "inEqSimp_leqRight" (formula "59"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "60"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_6"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "11")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "50"))
                        (rule "allLeft" (formula "27") (inst "t=i_6"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                        (rule "add_literals" (formula "27") (term "0,0,1"))
                        (rule "leq_literals" (formula "27") (term "0,1"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "58") (inst "sk=f_1"))
                     (rule "allRight" (formula "58") (inst "sk=o_1"))
                     (rule "orRight" (formula "58"))
                     (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=f_1_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                     (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "60"))
                     (rule "closeTrue" (formula "60"))
                  )
               )
               (branch "CUT: verif.selectvoting.system.core.MixServer.MalformedData::instance(exc_0) = TRUE FALSE"
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "arrayLengthNotNegative" (formula "21") (term "1,1,0"))
                  (rule "arrayLengthNotNegative" (formula "20") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "21") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "arrayLengthIsAShort" (formula "19") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "arrayLengthNotNegative" (formula "19") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "18") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "arrayLengthNotNegative" (formula "18") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthNotNegative" (formula "17") (term "1,1,0"))
                  (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
                  (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "8"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "9"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "10"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "11"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "12"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "13"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "andRight" (formula "59"))
                  (branch "Case 1"
                     (rule "andRight" (formula "59"))
                     (branch "Case 1"
                        (rule "andRight" (formula "59"))
                        (branch "Case 1"
                           (rule "andRight" (formula "59"))
                           (branch "Case 1"
                              (rule "andRight" (formula "59"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "59"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "59") (inst "sk=i_5"))
                                    (rule "orRight" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "notRight" (formula "61"))
                                    (rule "inEqSimp_geqRight" (formula "61"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "61"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "5")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "46"))
                                    (rule "allLeft" (formula "22") (inst "t=i_5"))
                                    (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "22") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "2"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "inEqSimp_homoInEq1" (formula "22"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                                    (rule "add_literals" (formula "22") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0"))
                                    (rule "add_zero_right" (formula "22") (term "0"))
                                    (rule "leq_literals" (formula "22"))
                                    (rule "closeFalse" (formula "22"))
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "59") (inst "sk=i_4"))
                                    (rule "orRight" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "notRight" (formula "61"))
                                    (rule "inEqSimp_geqRight" (formula "61"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "61"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "47"))
                                    (rule "allLeft" (formula "23") (inst "t=i_4"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                    (rule "leq_literals" (formula "23") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "59") (inst "sk=i_3"))
                                 (rule "orRight" (formula "59"))
                                 (rule "orRight" (formula "59"))
                                 (rule "notRight" (formula "61"))
                                 (rule "inEqSimp_geqRight" (formula "61"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "61"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "48"))
                                 (rule "allLeft" (formula "24") (inst "t=i_3"))
                                 (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "24") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "24"))
                                 (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                 (rule "add_literals" (formula "24") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0"))
                                 (rule "add_zero_right" (formula "24") (term "0"))
                                 (rule "leq_literals" (formula "24"))
                                 (rule "closeFalse" (formula "24"))
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "59") (inst "sk=i_2"))
                              (rule "orRight" (formula "59"))
                              (rule "orRight" (formula "59"))
                              (rule "notRight" (formula "61"))
                              (rule "inEqSimp_leqRight" (formula "60"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "61"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "49"))
                              (rule "allLeft" (formula "25") (inst "t=i_2"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "25") (term "0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "59") (inst "sk=i_1"))
                           (rule "orRight" (formula "59"))
                           (rule "orRight" (formula "59"))
                           (rule "notRight" (formula "61"))
                           (rule "inEqSimp_geqRight" (formula "61"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "61"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "8")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "50"))
                           (rule "allLeft" (formula "26") (inst "t=i_1"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "26") (term "0,0,1"))
                           (rule "leq_literals" (formula "26") (term "0,1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "26") (term "0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "closeFalse" (formula "26"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "59") (inst "sk=i_0"))
                        (rule "orRight" (formula "59"))
                        (rule "notRight" (formula "60"))
                        (rule "orRight" (formula "60"))
                        (rule "inEqSimp_geqRight" (formula "61"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "61"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")) (ifInst ""  (formula "11")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "17") (ifseqformula "51"))
                        (rule "allLeft" (formula "27") (inst "t=i_0"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "27") (term "0,0,1"))
                        (rule "leq_literals" (formula "27") (term "0,1"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "59") (inst "sk=f_0"))
                     (rule "allRight" (formula "59") (inst "sk=o_0"))
                     (rule "orRight" (formula "59"))
                     (rule "pullOutSelect" (formula "60") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                     (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "61"))
                     (rule "closeTrue" (formula "61"))
                  )
               )
            )
         )
         (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
            (builtin "One Step Simplification" (formula "38"))
            (rule "closeTrue" (formula "38"))
         )
      )
      (branch "if exc_0 instanceof java.lang.Throwable false"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Pre (checkAndRemoveSignature)"
   (builtin "One Step Simplification" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "8"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "2"))
   (rule "eqSymm" (formula "6"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "replace_known_right" (formula "11") (term "0,1,0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "7")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "4")))
   (rule "closeTrue" (formula "11"))
)
)

}
