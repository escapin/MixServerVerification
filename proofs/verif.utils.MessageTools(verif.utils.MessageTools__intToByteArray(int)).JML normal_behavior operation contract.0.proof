\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Nov 18 18:40:46 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=80000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Fri Nov 18 18:40:46 CET 2016
name=verif.utils.MessageTools[verif.utils.MessageTools\\:\\:intToByteArray(int)].JML normal_behavior operation contract.0
contract=verif.utils.MessageTools[verif.utils.MessageTools\\:\\:intToByteArray(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "b47d5398afca7e5b5ae9d483bbd792dd953e71bc"))

(autoModeTime "4566")

(branch "dummy ID"
(rule "defOfint2seq" (formula "1") (term "1,0,0,0,0,1,1") (newnames "value,result,exc,heapAtPre,o,f") (userinteraction))
(builtin "One Step Simplification" (formula "1"))
(rule "translateJavaCastByte" (formula "1") (term "0,0,1,0,0,0,0,1,1"))
(rule "translateJavaCastByte" (formula "1") (term "0,1,1,1,1,0,0,0,0,1,1"))
(rule "translateJavaCastByte" (formula "1") (term "0,0,1,1,0,0,0,0,1,1"))
(rule "translateJavaCastByte" (formula "1") (term "0,0,1,1,1,0,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,0,1,0,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,1,1,1,0,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,0,1,1,0,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,0,1,1,1,0,0,0,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "0,0,0,1,0,0,0,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "0,0,0,1,1,0,0,0,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "0,0,0,1,1,1,0,0,0,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "0,0,0,0,1,0,0,0,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "0,0,0,0,1,1,0,0,0,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "0,0,0,0,0,1,0,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "4") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "4") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "4") (term "1"))
(builtin "One Step Simplification" (formula "4"))
(rule "array2seqDef" (formula "4") (term "1,0,0,0,0,1") (inst "u=u"))
(rule "eqSymm" (formula "4") (term "0,0,0,0,1"))
(rule "eqSeqConcat" (formula "4") (term "0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "eqSeqSingleton" (formula "4") (term "1,0,0,0,0,0,1"))
(rule "lenOfSeqDef" (formula "4") (term "0,0,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,0,0,0,0,0,0,1"))
(rule "times_zero_2" (formula "4") (term "1,1,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "1,0,0,0,0,0,0,0,1"))
(rule "lenOfSeqConcat" (formula "4") (term "1,1,0,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_addAssoc" (formula "4") (term "1,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,1,0,0,0,0,0,0,1"))
(rule "lenOfSeqDef" (formula "4") (term "2,0,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,2,0,1,0,0,0,0,1"))
(rule "times_zero_2" (formula "4") (term "1,1,2,0,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "1,2,0,1,0,0,0,0,1"))
(rule "lenOfSeqSub" (formula "4") (term "0,0,1,0,0,0,0,0,1"))
(rule "sub_literals" (formula "4") (term "1,0,0,1,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "equal_literals" (formula "4") (term "1,0,1,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "less_literals" (formula "4") (term "0,1,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "lenOfSeqConcat" (formula "4") (term "1,1,0,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_literals" (formula "4") (term "1,1,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "1,0,0,0,0,0,0,1"))
(rule "ifEqualsInteger" (formula "4") (term "0,0,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,0,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,2,0,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "0,0,2,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,2,0,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,2,0,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,2,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,0,0,0,0,0,0,1"))
(rule "getOfSeqSub" (formula "4") (term "0,1,0,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,0,1,0,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,0,1,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_zero_left" (formula "4") (term "1,1,0,1,0,0,0,0,0,1"))
(rule "sub_literals" (formula "4") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "less_literals" (formula "4") (term "0,0,1,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "getOfSeqDef" (formula "4") (term "0,1,0,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "1,0,1,0,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,0,1,0,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,0,1,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_zero_left" (formula "4") (term "0,2,1,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "times_zero_2" (formula "4") (term "1,1,0,0,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "eqSeqConcat" (formula "4") (term "1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "eqSeqSingleton" (formula "4") (term "1,0,1,0,0,0,0,1"))
(rule "lenOfSeqSub" (formula "4") (term "0,0,0,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,0,0,0,1,0,0,0,0,1"))
(rule "lenOfSeqConcat" (formula "4") (term "1,1,0,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_literals" (formula "4") (term "1,1,0,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "1,0,0,1,0,0,0,0,1"))
(rule "lenOfSeqSub" (formula "4") (term "0,0,1,0,1,0,0,0,0,1"))
(rule "sub_literals" (formula "4") (term "1,0,0,1,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "equal_literals" (formula "4") (term "1,0,1,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "less_literals" (formula "4") (term "0,1,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "ifEqualsInteger" (formula "4") (term "0,0,1,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,0,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_homoEq" (formula "4") (term "1,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,1,0,0,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,1,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,1,0,0,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,1,0,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,1,0,0,1,0,0,0,0,1"))
(rule "lenOfSeqSub" (formula "4") (term "2,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,2,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,2,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,2,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,2,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,2,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,2,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,2,0,1,1,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "4") (term "1,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,1,0,0,1,0,0,0,0,1"))
(rule "ifEqualsInteger" (formula "4") (term "1,0,0,1,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,1,0,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,2,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,2,0,1,1,0,0,0,0,1"))
(rule "getOfSeqSub" (formula "4") (term "0,1,0,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,0,1,0,1,0,0,0,0,1"))
(rule "add_zero_left" (formula "4") (term "1,1,0,1,0,1,0,0,0,0,1"))
(rule "sub_literals" (formula "4") (term "1,1,0,0,1,0,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,0,1,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "less_literals" (formula "4") (term "0,0,1,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "getOfSeqSub" (formula "4") (term "0,1,0,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,0,1,0,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,0,1,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_zero_left" (formula "4") (term "1,1,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,0,1,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,0,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,0,0,1,0,1,0,0,0,0,1"))
(rule "getOfSeqDef" (formula "4") (term "1,0,1,0,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "1,1,0,1,0,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,1,0,1,0,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,1,0,1,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_zero_right" (formula "4") (term "0,2,1,1,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,1,0,1,0,1,0,0,0,0,1"))
(rule "times_zero_2" (formula "4") (term "1,1,0,1,0,1,0,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "1,0,1,0,1,0,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "0,0,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,1,0,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,1,0,1,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,1,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,0,1,0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,1,0,1,0,1,0,0,0,0,1"))
(rule "eqSeqConcat" (formula "4") (term "1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_literals" (formula "4") (term "1,0,0,1,1,0,0,0,0,1"))
(rule "eqSeqSingleton" (formula "4") (term "1,1,1,0,0,0,0,1"))
(rule "lenOfSeqSub" (formula "4") (term "0,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,0,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,0,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,0,0,0,1,1,0,0,0,0,1"))
(rule "eqSeqSingleton" (formula "4") (term "1,0,1,1,0,0,0,0,1"))
(rule "lenOfSeqSub" (formula "4") (term "0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,0,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,0,0,1,1,1,0,0,0,0,1"))
(rule "lenOfSeqSub" (formula "4") (term "2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "ifEqualsInteger" (formula "4") (term "0,0,1,1,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,0,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_homoEq" (formula "4") (term "1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,1,0,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,1,0,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,1,0,0,1,1,0,0,0,0,1"))
(rule "lenOfSeqSub" (formula "4") (term "0,0,1,0,1,1,0,0,0,0,1"))
(rule "sub_literals" (formula "4") (term "1,0,0,1,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "less_literals" (formula "4") (term "0,0,1,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "lenOfSeqSub" (formula "4") (term "1,0,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,1,0,0,0,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,1,0,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,1,0,0,0,1,1,1,0,0,0,0,1"))
(rule "lenOfSeqSub" (formula "4") (term "1,1,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,1,1,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,1,1,0,0,1,1,1,0,0,0,0,1"))
(rule "ifEqualsInteger" (formula "4") (term "0,1,1,1,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,0,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_homoEq" (formula "4") (term "1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,1,0,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,1,0,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,1,0,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,1,0,0,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,0,1,0,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,1,0,1,0,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "4") (term "1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,1,0,0,1,1,0,0,0,0,1"))
(rule "ifEqualsInteger" (formula "4") (term "1,0,0,1,1,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,1,0,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_homoEq" (formula "4") (term "1,1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,1,1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,1,1,0,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,1,1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "4") (term "1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,1,0,1,1,1,0,0,0,0,1"))
(rule "ifEqualsInteger" (formula "4") (term "1,0,1,1,1,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,1,0,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_homoEq" (formula "4") (term "1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,1,1,0,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "4") (term "1,1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,1,1,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,1,1,0,0,1,1,0,0,0,0,1"))
(rule "ifEqualsInteger" (formula "4") (term "1,1,0,0,1,1,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,1,1,0,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_sepNegMonomial" (formula "4") (term "1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,1,1,0,1,1,1,0,0,0,0,1"))
(rule "ifEqualsInteger" (formula "4") (term "1,1,0,1,1,1,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,1,1,0,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_homoEq" (formula "4") (term "1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "4") (term "1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "ifEqualsInteger" (formula "4") (term "1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "equal_literals" (formula "4") (term "1,1,1,1,1,0,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,1,0,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,2,0,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,0,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,0,0,0,1,1,1,0,0,0,0,1"))
(rule "getOfSeqSub" (formula "4") (term "0,1,0,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,0,1,0,1,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,0,1,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_zero_left" (formula "4") (term "1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "sub_literals" (formula "4") (term "1,0,0,1,0,1,1,0,0,0,0,1"))
(rule "less_literals" (formula "4") (term "0,0,1,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "getOfSeqSub" (formula "4") (term "0,1,0,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,0,1,0,1,1,0,0,0,0,1"))
(rule "add_zero_left" (formula "4") (term "1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,0,1,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,0,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,0,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0,1,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "0,0,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,1,1,0,0,0,0,1"))
(rule "getOfSeqSub" (formula "4") (term "0,1,1,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,0,1,1,1,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,0,1,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_zero_left" (formula "4") (term "1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,0,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,0,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1,1,1,0,0,0,0,1"))
(rule "getOfSeqSub" (formula "4") (term "1,0,1,0,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,1,0,1,0,1,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,1,0,1,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_literals" (formula "4") (term "1,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "getOfSeqDef" (formula "4") (term "1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "1,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_zero_right" (formula "4") (term "0,2,1,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "times_zero_2" (formula "4") (term "1,1,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "1,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "getOfSeqSub" (formula "4") (term "1,0,1,1,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,1,0,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,1,0,1,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,1,0,1,1,1,1,0,0,0,0,1"))
(rule "getOfSeqSub" (formula "4") (term "1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_literals" (formula "4") (term "1,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,1,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "getOfSeqDef" (formula "4") (term "1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "1,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "castDel" (formula "4") (term "2,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "leq_literals" (formula "4") (term "0,0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "add_zero_right" (formula "4") (term "0,2,1,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "times_zero_2" (formula "4") (term "1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "1,0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "4") (term "0,0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1,0,1,1,1,1,0,0,0,0,1"))
(rule "applyEq_and_int0" (formula "4") (term "1,1,0,0,1,1,0,0,0,0,1"))
(rule "qeq_literals" (formula "4") (term "0,1,1,0,0,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "applyEq_and_int0" (formula "4") (term "1,1,1,0,1,1,1,0,0,0,0,1"))
(rule "qeq_literals" (formula "4") (term "0,1,1,1,0,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "applyEq_and_int0" (formula "4") (term "1,0,0,1,0,0,0,0,1"))
(rule "qeq_literals" (formula "4") (term "0,1,0,0,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "applyEq_and_int0" (formula "4") (term "0,0,0,0,0,0,1"))
(rule "qeq_literals" (formula "4") (term "0,0,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_intToByteArray,savedHeapBefore_intToByteArray"))
(builtin "One Step Simplification" (formula "4"))
(rule "variableDeclarationAssign" (formula "4") (term "1"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "result_1"))
(rule "arrayCreation" (formula "4") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "x_arr"))
(rule "variableDeclarationAssign" (formula "4") (term "1"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "dim0"))
(rule "assignment" (formula "4") (term "1"))
(builtin "One Step Simplification" (formula "4"))
(rule "ifUnfold" (formula "4") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "4") (term "1"))
(builtin "One Step Simplification" (formula "4"))
(rule "less_literals" (formula "4") (term "0,0,1,0"))
(builtin "One Step Simplification" (formula "4"))
(rule "ifSplit" (formula "4"))
(branch "if x true"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "if x false"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "4") (term "1") (inst "#v0=x_arr_1"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "x_arr_1"))
   (rule "variableDeclarationAssign" (formula "4") (term "1"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "length_1"))
   (rule "assignment" (formula "4") (term "1"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_<createArray>,savedHeapBefore_<createArray>"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "newObject"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "4") (term "1") (inst "#v0=x_arr_2"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "x_arr_2"))
   (rule "variableDeclarationAssign" (formula "4") (term "1"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "length_2"))
   (rule "assignment" (formula "4") (term "1"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "allocateInstanceWithLength" (formula "4"))
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "arrayLengthIsAShort" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "methodCall" (formula "8") (term "1"))
   (branch "Normal Execution (newObject != null )"
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
      (rule "false_right" (formula "8"))
      (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<createArrayHelper>,savedHeapBefore_<createArrayHelper>"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "assignment_write_attribute_this" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "methodCallWithinClass" (formula "8") (term "1"))
      (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "arrayInitialisation" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_elimSub" (formula "8") (term "2,1,0,1,0"))
      (rule "mul_literals" (formula "8") (term "1,2,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "8") (term "2,1,0,1,0"))
      (rule "applyEq" (formula "8") (term "1,2,1,0,1,0") (ifseqformula "1"))
      (rule "add_literals" (formula "8") (term "2,1,0,1,0"))
      (rule "methodCallEmpty" (formula "8") (term "1"))
      (rule "blockEmpty" (formula "8") (term "1"))
      (rule "assignment_write_attribute_this" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "methodCallReturnIgnoreResult" (formula "8") (term "1"))
      (rule "blockEmpty" (formula "8") (term "1"))
      (rule "methodCallReturn" (formula "8") (term "1"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "methodCallEmpty" (formula "8") (term "1"))
      (rule "blockEmpty" (formula "8") (term "1"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "blockEmpty" (formula "8") (term "1"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "eval_order_array_access3" (formula "8") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_3"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x_3"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_3"))
      (rule "compound_assignment_5_nonsimple" (formula "8") (term "1"))
      (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x_4"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_4"))
      (rule "compound_less_equal_than_comparison_1" (formula "8") (term "1") (inst "#v0=x_5"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_5"))
      (rule "eval_order_array_access6" (formula "8") (term "1") (inst "#v0=x_arr_4"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_4"))
      (rule "remove_parentheses_right" (formula "8") (term "1"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "assignment_read_length" (formula "8") (term "1"))
      (branch "Normal Execution (x_arr_4 != null)"
         (builtin "One Step Simplification" (formula "9"))
         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
         (rule "false_right" (formula "8"))
         (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "1"))
         (rule "less_equal_than_comparison_simple" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "leq_literals" (formula "8") (term "0,0,1,0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "ifElseSplit" (formula "8"))
         (branch "if x_4 true"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_4 false"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "less_than_comparison_simple" (formula "8") (term "1"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "less_literals" (formula "8") (term "0,0,1,0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "blockEmpty" (formula "8") (term "1"))
            (rule "ifSplit" (formula "8"))
            (branch "if x_3 true"
               (builtin "One Step Simplification" (formula "9"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_3 false"
               (builtin "One Step Simplification" (formula "9"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
               (rule "compound_byte_cast_expression" (formula "8") (term "1") (inst "#v=x_3"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_6"))
               (rule "remove_parentheses_right" (formula "8") (term "1"))
               (rule "assignmentModulo" (formula "8") (term "1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
               (rule "equal_literals" (formula "8") (term "0,0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "narrowingByteCastInt" (formula "8") (term "1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "translateJavaCastByte" (formula "8") (term "0,1,0"))
               (rule "assignment_to_primitive_array_component" (formula "8") (term "1"))
               (branch "Normal Execution (x_arr_3 != null)"
                  (builtin "One Step Simplification" (formula "9"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "qeq_literals" (formula "1") (term "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "eval_order_array_access3" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
                  (rule "variableDeclarationAssign" (formula "9") (term "1"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_arr_5"))
                  (rule "assignment" (formula "9") (term "1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "variableDeclarationAssign" (formula "9") (term "1"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_7"))
                  (rule "assignment" (formula "9") (term "1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                  (rule "mul_literals" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x_8"))
                  (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_8"))
                  (rule "compound_assignment_5_nonsimple" (formula "8") (term "1"))
                  (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x_9"))
                  (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_9"))
                  (rule "compound_less_equal_than_comparison_1" (formula "8") (term "1") (inst "#v0=x_10"))
                  (rule "variableDeclarationAssign" (formula "8") (term "1"))
                  (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_10"))
                  (rule "eval_order_array_access6" (formula "8") (term "1") (inst "#v0=x_arr_6"))
                  (rule "variableDeclarationAssign" (formula "8") (term "1"))
                  (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_6"))
                  (rule "remove_parentheses_right" (formula "8") (term "1"))
                  (rule "assignment" (formula "8") (term "1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "assignment_read_length" (formula "8") (term "1"))
                  (branch "Normal Execution (x_arr_6 != null)"
                     (builtin "One Step Simplification" (formula "9"))
                     (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
                     (rule "false_right" (formula "8"))
                     (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "1"))
                     (rule "less_equal_than_comparison_simple" (formula "8") (term "1"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "leq_literals" (formula "8") (term "0,0,1,0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "ifElseSplit" (formula "8"))
                     (branch "if x_9 true"
                        (builtin "One Step Simplification" (formula "9"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_9 false"
                        (builtin "One Step Simplification" (formula "9"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "less_than_comparison_simple" (formula "8") (term "1"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "less_literals" (formula "8") (term "0,0,1,0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "blockEmpty" (formula "8") (term "1"))
                        (rule "ifSplit" (formula "8"))
                        (branch "if x_8 true"
                           (builtin "One Step Simplification" (formula "9"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_8 false"
                           (builtin "One Step Simplification" (formula "9"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "variableDeclarationAssign" (formula "8") (term "1"))
                           (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_11"))
                           (rule "compound_byte_cast_expression" (formula "8") (term "1") (inst "#v=x_12"))
                           (rule "variableDeclarationAssign" (formula "8") (term "1"))
                           (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_12"))
                           (rule "remove_parentheses_right" (formula "8") (term "1"))
                           (rule "compound_modulo_1" (formula "8") (term "1") (inst "#v=x_13"))
                           (rule "variableDeclarationAssign" (formula "8") (term "1"))
                           (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_13"))
                           (rule "remove_parentheses_right" (formula "8") (term "1"))
                           (rule "assignmentDivisionInt" (formula "8") (term "1"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "translateJavaDivInt" (formula "8") (term "0,1,0,1"))
                           (rule "equal_literals" (formula "8") (term "0,0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "assignmentModulo" (formula "8") (term "1"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
                           (rule "equal_literals" (formula "8") (term "0,0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "narrowingByteCastInt" (formula "8") (term "1"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "translateJavaCastByte" (formula "8") (term "0,1,0"))
                           (rule "assignment_to_primitive_array_component" (formula "8") (term "1"))
                           (branch "Normal Execution (x_arr_5 != null)"
                              (builtin "One Step Simplification" (formula "9"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                              (rule "qeq_literals" (formula "1") (term "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_ltToLeq" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "eval_order_array_access3" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
                              (rule "variableDeclarationAssign" (formula "9") (term "1"))
                              (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_arr_7"))
                              (rule "assignment" (formula "9") (term "1"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "variableDeclarationAssign" (formula "9") (term "1"))
                              (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_14"))
                              (rule "assignment" (formula "9") (term "1"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                              (rule "mul_literals" (formula "1") (term "1,0"))
                              (rule "add_literals" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x_15"))
                              (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_15"))
                              (rule "compound_assignment_5_nonsimple" (formula "8") (term "1"))
                              (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x_16"))
                              (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_16"))
                              (rule "compound_less_equal_than_comparison_1" (formula "8") (term "1") (inst "#v0=x_17"))
                              (rule "variableDeclarationAssign" (formula "8") (term "1"))
                              (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_17"))
                              (rule "eval_order_array_access6" (formula "8") (term "1") (inst "#v0=x_arr_8"))
                              (rule "variableDeclarationAssign" (formula "8") (term "1"))
                              (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_8"))
                              (rule "remove_parentheses_right" (formula "8") (term "1"))
                              (rule "assignment" (formula "8") (term "1"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "assignment_read_length" (formula "8") (term "1"))
                              (branch "Normal Execution (x_arr_8 != null)"
                                 (builtin "One Step Simplification" (formula "9"))
                                 (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
                                 (rule "false_right" (formula "8"))
                                 (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "1"))
                                 (rule "less_equal_than_comparison_simple" (formula "8") (term "1"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "leq_literals" (formula "8") (term "0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "ifElseSplit" (formula "8"))
                                 (branch "if x_16 true"
                                    (builtin "One Step Simplification" (formula "9"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if x_16 false"
                                    (builtin "One Step Simplification" (formula "9"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "less_than_comparison_simple" (formula "8") (term "1"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "less_literals" (formula "8") (term "0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "blockEmpty" (formula "8") (term "1"))
                                    (rule "ifSplit" (formula "8"))
                                    (branch "if x_15 true"
                                       (builtin "One Step Simplification" (formula "9"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_15 false"
                                       (builtin "One Step Simplification" (formula "9"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                       (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_18"))
                                       (rule "compound_byte_cast_expression" (formula "8") (term "1") (inst "#v=x_19"))
                                       (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                       (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_19"))
                                       (rule "remove_parentheses_right" (formula "8") (term "1"))
                                       (rule "compound_modulo_1" (formula "8") (term "1") (inst "#v=x_20"))
                                       (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                       (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_20"))
                                       (rule "remove_parentheses_right" (formula "8") (term "1"))
                                       (rule "compound_division_1" (formula "8") (term "1") (inst "#v=x_21"))
                                       (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                       (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_21"))
                                       (rule "assignmentDivisionInt" (formula "8") (term "1"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "translateJavaDivInt" (formula "8") (term "0,1,0,1"))
                                       (rule "equal_literals" (formula "8") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "assignmentDivisionInt" (formula "8") (term "1"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "translateJavaDivInt" (formula "8") (term "0,1,0,1"))
                                       (rule "equal_literals" (formula "8") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "assignmentModulo" (formula "8") (term "1"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
                                       (rule "equal_literals" (formula "8") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "narrowingByteCastInt" (formula "8") (term "1"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "translateJavaCastByte" (formula "8") (term "0,1,0"))
                                       (rule "assignment_to_primitive_array_component" (formula "8") (term "1"))
                                       (branch "Normal Execution (x_arr_7 != null)"
                                          (builtin "One Step Simplification" (formula "9"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                                          (rule "qeq_literals" (formula "1") (term "1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "eval_order_array_access3" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
                                          (rule "variableDeclarationAssign" (formula "9") (term "1"))
                                          (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_arr_9"))
                                          (rule "assignment" (formula "9") (term "1"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "variableDeclarationAssign" (formula "9") (term "1"))
                                          (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_22"))
                                          (rule "assignment" (formula "9") (term "1"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                                          (rule "mul_literals" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x_23"))
                                          (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_23"))
                                          (rule "compound_assignment_5_nonsimple" (formula "8") (term "1"))
                                          (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x_24"))
                                          (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_24"))
                                          (rule "compound_less_equal_than_comparison_1" (formula "8") (term "1") (inst "#v0=x_25"))
                                          (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                          (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_25"))
                                          (rule "eval_order_array_access6" (formula "8") (term "1") (inst "#v0=x_arr_10"))
                                          (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                          (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_10"))
                                          (rule "remove_parentheses_right" (formula "8") (term "1"))
                                          (rule "assignment" (formula "8") (term "1"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "assignment_read_length" (formula "8") (term "1"))
                                          (branch "Normal Execution (x_arr_10 != null)"
                                             (builtin "One Step Simplification" (formula "9"))
                                             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
                                             (rule "false_right" (formula "8"))
                                             (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "1"))
                                             (rule "less_equal_than_comparison_simple" (formula "8") (term "1"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "leq_literals" (formula "8") (term "0,0,1,0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "ifElseSplit" (formula "8"))
                                             (branch "if x_24 true"
                                                (builtin "One Step Simplification" (formula "9"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "if x_24 false"
                                                (builtin "One Step Simplification" (formula "9"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "less_than_comparison_simple" (formula "8") (term "1"))
                                                (builtin "One Step Simplification" (formula "8"))
                                                (rule "less_literals" (formula "8") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "8"))
                                                (rule "blockEmpty" (formula "8") (term "1"))
                                                (rule "ifSplit" (formula "8"))
                                                (branch "if x_23 true"
                                                   (builtin "One Step Simplification" (formula "9"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "if x_23 false"
                                                   (builtin "One Step Simplification" (formula "9"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                                   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_26"))
                                                   (rule "compound_byte_cast_expression" (formula "8") (term "1") (inst "#v=x_27"))
                                                   (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                                   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_27"))
                                                   (rule "remove_parentheses_right" (formula "8") (term "1"))
                                                   (rule "compound_modulo_1" (formula "8") (term "1") (inst "#v=x_28"))
                                                   (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                                   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_28"))
                                                   (rule "remove_parentheses_right" (formula "8") (term "1"))
                                                   (rule "compound_division_1" (formula "8") (term "1") (inst "#v=x_29"))
                                                   (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                                   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_29"))
                                                   (rule "compound_division_1" (formula "8") (term "1") (inst "#v=x_30"))
                                                   (rule "variableDeclarationAssign" (formula "8") (term "1"))
                                                   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_30"))
                                                   (rule "assignmentDivisionInt" (formula "8") (term "1"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "translateJavaDivInt" (formula "8") (term "0,1,0,1"))
                                                   (rule "equal_literals" (formula "8") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "assignmentDivisionInt" (formula "8") (term "1"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "translateJavaDivInt" (formula "8") (term "0,1,0,1"))
                                                   (rule "equal_literals" (formula "8") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "assignmentDivisionInt" (formula "8") (term "1"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "translateJavaDivInt" (formula "8") (term "0,1,0,1"))
                                                   (rule "equal_literals" (formula "8") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "assignmentModulo" (formula "8") (term "1"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
                                                   (rule "equal_literals" (formula "8") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "narrowingByteCastInt" (formula "8") (term "1"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "translateJavaCastByte" (formula "8") (term "0,1,0"))
                                                   (rule "assignment_to_primitive_array_component" (formula "8") (term "1"))
                                                   (branch "Normal Execution (x_arr_9 != null)"
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                                                      (rule "qeq_literals" (formula "1") (term "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_ltToLeq" (formula "1"))
                                                      (rule "add_zero_right" (formula "1") (term "0"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                                      (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                                                      (rule "mul_literals" (formula "1") (term "1,0"))
                                                      (rule "add_literals" (formula "1") (term "0"))
                                                      (rule "leq_literals" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "methodCallReturn" (formula "8") (term "1"))
                                                      (rule "assignment" (formula "8") (term "1"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "methodCallEmpty" (formula "8") (term "1"))
                                                      (rule "tryEmpty" (formula "8") (term "1"))
                                                      (rule "emptyModality" (formula "8") (term "1"))
                                                      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
                                                      (rule "eqSymm" (formula "8") (term "1,0,0,1"))
                                                      (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,0,1,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,0,0,0,1,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,1,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,0,1,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,0,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,0,0,0,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,0,0,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,0,0,0,0,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,1,1,1,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,1,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "1,1,1,0,0,1,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "8") (term "0,0,1,1,1,1,0,0,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,1,1,0,0,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,1,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,0,0,1,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "1,0,1,1,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,0,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,0,0,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "1,0,0,1,1,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "8") (term "1,1,0,0,1,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "add_literals" (formula "8") (term "1,0,0,1,0,1,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,0,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0,0,1,1,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,1,1,0"))
                                                      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,1,1,1,0"))
                                                      (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,1,1,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,1,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "1,1,1,1,1,0,0,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "8") (term "0,1,0,0,0,0,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,0,0,1,1,1,0"))
                                                      (rule "leq_literals" (formula "8") (term "0,0,0,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,1,1,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,1,0"))
                                                      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,1,1,0"))
                                                      (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,1,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,0,1,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "0,0,1,1,0,1,0,0,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,0,1,0,0,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "add_literals" (formula "8") (term "1,0,1,0,0,0,1,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,1,1,0,0,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,1,1,0,0,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,1,1,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,1,1,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,1,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,0,1,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,1,0,1,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,1,0,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,1,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,0,0,1,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,1,0,1,0,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,0,1,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,0,1,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,1,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,1,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,1,0,1,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,1,1,0"))
                                                      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,1,1,0"))
                                                      (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,1,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "0,1,0,0,0,1,0,1,1,0") (ifseqformula "1"))
                                                      (rule "mul_literals" (formula "8") (term "1,0,0,0,1,0,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,1,0,1,1,0"))
                                                      (rule "leq_literals" (formula "8") (term "0,0,1,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,0,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,0,0,0,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,1,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,1,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0,1,1,1,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,1,1,0"))
                                                      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,1,1,1,1,0"))
                                                      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,1,1,1,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,1,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,1,0,1,1,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,1,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,1,0,0,1,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "mul_literals" (formula "8") (term "1,0,0,1,0,1,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,1,0,1,1,1,1,0"))
                                                      (rule "leq_literals" (formula "8") (term "0,1,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "1,1,0,0,0,1,1,0") (ifseqformula "1"))
                                                      (rule "add_literals" (formula "8") (term "1,0,0,0,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,0,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0,0,1,1,1,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,1,1,1,0"))
                                                      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,1,1,1,1,0"))
                                                      (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,1,1,1,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,1,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,1,1,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,1,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,1,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,1,0,0,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,1,0,0,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "1,0,1,0,0,0,0,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,0,0,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,1,0,0,0,0,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,1,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,0,0,1,1,1,1,0"))
                                                      (rule "leq_literals" (formula "8") (term "0,0,0,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,1,1,1,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,1,1,0"))
                                                      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,1,1,1,0"))
                                                      (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,1,1,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,0,1,1,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "1,1,0,1,0,0,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "add_literals" (formula "8") (term "1,0,1,0,0,0,1,1,1,1,0"))
                                                      (rule "applyEq" (formula "8") (term "1,0,0,0,1,0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,0,1,0,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,0,1,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,1,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,1,0,0,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,1,1,1,0"))
                                                      (rule "leq_literals" (formula "8") (term "0,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,0,1,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,1,0,0,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,1,1,0"))
                                                      (rule "add_literals" (formula "8") (term "0,0,0,1,1,1,1,0"))
                                                      (rule "leq_literals" (formula "8") (term "0,0,1,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "applyEq" (formula "8") (term "0,0,0,0,1,1,1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "8") (term "0,0,0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "qeq_literals" (formula "8") (term "0,1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "jmod_axiom" (formula "8") (term "1,1,1,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1,1,0"))
                                                      (rule "jmod_axiom" (formula "8") (term "3,0,0,0,0,0,0,1,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "8") (term "1,3,0,0,0,0,0,0,1,1,0"))
                                                      (rule "jmod_axiom" (formula "8") (term "3,0,0,0,0,0,1,0,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "8") (term "1,3,0,0,0,0,0,1,0,0,1"))
                                                      (rule "jmod_axiom" (formula "8") (term "3,0,0,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "8") (term "1,3,0,0,0,0,0,0,0"))
                                                      (rule "jmod_axiom" (formula "8") (term "3,0,0,0,0,0,1,1,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "8") (term "1,3,0,0,0,0,0,1,1,1,0"))
                                                      (rule "jmod_axiom" (formula "8") (term "3,0,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "8") (term "1,3,0,0,0,0,0,0,1,0"))
                                                      (rule "pullOutSelect" (formula "8") (term "0,0,1,1,0") (inst "selectSK=arr_0"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "equal_literals" (formula "1") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "equal_literals" (formula "1") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "0"))
                                                      (rule "applyEqReverse" (formula "9") (term "0,0,1,1,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "pullOutSelect" (formula "8") (term "0,0,0") (inst "selectSK=arr_1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "0"))
                                                      (rule "applyEqReverse" (formula "9") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "pullOutSelect" (formula "8") (term "0,0,0") (inst "selectSK=arr_2"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "equal_literals" (formula "1") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "0"))
                                                      (rule "applyEqReverse" (formula "9") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "pullOutSelect" (formula "8") (term "0,0") (inst "selectSK=arr_3"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "equal_literals" (formula "1") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "equal_literals" (formula "1") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "equal_literals" (formula "1") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "0"))
                                                      (rule "applyEqReverse" (formula "9") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (rule "allRight" (formula "9") (inst "sk=f_0"))
                                                      (rule "allRight" (formula "9") (inst "sk=o_0"))
                                                      (rule "orRight" (formula "9"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=f_0_0"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "10"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
                                                      (rule "simplifySelectOfMemset" (formula "1"))
                                                      (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_6"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_7"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_8"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_9"))
                                                      (rule "simplifySelectOfCreate" (formula "1"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                                                      (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "17"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "commute_and" (formula "10") (term "0,0"))
                                                      (rule "commute_and" (formula "9") (term "0,0"))
                                                      (rule "commute_and" (formula "8") (term "0,0"))
                                                      (rule "commute_and" (formula "7") (term "0,0"))
                                                      (rule "commute_and" (formula "6") (term "0,0"))
                                                      (rule "commute_and" (formula "4") (term "0,0"))
                                                      (rule "commute_and" (formula "3") (term "0,0"))
                                                      (rule "commute_and" (formula "2") (term "0,0"))
                                                      (rule "commute_and" (formula "1") (term "0,0"))
                                                      (rule "jdiv_axiom" (formula "10") (term "0,0,0,1,0"))
                                                      (rule "eqSymm" (formula "10"))
                                                      (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "16"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "eqSymm" (formula "10"))
                                                      (rule "applyEq" (formula "7") (term "0,1,1,0") (ifseqformula "10"))
                                                      (rule "applyEq" (formula "11") (term "0,0,0,1,0") (ifseqformula "10"))
                                                      (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "10"))
                                                      (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
                                                      (rule "div_axiom" (formula "10") (term "1") (inst "quotient=quotient_0"))
                                                      (rule "mul_literals" (formula "10") (term "1,1,1,1,1"))
                                                      (rule "qeq_literals" (formula "10") (term "0,1,1"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "equal_literals" (formula "10") (term "0"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "polySimp_addComm1" (formula "12") (term "1"))
                                                      (rule "add_literals" (formula "12") (term "0,1"))
                                                      (rule "inEqSimp_commuteLeq" (formula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "12"))
                                                      (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                                      (rule "polySimp_addComm1" (formula "12") (term "0"))
                                                      (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
                                                      (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "10"))
                                                      (rule "applyEq" (formula "14") (term "0,0,0,1,0") (ifseqformula "10"))
                                                      (rule "applyEq" (formula "7") (term "0,1,1,0") (ifseqformula "10"))
                                                      (rule "polySimp_addComm0" (formula "7") (term "1,0"))
                                                      (rule "applyEq" (formula "13") (term "1") (ifseqformula "10"))
                                                      (rule "jmod_axiom" (formula "8") (term "1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                                      (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "12") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                                      (rule "mul_literals" (formula "12") (term "0,1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "12"))
                                                      (rule "times_zero_1" (formula "19") (term "0,0"))
                                                      (rule "add_zero_left" (formula "19") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                                      (rule "mul_literals" (formula "19") (term "1"))
                                                      (rule "elimGcdGeq_antec" (formula "19") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                                      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0"))
                                                      (rule "leq_literals" (formula "19") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "19"))
                                                      (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                                      (rule "add_literals" (formula "19") (term "0,0,0,0"))
                                                      (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0"))
                                                      (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "19") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "19") (term "0,0"))
                                                      (rule "leq_literals" (formula "19") (term "0"))
                                                      (builtin "One Step Simplification" (formula "19"))
                                                      (rule "jdiv_axiom" (formula "9") (term "0,1,0"))
                                                      (rule "eqSymm" (formula "9"))
                                                      (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "20"))
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (rule "eqSymm" (formula "9"))
                                                      (rule "applyEqRigid" (formula "10") (term "0,1,0") (ifseqformula "9"))
                                                      (rule "applyEqRigid" (formula "8") (term "0,1,1,0") (ifseqformula "9"))
                                                      (rule "applyEqRigid" (formula "15") (term "0,0,1,0") (ifseqformula "9"))
                                                      (rule "cut_direct" (formula "24") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                         (builtin "One Step Simplification" (formula "25"))
                                                         (rule "false_right" (formula "25"))
                                                         (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                         (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "24"))
                                                         (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "3") (term "1,0,0"))
                                                         (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "23"))
                                                         (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "9") (term "1,0,0"))
                                                         (rule "replace_known_right" (formula "9") (term "1,0,0") (ifseqformula "22"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "applyEqReverse" (formula "14") (term "2,0") (ifseqformula "9"))
                                                         (rule "hideAuxiliaryEq" (formula "9"))
                                                         (rule "applyEqRigid" (formula "4") (term "0,0,0,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "4") (term "0,0,0,0"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "21"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "5") (term "1,0,0"))
                                                         (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "20"))
                                                         (builtin "One Step Simplification" (formula "5"))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "3") (term "1,0,0"))
                                                         (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "19"))
                                                         (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "4") (term "1,0,0"))
                                                         (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "18"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "10") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                         (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "17"))
                                                         (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "applyEqRigid" (formula "8") (term "0,1,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "8") (term "1,0,0"))
                                                         (rule "replace_known_right" (formula "8") (term "1,0,0") (ifseqformula "16"))
                                                         (builtin "One Step Simplification" (formula "8"))
                                                         (rule "applyEqReverse" (formula "17") (term "1") (ifseqformula "8"))
                                                         (rule "hideAuxiliaryEq" (formula "8"))
                                                         (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                         (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                         (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "15"))
                                                         (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "eqSymm" (formula "15"))
                                                         (rule "applyEqRigid" (formula "15") (term "1,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "15"))
                                                         (rule "closeTrue" (formula "15"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                         (builtin "One Step Simplification" (formula "25"))
                                                         (rule "notRight" (formula "25"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_0 = java.lang.Object::<created> ∧ o_0 = x_arr_2 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "17") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "17"))
                                                            (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "10"))
                                                            (rule "replace_known_left" (formula "7") (term "0,1,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "3")))
                                                            (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                                            (rule "hideAuxiliaryEq" (formula "7"))
                                                            (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "7"))
                                                            (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "2"))
                                                            (rule "narrowSelectType" (formula "22") (term "0") (ifseqformula "15"))
                                                            (rule "eqSymm" (formula "22"))
                                                            (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "20") (term "0") (ifseqformula "3"))
                                                            (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "applyEqReverse" (formula "10") (term "2,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "9"))
                                                            (rule "hideAuxiliaryEq" (formula "9"))
                                                            (rule "eqSymm" (formula "17"))
                                                            (rule "close" (formula "17") (ifseqformula "1"))
                                                         )
                                                         (branch "f_0 = java.lang.Object::<created> ∧ o_0 = x_arr_2 FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "div_axiom" (formula "9") (term "1") (inst "quotient=quotient_1"))
                                                            (rule "qeq_literals" (formula "9") (term "0,1,1"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "equal_literals" (formula "9") (term "0"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "mul_literals" (formula "9") (term "1,1,1"))
                                                            (rule "andLeft" (formula "9"))
                                                            (rule "andLeft" (formula "9"))
                                                            (rule "polySimp_addComm1" (formula "11") (term "1"))
                                                            (rule "add_literals" (formula "11") (term "0,1"))
                                                            (rule "inEqSimp_commuteLeq" (formula "10"))
                                                            (rule "inEqSimp_homoInEq1" (formula "11"))
                                                            (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                                            (rule "polySimp_addComm1" (formula "11") (term "0"))
                                                            (rule "applyEq" (formula "8") (term "0,1,1,0") (ifseqformula "9"))
                                                            (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                                                            (rule "applyEqRigid" (formula "18") (term "0,0,1,0") (ifseqformula "9"))
                                                            (rule "applyEqRigid" (formula "13") (term "0,1,0") (ifseqformula "9"))
                                                            (rule "applyEq" (formula "12") (term "1") (ifseqformula "9"))
                                                            (rule "jmod_axiom" (formula "13") (term "1,0"))
                                                            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                                            (rule "polySimp_mulComm0" (formula "11") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "11") (term "1"))
                                                            (rule "mul_literals" (formula "11") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "11"))
                                                            (rule "times_zero_1" (formula "23") (term "0,0"))
                                                            (rule "add_zero_left" (formula "23") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                                            (rule "mul_literals" (formula "23") (term "1"))
                                                            (rule "elimGcdGeq_antec" (formula "23") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(5(2(#))))"))
                                                            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
                                                            (rule "leq_literals" (formula "23") (term "0,0"))
                                                            (builtin "One Step Simplification" (formula "23"))
                                                            (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                                            (rule "polySimp_addLiterals" (formula "23") (term "0,0,0,0"))
                                                            (rule "add_literals" (formula "23") (term "0,0,0,0"))
                                                            (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
                                                            (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                                            (rule "add_zero_right" (formula "23") (term "0,0"))
                                                            (rule "leq_literals" (formula "23") (term "0"))
                                                            (builtin "One Step Simplification" (formula "23"))
                                                            (rule "cut_direct" (formula "26") (term "1"))
                                                            (branch "CUT: o_0 = x_arr_2 TRUE"
                                                               (builtin "One Step Simplification" (formula "27"))
                                                               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "replace_known_left" (formula "19") (term "1,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "19"))
                                                               (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "7"))
                                                               (rule "replace_known_left" (formula "14") (term "1,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "14"))
                                                               (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "8"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "27")))
                                                               (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "5"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                                               (rule "close" (formula "28") (ifseqformula "2"))
                                                            )
                                                            (branch "CUT: o_0 = x_arr_2 FALSE"
                                                               (builtin "One Step Simplification" (formula "27"))
                                                               (rule "false_right" (formula "27"))
                                                               (rule "replace_known_right" (formula "7") (term "1,0,0") (ifseqformula "26"))
                                                               (builtin "One Step Simplification" (formula "7"))
                                                               (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "25"))
                                                               (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "24"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_right" (formula "10") (term "1,0,0") (ifseqformula "23"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "applyEqReverse" (formula "15") (term "2,0") (ifseqformula "10"))
                                                               (rule "hideAuxiliaryEq" (formula "10"))
                                                               (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "22"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_right" (formula "13") (term "1,0,0") (ifseqformula "21"))
                                                               (builtin "One Step Simplification" (formula "13"))
                                                               (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "13"))
                                                               (rule "hideAuxiliaryEq" (formula "13"))
                                                               (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "20"))
                                                               (builtin "One Step Simplification" (formula "2"))
                                                               (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                               (rule "hideAuxiliaryEq" (formula "2"))
                                                               (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "19"))
                                                               (builtin "One Step Simplification" (formula "2"))
                                                               (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                               (rule "hideAuxiliaryEq" (formula "2"))
                                                               (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "18"))
                                                               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "Null Reference (x_arr_9 = null)"
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "Index Out of Bounds (x_arr_9 != null, but x_22 Out of Bounds!)"
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                                                      (rule "less_literals" (formula "1") (term "1"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                      (rule "leq_literals" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "Null Reference (x_arr_10 = null)"
                                             (builtin "One Step Simplification" (formula "9"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "Null Reference (x_arr_7 = null)"
                                          (builtin "One Step Simplification" (formula "9"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "Index Out of Bounds (x_arr_7 != null, but x_14 Out of Bounds!)"
                                          (builtin "One Step Simplification" (formula "9"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                                          (rule "less_literals" (formula "1") (term "1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                              (branch "Null Reference (x_arr_8 = null)"
                                 (builtin "One Step Simplification" (formula "9"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Null Reference (x_arr_5 = null)"
                              (builtin "One Step Simplification" (formula "9"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (x_arr_5 != null, but x_7 Out of Bounds!)"
                              (builtin "One Step Simplification" (formula "9"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                              (rule "less_literals" (formula "1") (term "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                  )
                  (branch "Null Reference (x_arr_6 = null)"
                     (builtin "One Step Simplification" (formula "9"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Null Reference (x_arr_3 = null)"
                  (builtin "One Step Simplification" (formula "9"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (x_arr_3 != null, but x_2 Out of Bounds!)"
                  (builtin "One Step Simplification" (formula "9"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "less_literals" (formula "1") (term "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
      (branch "Null Reference (x_arr_4 = null)"
         (builtin "One Step Simplification" (formula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (newObject = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
