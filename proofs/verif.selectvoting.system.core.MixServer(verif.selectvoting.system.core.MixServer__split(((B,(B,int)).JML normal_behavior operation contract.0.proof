\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jul 12 10:24:33 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=7000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Wed Jul 12 10:24:33 CEST 2017
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:split([[B,[B,int)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:split([[B,[B,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "f08755657231e066f34a6d2cf1fc92a2d49850a9"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "78361")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "messages,bal,i,self,result,exc,heapAtPre,o,f") (userinteraction))
(rule "assignment" (formula "2") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "2") (term "1,1") (newnames "heapBefore_split,savedHeapBefore_split") (userinteraction))
(builtin "One Step Simplification" (formula "2"))
(builtin "Use Operation Contract" (formula "2") (newnames "heapBefore_getFirst,result_0,exc_0,heapAfter_getFirst,anon_heap_getFirst") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::getFirst([[B,[B,int)].JML normal_behavior operation contract.0"))
(branch "Post (getFirst)"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "Use Operation Contract" (formula "4") (newnames "heapBefore_second,result_1,exc_1,heapAfter_second,anon_heap_second") (contract "verif.utils.MessageTools[verif.utils.MessageTools::second([B)].JML normal_behavior operation contract.0"))
   (branch "Post (second)"
      (rule "assignment" (formula "6") (term "1,1") (userinteraction))
      (rule "methodCallReturn" (formula "6") (term "1,1,1") (userinteraction))
      (rule "assignment" (formula "6") (term "1,1,1") (userinteraction))
      (rule "methodCallEmpty" (formula "6") (term "1,1,1,1") (userinteraction))
      (rule "tryEmpty" (formula "6") (term "1,1,1,1") (userinteraction))
      (rule "emptyModality" (formula "6") (term "1,1,1,1") (userinteraction))
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "12"))
      (rule "notLeft" (formula "28"))
      (rule "notLeft" (formula "27"))
      (rule "andLeft" (formula "22"))
      (rule "notLeft" (formula "21"))
      (rule "notLeft" (formula "2"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "13"))
      (rule "notLeft" (formula "23"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "13"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "17"))
      (rule "andRight" (formula "35") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "35") (userinteraction))
         (branch "Case 1"
            (rule "allRight" (formula "35") (inst "sk=j_0") (userinteraction))
            (rule "impRight" (formula "35") (userinteraction))
            (rule "allLeftHide" (formula "22") (inst "t=j_0") (userinteraction))
            (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "1") (userinteraction))
            (builtin "One Step Simplification" (formula "22"))
            (rule "equalityToSeqGetAndSeqLenRight" (formula "36") (inst "iv=iv") (userinteraction))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv") (userinteraction))
            (rule "andLeft" (formula "22") (userinteraction))
            (builtin "One Step Simplification" (formula "15"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (ifseqformula "19"))
            (rule "true_left" (formula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1") (ifseqformula "26"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1") (ifseqformula "18"))
            (rule "andLeft" (formula "1"))
            (rule "orRight" (formula "36"))
            (rule "eqSymm" (formula "39") (term "1,0,1"))
            (rule "eqSymm" (formula "32"))
            (rule "eqSymm" (formula "39") (term "0"))
            (rule "eqSymm" (formula "23") (term "1,0"))
            (rule "eqSymm" (formula "11"))
            (rule "eqSymm" (formula "24"))
            (rule "eqSymm" (formula "14"))
            (rule "eqSymm" (formula "22"))
            (rule "eqSymm" (formula "15") (term "1,0"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "31"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "33"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "38"))
            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
            (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "9"))
            (rule "polySimp_addComm1" (formula "9") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1"))
            (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0"))
            (rule "polySimp_elimOne" (formula "13") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_rightDist" (formula "9") (term "1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
            (rule "mul_literals" (formula "9") (term "0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1"))
            (rule "nonNull" (formula "17") (inst "i=i_1"))
            (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "greater_literals" (formula "17") (term "0,1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "notLeft" (formula "17"))
            (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "31"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "31"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
            (rule "array2seqDef" (formula "29") (term "0") (inst "u=u"))
            (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
            (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "3") (ifseqformula "32"))
            (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "40") (term "0,1,1,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "40") (term "1,0,1"))
            (rule "getOfSeqDef" (formula "40") (term "0,1,0,1"))
            (rule "castDel" (formula "40") (term "1,0,1,0,1"))
            (rule "castDel" (formula "40") (term "2,0,1,0,1"))
            (rule "add_zero_right" (formula "40") (term "0,2,1,0,1,0,1"))
            (rule "polySimp_elimSub" (formula "40") (term "1,1,0,0,1,0,1"))
            (rule "mul_literals" (formula "40") (term "1,1,1,0,0,1,0,1"))
            (rule "add_zero_right" (formula "40") (term "1,1,0,0,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0,1"))
            (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0,1"))
            (rule "array2seqDef" (formula "40") (term "0,0,0") (inst "u=u"))
            (rule "lenOfSeqDef" (formula "40") (term "0,0"))
            (rule "polySimp_elimSub" (formula "40") (term "1,0,0"))
            (rule "times_zero_2" (formula "40") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "40") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
            (rule "add_zero_right" (formula "40") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "40") (term "0,0,0,0"))
            (rule "array2seqDef" (formula "40") (term "0,1,0") (inst "u=u"))
            (rule "eqSymm" (formula "40") (term "0"))
            (rule "lenOfSeqDef" (formula "40") (term "0,0"))
            (rule "polySimp_elimSub" (formula "40") (term "1,0,0"))
            (rule "mul_literals" (formula "40") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "40") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
            (rule "add_zero_right" (formula "40") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "0,0,0,0"))
            (rule "eqSymm" (formula "40") (term "0"))
            (rule "polySimp_elimOne" (formula "40") (term "0,0,1,0"))
            (rule "array2seqDef" (formula "23") (term "0,1,1,0") (inst "u=u"))
            (rule "eqSymm" (formula "23") (term "1,0"))
            (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
            (rule "castDel" (formula "23") (term "1,0,1,0"))
            (rule "castDel" (formula "23") (term "2,0,1,0"))
            (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0"))
            (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "11"))
            (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "3") (ifseqformula "32"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
            (rule "array2seqDef" (formula "24") (term "0") (inst "u=u"))
            (rule "lenOfSeqDefEQ" (formula "22") (term "1") (ifseqformula "24"))
            (rule "eqSymm" (formula "22"))
            (rule "polySimp_elimSub" (formula "22") (term "1,0"))
            (rule "mul_literals" (formula "22") (term "1,1,0"))
            (rule "add_zero_right" (formula "22") (term "1,0"))
            (rule "lenOfSeqDefEQ" (formula "23") (term "1,1,1,0,0") (ifseqformula "24"))
            (rule "polySimp_elimSub" (formula "23") (term "1,1,1,1,0,0"))
            (rule "times_zero_2" (formula "23") (term "1,1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "23") (term "1,1,1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,1,1,1,0,0"))
            (rule "array2seqDef" (formula "24") (term "1") (inst "u=u"))
            (rule "array2seqDef" (formula "15") (term "1,1,0") (inst "u=u"))
            (rule "eqSymm" (formula "15") (term "1,0"))
            (rule "array2seqDef" (formula "40") (term "0,1,1,1,0,0,1") (inst "u=u"))
            (rule "lenOfSeqDef" (formula "40") (term "1,1,1,0,0,1"))
            (rule "polySimp_elimSub" (formula "40") (term "1,1,1,1,0,0,1"))
            (rule "times_zero_2" (formula "40") (term "1,1,1,1,1,0,0,1"))
            (rule "add_zero_right" (formula "40") (term "1,1,1,1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "0,1,1,1,0,0,1"))
            (rule "add_zero_right" (formula "40") (term "0,0,1,1,1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,1,1,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,1,1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "40") (term "0,0,1,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "40") (term "0,0,1,1,1,0,0,1"))
            (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
            (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "3") (ifseqformula "32"))
            (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "11"))
            (rule "array2seqDef" (formula "40") (term "0,1,1,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "40") (term "1,0,1"))
            (rule "getOfSeqDef" (formula "40") (term "0,1,0,1"))
            (rule "castDel" (formula "40") (term "1,0,1,0,1"))
            (rule "castDel" (formula "40") (term "2,0,1,0,1"))
            (rule "add_zero_right" (formula "40") (term "0,2,1,0,1,0,1"))
            (rule "polySimp_elimSub" (formula "40") (term "1,1,0,0,1,0,1"))
            (rule "times_zero_2" (formula "40") (term "1,1,1,0,0,1,0,1"))
            (rule "add_zero_right" (formula "40") (term "1,1,0,0,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0,1"))
            (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0,1"))
            (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=arr_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "7")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "array2seqDef" (formula "23") (term "0,1,1,0") (inst "u=u"))
            (rule "eqSymm" (formula "23") (term "1,0"))
            (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
            (rule "castDel" (formula "23") (term "2,0,1,0"))
            (rule "castDel" (formula "23") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0"))
            (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "array2seqDef" (formula "22") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "22"))
            (rule "lenOfSeqDef" (formula "22") (term "0"))
            (rule "polySimp_elimSub" (formula "22") (term "1,0"))
            (rule "times_zero_2" (formula "22") (term "1,1,0"))
            (rule "add_zero_right" (formula "22") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
            (rule "add_zero_right" (formula "22") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
            (rule "eqSeqDef" (formula "24") (inst "iv=iv"))
            (rule "andLeft" (formula "24"))
            (rule "lenOfSeqDef" (formula "24") (term "1"))
            (rule "polySimp_elimSub" (formula "24") (term "1,1"))
            (rule "times_zero_2" (formula "24") (term "1,1,1"))
            (rule "add_zero_right" (formula "24") (term "1,1"))
            (rule "lenOfSeqDef" (formula "24") (term "0"))
            (rule "polySimp_elimSub" (formula "24") (term "1,0"))
            (rule "mul_literals" (formula "24") (term "1,1,0"))
            (rule "add_zero_right" (formula "24") (term "1,0"))
            (rule "getOfSeqDef" (formula "25") (term "1,1,0"))
            (rule "castDel" (formula "25") (term "1,1,1,0"))
            (rule "castDel" (formula "25") (term "2,1,1,0"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
            (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "25") (term "1,1,1,0,0"))
            (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
            (rule "castDel" (formula "25") (term "2,0,1,0"))
            (rule "castDel" (formula "25") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1"))
            (rule "add_zero_right" (formula "24") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
            (rule "add_zero_right" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
            (rule "apply_eq_monomials" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
            (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "25") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "25") (term "1,1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "25") (term "1,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "25") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,1,0,0"))
            (rule "array2seqDef" (formula "15") (term "1,1,0") (inst "u=u"))
            (rule "eqSymm" (formula "15") (term "1,0"))
            (rule "eqSeqDef2" (formula "30") (inst "iv=iv") (ifseqformula "30"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "pullOutSelect" (formula "39") (term "1,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_1"))
            (rule "applyEq" (formula "40") (term "1,1,1,0,1,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "40") (term "1,0,1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "40") (term "1,0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEq" (formula "24") (term "1,0,0,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "25") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "22") (term "1,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "22") (term "1,0,0,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "25") (term "1,1,1,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "23") (term "1,0,1,1,1,1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "23") (term "1,1,1,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "23") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "22") (term "1,0,1,1") (ifseqformula "1"))
            (rule "applyEq" (formula "22") (term "1,0,0,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "24") (term "1,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "23") (term "1,0,0,0,1,1,1,0,0") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "5")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "23") (term "1,0,0,0,1,1,1,0,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "24") (term "1,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "22") (term "1,0,0,0,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "22") (term "1,0,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "23") (term "1,1,1,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "23") (term "1,0,1,1,1,1,0,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "24") (term "1,0,0,0,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "40") (term "1,0,1,0,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "40") (term "1,1,1,0,1,0,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "40") (term "1,0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "23") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "25") (term "1,1,1,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "22") (term "1,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "25") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "22") (term "1,0,0,0,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "40") (term "1,0,0,0,0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "39") (term "0,1,1,0") (inst "selectSK=arr_2"))
            (rule "applyEq" (formula "40") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "40") (term "1,1,1,1,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "40") (term "0,0,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "40") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "40") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEq" (formula "25") (term "0,1,1,1,0,1,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "24") (term "0,0,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "25") (term "0,0,0,1,1,1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "24") (term "0,1,1") (ifseqformula "1"))
            (rule "applyEq" (formula "25") (term "0,1,1,1,1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "23") (term "1,1,1,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "23") (term "0,1,1,1,0,1,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "25") (term "1,1,1,1,0") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "7")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "eqSeqDef" (formula "15") (term "1,0") (inst "iv=iv"))
            (rule "lenOfSeqDef" (formula "15") (term "1,0,1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,0"))
            (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,0"))
            (rule "add_zero_right" (formula "15") (term "1,1,0,1,0"))
            (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0"))
            (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0"))
            (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0"))
            (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0"))
            (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
            (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
            (rule "lenOfSeqDef" (formula "15") (term "0,0,1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,0"))
            (rule "times_zero_2" (formula "15") (term "1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "15") (term "1,0,0,1,0"))
            (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1,1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1,1,0"))
            (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1,1,0"))
            (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1,1,0"))
            (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0"))
            (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0"))
            (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0"))
            (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0"))
            (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
            (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,1,0"))
            (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
            (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1,1,0"))
            (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0"))
            (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0"))
            (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
            (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
            (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
            (rule "times_zero_1" (formula "2") (term "0,0"))
            (rule "add_zero_left" (formula "2") (term "0"))
            (rule "pullOutSelect" (formula "23") (term "0,0,0,1,1,1,0,0") (inst "selectSK=arr_3"))
            (rule "applyEq" (formula "24") (term "0,1,1,1,1,0,0") (ifseqformula "23"))
            (rule "applyEq" (formula "26") (term "0,1,1,1,0,0,1,0") (ifseqformula "23"))
            (rule "applyEq" (formula "22") (term "0,0,0,1") (ifseqformula "23"))
            (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "23"))
            (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1,0") (ifseqformula "23"))
            (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "23"))
            (rule "applyEq" (formula "25") (term "0,1,0") (ifseqformula "23"))
            (rule "applyEq" (formula "24") (term "1,1,0,1,0") (ifseqformula "23"))
            (rule "applyEq" (formula "26") (term "1,1,0,1,0") (ifseqformula "23"))
            (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "23"))
            (rule "applyEq" (formula "22") (term "0,0,0,0") (ifseqformula "23"))
            (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "elementOfSingleton" (formula "23") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "34")))
            (rule "applyEq" (formula "25") (term "0") (ifseqformula "22"))
            (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "25"))
            (rule "applyEq" (formula "22") (term "1") (ifseqformula "24"))
            (rule "pullOutSelect" (formula "40") (term "0,1,0,0") (inst "selectSK=arr_4"))
            (rule "applyEq" (formula "41") (term "0,0,0,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "41") (term "1,1,0,1,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "41") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet0000_8" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "20"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
            (rule "times_zero_1" (formula "12") (term "0,0"))
            (rule "add_zero_left" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "nnf_imp2or" (formula "19") (term "0"))
            (rule "nnf_imp2or" (formula "17") (term "0"))
            (rule "nnf_imp2or" (formula "27") (term "0"))
            (rule "nnf_imp2or" (formula "42") (term "0,1"))
            (rule "nnf_notAnd" (formula "19") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "17") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "27") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
            (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "42") (term "0,0,1"))
            (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,1"))
            (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,1"))
            (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,1"))
            (rule "mul_literals" (formula "42") (term "1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,1"))
            (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,1"))
            (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,1"))
            (rule "nnf_imp2or" (formula "17") (term "0,1,1,0"))
            (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,1,0"))
            (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,0"))
            (rule "arrayLengthIsAShort" (formula "16") (term "0"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "arrayLengthNotNegative" (formula "16") (term "1"))
            (rule "arrayLengthIsAShort" (formula "17") (term "1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "arrayLengthNotNegative" (formula "17") (term "0"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
            (rule "cut_direct" (formula "24") (term "0"))
            (branch "CUT: result_0.<created> = TRUE TRUE"
               (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "arrayLengthIsAShort" (formula "11") (term "1,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "arrayLengthNotNegative" (formula "11") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "19") (ifseqformula "7"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "21"))
               (rule "notLeft" (formula "20"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "21"))
               (rule "notLeft" (formula "20"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "19"))
               (rule "nonNull" (formula "22") (inst "i=i_1"))
               (rule "greater_literals" (formula "22") (term "0,1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "sub_literals" (formula "22") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "andLeft" (formula "22"))
               (rule "notLeft" (formula "22"))
               (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "37"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "21") (inst "i=i_1"))
               (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "greater_literals" (formula "21") (term "0,1"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "notLeft" (formula "21"))
               (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "37"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "20") (inst "i=i_1"))
               (rule "greater_literals" (formula "20") (term "0,1"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "sub_literals" (formula "20") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "notLeft" (formula "20"))
               (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "37"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
               (rule "notLeft" (formula "19"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "37"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "replace_known_right" (formula "28") (term "0,0,0,0") (ifseqformula "37"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "ifthenelse_negated" (formula "28") (term "0"))
               (rule "applyEq" (formula "19") (term "1,1,1,0,0") (ifseqformula "17"))
               (rule "nnf_imp2or" (formula "20") (term "0"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_imp2or" (formula "19") (term "0"))
               (rule "nnf_notAnd" (formula "20") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
               (rule "commute_or_2" (formula "30") (term "0"))
               (rule "commute_or_2" (formula "22") (term "0"))
               (rule "commute_or_2" (formula "20") (term "0"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "31") (ifseqformula "7"))
               (rule "replaceKnownSelect_taclet0000_4" (formula "31") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0000_5" (formula "31") (term "1,1,0,0,0,0,0,0"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "32"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "32"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "32"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "32"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "31"))
               (rule "notLeft" (formula "31"))
               (rule "nonNull" (formula "33") (inst "i=i_1"))
               (rule "greater_literals" (formula "33") (term "0,1"))
               (builtin "One Step Simplification" (formula "33"))
               (rule "sub_literals" (formula "33") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "33"))
               (rule "andLeft" (formula "33"))
               (rule "notLeft" (formula "33"))
               (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
               (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "32") (inst "i=i_1"))
               (rule "greater_literals" (formula "32") (term "0,1"))
               (builtin "One Step Simplification" (formula "32"))
               (rule "sub_literals" (formula "32") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "32"))
               (rule "andLeft" (formula "32"))
               (rule "notLeft" (formula "32"))
               (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
               (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "31") (inst "i=i_1"))
               (rule "sub_literals" (formula "31") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "47")))
               (rule "greater_literals" (formula "31") (term "0"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
               (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
               (rule "pullOutSelect" (formula "45") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_7"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_7"))
               (rule "applyEq" (formula "40") (term "0") (ifseqformula "33"))
               (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
               (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "24"))
               (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "54")) (ifInst ""  (formula "6")))
               (rule "elementOfSingleton" (formula "33") (term "0,0"))
               (builtin "One Step Simplification" (formula "33"))
               (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "33"))
               (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
               (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
               (rule "hideAuxiliaryEq" (formula "33"))
               (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_7"))
               (rule "applyEq" (formula "39") (term "0") (ifseqformula "32"))
               (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
               (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "24"))
               (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "53")) (ifInst ""  (formula "6")))
               (rule "elementOfSingleton" (formula "32") (term "0,0"))
               (builtin "One Step Simplification" (formula "32"))
               (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
               (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "32"))
               (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
               (rule "hideAuxiliaryEq" (formula "32"))
               (rule "nnf_imp2or" (formula "31") (term "0"))
               (rule "nnf_imp2or" (formula "33") (term "0"))
               (rule "nnf_imp2or" (formula "32") (term "0"))
               (rule "nnf_notAnd" (formula "31") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "33") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
               (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
               (rule "mul_literals" (formula "33") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "32") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
               (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
               (rule "mul_literals" (formula "32") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0"))
               (rule "commute_or_2" (formula "19") (term "0"))
               (rule "commute_or_2" (formula "18") (term "0,1,1,0"))
               (rule "commute_or" (formula "30") (term "0,0"))
               (rule "commute_or" (formula "22") (term "0,0"))
               (rule "commute_or" (formula "20") (term "0,0"))
               (rule "ifthenelse_to_or_left" (formula "18") (term "0,1,0"))
               (rule "eqSymm" (formula "18") (term "1,0,0,1,0"))
               (rule "eqSymm" (formula "18") (term "1,1,0,1,0"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,1,1,0,1,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,1,1,0,1,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,1,0,1,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,1,1,0,1,0"))
               (rule "commute_or_2" (formula "31") (term "0"))
               (rule "commute_or_2" (formula "33") (term "0"))
               (rule "commute_or_2" (formula "32") (term "0"))
               (rule "ifthenelse_split" (formula "28") (term "0"))
               (branch "self.sorted.<created> = TRUE TRUE"
                  (rule "applyEqReverse" (formula "30") (term "0,1,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,1,0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "27") (term "0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "27") (term "0,1,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "29"))
                  (rule "hideAuxiliaryEq" (formula "29"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "56") (term "1,1,0,1,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "56") (term "0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "56") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "56") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_left" (formula "55") (term "0") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "55"))
                  (rule "allRight" (formula "55") (inst "sk=iv_10"))
                  (rule "orRight" (formula "55"))
                  (rule "orRight" (formula "55"))
                  (rule "inEqSimp_leqRight" (formula "55"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "57") (term "0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "1")))
                  (rule "inEqSimp_geqRight" (formula "56"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "57") (term "0,0"))
                  (rule "eqSymm" (formula "57"))
                  (rule "polySimp_addComm1" (formula "57") (term "0,0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "57") (term "0,0"))
                  (rule "eqSymm" (formula "57"))
                  (rule "polySimp_addComm1" (formula "57") (term "0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "57") (term "1,0,0"))
                  (rule "mul_literals" (formula "57") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "57") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "57") (term "1,0,1"))
                  (rule "mul_literals" (formula "57") (term "0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "57") (term "1,1,0,1"))
                  (rule "pullOutSelect" (formula "57") (term "1,1") (inst "selectSK=arr_53"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                  (rule "pullOutSelect" (formula "58") (term "1,0") (inst "selectSK=arr_54"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "27"))
                  (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=arr_55"))
                  (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "sortsDisjointModuloNull" (formula "2") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "2") (term "1,0,0,0,0") (ifseqformula "51"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_56"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "52"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_split" (formula "7") (term "0"))
                  (branch "j_0 = i TRUE"
                     (rule "applyEqReverse" (formula "4") (term "1,0,0,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "4") (term "1,0,1,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "36") (term "0,0,0,1,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "33") (term "0,0,0,1") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "35") (term "0,0,0,1") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "36") (term "1,1,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "35") (term "0,1,1") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "62") (term "0,0,0,1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "eqSymm" (formula "32"))
                     (rule "eqSymm" (formula "35") (term "0,0,0"))
                     (rule "eqSymm" (formula "34"))
                     (rule "eqSymm" (formula "61"))
                     (rule "applyEq" (formula "34") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "35") (term "0,2,0,1,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "35") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "5") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "32") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "3") (term "0,2,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "2") (term "0,2,1,0,1,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "4") (term "0,2,0,0,0,0,0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "57"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "ifthenelse_negated" (formula "4") (term "0"))
                     (rule "applyEq" (formula "35") (term "0,2,1,1,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "3") (term "0,2,1,2,0") (ifseqformula "7"))
                     (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "10") (ifseqformula "57"))
                     (rule "applyEq" (formula "1") (term "0,2,1,2,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "61") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "1") (term "0,2,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                     (rule "applyEq" (formula "1") (term "0,2,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "2") (term "0,2,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "31") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "34") (term "0,2,0,0,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "2") (term "0,2,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "8"))
                     (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "1,0"))
                     (rule "times_zero_1" (formula "8") (term "0"))
                     (rule "qeq_literals" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "55"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "ifthenelse_negated" (formula "3") (term "0"))
                     (rule "applyEq" (formula "2") (term "0,2,1,0,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "5") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "3") (term "0,2,1,2,0") (ifseqformula "7"))
                     (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "26") (ifseqformula "55"))
                     (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "32"))
                     (rule "applyEq" (formula "4") (term "0,2,1,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "30"))
                     (rule "applyEq" (formula "4") (term "0,2,1,2,0") (ifseqformula "7"))
                     (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "37") (ifseqformula "55"))
                     (rule "applyEq" (formula "4") (term "0,2,1,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                     (rule "eqSymm" (formula "30"))
                     (rule "applyEq" (formula "32") (term "0,2,0,0,0,1") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "0,2,1,1,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "59") (term "0,2,0,0,0,1") (ifseqformula "7"))
                     (rule "applyEq" (formula "32") (term "0,2,0,1,1") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "0,2,0,0,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "30"))
                     (rule "applyEq" (formula "33") (term "0,2,0,1,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "30") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "30") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "eqSymm" (formula "30"))
                     (rule "applyEq" (formula "30") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "5") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "30") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "eqSymm" (formula "30"))
                     (rule "applyEq" (formula "5") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "commute_or" (formula "24") (term "0,0"))
                     (rule "commute_or" (formula "22") (term "0,0"))
                     (rule "commute_or" (formula "34") (term "0,0"))
                     (rule "commute_or" (formula "36") (term "0,0"))
                     (rule "commute_or" (formula "35") (term "0,0"))
                     (rule "commute_or" (formula "21") (term "1,0,1,0"))
                     (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
                     (rule "leq_literals" (formula "15") (term "0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                     (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                     (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "arrayLengthIsAShort" (formula "23") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "arrayLengthNotNegative" (formula "23") (term "1,1,0"))
                     (rule "ifthenelse_to_or_left" (formula "21") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "21") (term "1,0,1,0,0,1,0"))
                     (rule "eqSymm" (formula "21") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,0,1,0,0,1,0"))
                     (rule "ifthenelse_to_or_right" (formula "34") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "34") (term "0,1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "34") (term "1,0,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,1,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,1,1,0,0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,0,1,0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "34") (term "0,0,1,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1,0,1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "34") (term "0,0,1,1,0,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,1,1,0,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0,0,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "1,0,0,1,1,0,0,0"))
                     (rule "commute_or" (formula "34") (term "0,0"))
                     (rule "commute_or_2" (formula "34") (term "0"))
                     (rule "commute_or_2" (formula "34") (term "0,1,0"))
                     (rule "commute_or" (formula "34") (term "1,1,0"))
                     (rule "commute_or" (formula "34") (term "0,0,1,0"))
                     (rule "commute_or_2" (formula "34") (term "0,1,1,0"))
                     (rule "cnf_rightDist" (formula "21") (term "0,0,1,0"))
                     (rule "inEqSimp_or_subsumption5" (formula "21") (term "1,0,0,1,0"))
                     (rule "greater_literals" (formula "21") (term "0,1,0,1,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "arrayLengthIsAShort" (formula "25") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "arrayLengthNotNegative" (formula "25") (term "1,1,0"))
                     (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                     (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                     (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,1,1,0"))
                     (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,1,0"))
                     (rule "qeq_literals" (formula "35") (term "1,0,0,1,1,0"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "shift_paren_or" (formula "35") (term "1,1,0"))
                     (rule "commute_or" (formula "35") (term "0,1,1,0"))
                     (rule "cnf_rightDist" (formula "35") (term "0"))
                     (rule "distr_forallAnd" (formula "35"))
                     (rule "andLeft" (formula "35"))
                     (rule "commute_or_2" (formula "35") (term "0"))
                     (rule "shift_paren_or" (formula "36") (term "0"))
                     (rule "commute_or_2" (formula "36") (term "0,0"))
                     (rule "shift_paren_or" (formula "35") (term "0,0"))
                     (rule "commute_or_2" (formula "36") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                     (rule "commute_or" (formula "35") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "shift_paren_or" (formula "21") (term "0,0,0,1,0"))
                     (rule "ifthenelse_split" (formula "34") (term "0"))
                     (branch " messages[i]@anon_heap_getFirst«anonHeapFunction».length ≥ 1 TRUE"
                        (rule "eqSymm" (formula "35"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "35"))
                        (rule "replace_known_left" (formula "63") (term "0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "63"))
                        (rule "eqSymm" (formula "63"))
                        (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                        (rule "applyEq" (formula "32") (term "1") (ifseqformula "35"))
                        (rule "commute_or" (formula "21") (term "0,0,0,0,1,0"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "notLeft" (formula "1"))
                           (rule "referencedObjectIsCreatedRight" (formula "46") (ifseqformula "45"))
                           (rule "close" (formula "46") (ifseqformula "8"))
                        )
                        (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " (messages[i]@anon_heap_getFirst«anonHeapFunction»).<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "ifthenelse_split" (formula "30") (term "0"))
                              (branch "self.sorted[i].length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "31"))
                                 (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "31"))
                                 (rule "replace_known_left" (formula "62") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "62"))
                                 (rule "applyEq" (formula "34") (term "1,1,1,0,0,0,0,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "33") (term "1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "eqSymm" (formula "33") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "33") (term "1") (ifseqformula "30"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "30"))
                                 (rule "leq_literals" (formula "33") (term "0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                 (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                 (rule "leq_literals" (formula "34") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0"))
                                 (rule "eqSymm" (formula "33") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "33") (term "0,0"))
                                 (rule "commute_or_2" (formula "33") (term "0"))
                                 (rule "commute_or" (formula "33") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "0"))
                                 (rule "distr_forallAnd" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "commute_or" (formula "34") (term "0"))
                                 (rule "shift_paren_or" (formula "33") (term "0"))
                                 (rule "commute_or_2" (formula "33") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "commute_or" (formula "34") (term "1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "0,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "cnf_rightDist" (formula "34") (term "0"))
                                 (rule "distr_forallAnd" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "commute_or_2" (formula "34") (term "0"))
                                 (rule "shift_paren_or" (formula "35") (term "0"))
                                 (rule "commute_or_2" (formula "35") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                 (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                 (rule "leq_literals" (formula "35") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "shift_paren_or" (formula "34") (term "0,0"))
                                 (rule "commute_or" (formula "34") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                                 (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "34") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "allLeft" (formula "25") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                 (rule "leq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "15"))
                                 (rule "qeq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "ifthenelse_to_or_left" (formula "19") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "19") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "eqSymm" (formula "19") (term "1,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "19") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "19") (term "0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0,0") (ifseqformula "6"))
                                 (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "45")))
                                 (rule "true_left" (formula "14"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "6"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "7"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "8"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "0") (ifseqformula "31"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "14"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "allLeft" (formula "29") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                 (rule "leq_literals" (formula "29") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "29") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "replace_known_right" (formula "10") (term "0,0,0,0") (ifseqformula "50"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "replace_known_right" (formula "52") (term "0,0") (ifseqformula "50"))
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "notRight" (formula "52"))
                                 (rule "replace_known_left" (formula "11") (term "0,0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "applyEqReverse" (formula "71") (term "0") (ifseqformula "11"))
                                 (rule "hideAuxiliaryEq" (formula "11"))
                                 (rule "narrowSelectArrayType" (formula "70") (term "0") (ifseqformula "15") (ifseqformula "50"))
                                 (rule "eqSymm" (formula "70"))
                                 (rule "commute_or" (formula "28") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,0,1,1,0"))
                                 (rule "allLeft" (formula "43") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "43") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "43") (term "1,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "43") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "inEqSimp_contradInEq1" (formula "43") (term "1") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "43") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0,1"))
                                 (rule "add_literals" (formula "43") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "43") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "43") (term "0,0,1"))
                                 (rule "leq_literals" (formula "43") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "notLeft" (formula "43"))
                                 (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=arr_67"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "42")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                 (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "narrowSelectArrayType" (formula "50") (term "0") (ifseqformula "15") (ifseqformula "54"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "28") (term "0,0,1,0,1,1,0"))
                                 (rule "arrayLengthNotNegative" (formula "39") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "40"))
                                 (rule "leq_literals" (formula "39") (term "0"))
                                 (builtin "One Step Simplification" (formula "39"))
                                 (rule "true_left" (formula "39"))
                                 (rule "arrayLengthIsAShort" (formula "39") (term "0"))
                                 (builtin "One Step Simplification" (formula "39"))
                                 (rule "true_left" (formula "39"))
                                 (rule "arrayLengthNotNegative" (formula "40") (term "0"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "41"))
                                 (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "39"))
                                 (rule "leq_literals" (formula "40") (term "0"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "true_left" (formula "40"))
                                 (rule "arrayLengthIsAShort" (formula "40") (term "0"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "true_left" (formula "40"))
                                 (rule "allLeft" (formula "31") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "31") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "allLeft" (formula "35") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "allLeft" (formula "32") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "32") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "commute_or" (formula "28") (term "0,0,1,1,0,1,1,0"))
                                 (rule "commute_and" (formula "28") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "28") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "28") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "28") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "commute_or" (formula "28") (term "1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "28") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "28") (term "1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "28") (term "0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,0,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "shift_paren_or" (formula "28") (term "0,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "28") (term "0,0,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "allLeft" (formula "35") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "allLeft" (formula "29") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "29") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "allLeft" (formula "37") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "37") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "allLeft" (formula "51") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "51") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "51") (term "1,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "51") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "51"))
                                 (rule "pullOutSelect" (formula "51") (term "0,0,0") (inst "selectSK=arr_68"))
                                 (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "63")) (ifInst ""  (formula "10")))
                                 (rule "elementOfSingleton" (formula "51") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "51"))
                                 (rule "narrowSelectArrayType" (formula "51") (term "2,0") (ifseqformula "15") (ifseqformula "63"))
                                 (rule "narrowSelectArrayType" (formula "51") (term "1,0") (ifseqformula "41") (ifseqformula "63"))
                                 (rule "allLeft" (formula "50") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "50") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "50") (term "1,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "50") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "50"))
                                 (rule "pullOutSelect" (formula "50") (term "0,0,0") (inst "selectSK=arr_69"))
                                 (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "64")) (ifInst ""  (formula "3")))
                                 (rule "elementOfSingleton" (formula "50") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "50"))
                                 (rule "narrowSelectArrayType" (formula "50") (term "1,0") (ifseqformula "41") (ifseqformula "64"))
                                 (rule "narrowSelectArrayType" (formula "50") (term "2,0") (ifseqformula "15") (ifseqformula "64"))
                                 (rule "allLeft" (formula "52") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "52") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "52") (term "1,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "52") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "pullOutSelect" (formula "52") (term "0,0,0") (inst "selectSK=arr_70"))
                                 (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "66")) (ifInst ""  (formula "3")))
                                 (rule "elementOfSingleton" (formula "52") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "narrowSelectArrayType" (formula "52") (term "1,0") (ifseqformula "41") (ifseqformula "66"))
                                 (rule "narrowSelectArrayType" (formula "52") (term "2,0") (ifseqformula "15") (ifseqformula "66"))
                                 (rule "allLeft" (formula "57") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "57") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "57") (term "1,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "57") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "57"))
                                 (rule "pullOutSelect" (formula "57") (term "0,0,0") (inst "selectSK=arr_71"))
                                 (rule "simplifySelectOfAnonEQ" (formula "57") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "69")) (ifInst ""  (formula "10")))
                                 (rule "elementOfSingleton" (formula "57") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "57"))
                                 (rule "narrowSelectArrayType" (formula "57") (term "1,0") (ifseqformula "41") (ifseqformula "69"))
                                 (rule "narrowSelectArrayType" (formula "57") (term "2,0") (ifseqformula "15") (ifseqformula "69"))
                                 (rule "allLeft" (formula "49") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "49") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "49") (term "1,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "49") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "49"))
                                 (rule "pullOutSelect" (formula "49") (term "0,0,0") (inst "selectSK=arr_72"))
                                 (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "69")) (ifInst ""  (formula "47")))
                                 (rule "elementOfSingleton" (formula "49") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "79")))
                                 (rule "applyEqReverse" (formula "50") (term "0,0,0") (ifseqformula "49"))
                                 (rule "hideAuxiliaryEq" (formula "49"))
                                 (rule "narrowSelectArrayType" (formula "49") (term "0,0,0") (ifseqformula "15") (ifseqformula "68"))
                                 (rule "allLeft" (formula "48") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "48") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "48") (term "1") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "48") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,1"))
                                 (rule "add_literals" (formula "48") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "48") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "48") (term "0,0,1"))
                                 (rule "leq_literals" (formula "48") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "48"))
                                 (rule "inEqSimp_contradInEq1" (formula "48") (term "1") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "48") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "48"))
                                 (rule "pullOutSelect" (formula "48") (term "1") (inst "selectSK=arr_73"))
                                 (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "66")) (ifInst ""  (formula "1")))
                                 (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "82")) (ifInst ""  (formula "11")))
                                 (rule "elementOfSingleton" (formula "48") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "48"))
                                 (rule "elementOfSingleton" (formula "49") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "49"))
                                 (rule "sortsDisjointModuloNull" (formula "48") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "48") (term "0,0,0,0") (ifseqformula "66"))
                                 (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "77")))
                                 (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "48"))
                                 (rule "hideAuxiliaryEq" (formula "48"))
                                 (rule "sortsDisjointModuloNull" (formula "48") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "48") (term "0,0,0,0") (ifseqformula "81"))
                                 (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "76")))
                                 (rule "narrowSelectArrayType" (formula "48") (term "1") (ifseqformula "15") (ifseqformula "65"))
                                 (rule "narrowSelectArrayType" (formula "48") (term "0") (ifseqformula "15") (ifseqformula "81"))
                                 (rule "close" (formula "85") (ifseqformula "48"))
                              )
                              (branch "self.sorted[i].length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "30"))
                                 (rule "inEqSimp_geqRight" (formula "43"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "35") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "31"))
                                 (rule "add_zero_right" (formula "35") (term "1,1,0,0,0,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "31"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "31"))
                                 (rule "qeq_literals" (formula "33"))
                                 (rule "closeFalse" (formula "33"))
                              )
                           )
                           (branch " (messages[i]@anon_heap_getFirst«anonHeapFunction»).<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "43"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "ifthenelse_split" (formula "30") (term "0"))
                              (branch "self.sorted[i].length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "31"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "31"))
                                 (rule "replace_known_left" (formula "63") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "63"))
                                 (rule "applyEq" (formula "34") (term "1,1,1,0,0,0,0,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "33") (term "1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "eqSymm" (formula "33") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "33") (term "1") (ifseqformula "30"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "30"))
                                 (rule "leq_literals" (formula "33") (term "0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                 (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                 (rule "leq_literals" (formula "34") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0"))
                                 (rule "eqSymm" (formula "33") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "33") (term "0,0"))
                                 (rule "commute_or_2" (formula "33") (term "0"))
                                 (rule "commute_or" (formula "33") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "0"))
                                 (rule "distr_forallAnd" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "commute_or" (formula "34") (term "0"))
                                 (rule "shift_paren_or" (formula "33") (term "0"))
                                 (rule "commute_or_2" (formula "33") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "commute_or" (formula "34") (term "1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "0,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "cnf_rightDist" (formula "34") (term "0"))
                                 (rule "distr_forallAnd" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "commute_or_2" (formula "34") (term "0"))
                                 (rule "shift_paren_or" (formula "35") (term "0"))
                                 (rule "commute_or_2" (formula "35") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                 (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                 (rule "leq_literals" (formula "35") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "shift_paren_or" (formula "34") (term "0,0"))
                                 (rule "commute_or" (formula "34") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                                 (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "34") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "allLeft" (formula "25") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "15"))
                                 (rule "qeq_literals" (formula "25") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                 (rule "leq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "ifthenelse_to_or_left" (formula "19") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "19") (term "1,0,0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "19") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "19") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "19") (term "0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0,0") (ifseqformula "6"))
                                 (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "46")))
                                 (rule "true_left" (formula "14"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "6"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "7"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "28"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEqReverse" (formula "65") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "8"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "commute_or_2" (formula "27") (term "0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "27") (term "1,1,0,1,1,0"))
                                 (rule "allLeft" (formula "28") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                 (rule "leq_literals" (formula "28") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "28") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "replace_known_right" (formula "10") (term "0,0,0,0") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "replace_known_right" (formula "52") (term "0,0") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "notRight" (formula "52"))
                                 (rule "replace_known_left" (formula "11") (term "0,0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "applyEqReverse" (formula "71") (term "0") (ifseqformula "11"))
                                 (rule "hideAuxiliaryEq" (formula "11"))
                                 (rule "narrowSelectArrayType" (formula "70") (term "0") (ifseqformula "14") (ifseqformula "49"))
                                 (rule "eqSymm" (formula "70"))
                                 (rule "allLeft" (formula "42") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "42") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "42") (term "1,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "42") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "inEqSimp_contradInEq1" (formula "42") (term "1") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "42") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,1"))
                                 (rule "add_literals" (formula "42") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "42") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "42") (term "0,0,1"))
                                 (rule "leq_literals" (formula "42") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=arr_60"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "41")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                                 (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "narrowSelectArrayType" (formula "49") (term "0") (ifseqformula "14") (ifseqformula "54"))
                                 (rule "commute_or" (formula "27") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,1,1,0,1,1,0"))
                                 (rule "arrayLengthNotNegative" (formula "38") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "39"))
                                 (rule "leq_literals" (formula "38") (term "0"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "true_left" (formula "38"))
                                 (rule "arrayLengthIsAShort" (formula "38") (term "0"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "true_left" (formula "38"))
                                 (rule "arrayLengthIsAShort" (formula "39") (term "0"))
                                 (builtin "One Step Simplification" (formula "39"))
                                 (rule "true_left" (formula "39"))
                                 (rule "arrayLengthNotNegative" (formula "39") (term "0"))
                                 (rule "applyEq" (formula "39") (term "0") (ifseqformula "40"))
                                 (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "38"))
                                 (rule "leq_literals" (formula "39") (term "0"))
                                 (builtin "One Step Simplification" (formula "39"))
                                 (rule "true_left" (formula "39"))
                                 (rule "allLeft" (formula "33") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "allLeft" (formula "30") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "30") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "allLeft" (formula "31") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "31") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "commute_or" (formula "27") (term "0,0,1,1,0,1,1,0"))
                                 (rule "commute_and" (formula "27") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "27") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "27") (term "1,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "27") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,0,1,1,0"))
                                 (rule "commute_or" (formula "27") (term "1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "27") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "commute_or_2" (formula "27") (term "1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "27") (term "0,0,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "27") (term "0,0,0,0,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "allLeft" (formula "34") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "34") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "allLeft" (formula "35") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "allLeft" (formula "28") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "28") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "allLeft" (formula "50") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "50") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "50") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "50") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "50"))
                                 (rule "pullOutSelect" (formula "50") (term "0,0,0") (inst "selectSK=arr_61"))
                                 (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "63")) (ifInst ""  (formula "9")))
                                 (rule "elementOfSingleton" (formula "50") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "50"))
                                 (rule "narrowSelectArrayType" (formula "50") (term "2,0") (ifseqformula "14") (ifseqformula "63"))
                                 (rule "narrowSelectArrayType" (formula "50") (term "1,0") (ifseqformula "40") (ifseqformula "63"))
                                 (rule "allLeft" (formula "52") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "52") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "52") (term "1,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "52") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "pullOutSelect" (formula "52") (term "0,0,0") (inst "selectSK=arr_62"))
                                 (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "65")) (ifInst ""  (formula "9")))
                                 (rule "elementOfSingleton" (formula "52") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "narrowSelectArrayType" (formula "52") (term "1,0") (ifseqformula "40") (ifseqformula "65"))
                                 (rule "narrowSelectArrayType" (formula "52") (term "2,0") (ifseqformula "14") (ifseqformula "65"))
                                 (rule "allLeft" (formula "48") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "48") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "48") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "48") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "48"))
                                 (rule "pullOutSelect" (formula "48") (term "0,0,0") (inst "selectSK=arr_63"))
                                 (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "65")) (ifInst ""  (formula "46")))
                                 (rule "elementOfSingleton" (formula "48") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "75")))
                                 (rule "applyEqReverse" (formula "49") (term "0,0,0") (ifseqformula "48"))
                                 (rule "hideAuxiliaryEq" (formula "48"))
                                 (rule "narrowSelectArrayType" (formula "48") (term "0,0,0") (ifseqformula "14") (ifseqformula "64"))
                                 (rule "allLeft" (formula "49") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "49") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "49") (term "1,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "49") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "49"))
                                 (rule "pullOutSelect" (formula "49") (term "0,0,0") (inst "selectSK=arr_64"))
                                 (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "66")) (ifInst ""  (formula "10")))
                                 (rule "elementOfSingleton" (formula "49") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "49"))
                                 (rule "narrowSelectArrayType" (formula "49") (term "1,0") (ifseqformula "40") (ifseqformula "66"))
                                 (rule "narrowSelectArrayType" (formula "49") (term "2,0") (ifseqformula "14") (ifseqformula "66"))
                                 (rule "allLeft" (formula "51") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "51") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "51") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "51") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "51"))
                                 (rule "pullOutSelect" (formula "51") (term "0,0,0") (inst "selectSK=arr_65"))
                                 (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "68")) (ifInst ""  (formula "10")))
                                 (rule "elementOfSingleton" (formula "51") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "51"))
                                 (rule "narrowSelectArrayType" (formula "51") (term "2,0") (ifseqformula "14") (ifseqformula "68"))
                                 (rule "narrowSelectArrayType" (formula "51") (term "1,0") (ifseqformula "40") (ifseqformula "68"))
                                 (rule "allLeft" (formula "47") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "47") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "47") (term "1") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "47") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,1"))
                                 (rule "add_literals" (formula "47") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "47") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "47") (term "0,0,1"))
                                 (rule "leq_literals" (formula "47") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "47"))
                                 (rule "inEqSimp_contradInEq1" (formula "47") (term "1") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "47") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "47"))
                                 (rule "pullOutSelect" (formula "47") (term "1") (inst "selectSK=arr_66"))
                                 (rule "simplifySelectOfAnonEQ" (formula "47") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "65")) (ifInst ""  (formula "1")))
                                 (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "82")) (ifInst ""  (formula "67")))
                                 (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "48"))
                                 (rule "hideAuxiliaryEq" (formula "48"))
                                 (rule "elementOfSingleton" (formula "47") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "47"))
                                 (rule "sortsDisjointModuloNull" (formula "47") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "47") (term "1,0,0,0") (ifseqformula "76"))
                                 (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "64")))
                                 (rule "eqSymm" (formula "47"))
                                 (rule "narrowSelectArrayType" (formula "47") (term "0") (ifseqformula "40") (ifseqformula "81"))
                                 (rule "eqSymm" (formula "47"))
                                 (rule "narrowSelectArrayType" (formula "47") (term "0") (ifseqformula "14") (ifseqformula "64"))
                                 (rule "eqSymm" (formula "47"))
                                 (rule "close" (formula "85") (ifseqformula "47"))
                              )
                              (branch "self.sorted[i].length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "30"))
                                 (rule "inEqSimp_geqRight" (formula "43"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "35") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "31"))
                                 (rule "add_zero_right" (formula "35") (term "1,1,0,0,0,0,0,0"))
                                 (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "31"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "31"))
                                 (rule "qeq_literals" (formula "33"))
                                 (rule "closeFalse" (formula "33"))
                              )
                           )
                        )
                     )
                     (branch " messages[i]@anon_heap_getFirst«anonHeapFunction».length ≥ 1 FALSE"
                        (rule "eqSymm" (formula "34"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_geqRight" (formula "44"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_notGeq" (formula "35") (term "0"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "inEqSimp_or_weaken0" (formula "35"))
                        (rule "add_literals" (formula "35") (term "1,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_contradInEq0" (formula "33") (term "0,0") (ifseqformula "35"))
                        (rule "qeq_literals" (formula "33") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "eqSymm" (formula "33"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0"))
                        (rule "mul_literals" (formula "33") (term "1,0"))
                        (rule "inEqSimp_or_weaken0" (formula "33"))
                        (rule "add_literals" (formula "33") (term "1,0"))
                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "35")))
                        (rule "true_left" (formula "33"))
                        (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "3"))
                           (rule "notLeft" (formula "2"))
                           (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "44"))
                           (rule "close" (formula "45") (ifseqformula "9"))
                        )
                        (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "ifthenelse_split" (formula "5") (term "0"))
                           (branch "self.sorted[i].length ≥ 0 TRUE"
                              (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "replace_known_left" (formula "36") (term "0,1,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "replace_known_left" (formula "63") (term "0,1") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "63"))
                              (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "34"))
                              (rule "applyEq" (formula "37") (term "1,1,1,0,0,0") (ifseqformula "5"))
                              (rule "add_zero_right" (formula "37") (term "1,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "5"))
                              (rule "leq_literals" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "times_zero_2" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "5"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "6") (term "0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "closeFalse" (formula "6"))
                           )
                           (branch "self.sorted[i].length ≥ 0 FALSE"
                              (rule "replace_known_right" (formula "35") (term "0,1,1,0") (ifseqformula "43"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "43"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_geqRight" (formula "43"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "6") (term "0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "closeFalse" (formula "6"))
                           )
                        )
                     )
                  )
                  (branch "j_0 = i FALSE"
                     (rule "applyEqReverse" (formula "62") (term "0,0,0,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "4") (term "1,0,1,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "35") (term "0,0,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "32") (term "0,0,0,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "34") (term "0,0,0,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "35") (term "1,1,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "4") (term "1,0,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "32") (term "0,1,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "34") (term "0,1,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "inEqSimp_strengthen0" (formula "8") (ifseqformula "42"))
                     (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "8"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                     (rule "add_literals" (formula "42") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "42") (term "1,0,0"))
                     (rule "add_zero_right" (formula "42") (term "0,0"))
                     (rule "qeq_literals" (formula "42") (term "0"))
                     (builtin "One Step Simplification" (formula "42"))
                     (rule "false_right" (formula "42"))
                     (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                     (rule "times_zero_1" (formula "7") (term "0,0"))
                     (rule "add_zero_left" (formula "7") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "7"))
                     (rule "leq_literals" (formula "19") (term "0"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "commute_or" (formula "25") (term "0,0"))
                     (rule "commute_or" (formula "23") (term "0,0"))
                     (rule "commute_or" (formula "35") (term "0,0"))
                     (rule "commute_or" (formula "37") (term "0,0"))
                     (rule "commute_or" (formula "36") (term "0,0"))
                     (rule "commute_or" (formula "22") (term "1,0,1,0"))
                     (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                     (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                     (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
                     (rule "leq_literals" (formula "17") (term "0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "arrayLengthNotNegative" (formula "21") (term "1"))
                     (rule "arrayLengthNotNegative" (formula "24") (term "1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "25") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "ifthenelse_to_or_left" (formula "22") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "1,1,1,0,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "1,0,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "22") (term "1,0,0,0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "22") (term "0,0,0,1,0,0,1,0"))
                     (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0"))
                     (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                     (rule "eqSymm" (formula "35") (term "1,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                     (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                     (rule "commute_or" (formula "35") (term "0,0"))
                     (rule "commute_or_2" (formula "35") (term "0"))
                     (rule "commute_or" (formula "35") (term "1,1,0"))
                     (rule "commute_or_2" (formula "35") (term "0,1,0"))
                     (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                     (rule "commute_or" (formula "35") (term "0,0,1,0"))
                     (rule "cnf_rightDist" (formula "22") (term "0,0,1,0"))
                     (rule "inEqSimp_or_subsumption5" (formula "22") (term "1,0,0,1,0"))
                     (rule "greater_literals" (formula "22") (term "0,1,0,1,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "ifthenelse_split" (formula "34") (term "0"))
                     (branch "self.sorted[j_0].length ≥ 0 TRUE"
                        (rule "eqSymm" (formula "35"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "35"))
                        (rule "replace_known_left" (formula "62") (term "0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "62"))
                        (rule "eqSymm" (formula "62"))
                        (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "35"))
                        (rule "applyEq" (formula "32") (term "1") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "eqSymm" (formula "32") (term "1"))
                        (rule "commute_or" (formula "32"))
                        (rule "inEqSimp_or_weaken1" (formula "32"))
                        (rule "add_zero_right" (formula "32") (term "1,0"))
                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "34")))
                        (rule "true_left" (formula "32"))
                        (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                        (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                        (rule "commute_or" (formula "35") (term "1,1,1,0"))
                        (rule "cnf_rightDist" (formula "35") (term "0"))
                        (rule "distr_forallAnd" (formula "35"))
                        (rule "andLeft" (formula "35"))
                        (rule "commute_or" (formula "36") (term "0"))
                        (rule "shift_paren_or" (formula "35") (term "0"))
                        (rule "commute_or_2" (formula "35") (term "0,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "commute_or_2" (formula "36") (term "0,1,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0,1,0"))
                        (rule "add_zero_right" (formula "36") (term "1,1,0,0,1,0"))
                        (rule "qeq_literals" (formula "36") (term "1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "commute_or_2" (formula "36") (term "0"))
                        (rule "shift_paren_or" (formula "35") (term "0,0"))
                        (rule "shift_paren_or" (formula "36") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0"))
                        (rule "add_literals" (formula "36") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "36") (term "0,1,0"))
                        (rule "leq_literals" (formula "36") (term "1,0"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "true_left" (formula "36"))
                        (rule "commute_or" (formula "35") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "arrayLengthIsAShort" (formula "26") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "arrayLengthNotNegative" (formula "26") (term "1,1,0"))
                        (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch " ¬self.sorted[j_0] = null ∧ ¬self.sorted[j_0].<created> = TRUE TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "notLeft" (formula "1"))
                           (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "44"))
                           (rule "close" (formula "45") (ifseqformula "10"))
                        )
                        (branch " ¬self.sorted[j_0] = null ∧ ¬self.sorted[j_0].<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "¬messages[j_0] = null ∧ ¬messages[j_0].<created> = TRUE TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "3"))
                              (rule "notLeft" (formula "2"))
                              (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "43"))
                              (rule "close" (formula "44") (ifseqformula "9"))
                           )
                           (branch "¬messages[j_0] = null ∧ ¬messages[j_0].<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_to_or_left" (formula "34") (term "0,0,0"))
                              (rule "eqSymm" (formula "34") (term "1,1,0,0,0"))
                              (rule "eqSymm" (formula "34") (term "1,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0"))
                              (rule "commute_or" (formula "34") (term "0,0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "commute_or" (formula "34") (term "1,1,0"))
                              (rule "commute_or_2" (formula "34") (term "0,1,0"))
                              (rule "commute_or" (formula "34") (term "0,0,1,0"))
                              (rule "cnf_rightDist" (formula "34") (term "1,1,0"))
                              (rule "cnf_rightDist" (formula "34") (term "0"))
                              (rule "distr_forallAnd" (formula "34"))
                              (rule "andLeft" (formula "34"))
                              (rule "commute_or" (formula "35") (term "0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "commute_or" (formula "35") (term "1,1,0"))
                              (rule "shift_paren_or" (formula "34") (term "0,0"))
                              (rule "cnf_rightDist" (formula "35") (term "0"))
                              (rule "distr_forallAnd" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "commute_or_2" (formula "35") (term "0"))
                              (rule "shift_paren_or" (formula "36") (term "0"))
                              (rule "commute_or_2" (formula "36") (term "0,0"))
                              (rule "shift_paren_or" (formula "35") (term "0,0"))
                              (rule "commute_or" (formula "35") (term "0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0"))
                              (rule "add_zero_right" (formula "35") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "35") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "shift_paren_or" (formula "34") (term "0,0,0"))
                              (rule "commute_or" (formula "34") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "allLeft" (formula "26") (inst "t=i"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "17"))
                              (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "26") (term "0,0,1"))
                              (rule "leq_literals" (formula "26") (term "0,1"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "26") (term "0,1"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "notLeft" (formula "26"))
                              (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "20") (term "1,0,0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "20") (term "1,1,0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "ifthenelse_split" (formula "33") (term "0"))
                              (branch "messages[j_0].length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "34"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "34"))
                                 (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "65"))
                                 (rule "eqSymm" (formula "65"))
                                 (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "34"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                                 (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "33"))
                                 (rule "leq_literals" (formula "32") (term "0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "true_left" (formula "32"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                 (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                 (rule "leq_literals" (formula "35") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "8"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                                 (rule "true_left" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "27"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "14"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "15"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "28") (term "1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "16"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "allLeft" (formula "44") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "44") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "44") (term "1") (ifseqformula "26"))
                                 (rule "inEqSimp_homoInEq1" (formula "44") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,1"))
                                 (rule "add_literals" (formula "44") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "44") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "44") (term "0,0,1"))
                                 (rule "leq_literals" (formula "44") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "inEqSimp_contradInEq1" (formula "44") (term "1") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "44") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "notLeft" (formula "44"))
                                 (rule "pullOutSelect" (formula "51") (term "0") (inst "selectSK=arr_57"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "41")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                 (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "narrowSelectArrayType" (formula "51") (term "0") (ifseqformula "17") (ifseqformula "56"))
                                 (rule "ifthenelse_split" (formula "10") (term "0"))
                                 (branch " ¬self.sorted[j_0] = null ∧ ¬( self.sorted[j_0].<created> = TRUE ∨ (self.sorted[j_0]@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "10"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "notLeft" (formula "10"))
                                    (rule "orRight" (formula "52"))
                                    (rule "referencedObjectIsCreatedRight" (formula "52") (ifseqformula "51"))
                                    (rule "close" (formula "52") (ifseqformula "17"))
                                 )
                                 (branch " ¬self.sorted[j_0] = null ∧ ¬( self.sorted[j_0].<created> = TRUE ∨ (self.sorted[j_0]@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) FALSE"
                                    (rule "applyEqReverse" (formula "74") (term "0") (ifseqformula "10"))
                                    (rule "hideAuxiliaryEq" (formula "10"))
                                    (rule "ifthenelse_split" (formula "10") (term "0"))
                                    (branch " ¬messages[j_0] = null ∧ ¬( messages[j_0].<created> = TRUE ∨ (messages[j_0]@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "orRight" (formula "51"))
                                       (rule "referencedObjectIsCreatedRight" (formula "51") (ifseqformula "50"))
                                       (rule "close" (formula "51") (ifseqformula "16"))
                                    )
                                    (branch " ¬messages[j_0] = null ∧ ¬( messages[j_0].<created> = TRUE ∨ (messages[j_0]@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "10"))
                                       (rule "hideAuxiliaryEq" (formula "10"))
                                       (rule "commute_or" (formula "27") (term "0,0,1,0,1,1,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,1,1,0,1,1,0"))
                                       (rule "cut_direct" (formula "54") (term "0,0"))
                                       (branch "CUT: self.sorted[j_0] = null TRUE"
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "false_right" (formula "55"))
                                          (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "51"))
                                          (rule "false_right" (formula "51"))
                                          (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "41"))
                                          (rule "applyEq" (formula "42") (term "1,0,0,0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "42") (term "0,0,0"))
                                          (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "72"))
                                          (rule "applyEq" (formula "40") (term "0") (ifseqformula "41"))
                                          (rule "applyEq" (formula "11") (term "0") (ifseqformula "41"))
                                          (rule "applyEq" (formula "42") (term "1,1,0") (ifseqformula "41"))
                                          (rule "cut_direct" (formula "53") (term "0,0"))
                                          (branch "CUT: messages[j_0] = null TRUE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "false_right" (formula "54"))
                                             (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "51"))
                                             (rule "false_right" (formula "51"))
                                             (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "42"))
                                             (rule "true_left" (formula "42"))
                                             (rule "applyEq" (formula "42") (term "1,0,0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "42"))
                                             (rule "true_left" (formula "42"))
                                             (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "69"))
                                             (rule "closeTrue" (formula "69"))
                                          )
                                          (branch "CUT: messages[j_0] = null FALSE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "notRight" (formula "54"))
                                             (rule "replace_known_left" (formula "51") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "54")))
                                             (rule "false_right" (formula "51"))
                                             (rule "narrowSelectArrayType" (formula "72") (term "0") (ifseqformula "17") (ifseqformula "53"))
                                             (rule "eqSymm" (formula "72"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "commute_and" (formula "29") (term "0,0,1,0"))
                                             (rule "allLeft" (formula "32") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "32") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "allLeft" (formula "33") (inst "t=i"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "allLeft" (formula "37") (inst "t=iv_10"))
                                             (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "37") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "allLeft" (formula "34") (inst "t=iv_10"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "34") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "cnf_rightDist" (formula "29") (term "1,1,0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "1,1,1,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "1,0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,1,0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0,1,1,0"))
                                             (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "commute_or_2" (formula "29") (term "1,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,1,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,1,0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,1,0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0,0,1,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "allLeft" (formula "48") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "48") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "48") (term "1,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "48") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "48"))
                                             (rule "pullOutSelect" (formula "48") (term "0,0,0") (inst "selectSK=arr_59"))
                                             (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "61")) (ifInst ""  (formula "44")))
                                             (rule "elementOfSingleton" (formula "48") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "71")))
                                             (rule "applyEqReverse" (formula "49") (term "0,0,0") (ifseqformula "48"))
                                             (rule "hideAuxiliaryEq" (formula "48"))
                                             (rule "narrowSelectArrayType" (formula "48") (term "0,0,0") (ifseqformula "17") (ifseqformula "60"))
                                             (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "48"))
                                             (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "48"))
                                             (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1"))
                                             (rule "mul_literals" (formula "26") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                             (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "26"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "inEqSimp_homoInEq1" (formula "16"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                                             (rule "add_literals" (formula "16") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "16") (term "1,0"))
                                             (rule "add_zero_right" (formula "16") (term "0"))
                                             (rule "leq_literals" (formula "16"))
                                             (rule "closeFalse" (formula "16"))
                                          )
                                       )
                                       (branch "CUT: self.sorted[j_0] = null FALSE"
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "notRight" (formula "55"))
                                          (rule "replace_known_right" (formula "51") (term "0,0") (ifseqformula "55"))
                                          (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "1")))
                                          (rule "false_right" (formula "51"))
                                          (rule "narrowSelectArrayType" (formula "73") (term "0") (ifseqformula "16") (ifseqformula "54"))
                                          (rule "eqSymm" (formula "73"))
                                          (rule "cut_direct" (formula "53") (term "0,0"))
                                          (branch "CUT: messages[j_0] = null TRUE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "false_right" (formula "54"))
                                             (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "51"))
                                             (rule "false_right" (formula "51"))
                                             (rule "applyEq" (formula "43") (term "1,1,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "42") (term "0,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "43") (term "0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "commute_and" (formula "29") (term "0,0,1,0"))
                                             (rule "allLeft" (formula "35") (inst "t=iv_10"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "allLeft" (formula "36") (inst "t=j_0"))
                                             (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "36") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "36"))
                                             (rule "times_zero_1" (formula "27") (term "0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "36"))
                                             (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1"))
                                             (rule "mul_literals" (formula "26") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                             (rule "inEqSimp_contradInEq0" (formula "26") (ifseqformula "16"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "inEqSimp_homoInEq1" (formula "26"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0"))
                                             (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                                             (rule "add_literals" (formula "26") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0"))
                                             (rule "add_zero_right" (formula "26") (term "0"))
                                             (rule "leq_literals" (formula "26"))
                                             (rule "closeFalse" (formula "26"))
                                          )
                                          (branch "CUT: messages[j_0] = null FALSE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "notRight" (formula "54"))
                                             (rule "replace_known_right" (formula "51") (term "0,0") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "1")))
                                             (rule "false_right" (formula "51"))
                                             (rule "narrowSelectArrayType" (formula "73") (term "0") (ifseqformula "17") (ifseqformula "53"))
                                             (rule "eqSymm" (formula "73"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "commute_and" (formula "29") (term "0,0,1,0"))
                                             (rule "allLeft" (formula "35") (inst "t=iv_10"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "allLeft" (formula "32") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "32") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "allLeft" (formula "33") (inst "t=i"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "allLeft" (formula "34") (inst "t=iv_10"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "34") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "cnf_rightDist" (formula "29") (term "1,1,0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "1,1,1,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "1,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,1,0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0,1,1,0"))
                                             (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "commute_or_2" (formula "29") (term "1,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,1,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,1,0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,1,0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0,0,1,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "arrayLengthIsAShort" (formula "45") (term "0"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "true_left" (formula "45"))
                                             (rule "arrayLengthNotNegative" (formula "45") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "46"))
                                             (rule "leq_literals" (formula "45") (term "0"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "true_left" (formula "45"))
                                             (rule "arrayLengthIsAShort" (formula "46") (term "0"))
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "true_left" (formula "46"))
                                             (rule "arrayLengthNotNegative" (formula "46") (term "0"))
                                             (rule "applyEq" (formula "46") (term "0") (ifseqformula "47"))
                                             (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "45"))
                                             (rule "leq_literals" (formula "46") (term "0"))
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "true_left" (formula "46"))
                                             (rule "allLeft" (formula "47") (inst "t=iv_10"))
                                             (rule "replaceKnownSelect_taclet000000_31" (formula "47") (term "0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet101000000_33" (formula "47") (term "0,0,0"))
                                             (rule "eqSymm" (formula "47") (term "0,0"))
                                             (rule "narrowSelectArrayType" (formula "47") (term "1,0,0") (ifseqformula "17") (ifseqformula "59"))
                                             (rule "inEqSimp_commuteGeq" (formula "47") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "47") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "47") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "inEqSimp_contradInEq1" (formula "47") (term "1") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq1" (formula "47") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,1"))
                                             (rule "add_literals" (formula "47") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "47") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "47") (term "0,0,1"))
                                             (rule "leq_literals" (formula "47") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=arr_58"))
                                             (rule "simplifySelectOfAnonEQ" (formula "47") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "59")) (ifInst ""  (formula "1")))
                                             (rule "elementOfSingleton" (formula "47") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "sortsDisjointModuloNull" (formula "47") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "47") (term "0,0,0,0") (ifseqformula "59"))
                                             (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "70")))
                                             (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "47"))
                                             (rule "hideAuxiliaryEq" (formula "47"))
                                             (rule "narrowSelectArrayType" (formula "47") (term "0") (ifseqformula "17") (ifseqformula "58"))
                                             (rule "eqSymm" (formula "47"))
                                             (rule "close" (formula "78") (ifseqformula "47"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "messages[j_0].length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "33"))
                                 (rule "inEqSimp_geqRight" (formula "43"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                 (rule "qeq_literals" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "33"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "33"))
                                 (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "33"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                        )
                     )
                     (branch "self.sorted[j_0].length ≥ 0 FALSE"
                        (rule "eqSymm" (formula "34"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_geqRight" (formula "43"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "33") (term "0,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "33") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "eqSymm" (formula "33"))
                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "35")))
                        (rule "true_left" (formula "33"))
                        (rule "inEqSimp_notGeq" (formula "34") (term "0"))
                        (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0"))
                        (rule "add_zero_left" (formula "34") (term "0,0"))
                        (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                        (rule "shift_paren_or" (formula "23") (term "0,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                        (rule "commute_or" (formula "35") (term "1,1,1,0"))
                        (rule "cnf_rightDist" (formula "35") (term "0"))
                        (rule "distr_forallAnd" (formula "35"))
                        (rule "andLeft" (formula "35"))
                        (rule "commute_or_2" (formula "35") (term "0"))
                        (rule "commute_or" (formula "36") (term "0"))
                        (rule "shift_paren_or" (formula "35") (term "0,0"))
                        (rule "commute_or_2" (formula "36") (term "0,1,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0,1,0"))
                        (rule "add_zero_right" (formula "36") (term "1,1,0,0,1,0"))
                        (rule "qeq_literals" (formula "36") (term "1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "commute_or_2" (formula "36") (term "0"))
                        (rule "shift_paren_or" (formula "36") (term "0,0"))
                        (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                        (rule "commute_or" (formula "35") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "arrayLengthIsAShort" (formula "27") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "arrayLengthNotNegative" (formula "27") (term "1,1,0"))
                        (rule "shift_paren_or" (formula "37") (term "0,0,0,0"))
                        (rule "commute_or" (formula "23") (term "0,0,0,0,1,0"))
                        (rule "ifthenelse_split" (formula "6") (term "0"))
                        (branch "messages[j_0].length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "64") (term "0,1") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "64"))
                           (rule "replace_known_left" (formula "37") (term "0,1,1,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "replace_known_left" (formula "38") (term "0,1,1,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "38"))
                           (rule "inEqSimp_contradEq7" (formula "36") (term "1") (ifseqformula "6"))
                           (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                           (rule "add_literals" (formula "36") (term "0,0,1"))
                           (rule "leq_literals" (formula "36") (term "0,1"))
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "36") (term "0"))
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "closeFalse" (formula "36"))
                        )
                        (branch "messages[j_0].length ≥ 1 FALSE"
                           (rule "replace_known_right" (formula "36") (term "0,1,1,0") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "replace_known_right" (formula "37") (term "0,1,1,0") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "inEqSimp_geqRight" (formula "45"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "true_left" (formula "36"))
                           (rule "inEqSimp_homoInEq1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1,0"))
                           (rule "add_zero_right" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "8") (term "0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "closeFalse" (formula "8"))
                        )
                     )
                  )
               )
               (branch "self.sorted.<created> = TRUE FALSE"
                  (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "40"))
                  (rule "close" (formula "38") (ifseqformula "5"))
               )
            )
            (branch "CUT: result_0.<created> = TRUE FALSE"
               (builtin "One Step Simplification" (formula "24"))
               (rule "arrayLengthIsAShort" (formula "11") (term "1,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "arrayLengthNotNegative" (formula "11") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "19") (ifseqformula "7"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "21"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "21"))
               (rule "notLeft" (formula "20"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "20"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "19"))
               (rule "nonNull" (formula "22") (inst "i=i_1"))
               (rule "greater_literals" (formula "22") (term "0,1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "sub_literals" (formula "22") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "andLeft" (formula "22"))
               (rule "notLeft" (formula "22"))
               (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "37"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "21") (inst "i=i_1"))
               (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "greater_literals" (formula "21") (term "0,1"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "notLeft" (formula "21"))
               (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "37"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "20") (inst "i=i_1"))
               (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "greater_literals" (formula "20") (term "0,1"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "notLeft" (formula "20"))
               (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "37"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
               (rule "notLeft" (formula "19"))
               (rule "replace_known_right" (formula "28") (term "0,0,0,0") (ifseqformula "37"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "37"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "28") (term "0"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "applyEq" (formula "19") (term "1,1,1,0,0") (ifseqformula "17"))
               (rule "nnf_imp2or" (formula "20") (term "0"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_imp2or" (formula "19") (term "0"))
               (rule "nnf_notAnd" (formula "20") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "30") (term "0"))
               (rule "commute_or_2" (formula "22") (term "0"))
               (rule "commute_or_2" (formula "20") (term "0"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "31") (ifseqformula "7"))
               (rule "replaceKnownSelect_taclet0000_4" (formula "31") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0000_5" (formula "31") (term "1,1,0,0,0,0,0,0"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "32"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "32"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "33"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "33"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "notLeft" (formula "31"))
               (rule "notLeft" (formula "31"))
               (rule "nonNull" (formula "33") (inst "i=i_1"))
               (rule "greater_literals" (formula "33") (term "0,1"))
               (builtin "One Step Simplification" (formula "33"))
               (rule "sub_literals" (formula "33") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "33"))
               (rule "andLeft" (formula "33"))
               (rule "notLeft" (formula "33"))
               (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "32") (inst "i=i_1"))
               (rule "greater_literals" (formula "32") (term "0,1"))
               (builtin "One Step Simplification" (formula "32"))
               (rule "sub_literals" (formula "32") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "32"))
               (rule "andLeft" (formula "32"))
               (rule "notLeft" (formula "32"))
               (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "31") (inst "i=i_1"))
               (rule "sub_literals" (formula "31") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "47")))
               (rule "greater_literals" (formula "31") (term "0"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
               (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
               (rule "pullOutSelect" (formula "45") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_6"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_6"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_6"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_6"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_6"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_6"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_6"))
               (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
               (rule "applyEq" (formula "40") (term "0") (ifseqformula "33"))
               (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "24"))
               (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "55")) (ifInst ""  (formula "6")))
               (rule "elementOfSingleton" (formula "33") (term "0,0"))
               (builtin "One Step Simplification" (formula "33"))
               (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "33"))
               (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
               (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
               (rule "hideAuxiliaryEq" (formula "33"))
               (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_6"))
               (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
               (rule "applyEq" (formula "39") (term "0") (ifseqformula "32"))
               (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "24"))
               (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "54")) (ifInst ""  (formula "6")))
               (rule "elementOfSingleton" (formula "32") (term "0,0"))
               (builtin "One Step Simplification" (formula "32"))
               (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
               (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
               (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "32"))
               (rule "hideAuxiliaryEq" (formula "32"))
               (rule "nnf_imp2or" (formula "31") (term "0"))
               (rule "nnf_imp2or" (formula "33") (term "0"))
               (rule "nnf_imp2or" (formula "32") (term "0"))
               (rule "nnf_notAnd" (formula "31") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
               (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "33") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
               (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
               (rule "mul_literals" (formula "33") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "32") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
               (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
               (rule "mul_literals" (formula "32") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0"))
               (rule "commute_or_2" (formula "19") (term "0"))
               (rule "commute_or_2" (formula "18") (term "0,1,1,0"))
               (rule "commute_or" (formula "30") (term "0,0"))
               (rule "commute_or" (formula "22") (term "0,0"))
               (rule "commute_or" (formula "20") (term "0,0"))
               (rule "ifthenelse_to_or_right" (formula "18") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,1,1,0,1,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,1,1,0,1,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,1,0,1,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,1,1,0,1,0"))
               (rule "commute_or_2" (formula "31") (term "0"))
               (rule "commute_or_2" (formula "33") (term "0"))
               (rule "commute_or_2" (formula "32") (term "0"))
               (rule "ifthenelse_split" (formula "28") (term "0"))
               (branch "self.sorted.<created> = TRUE TRUE"
                  (rule "applyEqReverse" (formula "30") (term "0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "27") (term "0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "27") (term "0,1,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,1,0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "0,1,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "29"))
                  (rule "hideAuxiliaryEq" (formula "29"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "57") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "57") (term "1,1,0,1,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "57") (term "0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "57") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_left" (formula "56") (term "0") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "56"))
                  (rule "allRight" (formula "56") (inst "sk=iv_9"))
                  (rule "orRight" (formula "56"))
                  (rule "orRight" (formula "56"))
                  (rule "inEqSimp_leqRight" (formula "56"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "58") (term "0,0,1") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "1")))
                  (rule "inEqSimp_geqRight" (formula "57"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "58") (term "0,0"))
                  (rule "eqSymm" (formula "58"))
                  (rule "polySimp_addComm1" (formula "58") (term "0,0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "58") (term "0,0"))
                  (rule "eqSymm" (formula "58"))
                  (rule "polySimp_addComm1" (formula "58") (term "0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "58") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "58") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "58") (term "1,0,0"))
                  (rule "mul_literals" (formula "58") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "58") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "58") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "58") (term "1,0,1"))
                  (rule "mul_literals" (formula "58") (term "0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "58") (term "1,1,0,1"))
                  (rule "pullOutSelect" (formula "58") (term "1,0") (inst "selectSK=arr_34"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                  (rule "pullOutSelect" (formula "59") (term "1,1") (inst "selectSK=arr_35"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "27"))
                  (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=arr_36"))
                  (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "sortsDisjointModuloNull" (formula "2") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "2") (term "1,0,0,0,0") (ifseqformula "52"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_37"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "53"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_split" (formula "7") (term "0"))
                  (branch "j_0 = i TRUE"
                     (rule "applyEqReverse" (formula "36") (term "0,0,0,1,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "36") (term "1,1,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "35") (term "0,1,1") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "35") (term "0,0,0,1") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "33") (term "0,0,0,1") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "63") (term "0,0,0,1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "eqSymm" (formula "35") (term "0,0,0"))
                     (rule "eqSymm" (formula "34"))
                     (rule "eqSymm" (formula "32"))
                     (rule "eqSymm" (formula "62"))
                     (rule "applyEq" (formula "32") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "35") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "4") (term "0,2,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "34"))
                     (rule "applyEq" (formula "35") (term "0,2,0,0,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "35") (term "0,2,0,1,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "34") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "1") (term "0,2,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "1") (term "0,2,1,2,0") (ifseqformula "7"))
                     (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "10") (ifseqformula "58"))
                     (rule "applyEq" (formula "3") (term "0,2,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "4") (term "0,2,1,0,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "58"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "9"))
                     (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
                     (rule "add_literals" (formula "9") (term "1,0"))
                     (rule "times_zero_1" (formula "9") (term "0"))
                     (rule "qeq_literals" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "applyEq" (formula "31") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "2") (term "0,2,0,0,0,0,0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "ifthenelse_negated" (formula "2") (term "0"))
                     (rule "applyEq" (formula "34") (term "0,2,1,1,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "3") (term "0,2,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "4") (term "0,2,1,0,1,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "4") (term "0,2,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "61") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                     (rule "applyEq" (formula "3") (term "0,2,1,2,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "2") (term "0,2,1,2,0") (ifseqformula "7"))
                     (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "37") (ifseqformula "56"))
                     (rule "applyEq" (formula "2") (term "0,2,1,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "30"))
                     (rule "applyEq" (formula "5") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "1") (term "0,2,1,2,0") (ifseqformula "7"))
                     (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "26") (ifseqformula "56"))
                     (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                     (rule "eqSymm" (formula "30"))
                     (rule "applyEq" (formula "5") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "2") (term "0,2,1,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "0,2,1,1,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "32") (term "0,2,0,1,1") (ifseqformula "7"))
                     (rule "applyEq" (formula "32") (term "0,2,0,0,0,1") (ifseqformula "7"))
                     (rule "applyEq" (formula "60") (term "0,2,0,0,0,1") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "30"))
                     (rule "applyEq" (formula "30") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "eqSymm" (formula "30"))
                     (rule "applyEq" (formula "30") (term "0,2,0,0,0,0") (ifseqformula "7"))
                     (rule "eqSymm" (formula "30"))
                     (rule "applyEq" (formula "33") (term "0,2,0,1,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "0,2,0,0,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "30") (term "0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "30") (term "0,2,0,1,1") (ifseqformula "7"))
                     (rule "commute_or" (formula "24") (term "0,0"))
                     (rule "commute_or" (formula "22") (term "0,0"))
                     (rule "commute_or" (formula "34") (term "0,0"))
                     (rule "commute_or" (formula "36") (term "0,0"))
                     (rule "commute_or" (formula "35") (term "0,0"))
                     (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "arrayLengthNotNegative" (formula "14") (term "1,1"))
                     (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "16"))
                     (rule "leq_literals" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                     (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                     (rule "arrayLengthIsAShort" (formula "14") (term "1,1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "shift_paren_or" (formula "21") (term "1,0,1,0"))
                     (rule "arrayLengthIsAShort" (formula "23") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "arrayLengthNotNegative" (formula "23") (term "1,1,0"))
                     (rule "ifthenelse_to_or_left" (formula "21") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "21") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,0,1,0,0,1,0"))
                     (rule "commute_or" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "ifthenelse_to_or_left" (formula "34") (term "0,0,0"))
                     (rule "eqSymm" (formula "34") (term "1,0,0,0,0"))
                     (rule "eqSymm" (formula "34") (term "1,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "34") (term "0,1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "34") (term "0,0,1,1,0,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,1,1,0,0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,0,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "1,0,0,1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "34") (term "1,0,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,1,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,1,1,0,0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,0,1,0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "34") (term "0,0,1,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1,0,1,1,0,0,0"))
                     (rule "commute_or" (formula "34") (term "0,0"))
                     (rule "commute_or_2" (formula "34") (term "0"))
                     (rule "commute_or_2" (formula "34") (term "0,1,0"))
                     (rule "commute_or" (formula "34") (term "1,1,0"))
                     (rule "commute_or" (formula "34") (term "0,0,1,0"))
                     (rule "commute_or_2" (formula "34") (term "0,1,1,0"))
                     (rule "cnf_rightDist" (formula "21") (term "0,0,1,0"))
                     (rule "arrayLengthIsAShort" (formula "25") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "arrayLengthNotNegative" (formula "25") (term "1,1,0"))
                     (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                     (rule "commute_or_2" (formula "21") (term "1,0,0,1,0"))
                     (rule "inEqSimp_or_subsumption4" (formula "21") (term "0,1,0,0,1,0"))
                     (rule "greater_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                     (rule "commute_or" (formula "35") (term "1,1,1,0"))
                     (rule "cnf_rightDist" (formula "35") (term "0"))
                     (rule "distr_forallAnd" (formula "35"))
                     (rule "andLeft" (formula "35"))
                     (rule "commute_or" (formula "36") (term "0"))
                     (rule "commute_or_2" (formula "35") (term "0"))
                     (rule "commute_or_2" (formula "36") (term "0,1,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0,1,0"))
                     (rule "add_zero_right" (formula "36") (term "1,1,0,0,1,0"))
                     (rule "qeq_literals" (formula "36") (term "1,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "commute_or_2" (formula "36") (term "0"))
                     (rule "shift_paren_or" (formula "35") (term "0,0"))
                     (rule "shift_paren_or" (formula "36") (term "0,0"))
                     (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                     (rule "commute_or" (formula "35") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "shift_paren_or" (formula "36") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "21") (term "0,0,0,1,0"))
                     (rule "commute_or" (formula "36") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "ifthenelse_split" (formula "34") (term "0"))
                     (branch " messages[i]@anon_heap_getFirst«anonHeapFunction».length ≥ 1 TRUE"
                        (rule "eqSymm" (formula "35"))
                        (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "35"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "35"))
                        (rule "replace_known_left" (formula "64") (term "0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "64"))
                        (rule "eqSymm" (formula "64"))
                        (rule "applyEq" (formula "32") (term "1") (ifseqformula "35"))
                        (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,0"))
                        (rule "add_literals" (formula "37") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "37") (term "0,1,0"))
                        (rule "leq_literals" (formula "37") (term "1,0"))
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "true_left" (formula "37"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch " (messages[i]@anon_heap_getFirst«anonHeapFunction»).<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "44"))
                              (rule "close" (formula "43") (ifseqformula "7"))
                           )
                           (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_to_or_left" (formula "34") (term "0,0,0"))
                              (rule "eqSymm" (formula "34") (term "1,1,0,0,0"))
                              (rule "eqSymm" (formula "34") (term "1,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                              (rule "commute_or" (formula "34") (term "0,0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "commute_or_2" (formula "34") (term "0,1,0"))
                              (rule "commute_or" (formula "34") (term "1,1,0"))
                              (rule "commute_or" (formula "34") (term "0,0,1,0"))
                              (rule "cnf_rightDist" (formula "34") (term "1,1,0"))
                              (rule "cnf_rightDist" (formula "34") (term "0"))
                              (rule "distr_forallAnd" (formula "34"))
                              (rule "andLeft" (formula "34"))
                              (rule "commute_or" (formula "35") (term "0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "commute_or" (formula "35") (term "1,1,0"))
                              (rule "shift_paren_or" (formula "34") (term "0,0"))
                              (rule "cnf_rightDist" (formula "35") (term "0"))
                              (rule "distr_forallAnd" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "commute_or_2" (formula "35") (term "0"))
                              (rule "shift_paren_or" (formula "36") (term "0"))
                              (rule "commute_or_2" (formula "36") (term "0,0"))
                              (rule "shift_paren_or" (formula "35") (term "0,0"))
                              (rule "commute_or" (formula "35") (term "0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0"))
                              (rule "add_zero_right" (formula "35") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "35") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "shift_paren_or" (formula "34") (term "0,0,0"))
                              (rule "commute_or" (formula "34") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "ifthenelse_split" (formula "30") (term "0"))
                              (branch "self.sorted[i].length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "31"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "31"))
                                 (rule "replace_known_left" (formula "63") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "63"))
                                 (rule "applyEq" (formula "33") (term "1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "eqSymm" (formula "33") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "33") (term "1") (ifseqformula "30"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "30"))
                                 (rule "leq_literals" (formula "33") (term "0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                 (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                 (rule "leq_literals" (formula "34") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "allLeft" (formula "25") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "15"))
                                 (rule "qeq_literals" (formula "25") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                 (rule "leq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "ifthenelse_to_or_left" (formula "19") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "19") (term "1,0,0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "19") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "6"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "27"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "8"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1,0,0") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "48"))
                                 (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "36")))
                                 (rule "true_left" (formula "17"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "14"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "commute_or" (formula "28") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,1,0"))
                                 (rule "allLeft" (formula "43") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "43") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "43") (term "1") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "43") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0,1"))
                                 (rule "add_literals" (formula "43") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "43") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "43") (term "0,0,1"))
                                 (rule "leq_literals" (formula "43") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "inEqSimp_contradInEq1" (formula "43") (term "1") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "43") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "notLeft" (formula "43"))
                                 (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=arr_51"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "42")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                 (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "narrowSelectArrayType" (formula "50") (term "0") (ifseqformula "15") (ifseqformula "54"))
                                 (rule "replace_known_right" (formula "11") (term "0,0,0,0") (ifseqformula "50"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "replace_known_right" (formula "52") (term "0,0") (ifseqformula "50"))
                                 (builtin "One Step Simplification" (formula "52"))
                                 (rule "notRight" (formula "52"))
                                 (rule "replace_known_left" (formula "12") (term "0,0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "applyEqReverse" (formula "72") (term "0") (ifseqformula "12"))
                                 (rule "hideAuxiliaryEq" (formula "12"))
                                 (rule "narrowSelectArrayType" (formula "71") (term "0") (ifseqformula "15") (ifseqformula "50"))
                                 (rule "eqSymm" (formula "71"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "28") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "28") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "28") (term "0,0,1,1,0,1,1,0"))
                                 (rule "allLeft" (formula "34") (inst "t=iv_9"))
                                 (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "34") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "allLeft" (formula "31") (inst "t=iv_9"))
                                 (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "31") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "allLeft" (formula "32") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "32") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "cnf_rightDist" (formula "28") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "28") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "commute_or" (formula "28") (term "1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "28") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "28") (term "1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "28") (term "0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,0,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "shift_paren_or" (formula "28") (term "0,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "28") (term "0,0,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "arrayLengthNotNegative" (formula "42") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "43"))
                                 (rule "leq_literals" (formula "42") (term "0"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "arrayLengthIsAShort" (formula "42") (term "0"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "arrayLengthIsAShort" (formula "43") (term "0"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "true_left" (formula "43"))
                                 (rule "arrayLengthNotNegative" (formula "43") (term "0"))
                                 (rule "applyEq" (formula "43") (term "0") (ifseqformula "44"))
                                 (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "42"))
                                 (rule "leq_literals" (formula "43") (term "0"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "true_left" (formula "43"))
                                 (rule "allLeft" (formula "45") (inst "t=iv_9"))
                                 (rule "inEqSimp_commuteGeq" (formula "45") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "45") (term "1") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "45") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,1"))
                                 (rule "add_literals" (formula "45") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "45") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "45") (term "0,0,1"))
                                 (rule "leq_literals" (formula "45") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "inEqSimp_contradInEq1" (formula "45") (term "1") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "45") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "pullOutSelect" (formula "45") (term "0") (inst "selectSK=arr_52"))
                                 (rule "simplifySelectOfAnonEQ" (formula "45") (ifseqformula "39"))
                                 (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "72")) (ifInst ""  (formula "11")))
                                 (rule "eqSymm" (formula "46"))
                                 (rule "simplifySelectOfAnonEQ" (formula "46") (ifseqformula "39"))
                                 (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "55")) (ifInst ""  (formula "1")))
                                 (rule "elementOfSingleton" (formula "45") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "elementOfSingleton" (formula "46") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "46"))
                                 (rule "sortsDisjointModuloNull" (formula "45") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "45") (term "1,0,0,0") (ifseqformula "67"))
                                 (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "72")))
                                 (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "45"))
                                 (rule "hideAuxiliaryEq" (formula "45"))
                                 (rule "sortsDisjointModuloNull" (formula "45") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "45") (term "1,0,0,0") (ifseqformula "66"))
                                 (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "54")))
                                 (rule "eqSymm" (formula "45"))
                                 (rule "narrowSelectArrayType" (formula "45") (term "0") (ifseqformula "15") (ifseqformula "71"))
                                 (rule "eqSymm" (formula "45"))
                                 (rule "narrowSelectArrayType" (formula "45") (term "0") (ifseqformula "15") (ifseqformula "54"))
                                 (rule "eqSymm" (formula "45"))
                                 (rule "close" (formula "75") (ifseqformula "45"))
                              )
                              (branch "self.sorted[i].length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "30"))
                                 (rule "inEqSimp_geqRight" (formula "43"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "31"))
                                 (rule "qeq_literals" (formula "33"))
                                 (rule "closeFalse" (formula "33"))
                              )
                           )
                        )
                        (branch " (messages[i]@anon_heap_getFirst«anonHeapFunction»).<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "43"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "44"))
                              (rule "close" (formula "43") (ifseqformula "7"))
                           )
                           (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_to_or_left" (formula "34") (term "0,0,0"))
                              (rule "eqSymm" (formula "34") (term "1,0,0,0,0"))
                              (rule "eqSymm" (formula "34") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                              (rule "commute_or" (formula "34") (term "0,0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "commute_or_2" (formula "34") (term "0,1,0"))
                              (rule "commute_or" (formula "34") (term "1,1,0"))
                              (rule "commute_or" (formula "34") (term "0,0,1,0"))
                              (rule "cnf_rightDist" (formula "34") (term "1,1,0"))
                              (rule "cnf_rightDist" (formula "34") (term "0"))
                              (rule "distr_forallAnd" (formula "34"))
                              (rule "andLeft" (formula "34"))
                              (rule "commute_or" (formula "35") (term "0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "commute_or" (formula "35") (term "1,1,0"))
                              (rule "shift_paren_or" (formula "34") (term "0,0"))
                              (rule "cnf_rightDist" (formula "35") (term "0"))
                              (rule "distr_forallAnd" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "commute_or_2" (formula "35") (term "0"))
                              (rule "shift_paren_or" (formula "36") (term "0"))
                              (rule "commute_or_2" (formula "36") (term "0,0"))
                              (rule "shift_paren_or" (formula "35") (term "0,0"))
                              (rule "commute_or" (formula "35") (term "0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0"))
                              (rule "add_literals" (formula "35") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "35") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "shift_paren_or" (formula "34") (term "0,0,0"))
                              (rule "commute_or" (formula "34") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "ifthenelse_split" (formula "30") (term "0"))
                              (branch "self.sorted[i].length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "31"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "31"))
                                 (rule "replace_known_left" (formula "64") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "64"))
                                 (rule "eqSymm" (formula "64"))
                                 (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "applyEq" (formula "33") (term "1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "eqSymm" (formula "33") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "33") (term "1") (ifseqformula "30"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "30"))
                                 (rule "leq_literals" (formula "33") (term "0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                 (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                 (rule "leq_literals" (formula "34") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "allLeft" (formula "25") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "25") (term "0,0,1"))
                                 (rule "leq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "15"))
                                 (rule "qeq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "ifthenelse_to_or_right" (formula "19") (term "0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "26"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "63"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "6"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "7"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "8"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1,1,0,0") (ifseqformula "9"))
                                 (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "36"))
                                 (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "49")))
                                 (rule "true_left" (formula "15"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                 (rule "allLeft" (formula "42") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "42") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "42") (term "1") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "42") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,1"))
                                 (rule "add_literals" (formula "42") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "42") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "42") (term "0,0,1"))
                                 (rule "leq_literals" (formula "42") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "inEqSimp_contradInEq1" (formula "42") (term "1") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "42") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=arr_49"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "41")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                                 (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "narrowSelectArrayType" (formula "49") (term "0") (ifseqformula "14") (ifseqformula "54"))
                                 (rule "replace_known_right" (formula "10") (term "0,0,0,0") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "replace_known_right" (formula "51") (term "0,0") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "51"))
                                 (rule "notRight" (formula "51"))
                                 (rule "replace_known_left" (formula "11") (term "0,0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "applyEqReverse" (formula "72") (term "0") (ifseqformula "11"))
                                 (rule "hideAuxiliaryEq" (formula "11"))
                                 (rule "narrowSelectArrayType" (formula "71") (term "0") (ifseqformula "14") (ifseqformula "49"))
                                 (rule "eqSymm" (formula "71"))
                                 (rule "commute_or" (formula "27") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "27") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "27") (term "0,0,1,1,0,1,1,0"))
                                 (rule "allLeft" (formula "33") (inst "t=iv_9"))
                                 (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "allLeft" (formula "30") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "30") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "allLeft" (formula "31") (inst "t=iv_9"))
                                 (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "31") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "cnf_rightDist" (formula "27") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "27") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "shift_paren_or" (formula "27") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "27") (term "0,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "27") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "27") (term "1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,0,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "27") (term "0,0,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "arrayLengthIsAShort" (formula "41") (term "0"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "true_left" (formula "41"))
                                 (rule "arrayLengthNotNegative" (formula "41") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "42"))
                                 (rule "leq_literals" (formula "41") (term "0"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "true_left" (formula "41"))
                                 (rule "arrayLengthNotNegative" (formula "42") (term "0"))
                                 (rule "applyEq" (formula "42") (term "0") (ifseqformula "43"))
                                 (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "41"))
                                 (rule "leq_literals" (formula "42") (term "0"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "arrayLengthIsAShort" (formula "42") (term "0"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "allLeft" (formula "44") (inst "t=iv_9"))
                                 (rule "inEqSimp_commuteGeq" (formula "44") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "44") (term "1,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "44") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "inEqSimp_contradInEq1" (formula "44") (term "1") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "44") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,1"))
                                 (rule "add_literals" (formula "44") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "44") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "44") (term "0,0,1"))
                                 (rule "leq_literals" (formula "44") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "pullOutSelect" (formula "44") (term "1") (inst "selectSK=arr_50"))
                                 (rule "simplifySelectOfAnonEQ" (formula "44") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "54")) (ifInst ""  (formula "1")))
                                 (rule "simplifySelectOfAnonEQ" (formula "45") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "72")) (ifInst ""  (formula "56")))
                                 (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "45"))
                                 (rule "hideAuxiliaryEq" (formula "45"))
                                 (rule "elementOfSingleton" (formula "44") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "sortsDisjointModuloNull" (formula "44") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "44") (term "0,0,0,0") (ifseqformula "53"))
                                 (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "66")))
                                 (rule "eqSymm" (formula "44"))
                                 (rule "narrowSelectArrayType" (formula "44") (term "0") (ifseqformula "37") (ifseqformula "71"))
                                 (rule "eqSymm" (formula "44"))
                                 (rule "narrowSelectArrayType" (formula "44") (term "0") (ifseqformula "14") (ifseqformula "53"))
                                 (rule "eqSymm" (formula "44"))
                                 (rule "close" (formula "75") (ifseqformula "44"))
                              )
                              (branch "self.sorted[i].length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "30"))
                                 (rule "inEqSimp_geqRight" (formula "43"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "31"))
                                 (rule "qeq_literals" (formula "33"))
                                 (rule "closeFalse" (formula "33"))
                              )
                           )
                        )
                     )
                     (branch " messages[i]@anon_heap_getFirst«anonHeapFunction».length ≥ 1 FALSE"
                        (rule "eqSymm" (formula "34"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_geqRight" (formula "44"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_notGeq" (formula "35") (term "0"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "inEqSimp_or_weaken0" (formula "35"))
                        (rule "add_literals" (formula "35") (term "1,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_contradInEq0" (formula "33") (term "0,0") (ifseqformula "35"))
                        (rule "qeq_literals" (formula "33") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "eqSymm" (formula "33"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0"))
                        (rule "mul_literals" (formula "33") (term "1,0"))
                        (rule "inEqSimp_or_weaken0" (formula "33"))
                        (rule "add_literals" (formula "33") (term "1,0"))
                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "35")))
                        (rule "true_left" (formula "33"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch " (messages[i]@anon_heap_getFirst«anonHeapFunction»).<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "63") (term "1,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE TRUE"
                              (rule "andLeft" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "44"))
                              (rule "close" (formula "43") (ifseqformula "8"))
                           )
                           (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch "self.sorted[i].length ≥ 0 TRUE"
                                 (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "replace_known_left" (formula "63") (term "0,1") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "63"))
                                 (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "33"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "applyEq" (formula "33") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "add_zero_right" (formula "33") (term "1,1,0,0,0,0,0,0"))
                                 (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "6") (term "0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "closeFalse" (formula "6"))
                              )
                              (branch "self.sorted[i].length ≥ 0 FALSE"
                                 (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "inEqSimp_geqRight" (formula "42"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                           )
                        )
                        (branch " (messages[i]@anon_heap_getFirst«anonHeapFunction»).<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "43"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE TRUE"
                              (rule "andLeft" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "44"))
                              (rule "close" (formula "43") (ifseqformula "8"))
                           )
                           (branch " ¬self.sorted[i] = null ∧ ¬self.sorted[i].<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch "self.sorted[i].length ≥ 0 TRUE"
                                 (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "replace_known_left" (formula "64") (term "0,1") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "64"))
                                 (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "33"))
                                 (rule "applyEq" (formula "34") (term "0") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "applyEq" (formula "34") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "add_zero_right" (formula "34") (term "1,1,0,0,0,0,0,0"))
                                 (rule "applyEq" (formula "35") (term "1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                              (branch "self.sorted[i].length ≥ 0 FALSE"
                                 (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_geqRight" (formula "42"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "6") (term "0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "closeFalse" (formula "6"))
                              )
                           )
                        )
                     )
                  )
                  (branch "j_0 = i FALSE"
                     (rule "applyEqReverse" (formula "63") (term "0,0,0,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "35") (term "0,0,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "34") (term "0,0,0,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "32") (term "0,0,0,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "34") (term "0,1,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "32") (term "0,1,1") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "35") (term "1,1,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0") (ifseqformula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "inEqSimp_strengthen0" (formula "8") (ifseqformula "42"))
                     (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "8"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                     (rule "add_literals" (formula "42") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "42") (term "1,0,0"))
                     (rule "add_zero_right" (formula "42") (term "0,0"))
                     (rule "qeq_literals" (formula "42") (term "0"))
                     (builtin "One Step Simplification" (formula "42"))
                     (rule "false_right" (formula "42"))
                     (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                     (rule "times_zero_1" (formula "7") (term "0,0"))
                     (rule "add_zero_left" (formula "7") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "7"))
                     (rule "leq_literals" (formula "19") (term "0"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "commute_or" (formula "25") (term "0,0"))
                     (rule "commute_or" (formula "23") (term "0,0"))
                     (rule "commute_or" (formula "35") (term "0,0"))
                     (rule "commute_or" (formula "37") (term "0,0"))
                     (rule "commute_or" (formula "36") (term "0,0"))
                     (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "16") (term "1,1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "arrayLengthNotNegative" (formula "16") (term "1,1"))
                     (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "18"))
                     (rule "leq_literals" (formula "16") (term "0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                     (rule "shift_paren_or" (formula "22") (term "1,0,1,0"))
                     (rule "arrayLengthIsAShort" (formula "24") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "arrayLengthNotNegative" (formula "24") (term "1,1,0"))
                     (rule "ifthenelse_to_or_left" (formula "22") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "22") (term "1,0,0,0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "22") (term "0,0,0,1,0,0,1,0"))
                     (rule "ifthenelse_to_or_right" (formula "35") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                     (rule "commute_or" (formula "35") (term "0,0"))
                     (rule "commute_or_2" (formula "35") (term "0"))
                     (rule "commute_or" (formula "35") (term "1,1,0"))
                     (rule "commute_or_2" (formula "35") (term "0,1,0"))
                     (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                     (rule "commute_or" (formula "35") (term "0,0,1,0"))
                     (rule "commute_or" (formula "22") (term "1,1,0,0,1,0"))
                     (rule "ifthenelse_split" (formula "32") (term "0"))
                     (branch "self.sorted[j_0].length ≥ 1 TRUE"
                        (rule "eqSymm" (formula "33"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "33"))
                        (rule "replace_known_left" (formula "63") (term "0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "63"))
                        (rule "eqSymm" (formula "63"))
                        (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "33"))
                        (rule "applyEq" (formula "35") (term "1") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "eqSymm" (formula "35") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "35") (term "1") (ifseqformula "32"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                        (rule "add_literals" (formula "35") (term "0,0,1"))
                        (rule "leq_literals" (formula "35") (term "0,1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "32"))
                        (rule "leq_literals" (formula "35") (term "0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                        (rule "cnf_rightDist" (formula "22") (term "0,0,1,0"))
                        (rule "commute_or_2" (formula "22") (term "1,0,0,1,0"))
                        (rule "inEqSimp_or_subsumption4" (formula "22") (term "0,1,0,0,1,0"))
                        (rule "greater_literals" (formula "22") (term "0,0,0,1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                        (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,1,1,0"))
                        (rule "add_literals" (formula "35") (term "1,1,0,0,1,1,0"))
                        (rule "qeq_literals" (formula "35") (term "1,0,0,1,1,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "shift_paren_or" (formula "35") (term "1,1,0"))
                        (rule "commute_or" (formula "35") (term "0,1,1,0"))
                        (rule "cnf_rightDist" (formula "35") (term "0"))
                        (rule "distr_forallAnd" (formula "35"))
                        (rule "andLeft" (formula "35"))
                        (rule "commute_or_2" (formula "35") (term "0"))
                        (rule "shift_paren_or" (formula "36") (term "0"))
                        (rule "commute_or_2" (formula "36") (term "0,0"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "commute_or_2" (formula "36") (term "0,0"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "shift_paren_or" (formula "35") (term "0,0"))
                        (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                        (rule "commute_or" (formula "35") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "arrayLengthIsAShort" (formula "26") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "arrayLengthNotNegative" (formula "26") (term "1,1,0"))
                        (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch " ¬self.sorted[j_0] = null ∧ ¬self.sorted[j_0].<created> = TRUE TRUE"
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "46"))
                           (rule "close" (formula "45") (ifseqformula "10"))
                        )
                        (branch " ¬self.sorted[j_0] = null ∧ ¬self.sorted[j_0].<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "¬messages[j_0] = null ∧ ¬messages[j_0].<created> = TRUE TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "45"))
                              (rule "close" (formula "44") (ifseqformula "9"))
                           )
                           (branch "¬messages[j_0] = null ∧ ¬messages[j_0].<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "allLeft" (formula "26") (inst "t=i"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "26") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "17"))
                              (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                              (rule "add_literals" (formula "26") (term "0,0,1"))
                              (rule "leq_literals" (formula "26") (term "0,1"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "notLeft" (formula "26"))
                              (rule "ifthenelse_to_or_left" (formula "34") (term "0,0,0,0"))
                              (rule "eqSymm" (formula "34") (term "1,1,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0,0"))
                              (rule "commute_or" (formula "34") (term "0,0,0"))
                              (rule "commute_or_2" (formula "34") (term "0,0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "commute_or_2" (formula "34") (term "0,1,0"))
                              (rule "commute_or" (formula "34") (term "1,1,0"))
                              (rule "commute_or" (formula "34") (term "0,0,1,0"))
                              (rule "cnf_rightDist" (formula "34") (term "1,1,0"))
                              (rule "cnf_rightDist" (formula "34") (term "0"))
                              (rule "distr_forallAnd" (formula "34"))
                              (rule "andLeft" (formula "34"))
                              (rule "commute_or" (formula "35") (term "0"))
                              (rule "shift_paren_or" (formula "34") (term "0"))
                              (rule "commute_or_2" (formula "34") (term "0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "commute_or_2" (formula "34") (term "0,0"))
                              (rule "commute_or" (formula "35") (term "1,1,0"))
                              (rule "cnf_rightDist" (formula "35") (term "0"))
                              (rule "distr_forallAnd" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "commute_or_2" (formula "35") (term "0"))
                              (rule "shift_paren_or" (formula "36") (term "0"))
                              (rule "commute_or_2" (formula "35") (term "0,0"))
                              (rule "commute_or_2" (formula "36") (term "0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0"))
                              (rule "add_literals" (formula "36") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "36") (term "0,1,0"))
                              (rule "leq_literals" (formula "36") (term "1,0"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "shift_paren_or" (formula "34") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                              (rule "commute_or" (formula "34") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "commute_or" (formula "35") (term "0,0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,0"))
                              (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                              (rule "qeq_literals" (formula "35") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "20") (term "1,1,0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "eqSymm" (formula "20") (term "1,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "ifthenelse_split" (formula "32") (term "0"))
                              (branch "messages[j_0].length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "33"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "33"))
                                 (rule "replace_known_left" (formula "66") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "66"))
                                 (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                                 (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "32"))
                                 (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                 (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                 (rule "leq_literals" (formula "35") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "8"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1,0,0") (ifseqformula "10"))
                                 (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "36"))
                                 (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "49")))
                                 (rule "true_left" (formula "18"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "33"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "15"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "16"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "commute_or" (formula "29") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "29") (term "0,1,0,1,1,0"))
                                 (rule "allLeft" (formula "44") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "44") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "44") (term "1") (ifseqformula "26"))
                                 (rule "inEqSimp_homoInEq1" (formula "44") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,1"))
                                 (rule "add_literals" (formula "44") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "44") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "44") (term "0,0,1"))
                                 (rule "leq_literals" (formula "44") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "inEqSimp_contradInEq1" (formula "44") (term "1") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "44") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "notLeft" (formula "44"))
                                 (rule "pullOutSelect" (formula "51") (term "0") (inst "selectSK=arr_38"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "43")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "68")))
                                 (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "narrowSelectArrayType" (formula "51") (term "0") (ifseqformula "17") (ifseqformula "56"))
                                 (rule "ifthenelse_split" (formula "11") (term "0"))
                                 (branch " ¬self.sorted[j_0] = null ∧ ¬( self.sorted[j_0].<created> = TRUE ∨ (self.sorted[j_0]@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "11"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "orRight" (formula "51"))
                                    (rule "referencedObjectIsCreatedRight" (formula "51") (ifseqformula "53"))
                                    (rule "close" (formula "51") (ifseqformula "17"))
                                 )
                                 (branch " ¬self.sorted[j_0] = null ∧ ¬( self.sorted[j_0].<created> = TRUE ∨ (self.sorted[j_0]@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) FALSE"
                                    (rule "applyEqReverse" (formula "75") (term "1") (ifseqformula "11"))
                                    (rule "hideAuxiliaryEq" (formula "11"))
                                    (rule "eqSymm" (formula "74"))
                                    (rule "ifthenelse_split" (formula "10") (term "0"))
                                    (branch " ¬messages[j_0] = null ∧ ¬( messages[j_0].<created> = TRUE ∨ (messages[j_0]@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "orRight" (formula "50"))
                                       (rule "referencedObjectIsCreatedRight" (formula "50") (ifseqformula "52"))
                                       (rule "close" (formula "50") (ifseqformula "16"))
                                    )
                                    (branch " ¬messages[j_0] = null ∧ ¬( messages[j_0].<created> = TRUE ∨ (messages[j_0]@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "75") (term "1") (ifseqformula "10"))
                                       (rule "hideAuxiliaryEq" (formula "10"))
                                       (rule "commute_or_2" (formula "27") (term "0,1,1,0,1,1,0"))
                                       (rule "commute_or" (formula "27") (term "0,0,1,0,1,1,0"))
                                       (rule "cut_direct" (formula "54") (term "0,0"))
                                       (branch "CUT: self.sorted[j_0] = null TRUE"
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "false_right" (formula "55"))
                                          (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "51"))
                                          (rule "false_right" (formula "51"))
                                          (rule "applyEq" (formula "40") (term "0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "40"))
                                          (rule "applyEq" (formula "73") (term "1,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "73"))
                                          (rule "applyEq" (formula "42") (term "1,0,0,0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "42") (term "0,0,0"))
                                          (rule "applyEq" (formula "42") (term "1,1,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "11") (term "0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "39") (term "0") (ifseqformula "40"))
                                          (rule "cut_direct" (formula "53") (term "0,0"))
                                          (branch "CUT: messages[j_0] = null TRUE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "false_right" (formula "54"))
                                             (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "51"))
                                             (rule "false_right" (formula "51"))
                                             (rule "applyEq" (formula "43") (term "1,0,0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "true_left" (formula "43"))
                                             (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "true_left" (formula "41"))
                                             (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "70"))
                                             (rule "closeTrue" (formula "70"))
                                          )
                                          (branch "CUT: messages[j_0] = null FALSE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "notRight" (formula "54"))
                                             (rule "replace_known_left" (formula "51") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "54")))
                                             (rule "false_right" (formula "51"))
                                             (rule "narrowSelectArrayType" (formula "73") (term "0") (ifseqformula "17") (ifseqformula "53"))
                                             (rule "eqSymm" (formula "73"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "commute_and" (formula "29") (term "0,0,1,0"))
                                             (rule "allLeft" (formula "32") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "32") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "allLeft" (formula "33") (inst "t=i"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "allLeft" (formula "34") (inst "t=iv_9"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "34") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "allLeft" (formula "38") (inst "t=iv_9"))
                                             (rule "inEqSimp_commuteGeq" (formula "38") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "38") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "cnf_rightDist" (formula "29") (term "1,1,0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,1,0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0,1,1,0"))
                                             (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "commute_or" (formula "29") (term "1,1,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "1,0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0,1,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "allLeft" (formula "30") (inst "t=j_0"))
                                             (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "30") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "30"))
                                             (rule "mul_literals" (formula "27") (term "0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "30"))
                                             (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1"))
                                             (rule "mul_literals" (formula "26") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                             (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "26"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "inEqSimp_homoInEq1" (formula "16"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                                             (rule "add_literals" (formula "16") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "16") (term "1,0"))
                                             (rule "add_literals" (formula "16") (term "0"))
                                             (rule "leq_literals" (formula "16"))
                                             (rule "closeFalse" (formula "16"))
                                          )
                                       )
                                       (branch "CUT: self.sorted[j_0] = null FALSE"
                                          (builtin "One Step Simplification" (formula "55"))
                                          (rule "notRight" (formula "55"))
                                          (rule "replace_known_left" (formula "51") (term "0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "55")))
                                          (rule "false_right" (formula "51"))
                                          (rule "narrowSelectArrayType" (formula "74") (term "0") (ifseqformula "16") (ifseqformula "54"))
                                          (rule "eqSymm" (formula "74"))
                                          (rule "cut_direct" (formula "53") (term "0,0"))
                                          (branch "CUT: messages[j_0] = null TRUE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "false_right" (formula "54"))
                                             (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "51"))
                                             (rule "false_right" (formula "51"))
                                             (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "43") (term "1,1,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "73") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "43") (term "0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "41") (term "0,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "40") (term "0,0") (ifseqformula "1"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "commute_and" (formula "29") (term "0,0,1,0"))
                                             (rule "allLeft" (formula "35") (inst "t=j_0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "35"))
                                             (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                             (rule "mul_literals" (formula "26") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                             (rule "inEqSimp_contradInEq0" (formula "26") (ifseqformula "16"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "inEqSimp_homoInEq1" (formula "26"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0"))
                                             (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                                             (rule "add_literals" (formula "26") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0"))
                                             (rule "add_literals" (formula "26") (term "0"))
                                             (rule "leq_literals" (formula "26"))
                                             (rule "closeFalse" (formula "26"))
                                          )
                                          (branch "CUT: messages[j_0] = null FALSE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "notRight" (formula "54"))
                                             (rule "replace_known_right" (formula "51") (term "0,0") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "1")))
                                             (rule "false_right" (formula "51"))
                                             (rule "narrowSelectArrayType" (formula "74") (term "0") (ifseqformula "17") (ifseqformula "53"))
                                             (rule "eqSymm" (formula "74"))
                                             (rule "commute_or" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "commute_and" (formula "29") (term "0,0,1,0"))
                                             (rule "allLeft" (formula "35") (inst "t=iv_9"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "allLeft" (formula "32") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "32") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "allLeft" (formula "33") (inst "t=i"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "allLeft" (formula "34") (inst "t=iv_9"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "34") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "cnf_rightDist" (formula "29") (term "1,1,0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,1,0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0,1,1,0"))
                                             (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "commute_or" (formula "29") (term "1,1,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "29") (term "0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "1,0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,1,0,1,1,0"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,1,1,0"))
                                             (rule "commute_or_2" (formula "29") (term "0,0,1,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "shift_paren_or" (formula "29") (term "0,0,0,0,1,1,0"))
                                             (rule "commute_or" (formula "29") (term "0,0,0,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "arrayLengthIsAShort" (formula "44") (term "0"))
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "arrayLengthNotNegative" (formula "44") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "45"))
                                             (rule "leq_literals" (formula "44") (term "0"))
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "arrayLengthIsAShort" (formula "45") (term "0"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "true_left" (formula "45"))
                                             (rule "arrayLengthNotNegative" (formula "45") (term "0"))
                                             (rule "applyEq" (formula "45") (term "0") (ifseqformula "46"))
                                             (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "44"))
                                             (rule "leq_literals" (formula "45") (term "0"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "true_left" (formula "45"))
                                             (rule "allLeft" (formula "48") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "48") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "48") (term "1,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "48") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "48"))
                                             (rule "pullOutSelect" (formula "48") (term "0,0,0") (inst "selectSK=arr_39"))
                                             (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "62")) (ifInst ""  (formula "46")))
                                             (rule "elementOfSingleton" (formula "48") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "73")))
                                             (rule "applyEqReverse" (formula "49") (term "0,0,0") (ifseqformula "48"))
                                             (rule "hideAuxiliaryEq" (formula "48"))
                                             (rule "narrowSelectArrayType" (formula "48") (term "0,0,0") (ifseqformula "17") (ifseqformula "61"))
                                             (rule "replace_known_right" (formula "48") (term "0,0") (ifseqformula "59"))
                                             (builtin "One Step Simplification" (formula "48"))
                                             (rule "true_left" (formula "48"))
                                             (rule "allLeft" (formula "48") (inst "t=iv_9"))
                                             (rule "inEqSimp_commuteGeq" (formula "48") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "48") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "48") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "48"))
                                             (rule "pullOutSelect" (formula "48") (term "0,0,0") (inst "selectSK=arr_40"))
                                             (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "62")) (ifInst ""  (formula "46")))
                                             (rule "elementOfSingleton" (formula "48") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "73")))
                                             (rule "applyEqReverse" (formula "49") (term "0,0,0") (ifseqformula "48"))
                                             (rule "hideAuxiliaryEq" (formula "48"))
                                             (rule "narrowSelectArrayType" (formula "48") (term "0,0,0") (ifseqformula "17") (ifseqformula "61"))
                                             (rule "allLeft" (formula "37") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "37") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "allLeft" (formula "38") (inst "t=i"))
                                             (rule "inEqSimp_commuteGeq" (formula "38") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "38") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "allLeft" (formula "39") (inst "t=iv_9"))
                                             (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "39") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "39"))
                                             (rule "allLeft" (formula "30") (inst "t=iv_9"))
                                             (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "30") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "52")))
                                             (rule "true_left" (formula "30"))
                                             (rule "allLeft" (formula "53") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "53") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "53") (term "1,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "53") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "pullOutSelect" (formula "53") (term "0,0,0") (inst "selectSK=arr_41"))
                                             (rule "simplifySelectOfAnonEQ" (formula "53") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "67")) (ifInst ""  (formula "6")))
                                             (rule "elementOfSingleton" (formula "53") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "narrowSelectArrayType" (formula "53") (term "2,0") (ifseqformula "17") (ifseqformula "67"))
                                             (rule "narrowSelectArrayType" (formula "53") (term "1,0") (ifseqformula "43") (ifseqformula "67"))
                                             (rule "inEqSimp_contradEq3" (formula "53") (term "1,0,0") (ifseqformula "16"))
                                             (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "53") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "53") (term "1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "53") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "53") (term "0,0,1,0,0"))
                                             (rule "qeq_literals" (formula "53") (term "0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "applyEqReverse" (formula "54") (term "0,0,0") (ifseqformula "53"))
                                             (rule "hideAuxiliaryEq" (formula "53"))
                                             (rule "allLeft" (formula "53") (inst "t=i"))
                                             (rule "inEqSimp_commuteGeq" (formula "53") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "53") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "53") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "pullOutSelect" (formula "53") (term "0,0,0") (inst "selectSK=arr_42"))
                                             (rule "simplifySelectOfAnonEQ" (formula "53") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "67")) (ifInst ""  (formula "6")))
                                             (rule "elementOfSingleton" (formula "53") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "narrowSelectArrayType" (formula "53") (term "1,0") (ifseqformula "43") (ifseqformula "67"))
                                             (rule "narrowSelectArrayType" (formula "53") (term "2,0") (ifseqformula "17") (ifseqformula "67"))
                                             (rule "allLeft" (formula "56") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "56") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "56") (term "1,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "56") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "pullOutSelect" (formula "56") (term "0,0,0") (inst "selectSK=arr_43"))
                                             (rule "simplifySelectOfAnonEQ" (formula "56") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "70")) (ifInst ""  (formula "11")))
                                             (rule "elementOfSingleton" (formula "56") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "narrowSelectArrayType" (formula "56") (term "2,0") (ifseqformula "17") (ifseqformula "70"))
                                             (rule "narrowSelectArrayType" (formula "56") (term "1,0") (ifseqformula "43") (ifseqformula "70"))
                                             (rule "inEqSimp_contradEq3" (formula "56") (term "1,0,0") (ifseqformula "16"))
                                             (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "56") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "56") (term "1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "56") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "56") (term "0,0,1,0,0"))
                                             (rule "qeq_literals" (formula "56") (term "0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "applyEqReverse" (formula "57") (term "0,0,0") (ifseqformula "56"))
                                             (rule "hideAuxiliaryEq" (formula "56"))
                                             (rule "allLeft" (formula "56") (inst "t=i"))
                                             (rule "inEqSimp_commuteGeq" (formula "56") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "56") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "56") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "pullOutSelect" (formula "56") (term "0,0,0") (inst "selectSK=arr_44"))
                                             (rule "simplifySelectOfAnonEQ" (formula "56") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "70")) (ifInst ""  (formula "11")))
                                             (rule "elementOfSingleton" (formula "56") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "56"))
                                             (rule "narrowSelectArrayType" (formula "56") (term "2,0") (ifseqformula "17") (ifseqformula "70"))
                                             (rule "narrowSelectArrayType" (formula "56") (term "1,0") (ifseqformula "43") (ifseqformula "70"))
                                             (rule "allLeft" (formula "58") (inst "t=iv_9"))
                                             (rule "inEqSimp_commuteGeq" (formula "58") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "58") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "58") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "58"))
                                             (rule "pullOutSelect" (formula "58") (term "0,0,0") (inst "selectSK=arr_45"))
                                             (rule "simplifySelectOfAnonEQ" (formula "58") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "72")) (ifInst ""  (formula "11")))
                                             (rule "elementOfSingleton" (formula "58") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "58"))
                                             (rule "narrowSelectArrayType" (formula "58") (term "2,0") (ifseqformula "17") (ifseqformula "72"))
                                             (rule "narrowSelectArrayType" (formula "58") (term "1,0") (ifseqformula "43") (ifseqformula "72"))
                                             (rule "allLeft" (formula "55") (inst "t=iv_9"))
                                             (rule "inEqSimp_commuteGeq" (formula "55") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "55") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "55") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "55"))
                                             (rule "pullOutSelect" (formula "55") (term "0,0,0") (inst "selectSK=arr_47"))
                                             (rule "simplifySelectOfAnonEQ" (formula "55") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "73")) (ifInst ""  (formula "6")))
                                             (rule "elementOfSingleton" (formula "55") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "55"))
                                             (rule "narrowSelectArrayType" (formula "55") (term "1,0") (ifseqformula "43") (ifseqformula "73"))
                                             (rule "narrowSelectArrayType" (formula "55") (term "2,0") (ifseqformula "17") (ifseqformula "73"))
                                             (rule "allLeft" (formula "50") (inst "t=iv_9"))
                                             (rule "replaceKnownSelect_taclet010000_30" (formula "50") (term "0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet101010000_33" (formula "50") (term "0,0,0"))
                                             (rule "eqSymm" (formula "50") (term "0,0"))
                                             (rule "narrowSelectArrayType" (formula "50") (term "1,0,0") (ifseqformula "17") (ifseqformula "71"))
                                             (rule "inEqSimp_commuteGeq" (formula "50") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "50") (term "1,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "50") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "50"))
                                             (rule "inEqSimp_contradInEq1" (formula "50") (term "1") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq1" (formula "50") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0,1"))
                                             (rule "add_literals" (formula "50") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "50") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "50") (term "0,0,1"))
                                             (rule "leq_literals" (formula "50") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "50"))
                                             (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=arr_48"))
                                             (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "71")) (ifInst ""  (formula "1")))
                                             (rule "elementOfSingleton" (formula "50") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "50"))
                                             (rule "sortsDisjointModuloNull" (formula "50") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "50") (term "1,0,0,0") (ifseqformula "83"))
                                             (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "71")))
                                             (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "50"))
                                             (rule "hideAuxiliaryEq" (formula "50"))
                                             (rule "narrowSelectArrayType" (formula "50") (term "0") (ifseqformula "17") (ifseqformula "70"))
                                             (rule "eqSymm" (formula "50"))
                                             (rule "close" (formula "91") (ifseqformula "50"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "messages[j_0].length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "32"))
                                 (rule "inEqSimp_geqRight" (formula "43"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                 (rule "qeq_literals" (formula "32"))
                                 (rule "closeFalse" (formula "32"))
                              )
                           )
                        )
                     )
                     (branch "self.sorted[j_0].length ≥ 1 FALSE"
                        (rule "eqSymm" (formula "32"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_geqRight" (formula "43"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0"))
                        (rule "add_zero_left" (formula "33") (term "0,0"))
                        (rule "ifthenelse_split" (formula "35") (term "0"))
                        (branch "self.sorted[j_0].length ≥ 0 TRUE"
                           (rule "eqSymm" (formula "36"))
                           (rule "applyEq" (formula "6") (term "0") (ifseqformula "36"))
                           (rule "replace_known_left" (formula "64") (term "0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "64"))
                           (rule "eqSymm" (formula "64"))
                           (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "36"))
                           (rule "inEqSimp_antiSymm" (formula "35") (ifseqformula "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "35"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "times_zero_2" (formula "5") (term "1,0"))
                           (rule "add_zero_right" (formula "5") (term "0"))
                           (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                           (rule "qeq_literals" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "applyEq" (formula "36") (term "1,1,1,0,0,0,0,0,1,0") (ifseqformula "34"))
                           (rule "add_literals" (formula "36") (term "1,1,0,0,0,0,0,1,0"))
                           (rule "applyEq" (formula "36") (term "1,1,0,1,1,0") (ifseqformula "34"))
                           (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "34"))
                           (rule "applyEq" (formula "35") (term "1") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "6") (term "0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                        (branch "self.sorted[j_0].length ≥ 0 FALSE"
                           (rule "eqSymm" (formula "35"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
                           (rule "leq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "inEqSimp_notGeq" (formula "35") (term "0"))
                           (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                           (rule "add_literals" (formula "35") (term "0,0,0"))
                           (rule "add_zero_left" (formula "35") (term "0,0"))
                           (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                           (rule "cnf_rightDist" (formula "23") (term "0,0,1,0"))
                           (rule "commute_or_2" (formula "23") (term "1,0,0,1,0"))
                           (rule "inEqSimp_or_subsumption4" (formula "23") (term "0,1,0,0,1,0"))
                           (rule "greater_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                           (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,1,1,0"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,1,0"))
                           (rule "qeq_literals" (formula "35") (term "1,0,0,1,1,0"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "shift_paren_or" (formula "35") (term "1,1,0"))
                           (rule "commute_or" (formula "35") (term "0,1,1,0"))
                           (rule "cnf_rightDist" (formula "35") (term "0"))
                           (rule "distr_forallAnd" (formula "35"))
                           (rule "andLeft" (formula "35"))
                           (rule "commute_or_2" (formula "35") (term "0"))
                           (rule "shift_paren_or" (formula "36") (term "0"))
                           (rule "commute_or_2" (formula "36") (term "0,0"))
                           (rule "shift_paren_or" (formula "35") (term "0,0"))
                           (rule "commute_or_2" (formula "36") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                           (rule "commute_or" (formula "35") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "arrayLengthIsAShort" (formula "27") (term "1,1,0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "arrayLengthNotNegative" (formula "27") (term "1,1,0"))
                           (rule "ifthenelse_split" (formula "6") (term "0"))
                           (branch "messages[j_0].length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "37") (term "0,1,1,0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "replace_known_left" (formula "65") (term "0,1") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "65"))
                              (rule "replace_known_left" (formula "38") (term "0,1,1,0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "inEqSimp_contradEq7" (formula "35") (term "1") (ifseqformula "6"))
                              (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "35") (term "0,0,1"))
                              (rule "leq_literals" (formula "35") (term "0,1"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "6"))
                              (rule "qeq_literals" (formula "35") (term "0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "closeFalse" (formula "35"))
                           )
                           (branch "messages[j_0].length ≥ 1 FALSE"
                              (rule "replace_known_right" (formula "37") (term "0,1,1,0") (ifseqformula "45"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "replace_known_right" (formula "36") (term "0,1,1,0") (ifseqformula "45"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "inEqSimp_homoInEq1" (formula "7"))
                              (rule "times_zero_2" (formula "7") (term "1,0"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                              (rule "mul_literals" (formula "7") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "8") (term "0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "closeFalse" (formula "8"))
                           )
                        )
                     )
                  )
               )
               (branch "self.sorted.<created> = TRUE FALSE"
                  (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "40"))
                  (rule "close" (formula "38") (ifseqformula "5"))
               )
            )
         )
         (branch "Case 2"
            (rule "andRight" (formula "35") (userinteraction))
            (branch "Case 1"
               (builtin "One Step Simplification" (formula "14"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (ifseqformula "18"))
               (rule "true_left" (formula "6"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1") (ifseqformula "23"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1") (ifseqformula "17"))
               (rule "orRight" (formula "32"))
               (rule "allRight" (formula "35") (inst "sk=k_0"))
               (rule "impRight" (formula "35"))
               (rule "andLeft" (formula "1"))
               (rule "notRight" (formula "37"))
               (rule "eqSymm" (formula "12"))
               (rule "eqSymm" (formula "31"))
               (rule "eqSymm" (formula "15"))
               (rule "eqSymm" (formula "23") (term "1,0"))
               (rule "eqSymm" (formula "16") (term "1,0"))
               (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "30"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "32"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "37"))
               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "35")) (ifInst ""  (formula "36")))
               (rule "inEqSimp_ltToLeq" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "10"))
               (rule "polySimp_addComm1" (formula "10") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "polySimp_elimOne" (formula "14") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1"))
               (rule "polySimp_rightDist" (formula "10") (term "1"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
               (rule "mul_literals" (formula "10") (term "0,1"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1"))
               (rule "array2seqDef" (formula "11") (term "0,0") (inst "u=u"))
               (rule "narrowSelectArrayType" (formula "11") (term "2,0,0") (ifseqformula "4") (ifseqformula "30"))
               (rule "array2seqDef" (formula "28") (term "0,1") (inst "u=u"))
               (rule "eqSymm" (formula "28"))
               (rule "nonNull" (formula "18") (inst "i=i_1"))
               (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "greater_literals" (formula "18") (term "0,1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "18"))
               (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "30"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "30"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
               (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "12"))
               (rule "narrowSelectArrayType" (formula "12") (term "2,0") (ifseqformula "4") (ifseqformula "31"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "12"))
               (rule "array2seqDef" (formula "23") (term "1,1,0") (inst "u=u"))
               (rule "eqSymm" (formula "23") (term "1,0"))
               (rule "array2seqDef" (formula "16") (term "0,1,0") (inst "u=u"))
               (rule "array2seqDef" (formula "16") (term "1,1,0") (inst "u=u"))
               (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
               (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "4") (ifseqformula "31"))
               (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "12"))
               (rule "array2seqDef" (formula "28") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "28"))
               (rule "array2seqDef" (formula "23") (term "1,1,0") (inst "u=u"))
               (rule "eqSymm" (formula "23") (term "1,0"))
               (rule "eqSeqDef" (formula "16") (term "1,0") (inst "iv=iv"))
               (rule "getOfSeqDef" (formula "16") (term "0,1,0,1,1,0"))
               (rule "castDel" (formula "16") (term "1,0,1,0,1,1,0"))
               (rule "castDel" (formula "16") (term "2,0,1,0,1,1,0"))
               (rule "add_zero_right" (formula "16") (term "0,2,1,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "16") (term "1,0,1,1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0,1,1,0"))
               (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0,1,1,0"))
               (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0,1,1,0"))
               (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0,1,1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0,1,1,0"))
               (rule "times_zero_2" (formula "16") (term "1,1,1,1,0,0,1,1,0"))
               (rule "add_zero_right" (formula "16") (term "1,1,1,0,0,1,1,0"))
               (rule "lenOfSeqDef" (formula "16") (term "0,0,1,0"))
               (rule "eqSymm" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,0"))
               (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,0"))
               (rule "add_zero_right" (formula "16") (term "1,1,0,1,0"))
               (rule "getOfSeqDef" (formula "16") (term "0,1,0,1,1,0"))
               (rule "castDel" (formula "16") (term "1,0,1,0,1,1,0"))
               (rule "castDel" (formula "16") (term "2,0,1,0,1,1,0"))
               (rule "add_zero_right" (formula "16") (term "0,2,1,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "16") (term "1,0,1,1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0,1,1,0"))
               (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0,1,1,0"))
               (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0,1,1,0"))
               (rule "lenOfSeqDef" (formula "16") (term "0,0,1,0"))
               (rule "eqSymm" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,0"))
               (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,0"))
               (rule "add_zero_right" (formula "16") (term "1,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0,1,1,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "16") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1,0,1,1,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,1,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,0,0,1,0"))
               (rule "eqSymm" (formula "16") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "16") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1,0,1,1,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,1,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,0,0,1,0"))
               (rule "eqSymm" (formula "16") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "16") (term "1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,1,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0,1,0"))
               (rule "eqSymm" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "16") (term "1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,1,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0,1,0"))
               (rule "eqSymm" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0,1,0"))
               (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "eqSeqDef" (formula "22") (term "1,0") (inst "iv=iv"))
               (rule "getOfSeqDef" (formula "22") (term "0,1,0,1,1,0"))
               (rule "castDel" (formula "22") (term "1,0,1,0,1,1,0"))
               (rule "castDel" (formula "22") (term "2,0,1,0,1,1,0"))
               (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0,1,1,0"))
               (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
               (rule "mul_literals" (formula "22") (term "1,1,1,0,1,1,0,1,1,0"))
               (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
               (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0,1,1,0"))
               (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0,1,1,0"))
               (rule "mul_literals" (formula "22") (term "1,1,1,1,0,0,1,1,0"))
               (rule "add_zero_right" (formula "22") (term "1,1,1,0,0,1,1,0"))
               (rule "lenOfSeqDef" (formula "22") (term "1,0,1,0"))
               (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,0"))
               (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,0"))
               (rule "add_zero_right" (formula "22") (term "1,1,0,1,0"))
               (rule "lenOfSeqDef" (formula "22") (term "0,0,1,0"))
               (rule "polySimp_elimSub" (formula "22") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "1,1,0,0,1,0"))
               (rule "add_zero_right" (formula "22") (term "1,0,0,1,0"))
               (rule "getOfSeqDef" (formula "22") (term "0,1,0,1,1,0"))
               (rule "castDel" (formula "22") (term "1,0,1,0,1,1,0"))
               (rule "castDel" (formula "22") (term "2,0,1,0,1,1,0"))
               (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0,1,1,0"))
               (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
               (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,1,0,1,1,0"))
               (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0,1,1,0"))
               (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,0,1,0"))
               (rule "add_zero_right" (formula "22") (term "0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,1,0"))
               (rule "add_zero_right" (formula "22") (term "0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,1,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,1,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "0,0,0,1,0,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
               (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_27"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "8")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_28"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "8")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
               (rule "ifEqualsNull" (formula "1"))
               (rule "eqSeqDef2" (formula "28") (inst "iv=iv") (ifseqformula "28"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "true_left" (formula "28"))
               (rule "pullOutSelect" (formula "23") (term "1,0,1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_2"))
               (rule "applyEq" (formula "24") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "23"))
               (rule "applyEq" (formula "24") (term "1,0,0,0,0,0,1,0") (ifseqformula "23"))
               (rule "applyEq" (formula "24") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "23"))
               (rule "applyEq" (formula "24") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "23"))
               (rule "applyEq" (formula "24") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "23"))
               (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "34")) (ifInst ""  (formula "6")))
               (rule "elementOfSingleton" (formula "23") (term "0,0"))
               (builtin "One Step Simplification" (formula "23"))
               (rule "applyEqReverse" (formula "24") (term "1,0,1,0,0,1,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "24") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "24") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "24") (term "1,0,0,0,0,0,1,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "24") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "23"))
               (rule "hideAuxiliaryEq" (formula "23"))
               (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
               (rule "times_zero_1" (formula "12") (term "0,0"))
               (rule "add_zero_left" (formula "12") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1"))
               (rule "nnf_imp2or" (formula "19") (term "0"))
               (rule "nnf_imp2or" (formula "17") (term "0"))
               (rule "nnf_imp2or" (formula "24") (term "0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "24") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "17") (term "0,1,1,0"))
               (rule "nnf_imp2or" (formula "24") (term "0,1,1,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,1,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,0"))
               (rule "nnf_notAnd" (formula "24") (term "0,0,1,1,0"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,1,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,1,0"))
               (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,1,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0,1,1,0"))
               (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,1,0"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,1,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,1,0"))
               (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,1,0"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "25") (ifseqformula "7"))
               (rule "replaceKnownSelect_taclet01000_4" (formula "25") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet01000_5" (formula "25") (term "1,1,0,0,0,0,0,0"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "notLeft" (formula "27"))
               (rule "notLeft" (formula "26"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "notLeft" (formula "27"))
               (rule "andLeft" (formula "25"))
               (rule "notLeft" (formula "27"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "nonNull" (formula "27") (inst "i=i_1"))
               (rule "greater_literals" (formula "27") (term "0,1"))
               (builtin "One Step Simplification" (formula "27"))
               (rule "sub_literals" (formula "27") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "27"))
               (rule "andLeft" (formula "27"))
               (rule "notLeft" (formula "27"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "26") (inst "i=i_1"))
               (rule "greater_literals" (formula "26") (term "0,1"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "sub_literals" (formula "26") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "25") (inst "i=i_1"))
               (rule "greater_literals" (formula "25") (term "0,1"))
               (builtin "One Step Simplification" (formula "25"))
               (rule "sub_literals" (formula "25") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
               (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
               (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
               (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_5"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_5"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_5"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_5"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_5"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_5"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_5"))
               (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
               (rule "applyEq" (formula "35") (term "0") (ifseqformula "27"))
               (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "21"))
               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
               (rule "elementOfSingleton" (formula "27") (term "0,0"))
               (builtin "One Step Simplification" (formula "27"))
               (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "27"))
               (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
               (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
               (rule "hideAuxiliaryEq" (formula "27"))
               (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_5"))
               (rule "applyEq" (formula "34") (term "0") (ifseqformula "26"))
               (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
               (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "21"))
               (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
               (rule "elementOfSingleton" (formula "26") (term "0,0"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "26"))
               (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
               (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
               (rule "hideAuxiliaryEq" (formula "26"))
               (rule "nnf_imp2or" (formula "25") (term "0"))
               (rule "nnf_imp2or" (formula "27") (term "0"))
               (rule "nnf_imp2or" (formula "26") (term "0"))
               (rule "nnf_notAnd" (formula "25") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "26") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "19") (term "0"))
               (rule "commute_and" (formula "1") (term "0"))
               (rule "commute_and" (formula "1") (term "1"))
               (rule "commute_or_2" (formula "24") (term "0,1,1,0"))
               (rule "commute_or_2" (formula "17") (term "0,1,1,0"))
               (rule "ifthenelse_to_or_left" (formula "17") (term "0,1,0"))
               (rule "eqSymm" (formula "17") (term "1,0,0,1,0"))
               (rule "eqSymm" (formula "17") (term "1,1,0,1,0"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,1,1,0,1,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,0,1,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,1,0,1,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,1,0,1,0"))
               (rule "ifthenelse_to_or_right" (formula "24") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,1,1,0,1,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0,1,1,0,1,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,1,0,1,0"))
               (rule "add_zero_left" (formula "24") (term "0,0,1,1,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "24") (term "0,0,0,0,1,0"))
               (rule "commute_or_2" (formula "25") (term "0"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "7"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "20"))
               (rule "notLeft" (formula "19"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "20"))
               (rule "notLeft" (formula "19"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "18"))
               (rule "notLeft" (formula "18"))
               (rule "nonNull" (formula "20") (inst "i=i_1"))
               (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "36")))
               (rule "greater_literals" (formula "20") (term "0"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "36"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "19") (inst "i=i_1"))
               (rule "greater_literals" (formula "19") (term "0,1"))
               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "35")))
               (rule "sub_literals" (formula "19") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "35"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "18") (inst "i=i_1"))
               (rule "greater_literals" (formula "18") (term "0,1"))
               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "34")))
               (rule "sub_literals" (formula "18") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "34"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
               (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "20") (term "0"))
               (rule "nnf_imp2or" (formula "19") (term "0"))
               (rule "nnf_imp2or" (formula "18") (term "0"))
               (rule "nnf_notAnd" (formula "20") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "18") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
               (rule "commute_or_2" (formula "29") (term "0"))
               (rule "commute_or_2" (formula "28") (term "0"))
               (rule "commute_or" (formula "21") (term "0,0"))
               (rule "commute_or" (formula "27") (term "0,0"))
               (rule "cnf_rightDist" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "commute_or" (formula "18") (term "1,0,1,0"))
               (rule "commute_or" (formula "18") (term "0,0,1,1,0"))
               (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
               (rule "shift_paren_or" (formula "27") (term "1,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "0"))
               (rule "commute_or_2" (formula "20") (term "0"))
               (rule "commute_or" (formula "1"))
               (rule "commute_or_2" (formula "19") (term "0"))
               (rule "arrayLengthIsAShort" (formula "12") (term "1,1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "arrayLengthNotNegative" (formula "17") (term "0"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
               (rule "arrayLengthNotNegative" (formula "13") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "14"))
               (rule "leq_literals" (formula "13") (term "0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "arrayLengthNotNegative" (formula "5") (term "0"))
               (rule "arrayLengthIsAShort" (formula "5") (term "0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "cut_direct" (formula "27") (term "0"))
               (branch "CUT: result_0.<created> = TRUE TRUE"
                  (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "commute_or" (formula "31") (term "0,0"))
                  (rule "commute_or" (formula "30") (term "0,0"))
                  (rule "commute_or" (formula "22") (term "0,0"))
                  (rule "commute_or" (formula "21") (term "0,0"))
                  (rule "commute_or" (formula "20") (term "0,0"))
                  (rule "cnf_rightDist" (formula "2"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2"))
                  (rule "cnf_rightDist" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or" (formula "2"))
                  (rule "ifthenelse_to_or_left" (formula "20") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,0,1,0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,0,1,0,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "29") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "29") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,0,1,0"))
                  (rule "commute_or" (formula "29") (term "1,1,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                  (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                  (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "29") (term "0,0,1,0"))
                  (rule "commute_or_2" (formula "29") (term "1,0,0,1,0"))
                  (rule "inEqSimp_or_subsumption4" (formula "29") (term "0,1,0,0,1,0"))
                  (rule "greater_literals" (formula "29") (term "0,0,0,1,0,0,1,0"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "shift_paren_or" (formula "29") (term "0,0,0,1,0"))
                  (rule "ifthenelse_to_or_right" (formula "20") (term "0,0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,1,1,0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "1,1,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,1,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,1,0,1,1,0"))
                  (rule "cnf_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,1,0,1,1,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,1,0,1,1,0"))
                  (rule "qeq_literals" (formula "20") (term "1,0,0,1,1,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "shift_paren_or" (formula "20") (term "1,1,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,1,1,0,1,1,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,1,1,0"))
                  (rule "shift_paren_or" (formula "20") (term "1,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,0,1,1,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,1,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,0,0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "ifthenelse_to_or_right" (formula "29") (term "0,0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,1,1,0"))
                  (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                  (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "1,1,0,1,1,0"))
                  (rule "commute_or_2" (formula "29") (term "0,1,0,1,1,0"))
                  (rule "commute_or_2" (formula "29") (term "0,1,1,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "0,0,1,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "0,0,1,1,0,1,1,0"))
                  (rule "allLeft" (formula "30") (inst "t=k_0"))
                  (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                  (rule "add_literals" (formula "30") (term "0,0,1"))
                  (rule "leq_literals" (formula "30") (term "0,1"))
                  (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "30") (term "0,1"))
                  (builtin "One Step Simplification" (formula "30"))
                  (rule "notLeft" (formula "30"))
                  (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=arr_32"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "26") (ifseqformula "39"))
                  (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "8") (ifseqformula "39"))
                  (rule "allLeft" (formula "31") (inst "t=i"))
                  (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "18"))
                  (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                  (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                  (rule "add_literals" (formula "31") (term "0,0,1"))
                  (rule "leq_literals" (formula "31") (term "0,1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "31") (term "0,1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "notLeft" (formula "31"))
                  (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=arr_33"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "9") (ifseqformula "41"))
                  (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "27") (ifseqformula "41"))
                  (rule "allLeft" (formula "26") (inst "t=i"))
                  (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "26") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                  (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1"))
                  (rule "leq_literals" (formula "26") (term "0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "allLeft" (formula "26") (inst "t=k_0"))
                  (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "26") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                  (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1"))
                  (rule "leq_literals" (formula "26") (term "0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "5"))
                  (rule "applyEq" (formula "2") (term "0,2,2,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "38") (term "0,2,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "3") (term "0,2,0") (ifseqformula "4"))
                  (rule "close" (formula "55") (ifseqformula "3"))
               )
               (branch "CUT: result_0.<created> = TRUE FALSE"
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "commute_or" (formula "31") (term "0,0"))
                  (rule "commute_or" (formula "30") (term "0,0"))
                  (rule "commute_or" (formula "22") (term "0,0"))
                  (rule "commute_or" (formula "21") (term "0,0"))
                  (rule "commute_or" (formula "20") (term "0,0"))
                  (rule "cnf_rightDist" (formula "2"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2"))
                  (rule "cnf_rightDist" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or" (formula "2"))
                  (rule "ifthenelse_to_or_left" (formula "20") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,0,1,0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,0,1,0,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "29") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "29") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,0,1,0"))
                  (rule "commute_or" (formula "29") (term "1,1,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                  (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                  (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "29") (term "0,0,1,0"))
                  (rule "commute_or_2" (formula "29") (term "1,0,0,1,0"))
                  (rule "inEqSimp_or_subsumption4" (formula "29") (term "0,1,0,0,1,0"))
                  (rule "greater_literals" (formula "29") (term "0,0,0,1,0,0,1,0"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "shift_paren_or" (formula "29") (term "0,0,0,1,0"))
                  (rule "ifthenelse_to_or_right" (formula "20") (term "0,0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "1,1,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,1,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,1,0,1,1,0"))
                  (rule "cnf_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,1,0,1,1,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,1,0,1,1,0"))
                  (rule "qeq_literals" (formula "20") (term "1,0,0,1,1,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "shift_paren_or" (formula "20") (term "1,1,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,1,1,0,1,1,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,1,1,0"))
                  (rule "shift_paren_or" (formula "20") (term "1,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,1,0,1,1,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,1,1,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,1,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,0,1,1,0"))
                  (rule "commute_or" (formula "20") (term "0,0,0,0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0,1,1,0"))
                  (rule "eqSymm" (formula "29") (term "1,1,0,0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "eqSymm" (formula "29") (term "1,0,0,0,0,1,1,0"))
                  (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,1,1,0"))
                  (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                  (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                  (rule "commute_or_2" (formula "29") (term "0,1,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "1,1,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "0,0,1,0,1,1,0"))
                  (rule "commute_or_2" (formula "29") (term "0,1,1,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "0,0,1,1,0,1,1,0"))
                  (rule "allLeft" (formula "30") (inst "t=k_0"))
                  (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "30") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                  (rule "add_literals" (formula "30") (term "0,0,1"))
                  (rule "leq_literals" (formula "30") (term "0,1"))
                  (builtin "One Step Simplification" (formula "30"))
                  (rule "notLeft" (formula "30"))
                  (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=arr_30"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "8") (ifseqformula "40"))
                  (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "26") (ifseqformula "40"))
                  (rule "allLeft" (formula "31") (inst "t=i"))
                  (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "18"))
                  (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                  (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "31") (term "0,0,1"))
                  (rule "leq_literals" (formula "31") (term "0,1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "31") (term "0,1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "notLeft" (formula "31"))
                  (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=arr_31"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "27") (ifseqformula "42"))
                  (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "9") (ifseqformula "42"))
                  (rule "allLeft" (formula "26") (inst "t=i"))
                  (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "26") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                  (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1"))
                  (rule "leq_literals" (formula "26") (term "0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "allLeft" (formula "26") (inst "t=k_0"))
                  (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "26") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                  (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1"))
                  (rule "leq_literals" (formula "26") (term "0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "5"))
                  (rule "applyEq" (formula "2") (term "0,2,1,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "2") (term "0,2,2,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "3") (term "0,2,0") (ifseqformula "4"))
                  (rule "close" (formula "57") (ifseqformula "3"))
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "35") (userinteraction))
               (branch "Case 1"
                  (rule "translateJavaAddInt" (formula "35") (term "0,1") (userinteraction))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "26") (userinteraction))
                  (rule "cut" (inst "cutFormula=array2seq(heap, bal) = array2seq(heapAfter_second, bal)") (userinteraction))
                  (branch "CUT: array2seq(heap, bal) = array2seq(heapAfter_second, bal) TRUE"
                     (rule "applyEqReverse" (formula "36") (term "0,0") (ifseqformula "1") (userinteraction))
                     (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "11") (userinteraction))
                     (rule "defOfarrConcat" (formula "36") (term "0,0") (userinteraction))
                     (rule "ifthenelse_split" (formula "36") (term "0,0") (userinteraction))
                     (branch "i = array2seq2d(heap, self.sorted).length TRUE"
                        (rule "array2seq2dDef" (formula "1") (term "0,1") (inst "u=u") (userinteraction))
                        (builtin "One Step Simplification" (formula "16"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (ifseqformula "20"))
                        (rule "true_left" (formula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1") (ifseqformula "25"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1") (ifseqformula "19"))
                        (rule "orRight" (formula "34"))
                        (rule "eqSymm" (formula "2"))
                        (rule "eqSymm" (formula "14"))
                        (rule "eqSymm" (formula "37"))
                        (rule "eqSymm" (formula "30"))
                        (rule "eqSymm" (formula "11"))
                        (rule "eqSymm" (formula "22") (term "1,0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "36"))
                        (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "34")) (ifInst ""  (formula "35")))
                        (rule "polySimp_addComm0" (formula "37") (term "0,0"))
                        (rule "lenOfSeqDef" (formula "1") (term "0"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                        (rule "times_zero_2" (formula "1") (term "1,1,0"))
                        (rule "add_zero_right" (formula "1") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "9"))
                        (rule "polySimp_addComm1" (formula "9") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,1,0,0,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "2"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "14"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1"))
                        (rule "polySimp_rightDist" (formula "9") (term "1"))
                        (rule "mul_literals" (formula "9") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "nonNull" (formula "17") (inst "i=i_1"))
                        (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "greater_literals" (formula "17") (term "0,1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "29"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                        (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                        (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "3") (ifseqformula "30"))
                        (rule "array2seqDef" (formula "27") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "2"))
                        (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "3") (ifseqformula "30"))
                        (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "2"))
                        (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "11"))
                        (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "3") (ifseqformula "30"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "2"))
                        (rule "eqSymm" (formula "11"))
                        (rule "array2seqDef" (formula "22") (term "1,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "22") (term "1,0"))
                        (rule "array2seqDef" (formula "15") (term "1,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "38") (inst "iv=iv"))
                        (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1"))
                        (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
                        (rule "narrowSelectArrayType" (formula "27") (term "2,0,1") (ifseqformula "3") (ifseqformula "30"))
                        (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "2"))
                        (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
                        (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "3") (ifseqformula "30"))
                        (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "2"))
                        (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "2"))
                        (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "11"))
                        (rule "array2seqDef" (formula "22") (term "1,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "22") (term "1,0"))
                        (rule "array2seqDef" (formula "15") (term "1,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_127"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "7")))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
                        (rule "eqSeqDef" (formula "2") (inst "iv=iv"))
                        (rule "andLeft" (formula "2"))
                        (rule "getOfSeqDef" (formula "3") (term "1,1,0"))
                        (rule "castDel" (formula "3") (term "2,1,1,0"))
                        (rule "castDel" (formula "3") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "3") (term "0,2,1,1,1,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
                        (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "2") (term "0"))
                        (rule "eqSymm" (formula "2"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                        (rule "times_zero_2" (formula "2") (term "1,1,1"))
                        (rule "add_zero_right" (formula "2") (term "1,1"))
                        (rule "getOfSeqDef" (formula "3") (term "0,1,0"))
                        (rule "castDel" (formula "3") (term "2,0,1,0"))
                        (rule "castDel" (formula "3") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "3") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "3") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "3") (term "1,1,0,0,1,0"))
                        (rule "lenOfSeqDef" (formula "3") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "1,1,1,0,0"))
                        (rule "lenOfSeqDef" (formula "2") (term "0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,0,0"))
                        (rule "eqSeqDef" (formula "22") (term "1,0") (inst "iv=iv"))
                        (rule "lenOfSeqDef" (formula "22") (term "0,0,1,0"))
                        (rule "eqSymm" (formula "22") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,0"))
                        (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,1,0"))
                        (rule "getOfSeqDef" (formula "22") (term "1,1,0,1,1,0"))
                        (rule "castDel" (formula "22") (term "2,1,1,0,1,1,0"))
                        (rule "castDel" (formula "22") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,0,1,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,1,0,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
                        (rule "getOfSeqDef" (formula "22") (term "0,1,0,1,1,0"))
                        (rule "castDel" (formula "22") (term "2,0,1,0,1,1,0"))
                        (rule "castDel" (formula "22") (term "1,0,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1,1,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,1,0,0,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0,1,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0,1,1,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,1,1,0,0,1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,1,0,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "22") (term "0,0,1,0"))
                        (rule "eqSymm" (formula "22") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,1,0,1,0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0,1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,0,1,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,1,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,1,0,1,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,1,0,1,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,0,1,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,1,1,0"))
                        (rule "eqSeqDef" (formula "15") (term "1,0") (inst "iv=iv"))
                        (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1,1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1,1,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1,1,0"))
                        (rule "getOfSeqDef" (formula "15") (term "1,1,0,1,1,0"))
                        (rule "castDel" (formula "15") (term "2,1,1,0,1,1,0"))
                        (rule "castDel" (formula "15") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,2,1,1,1,0,1,1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,1,0,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "15") (term "1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,1,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,0,1,0"))
                        (rule "lenOfSeqDef" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,0,0,1,0"))
                        (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0"))
                        (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0"))
                        (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0,1,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,1,0,0,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "pullOutSelect" (formula "38") (term "1,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_11"))
                        (rule "applyEq" (formula "39") (term "1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "39") (term "1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEq" (formula "23") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "1,0,0,0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "1,0,1,0,0,1,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "5")))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "23") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "23") (term "1,0,0,0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "39") (term "1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "39") (term "1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "23") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "39") (term "1,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "23") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "23") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "23") (term "1,0,1,0,0,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "eqSeqDef2" (formula "26") (inst "iv=iv") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                        (rule "mul_literals" (formula "10") (term "0,0"))
                        (rule "add_zero_left" (formula "10") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "2") (term "0,1,1,1,0,0") (ifseqformula "10"))
                        (rule "leq_literals" (formula "2") (term "0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "nnf_imp2or" (formula "17") (term "0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_imp2or" (formula "37") (term "0,1"))
                        (rule "nnf_imp2or" (formula "2") (term "0"))
                        (rule "nnf_notAnd" (formula "17") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                        (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "2") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                        (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "37") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1"))
                        (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "37") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "37") (term "1,0,0,0,1"))
                        (rule "nnf_imp2or" (formula "15") (term "0,1,1,0"))
                        (rule "nnf_imp2or" (formula "22") (term "0,1,1,0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0,1,1,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,1,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1,1,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0,1,1,0"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "messages.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "14"))
                           (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                           (rule "add_literals" (formula "14") (term "1,1,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0"))
                           (rule "add_zero_right" (formula "14") (term "0"))
                           (rule "leq_literals" (formula "14"))
                           (rule "closeFalse" (formula "14"))
                        )
                        (branch "messages.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "1"))
                           (rule "inEqSimp_geqRight" (formula "28"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "38") (term "1,0,0,0,0") (ifseqformula "2"))
                           (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                           (rule "applyEq" (formula "20") (term "0,1,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "34") (term "0,2,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "2"))
                           (rule "add_zero_right" (formula "13") (term "1"))
                           (rule "applyEq" (formula "22") (term "1,1,1,0,0") (ifseqformula "2"))
                           (rule "add_literals" (formula "22") (term "1,1,0,0"))
                           (rule "applyEq" (formula "37") (term "1,0,0,0,1,0,1") (ifseqformula "2"))
                           (rule "add_literals" (formula "37") (term "0,0,0,1,0,1"))
                           (rule "applyEq" (formula "37") (term "1,0,0,1,1,0,0,1") (ifseqformula "2"))
                           (rule "add_zero_right" (formula "37") (term "0,0,1,1,0,0,1"))
                           (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "2"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "i = array2seq2d(heap, self.sorted).length FALSE"
                        (rule "mSecondofmConcat" (formula "37") (term "0") (userinteraction))
                        (rule "cut" (inst "cutFormula=  array2seq2d(heap,
              byte[][]::select(heap,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))
= array2seq2d(heapAfter_second,
              byte[][]::select(heapAfter_second,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))") (userinteraction))
                        (branch "CUT: array2seq2d(heap, self.sorted) = array2seq2d(heapAfter_second, self.sorted@heapAfter_second) TRUE"
                           (builtin "One Step Simplification" (formula "16"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (ifseqformula "20"))
                           (rule "true_left" (formula "8"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1") (ifseqformula "25"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1") (ifseqformula "19"))
                           (rule "orRight" (formula "34"))
                           (rule "eqSymm" (formula "22") (term "1,0"))
                           (rule "eqSymm" (formula "30"))
                           (rule "eqSymm" (formula "1"))
                           (rule "eqSymm" (formula "38"))
                           (rule "eqSymm" (formula "37"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "14"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "36"))
                           (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "34")) (ifInst ""  (formula "35")))
                           (rule "polySimp_addComm0" (formula "38") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "38") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "9"))
                           (rule "polySimp_addComm1" (formula "9") (term "0"))
                           (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "2"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1"))
                           (rule "polySimp_rightDist" (formula "9") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                           (rule "mul_literals" (formula "9") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                           (rule "nonNull" (formula "17") (inst "i=i_1"))
                           (rule "greater_literals" (formula "17") (term "0,1"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "sub_literals" (formula "17") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "notLeft" (formula "17"))
                           (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "29"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "27") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "3") (ifseqformula "30"))
                           (rule "array2seqDef" (formula "22") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "22") (term "1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "11"))
                           (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "3") (ifseqformula "30"))
                           (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
                           (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "2"))
                           (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "3") (ifseqformula "30"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "2"))
                           (rule "eqSymm" (formula "11"))
                           (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
                           (rule "array2seqDef" (formula "15") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "15") (term "1,1,0") (inst "u=u"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "39") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "27") (term "2,0,1") (ifseqformula "3") (ifseqformula "30"))
                           (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "2"))
                           (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "3") (ifseqformula "30"))
                           (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "2"))
                           (rule "eqSeqDef" (formula "22") (term "1,0") (inst "iv=iv"))
                           (rule "lenOfSeqDef" (formula "22") (term "0,0,1,0"))
                           (rule "eqSymm" (formula "22") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0,1,0"))
                           (rule "getOfSeqDef" (formula "22") (term "1,1,0,1,1,0"))
                           (rule "castDel" (formula "22") (term "2,1,1,0,1,1,0"))
                           (rule "castDel" (formula "22") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "22") (term "0,1,0,1,1,0"))
                           (rule "castDel" (formula "22") (term "1,0,1,0,1,1,0"))
                           (rule "castDel" (formula "22") (term "2,0,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1,1,0"))
                           (rule "mul_literals" (formula "22") (term "1,1,1,0,0,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0,1,1,0"))
                           (rule "mul_literals" (formula "22") (term "1,1,1,1,0,0,1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,1,0,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "22") (term "0,0,1,0"))
                           (rule "eqSymm" (formula "22") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0,1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,0,1,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,1,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,1,0,1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,1,0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,0,0,1,0,1,0,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,1,1,0"))
                           (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "2"))
                           (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "11"))
                           (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                           (rule "eqSeqDef" (formula "15") (term "1,0") (inst "iv=iv"))
                           (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0"))
                           (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0"))
                           (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "15") (term "0,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,0"))
                           (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0"))
                           (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0"))
                           (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "15") (term "0,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
                           (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_128"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "7")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
                           (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_12"))
                           (rule "applyEq" (formula "40") (term "1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "40") (term "1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "40") (term "1,1,0,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEq" (formula "23") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,0,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,0,1,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "5")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "23") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "40") (term "1,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "40") (term "1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "40") (term "1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "1,0,1,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "1,0,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "applyEq" (formula "39") (term "1,0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "39"))
                           (rule "allRight" (formula "39") (inst "sk=iv_7"))
                           (rule "impRight" (formula "39"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "applyEq" (formula "2") (term "1,0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "41") (term "1,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "41"))
                           (rule "closeTrue" (formula "41"))
                        )
                        (branch "CUT: array2seq2d(heap, self.sorted) = array2seq2d(heapAfter_second, self.sorted@heapAfter_second) FALSE"
                           (rule "array2seq2dDef" (formula "29") (term "1") (inst "u=u") (userinteraction))
                           (rule "array2seq2dDef" (formula "29") (term "0") (inst "u=u") (userinteraction))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "29") (inst "iv=iv") (userinteraction))
                           (builtin "One Step Simplification" (formula "15"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (ifseqformula "19"))
                           (rule "true_left" (formula "7"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1") (ifseqformula "24"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1") (ifseqformula "18"))
                           (rule "orRight" (formula "34"))
                           (rule "eqSymm" (formula "30"))
                           (rule "eqSymm" (formula "1"))
                           (rule "eqSymm" (formula "38"))
                           (rule "eqSymm" (formula "28") (term "0"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "10"))
                           (rule "eqSymm" (formula "37"))
                           (rule "eqSymm" (formula "28") (term "1,0,1"))
                           (rule "eqSymm" (formula "21") (term "1,0"))
                           (rule "eqSymm" (formula "14") (term "1,0"))
                           (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "36"))
                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "34")) (ifInst ""  (formula "35")))
                           (rule "polySimp_addComm0" (formula "38") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "38") (term "0,0"))
                           (rule "lenOfSeqDef" (formula "28") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "28") (term "1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "28") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "28") (term "1,1,1,0,0,1"))
                           (rule "lenOfSeqDef" (formula "28") (term "0,0"))
                           (rule "eqSymm" (formula "28") (term "0"))
                           (rule "polySimp_elimSub" (formula "28") (term "1,1,0"))
                           (rule "times_zero_2" (formula "28") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "28") (term "1,1,0"))
                           (rule "getOfSeqDef" (formula "28") (term "0,1,0,1"))
                           (rule "castDel" (formula "28") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "28") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "28") (term "0,2,1,1,0,1,0,1"))
                           (rule "eqSymm" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "times_zero_2" (formula "28") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqDef" (formula "28") (term "0,0"))
                           (rule "eqSymm" (formula "28") (term "0"))
                           (rule "polySimp_elimSub" (formula "28") (term "1,1,0"))
                           (rule "times_zero_2" (formula "28") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "28") (term "1,1,0"))
                           (rule "getOfSeqDef" (formula "28") (term "0,1,0,1"))
                           (rule "castDel" (formula "28") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "28") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "28") (term "0,2,1,1,0,1,0,1"))
                           (rule "eqSymm" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "times_zero_2" (formula "28") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "28") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "28") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,1,1,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "8"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,1,1,0,1"))
                           (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "28") (term "0,1,0,0,0,1,0,0,1,0,0,1") (ifseqformula "13"))
                           (rule "applyEq" (formula "28") (term "1,0,1,0,0,1,0,0,1") (ifseqformula "13"))
                           (rule "applyEq" (formula "28") (term "0,1,0,0,1,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,1,1,0,1") (ifseqformula "13"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "28") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1"))
                           (rule "polySimp_rightDist" (formula "8") (term "1"))
                           (rule "mul_literals" (formula "8") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,1,0,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,1,0,0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,0,0,1,0,0,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "28") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1"))
                           (rule "nonNull" (formula "16") (inst "i=i_1"))
                           (rule "greater_literals" (formula "16") (term "0,1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "sub_literals" (formula "16") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "16"))
                           (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "28"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "26") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "2") (ifseqformula "30"))
                           (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "1") (term "2,1") (ifseqformula "2") (ifseqformula "30"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "10"))
                           (rule "narrowSelectArrayType" (formula "10") (term "2,0") (ifseqformula "2") (ifseqformula "30"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "10"))
                           (rule "array2seqDef" (formula "21") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "21") (term "1,0"))
                           (rule "array2seqDef" (formula "14") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "14") (term "1,1,0") (inst "u=u"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "39") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "26") (term "0,1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "26") (term "2,0,1") (ifseqformula "2") (ifseqformula "30"))
                           (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "10"))
                           (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_129"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "6")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "array2seqDef" (formula "8") (term "0,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "8") (term "2,0,0") (ifseqformula "2") (ifseqformula "30"))
                           (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "10"))
                           (rule "array2seqDef" (formula "29") (term "1,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "29") (term "1,0,1"))
                           (rule "array2seqDef" (formula "21") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "21") (term "1,0"))
                           (rule "eqSeqDef" (formula "14") (term "1,0") (inst "iv=iv"))
                           (rule "lenOfSeqDef" (formula "14") (term "0,0,1,0"))
                           (rule "eqSymm" (formula "14") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,0"))
                           (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "14") (term "1,1,0,1,0"))
                           (rule "lenOfSeqDef" (formula "14") (term "1,1,0,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0,1,1,0"))
                           (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "1,1,1,0,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "14") (term "1,1,0,1,1,0"))
                           (rule "castDel" (formula "14") (term "2,1,1,0,1,1,0"))
                           (rule "castDel" (formula "14") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "0,2,1,1,1,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "14") (term "0,1,0,1,1,0"))
                           (rule "castDel" (formula "14") (term "2,0,1,0,1,1,0"))
                           (rule "castDel" (formula "14") (term "1,0,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "14") (term "1,1,1,0,0,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "14") (term "0,0,1,0"))
                           (rule "eqSymm" (formula "14") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,0"))
                           (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "14") (term "1,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0,0,0,1,0"))
                           (rule "eqSymm" (formula "14") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0,0,0,1,0"))
                           (rule "eqSymm" (formula "14") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0,1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,1,0,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,1,0"))
                           (rule "eqSymm" (formula "14") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,1,0"))
                           (rule "eqSymm" (formula "14") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0,1,0"))
                           (rule "eqSeqDef2" (formula "1") (inst "iv=iv") (ifseqformula "10"))
                           (rule "andLeft" (formula "1"))
                           (rule "lenOfSeqDef" (formula "1") (term "1"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                           (rule "times_zero_2" (formula "1") (term "1,1,1"))
                           (rule "add_zero_right" (formula "1") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "1") (term "0"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "1,1,0"))
                           (rule "add_zero_right" (formula "1") (term "1,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "getOfSeqDef" (formula "1") (term "1,1,0"))
                           (rule "castDel" (formula "1") (term "2,1,1,0"))
                           (rule "castDel" (formula "1") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "1") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "1") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "1") (term "1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "1") (term "0,1,0"))
                           (rule "castDel" (formula "1") (term "1,0,1,0"))
                           (rule "castDel" (formula "1") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "1") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "1") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "1") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "1,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1,0,0"))
                           (rule "array2seqDef" (formula "29") (term "1,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "29") (term "1,0,1"))
                           (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "eqSeqDef" (formula "20") (term "1,0") (inst "iv=iv"))
                           (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0,1,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,1,0,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,1,0,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "20") (term "0,1,0,1,1,0"))
                           (rule "castDel" (formula "20") (term "1,0,1,0,1,1,0"))
                           (rule "castDel" (formula "20") (term "2,0,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "20") (term "0,0,1,0"))
                           (rule "eqSymm" (formula "20") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,1,0"))
                           (rule "getOfSeqDef" (formula "20") (term "0,1,0,1,1,0"))
                           (rule "castDel" (formula "20") (term "1,0,1,0,1,1,0"))
                           (rule "castDel" (formula "20") (term "2,0,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "20") (term "0,0,1,0"))
                           (rule "eqSymm" (formula "20") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,1,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
                           (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                           (rule "pullOutSelect" (formula "28") (term "0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_13"))
                           (rule "applyEq" (formula "29") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "39") (term "1,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "39") (term "1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "29") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "29") (term "1,1,2,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "29") (term "1,0,1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "39") (term "1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "18"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEq" (formula "21") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "1,0,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "1,0,1,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "4")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "21") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "1,0,1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "39") (term "1,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "1,0,1,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "39") (term "1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "1,1,2,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "39") (term "1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "1,0,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "applyEq" (formula "28") (term "0,0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0,1") (ifseqformula "12"))
                           (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "allRight" (formula "28") (inst "sk=iv_8"))
                           (rule "impRight" (formula "28"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_left" (formula "30") (term "0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "1")))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "30") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "30") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                           (rule "eqSeqDef2" (formula "27") (inst "iv=iv") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "pullOutSelect" (formula "29") (term "1,2,1,0") (inst "selectSK=arr_130"))
                           (rule "applyEq" (formula "30") (term "0,1,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "20"))
                           (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
                           (rule "times_zero_1" (formula "12") (term "0,0"))
                           (rule "add_zero_left" (formula "12") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                           (rule "mul_literals" (formula "12") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "4") (term "0,1,1,1,0,0") (ifseqformula "12"))
                           (rule "leq_literals" (formula "4") (term "0,0,1,1,1,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_131"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                           (rule "nnf_imp2or" (formula "20") (term "0"))
                           (rule "nnf_imp2or" (formula "18") (term "0"))
                           (rule "nnf_imp2or" (formula "25") (term "0"))
                           (rule "nnf_imp2or" (formula "42") (term "0,1"))
                           (rule "nnf_imp2or" (formula "5") (term "0"))
                           (rule "nnf_notAnd" (formula "20") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "18") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "25") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                           (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                           (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "42") (term "0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,1"))
                           (rule "add_literals" (formula "42") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "42") (term "1,0,0,0,1"))
                           (rule "nnf_imp2or" (formula "18") (term "0,1,1,0"))
                           (rule "nnf_imp2or" (formula "25") (term "0,1,1,0"))
                           (rule "arrayLengthNotNegative" (formula "17") (term "1"))
                           (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                           (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "arrayLengthIsAShort" (formula "18") (term "1"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "lenNonNegative" (formula "42") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "cut_direct" (formula "26") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,1,1,0"))
                              (rule "arrayLengthIsAShort" (formula "13") (term "1,1"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "arrayLengthNotNegative" (formula "13") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "15"))
                              (rule "leq_literals" (formula "13") (term "0"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "9"))
                              (rule "replaceKnownSelect_taclet110011000_3" (formula "28") (term "1,1,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet110011000_4" (formula "28") (term "1,1,0,0,0,0,0,0"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "29"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "29"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "30"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "30"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "29"))
                              (rule "notLeft" (formula "28"))
                              (rule "nonNull" (formula "30") (inst "i=i_1"))
                              (rule "greater_literals" (formula "30") (term "0,1"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "sub_literals" (formula "30") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "andLeft" (formula "30"))
                              (rule "notLeft" (formula "30"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "29") (inst "i=i_1"))
                              (rule "greater_literals" (formula "29") (term "0,1"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "sub_literals" (formula "29") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "andLeft" (formula "29"))
                              (rule "notLeft" (formula "29"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "28") (inst "i=i_1"))
                              (rule "greater_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "sub_literals" (formula "28") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "2") (term "0"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                              (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_4"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "30"))
                              (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                              (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "50")) (ifInst ""  (formula "8")))
                              (rule "elementOfSingleton" (formula "30") (term "0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                              (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "30"))
                              (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                              (rule "hideAuxiliaryEq" (formula "30"))
                              (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_4"))
                              (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "29"))
                              (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "50")) (ifInst ""  (formula "8")))
                              (rule "elementOfSingleton" (formula "29") (term "0,0"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "29"))
                              (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                              (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                              (rule "hideAuxiliaryEq" (formula "29"))
                              (rule "nnf_imp2or" (formula "28") (term "0"))
                              (rule "nnf_imp2or" (formula "30") (term "0"))
                              (rule "nnf_imp2or" (formula "29") (term "0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "29") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                              (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0"))
                              (rule "commute_or_2" (formula "22") (term "0"))
                              (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                              (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                              (rule "ifthenelse_to_or_right" (formula "20") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,1,0,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,1,0,1,0"))
                              (rule "ifthenelse_to_or_left" (formula "27") (term "0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,1,0,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,0,0,1,0"))
                              (rule "commute_or_2" (formula "28") (term "0"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "21") (ifseqformula "9"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "23"))
                              (rule "notLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "21"))
                              (rule "notLeft" (formula "21"))
                              (rule "nonNull" (formula "23") (inst "i=i_1"))
                              (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "39")))
                              (rule "greater_literals" (formula "23") (term "0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "39"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "22") (inst "i=i_1"))
                              (rule "greater_literals" (formula "22") (term "0,1"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "38")))
                              (rule "sub_literals" (formula "22") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "38"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "21") (inst "i=i_1"))
                              (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "37")))
                              (rule "greater_literals" (formula "21") (term "0"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "37"))
                              (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                              (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "23") (term "0"))
                              (rule "nnf_imp2or" (formula "22") (term "0"))
                              (rule "nnf_imp2or" (formula "21") (term "0"))
                              (rule "nnf_notAnd" (formula "23") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "21") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                              (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                              (rule "commute_or_2" (formula "32") (term "0"))
                              (rule "commute_or_2" (formula "31") (term "0"))
                              (rule "commute_or" (formula "6") (term "0,0"))
                              (rule "commute_or" (formula "24") (term "0,0"))
                              (rule "commute_or" (formula "30") (term "0,0"))
                              (rule "ifthenelse_split" (formula "47") (term "1"))
                              (branch "messages.length ≥ 1 + iv_8 TRUE"
                                 (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "48"))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "48") (inst "iv=iv"))
                                 (rule "getOfSeqDef" (formula "48") (term "0,1,0,1"))
                                 (rule "castDel" (formula "48") (term "1,0,1,0,1"))
                                 (rule "castDel" (formula "48") (term "2,0,1,0,1"))
                                 (rule "add_zero_right" (formula "48") (term "0,2,1,0,1,0,1"))
                                 (rule "eqSymm" (formula "48") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "48") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "48") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "48") (term "1,1,0,1,1,0,1"))
                                 (rule "lenOfSeqDef" (formula "48") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "48") (term "1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "48") (term "1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "48") (term "1,1,1,0,0,1"))
                                 (rule "lenOfSeqDef" (formula "48") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "48") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "48") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "48") (term "1,1,0"))
                                 (rule "lenOfSeqDef" (formula "48") (term "0,0"))
                                 (rule "eqSymm" (formula "48") (term "0"))
                                 (rule "polySimp_elimSub" (formula "48") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "48") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "48") (term "1,1,0"))
                                 (rule "getOfSeqDef" (formula "48") (term "0,1,0,1"))
                                 (rule "castDel" (formula "48") (term "2,0,1,0,1"))
                                 (rule "castDel" (formula "48") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "48") (term "0,2,1,0,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "48") (term "1,1,0,0,1,0,1"))
                                 (rule "times_zero_2" (formula "48") (term "1,1,1,0,0,1,0,1"))
                                 (rule "add_zero_right" (formula "48") (term "1,1,0,0,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "48") (term "0,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "48") (term "0,0,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "48") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "48") (term "0,0,0,0"))
                                 (rule "eqSymm" (formula "48") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "48") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "48") (term "0,0,0,0"))
                                 (rule "eqSymm" (formula "48") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "48") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1,0,1"))
                                 (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1"))
                                 (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "48") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "0,0,0,0"))
                                 (rule "eqSymm" (formula "48") (term "0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "48") (term "0,1,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "0,0,1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "48") (term "0,0,1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "48") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "0,0,0,0"))
                                 (rule "eqSymm" (formula "48") (term "0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "0,0,1,0"))
                                 (rule "nnf_imp2or" (formula "48") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "48") (term "0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "48") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "48") (term "1,0,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "48") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "48") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0,1"))
                                 (rule "ifthenelse_split" (formula "6") (term "0"))
                                 (branch "messages.length ≥ 1 TRUE"
                                    (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "19") (term "0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "commute_or" (formula "29") (term "1,0,1,0"))
                                    (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                    (rule "shift_paren_or" (formula "20") (term "1,0,1,0"))
                                    (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                    (rule "commute_or_2" (formula "23") (term "0"))
                                    (rule "commute_or_2" (formula "22") (term "0"))
                                    (rule "ifthenelse_split" (formula "3") (term "0"))
                                    (branch "self.sorted.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "applyEqReverse" (formula "47") (term "0,0,0,1,0") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "47") (term "0,1,1,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "allRight" (formula "47") (inst "sk=iv_2"))
                                       (rule "orRight" (formula "47"))
                                       (rule "orRight" (formula "47"))
                                       (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "eqSymm" (formula "48"))
                                       (rule "inEqSimp_leqRight" (formula "46"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "replace_known_left" (formula "48") (term "0,0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_geqRight" (formula "47"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                       (rule "eqSymm" (formula "48"))
                                       (rule "polySimp_addComm1" (formula "48") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "48") (term "0,0,0"))
                                       (rule "eqSymm" (formula "48"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                       (rule "eqSymm" (formula "48"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "48") (term "1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,1"))
                                       (rule "mul_literals" (formula "48") (term "0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "48") (term "1,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "48") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                       (rule "eqSymm" (formula "48"))
                                       (rule "pullOutSelect" (formula "48") (term "1,0") (inst "selectSK=arr_22"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "28"))
                                       (rule "eqSymm" (formula "49"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "commute_or_2" (formula "24") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "17") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "17") (term "0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "21") (term "0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "cut_direct" (formula "60") (term "0"))
                                       (branch "CUT: arrConcat(1 + i, array2seq2d(heapAfter_second, self.sorted)).length = arrConcat(1 + i, array2seq2d(heap, self.sorted)).length TRUE"
                                          (builtin "One Step Simplification" (formula "61"))
                                          (rule "allRight" (formula "61") (inst "sk=iv_3"))
                                          (rule "orRight" (formula "61"))
                                          (rule "orRight" (formula "61"))
                                          (rule "inEqSimp_leqRight" (formula "61"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "62"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "lenNonNegative" (formula "62") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "12"))
                                          (rule "leq_literals" (formula "25") (term "0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "commute_or" (formula "38") (term "0,0"))
                                          (rule "commute_or" (formula "37") (term "0,0"))
                                          (rule "ifthenelse_to_or_left" (formula "26") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "26") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,0,1,0,0,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "35") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "35") (term "1,0,1,0,0,1,0"))
                                          (rule "eqSymm" (formula "35") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,0,1,0,0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "28") (term "0,0"))
                                          (rule "ifthenelse_to_or_right" (formula "13") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "27") (term "0,0"))
                                          (rule "commute_or" (formula "13") (term "0,0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "26") (term "1,0,0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "26") (term "1,1,0,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "commute_or" (formula "13") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "35") (term "1,1,0,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "eqSymm" (formula "35") (term "1,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "38") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "39") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "true_left" (formula "39"))
                                          (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "38") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "26") (term "1,1,0,0,1,0"))
                                          (rule "commute_or" (formula "26") (term "0,0,1,1,0"))
                                          (rule "ifthenelse_split" (formula "6") (term "0"))
                                          (branch "self.sorted[iv_8].length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "7"))
                                             (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "7")))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "36") (term "0,0,1,0"))
                                             (rule "inEqSimp_or_subsumption5" (formula "36") (term "1,0,0,1,0"))
                                             (rule "greater_literals" (formula "36") (term "0,1,0,1,0,0,1,0"))
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "commute_or" (formula "14") (term "0,0,1,1,0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch " ¬self.sorted[iv_8] = null ∧ ¬self.sorted[iv_8].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "4"))
                                                (rule "notLeft" (formula "4"))
                                                (rule "notLeft" (formula "4"))
                                                (rule "referencedObjectIsCreatedRight" (formula "46") (ifseqformula "47"))
                                                (rule "close" (formula "46") (ifseqformula "15"))
                                             )
                                             (branch " ¬self.sorted[iv_8] = null ∧ ¬self.sorted[iv_8].<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                                                (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,1,1,0"))
                                                (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,1,0"))
                                                (rule "qeq_literals" (formula "13") (term "1,0,0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "shift_paren_or" (formula "13") (term "1,1,0"))
                                                (rule "commute_or" (formula "13") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "13") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1,1,0"))
                                                (rule "add_literals" (formula "13") (term "1,0,1,1,1,0"))
                                                (rule "times_zero_1" (formula "13") (term "0,1,1,1,0"))
                                                (rule "leq_literals" (formula "13") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "shift_paren_or" (formula "13") (term "0"))
                                                (rule "commute_or_2" (formula "13") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "shift_paren_or" (formula "13") (term "0,0"))
                                                (rule "commute_or" (formula "13") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "commute_or" (formula "26") (term "1,1,0,1,1,0"))
                                                (rule "commute_or_2" (formula "26") (term "0,1,0,1,1,0"))
                                                (rule "shift_paren_or" (formula "35") (term "0,0,0,1,0"))
                                                (rule "cnf_rightDist" (formula "26") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "35") (term "0,1,0,1,1,0"))
                                                (rule "commute_or" (formula "35") (term "1,1,0,1,1,0"))
                                                (rule "commute_or_2" (formula "26") (term "1,0,0,1,0"))
                                                (rule "inEqSimp_or_subsumption4" (formula "26") (term "0,1,0,0,1,0"))
                                                (rule "greater_literals" (formula "26") (term "0,0,0,1,0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "commute_or" (formula "35") (term "0,0,0,0,1,0"))
                                                (rule "shift_paren_or" (formula "26") (term "0,0,0,1,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "1,0,0") (ifseqformula "14"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                                                (rule "true_left" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "31"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "allLeft" (formula "31") (inst "t=i"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "24"))
                                                (rule "qeq_literals" (formula "31") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "25"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "notLeft" (formula "31"))
                                                (rule "allLeft" (formula "37") (inst "t=i"))
                                                (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "24"))
                                                (rule "qeq_literals" (formula "37") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "37"))
                                                (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "25"))
                                                (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                                (rule "leq_literals" (formula "37") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "37"))
                                                (rule "notLeft" (formula "37"))
                                                (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=arr_25"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "12")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                                (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "narrowSelectArrayType" (formula "46") (term "0") (ifseqformula "15") (ifseqformula "49"))
                                                (rule "allLeft" (formula "31") (inst "t=iv_8"))
                                                (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "12"))
                                                (rule "qeq_literals" (formula "31") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                                (rule "leq_literals" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "notLeft" (formula "31"))
                                                (rule "allLeft" (formula "37") (inst "t=iv_8"))
                                                (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "12"))
                                                (rule "qeq_literals" (formula "37") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "37"))
                                                (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "37") (term "0,0,1"))
                                                (rule "leq_literals" (formula "37") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "37"))
                                                (rule "notLeft" (formula "37"))
                                                (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=arr_26"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "12")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                                                (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "narrowSelectArrayType" (formula "46") (term "0") (ifseqformula "15") (ifseqformula "51"))
                                                (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "46"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_right" (formula "50") (term "0,0") (ifseqformula "46"))
                                                (builtin "One Step Simplification" (formula "50"))
                                                (rule "notRight" (formula "50"))
                                                (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "61")))
                                                (rule "closeFalse" (formula "6"))
                                             )
                                          )
                                          (branch "self.sorted[iv_8].length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "45"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "mul_literals" (formula "7") (term "1,0"))
                                             (rule "add_zero_right" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                             (rule "mul_literals" (formula "7") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "closeFalse" (formula "8"))
                                          )
                                       )
                                       (branch "CUT: arrConcat(1 + i, array2seq2d(heapAfter_second, self.sorted)).length = arrConcat(1 + i, array2seq2d(heap, self.sorted)).length FALSE"
                                          (builtin "One Step Simplification" (formula "61"))
                                          (rule "false_right" (formula "61"))
                                          (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "lenNonNegative" (formula "59") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "17") (term "1,1"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                          (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "9"))
                                          (rule "leq_literals" (formula "22") (term "0"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "commute_or" (formula "35") (term "0,0"))
                                          (rule "commute_or" (formula "34") (term "0,0"))
                                          (rule "ifthenelse_to_or_left" (formula "23") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,0,1,0,0,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "32") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "32") (term "1,0,1,0,0,1,0"))
                                          (rule "eqSymm" (formula "32") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,0,1,0,0,1,0"))
                                          (rule "commute_or" (formula "26") (term "0,0"))
                                          (rule "commute_or" (formula "25") (term "0,0"))
                                          (rule "ifthenelse_to_or_right" (formula "10") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "10") (term "0,0"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or_2" (formula "10") (term "0,1,0"))
                                          (rule "commute_or" (formula "10") (term "1,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "23") (term "0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,0,0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,1,0,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "23") (term "0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "32") (term "0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "32") (term "1,0,0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "32") (term "1,1,0,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "nnf_notAnd" (formula "32") (term "0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "32") (term "0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "commute_or" (formula "10") (term "0,0,1,0"))
                                          (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "35") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "36") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "true_left" (formula "36"))
                                          (rule "arrayLengthIsAShort" (formula "34") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "arrayLengthNotNegative" (formula "34") (term "1,1,0"))
                                          (rule "commute_or" (formula "23") (term "1,1,0,0,1,0"))
                                          (rule "commute_or" (formula "23") (term "0,0,1,1,0"))
                                          (rule "commute_or_2" (formula "23") (term "0,1,1,0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.sorted[iv_8].length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "53") (term "0,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "4")))
                                             (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                                             (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "33") (term "0,0,1,0"))
                                             (rule "inEqSimp_or_subsumption5" (formula "33") (term "1,0,0,1,0"))
                                             (rule "greater_literals" (formula "33") (term "0,1,0,1,0,0,1,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "commute_or" (formula "11") (term "0,0,1,1,0"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " ¬self.sorted[iv_8] = null ∧ ¬self.sorted[iv_8].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "44"))
                                                (rule "close" (formula "43") (ifseqformula "12"))
                                             )
                                             (branch " ¬self.sorted[iv_8] = null ∧ ¬self.sorted[iv_8].<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "commute_or_2" (formula "23") (term "0,1,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
                                                (rule "add_literals" (formula "10") (term "1,1,0,0,1,1,0"))
                                                (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "shift_paren_or" (formula "10") (term "1,1,0"))
                                                (rule "commute_or" (formula "10") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,1,0"))
                                                (rule "add_literals" (formula "10") (term "1,0,1,1,1,0"))
                                                (rule "times_zero_1" (formula "10") (term "0,1,1,1,0"))
                                                (rule "leq_literals" (formula "10") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "shift_paren_or" (formula "10") (term "0"))
                                                (rule "commute_or_2" (formula "10") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "shift_paren_or" (formula "10") (term "0,0"))
                                                (rule "commute_or" (formula "10") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "commute_or" (formula "23") (term "1,1,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "23") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "32") (term "0,1,0,1,1,0"))
                                                (rule "shift_paren_or" (formula "32") (term "0,0,0,1,0"))
                                                (rule "commute_or" (formula "32") (term "1,1,0,1,1,0"))
                                                (rule "commute_or_2" (formula "23") (term "1,0,0,1,0"))
                                                (rule "inEqSimp_or_subsumption4" (formula "23") (term "0,1,0,0,1,0"))
                                                (rule "greater_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "commute_or" (formula "32") (term "0,0,0,0,1,0"))
                                                (rule "shift_paren_or" (formula "23") (term "0,0,0,1,0"))
                                                (rule "allLeft" (formula "33") (inst "t=iv_8"))
                                                (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "5"))
                                                (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                                (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                                (rule "leq_literals" (formula "33") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "33") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "notLeft" (formula "33"))
                                                (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=arr_24"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "8")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                                (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "narrowSelectArrayType" (formula "42") (term "0") (ifseqformula "11") (ifseqformula "44"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "42"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "42"))
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "notRight" (formula "43"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "self.sorted[iv_8].length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "42"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "4"))
                                             (rule "mul_literals" (formula "4") (term "1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                             (rule "mul_literals" (formula "4") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "4") (term "0"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                       )
                                    )
                                    (branch "self.sorted.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "38"))
                                       (rule "close" (formula "37") (ifseqformula "8"))
                                    )
                                 )
                                 (branch "messages.length ≥ 1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "38"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "7"))
                                    (rule "times_zero_2" (formula "7") (term "1,0"))
                                    (rule "add_zero_right" (formula "7") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                    (rule "mul_literals" (formula "7") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "6") (term "0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "closeFalse" (formula "6"))
                                 )
                              )
                              (branch "messages.length ≥ 1 + iv_8 FALSE"
                                 (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "47")))
                                 (rule "closeTrue" (formula "48"))
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,1,1,0"))
                              (rule "arrayLengthNotNegative" (formula "13") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "15"))
                              (rule "leq_literals" (formula "13") (term "0"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "arrayLengthIsAShort" (formula "13") (term "1,1"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "9"))
                              (rule "replaceKnownSelect_taclet110011000_3" (formula "28") (term "1,1,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet110011000_4" (formula "28") (term "1,1,0,0,0,0,0,0"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "29"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "29"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "30"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "30"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "nonNull" (formula "30") (inst "i=i_1"))
                              (rule "greater_literals" (formula "30") (term "0,1"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "sub_literals" (formula "30") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "andLeft" (formula "30"))
                              (rule "notLeft" (formula "30"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "29") (inst "i=i_1"))
                              (rule "greater_literals" (formula "29") (term "0,1"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "sub_literals" (formula "29") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "andLeft" (formula "29"))
                              (rule "notLeft" (formula "29"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "28") (inst "i=i_1"))
                              (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "greater_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "ifthenelse_negated" (formula "2") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                              (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_3"))
                              (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "30"))
                              (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "51")) (ifInst ""  (formula "8")))
                              (rule "elementOfSingleton" (formula "30") (term "0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                              (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "30"))
                              (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                              (rule "hideAuxiliaryEq" (formula "30"))
                              (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_3"))
                              (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "29"))
                              (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "51")) (ifInst ""  (formula "8")))
                              (rule "elementOfSingleton" (formula "29") (term "0,0"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "29"))
                              (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                              (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                              (rule "hideAuxiliaryEq" (formula "29"))
                              (rule "nnf_imp2or" (formula "28") (term "0"))
                              (rule "nnf_imp2or" (formula "30") (term "0"))
                              (rule "nnf_imp2or" (formula "29") (term "0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "29") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                              (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0"))
                              (rule "commute_or_2" (formula "22") (term "0"))
                              (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                              (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                              (rule "ifthenelse_to_or_right" (formula "27") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,1,0,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,0,0,1,0"))
                              (rule "ifthenelse_to_or_right" (formula "20") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,1,0,1,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,1,0,1,0"))
                              (rule "commute_or_2" (formula "28") (term "0"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "21") (ifseqformula "9"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "23"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "23"))
                              (rule "notLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "22"))
                              (rule "notLeft" (formula "21"))
                              (rule "nonNull" (formula "23") (inst "i=i_1"))
                              (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "39")))
                              (rule "greater_literals" (formula "23") (term "0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "39"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "22") (inst "i=i_1"))
                              (rule "greater_literals" (formula "22") (term "0,1"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "38")))
                              (rule "sub_literals" (formula "22") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "38"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "21") (inst "i=i_1"))
                              (rule "greater_literals" (formula "21") (term "0,1"))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "37")))
                              (rule "sub_literals" (formula "21") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "37"))
                              (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                              (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "23") (term "0"))
                              (rule "nnf_imp2or" (formula "22") (term "0"))
                              (rule "nnf_imp2or" (formula "21") (term "0"))
                              (rule "nnf_notAnd" (formula "23") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "21") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                              (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "32") (term "0"))
                              (rule "commute_or_2" (formula "31") (term "0"))
                              (rule "commute_or" (formula "6") (term "0,0"))
                              (rule "commute_or" (formula "24") (term "0,0"))
                              (rule "commute_or" (formula "30") (term "0,0"))
                              (rule "ifthenelse_split" (formula "48") (term "1"))
                              (branch "messages.length ≥ 1 + iv_8 TRUE"
                                 (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "49"))
                                 (rule "eqSeqDef" (formula "49") (inst "iv=iv"))
                                 (rule "lenOfSeqDef" (formula "49") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "49") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "49") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "49") (term "1,1,0"))
                                 (rule "lenOfSeqDef" (formula "49") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "49") (term "1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "49") (term "1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "49") (term "1,1,1,0,0,1"))
                                 (rule "getOfSeqDef" (formula "49") (term "1,1,0,1"))
                                 (rule "castDel" (formula "49") (term "1,1,1,0,1"))
                                 (rule "castDel" (formula "49") (term "2,1,1,0,1"))
                                 (rule "add_zero_right" (formula "49") (term "0,2,1,1,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "49") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "49") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "49") (term "1,1,0,1,1,0,1"))
                                 (rule "getOfSeqDef" (formula "49") (term "0,1,0,1"))
                                 (rule "castDel" (formula "49") (term "1,0,1,0,1"))
                                 (rule "castDel" (formula "49") (term "2,0,1,0,1"))
                                 (rule "add_zero_right" (formula "49") (term "0,2,1,0,1,0,1"))
                                 (rule "eqSymm" (formula "49") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "49") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "49") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "49") (term "1,1,0,1,1,0,1"))
                                 (rule "lenOfSeqDef" (formula "49") (term "0,0"))
                                 (rule "eqSymm" (formula "49") (term "0"))
                                 (rule "polySimp_elimSub" (formula "49") (term "1,1,0"))
                                 (rule "mul_literals" (formula "49") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "49") (term "1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "49") (term "0,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "49") (term "0,0,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "49") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "49") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "49") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "49") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "49") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "49") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "49") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "49") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "49") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "49") (term "0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "49") (term "0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "49") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "49") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "49") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "49") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "49") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "49") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,1,1,0,1"))
                                 (rule "nnf_imp2or" (formula "49") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "49") (term "0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "49") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "49") (term "1,0,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "49") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "49") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0,1"))
                                 (rule "ifthenelse_split" (formula "6") (term "0"))
                                 (branch "messages.length ≥ 1 TRUE"
                                    (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "19") (term "0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                    (rule "shift_paren_or" (formula "29") (term "1,0,1,0"))
                                    (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                    (rule "commute_or_2" (formula "23") (term "0"))
                                    (rule "shift_paren_or" (formula "20") (term "1,0,1,0"))
                                    (rule "commute_or_2" (formula "22") (term "0"))
                                    (rule "ifthenelse_split" (formula "3") (term "0"))
                                    (branch "self.sorted.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "48") (term "0,0,0,1,0") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "48") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "48") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "48") (term "0,1,1,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "allRight" (formula "48") (inst "sk=iv_0"))
                                       (rule "orRight" (formula "48"))
                                       (rule "orRight" (formula "48"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "eqSymm" (formula "49"))
                                       (rule "inEqSimp_leqRight" (formula "47"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "replace_known_left" (formula "49") (term "0,0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                       (rule "eqSymm" (formula "49"))
                                       (rule "polySimp_addComm1" (formula "49") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "49") (term "0,0,0"))
                                       (rule "eqSymm" (formula "49"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,0"))
                                       (rule "eqSymm" (formula "49"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "49") (term "1,0,1"))
                                       (rule "mul_literals" (formula "49") (term "0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "49") (term "1,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "49") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "49") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                       (rule "eqSymm" (formula "49"))
                                       (rule "pullOutSelect" (formula "49") (term "1,0") (inst "selectSK=arr_17"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "28"))
                                       (rule "eqSymm" (formula "50"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_18"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "50"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "commute_or_2" (formula "24") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "22") (term "0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "lenNonNegative" (formula "6") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "6"))
                                       (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "arrayLengthIsAShort" (formula "22") (term "1"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "arrayLengthIsAShort" (formula "17") (term "1,1"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "cut_direct" (formula "61") (term "0"))
                                       (branch "CUT: arrConcat(1 + i, array2seq2d(heapAfter_second, self.sorted)).length = arrConcat(1 + i, array2seq2d(heap, self.sorted)).length TRUE"
                                          (builtin "One Step Simplification" (formula "62"))
                                          (rule "allRight" (formula "62") (inst "sk=iv_1"))
                                          (rule "orRight" (formula "62"))
                                          (rule "orRight" (formula "62"))
                                          (rule "inEqSimp_geqRight" (formula "63"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "63"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "12"))
                                          (rule "leq_literals" (formula "24") (term "0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "arrayLengthNotNegative" (formula "20") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "22"))
                                          (rule "leq_literals" (formula "20") (term "0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "commute_or" (formula "38") (term "0,0"))
                                          (rule "commute_or" (formula "37") (term "0,0"))
                                          (rule "ifthenelse_to_or_left" (formula "35") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "35") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,0,1,0,0,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "26") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "26") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,0,1,0,0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "28") (term "0,0"))
                                          (rule "ifthenelse_to_or_right" (formula "13") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "27") (term "0,0"))
                                          (rule "commute_or" (formula "13") (term "0,0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "35") (term "1,1,0,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "eqSymm" (formula "35") (term "1,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "26") (term "1,1,0,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "eqSymm" (formula "26") (term "1,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                          (rule "commute_or" (formula "13") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "38") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "arrayLengthNotNegative" (formula "38") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "38") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "commute_or" (formula "35") (term "1,1,0,0,1,0"))
                                          (rule "commute_or" (formula "35") (term "0,0,1,1,0"))
                                          (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                          (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                          (rule "ifthenelse_split" (formula "6") (term "0"))
                                          (branch "self.sorted[iv_8].length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "57") (term "0,1") (ifseqformula "7"))
                                             (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "7")))
                                             (rule "commute_or" (formula "27") (term "1,1,0,0,1,0"))
                                             (rule "commute_or_2" (formula "36") (term "0,1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch " ¬self.sorted[iv_8] = null ∧ ¬self.sorted[iv_8].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "4"))
                                                (rule "notLeft" (formula "4"))
                                                (rule "notLeft" (formula "4"))
                                                (rule "referencedObjectIsCreatedRight" (formula "46") (ifseqformula "47"))
                                                (rule "close" (formula "46") (ifseqformula "15"))
                                             )
                                             (branch " ¬self.sorted[iv_8] = null ∧ ¬self.sorted[iv_8].<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "commute_or" (formula "13") (term "0,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,1,1,0"))
                                                (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,1,0"))
                                                (rule "qeq_literals" (formula "13") (term "1,0,0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "shift_paren_or" (formula "13") (term "1,1,0"))
                                                (rule "commute_or" (formula "13") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "13") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1,1,0"))
                                                (rule "add_literals" (formula "13") (term "1,0,1,1,1,0"))
                                                (rule "times_zero_1" (formula "13") (term "0,1,1,1,0"))
                                                (rule "leq_literals" (formula "13") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "shift_paren_or" (formula "13") (term "0"))
                                                (rule "commute_or_2" (formula "13") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "shift_paren_or" (formula "13") (term "0,0"))
                                                (rule "commute_or" (formula "13") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "commute_or_2" (formula "35") (term "0,1,0,1,1,0"))
                                                (rule "commute_or" (formula "35") (term "1,1,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "35") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "26") (term "0,1,0,1,1,0"))
                                                (rule "commute_or" (formula "26") (term "1,1,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "26") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "35") (term "1,0,0,1,0"))
                                                (rule "inEqSimp_or_subsumption4" (formula "35") (term "0,1,0,0,1,0"))
                                                (rule "greater_literals" (formula "35") (term "0,0,0,1,0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "35"))
                                                (rule "commute_or_2" (formula "26") (term "1,0,0,1,0"))
                                                (rule "inEqSimp_or_subsumption4" (formula "26") (term "0,1,0,0,1,0"))
                                                (rule "greater_literals" (formula "26") (term "0,0,0,1,0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "shift_paren_or" (formula "35") (term "0,0,0,1,0"))
                                                (rule "shift_paren_or" (formula "26") (term "0,0,0,1,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,1,0,0") (ifseqformula "14"))
                                                (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "10"))
                                                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "47")))
                                                (rule "true_left" (formula "20"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "0") (ifseqformula "31"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "allLeft" (formula "37") (inst "t=iv_8"))
                                                (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                                (rule "leq_literals" (formula "37") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "37"))
                                                (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "12"))
                                                (rule "qeq_literals" (formula "37") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "37"))
                                                (rule "notLeft" (formula "37"))
                                                (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=arr_21"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "12")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                                (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "narrowSelectArrayType" (formula "46") (term "0") (ifseqformula "15") (ifseqformula "48"))
                                                (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "46"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_right" (formula "47") (term "0,0") (ifseqformula "46"))
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "notRight" (formula "47"))
                                                (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "59")))
                                                (rule "closeFalse" (formula "6"))
                                             )
                                          )
                                          (branch "self.sorted[iv_8].length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "45"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "times_zero_2" (formula "7") (term "1,0"))
                                             (rule "add_zero_right" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                             (rule "mul_literals" (formula "7") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "closeFalse" (formula "8"))
                                          )
                                       )
                                       (branch "CUT: arrConcat(1 + i, array2seq2d(heapAfter_second, self.sorted)).length = arrConcat(1 + i, array2seq2d(heap, self.sorted)).length FALSE"
                                          (builtin "One Step Simplification" (formula "62"))
                                          (rule "false_right" (formula "62"))
                                          (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "9"))
                                          (rule "leq_literals" (formula "21") (term "0"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "arrayLengthNotNegative" (formula "17") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "19"))
                                          (rule "leq_literals" (formula "17") (term "0"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "commute_or" (formula "35") (term "0,0"))
                                          (rule "commute_or" (formula "34") (term "0,0"))
                                          (rule "ifthenelse_to_or_left" (formula "32") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "32") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,0,1,0,0,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "23") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,0,1,0,0,1,0"))
                                          (rule "commute_or" (formula "26") (term "0,0"))
                                          (rule "commute_or" (formula "25") (term "0,0"))
                                          (rule "ifthenelse_to_or_right" (formula "10") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "10") (term "0,0"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or" (formula "10") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "10") (term "0,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "32") (term "0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "32") (term "1,1,0,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "eqSymm" (formula "32") (term "1,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "32") (term "0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "32") (term "0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "ifthenelse_to_or_left" (formula "23") (term "0,0,0,1,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,1,0,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "eqSymm" (formula "23") (term "1,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "23") (term "0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,1,1,0,0,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                          (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "10") (term "0,0,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "35") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "arrayLengthNotNegative" (formula "35") (term "1,1,0"))
                                          (rule "arrayLengthNotNegative" (formula "34") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "35") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "commute_or" (formula "32") (term "1,1,0,0,1,0"))
                                          (rule "commute_or" (formula "32") (term "0,0,1,1,0"))
                                          (rule "commute_or" (formula "23") (term "1,1,0,0,1,0"))
                                          (rule "commute_or_2" (formula "32") (term "0,1,1,0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.sorted[iv_8].length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "54") (term "0,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "4")))
                                             (rule "commute_or" (formula "24") (term "0,0,1,1,0"))
                                             (rule "commute_or_2" (formula "24") (term "0,1,1,0"))
                                             (rule "commute_or" (formula "11") (term "0,0,1,1,0"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " ¬self.sorted[iv_8] = null ∧ ¬self.sorted[iv_8].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "44"))
                                                (rule "close" (formula "43") (ifseqformula "12"))
                                             )
                                             (branch " ¬self.sorted[iv_8] = null ∧ ¬self.sorted[iv_8].<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
                                                (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,1,0"))
                                                (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "shift_paren_or" (formula "10") (term "1,1,0"))
                                                (rule "commute_or" (formula "10") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,1,0"))
                                                (rule "add_literals" (formula "10") (term "1,0,1,1,1,0"))
                                                (rule "times_zero_1" (formula "10") (term "0,1,1,1,0"))
                                                (rule "leq_literals" (formula "10") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "shift_paren_or" (formula "10") (term "0"))
                                                (rule "commute_or_2" (formula "10") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "shift_paren_or" (formula "10") (term "0,0"))
                                                (rule "commute_or" (formula "10") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "commute_or_2" (formula "32") (term "0,1,0,1,1,0"))
                                                (rule "commute_or" (formula "32") (term "1,1,0,1,1,0"))
                                                (rule "commute_or" (formula "23") (term "1,1,0,1,1,0"))
                                                (rule "commute_or_2" (formula "23") (term "0,1,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "32") (term "0,0,1,0"))
                                                (rule "cnf_rightDist" (formula "23") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "32") (term "1,0,0,1,0"))
                                                (rule "inEqSimp_or_subsumption4" (formula "32") (term "0,1,0,0,1,0"))
                                                (rule "greater_literals" (formula "32") (term "0,0,0,1,0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "commute_or_2" (formula "23") (term "1,0,0,1,0"))
                                                (rule "inEqSimp_or_subsumption4" (formula "23") (term "0,1,0,0,1,0"))
                                                (rule "greater_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "shift_paren_or" (formula "32") (term "0,0,0,1,0"))
                                                (rule "shift_paren_or" (formula "23") (term "0,0,0,1,0"))
                                                (rule "allLeft" (formula "33") (inst "t=i"))
                                                (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "20"))
                                                (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "21"))
                                                (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                                (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                                (rule "leq_literals" (formula "33") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "notLeft" (formula "33"))
                                                (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=arr_19"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "8")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                                                (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "narrowSelectArrayType" (formula "42") (term "0") (ifseqformula "11") (ifseqformula "44"))
                                                (rule "allLeft" (formula "33") (inst "t=iv_8"))
                                                (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "5"))
                                                (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                                (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "33") (term "0,0,1"))
                                                (rule "leq_literals" (formula "33") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "33") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "notLeft" (formula "33"))
                                                (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=arr_20"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "8")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                                (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "narrowSelectArrayType" (formula "42") (term "0") (ifseqformula "11") (ifseqformula "45"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "42"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_right" (formula "44") (term "0,0") (ifseqformula "42"))
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "notRight" (formula "44"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "56")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "self.sorted[iv_8].length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "42"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "4"))
                                             (rule "times_zero_2" (formula "4") (term "1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                             (rule "mul_literals" (formula "4") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "4"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "closeFalse" (formula "5"))
                                          )
                                       )
                                    )
                                    (branch "self.sorted.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "38"))
                                       (rule "close" (formula "37") (ifseqformula "8"))
                                    )
                                 )
                                 (branch "messages.length ≥ 1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "38"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "7"))
                                    (rule "times_zero_2" (formula "7") (term "1,0"))
                                    (rule "add_zero_right" (formula "7") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                    (rule "mul_literals" (formula "7") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "7") (term "0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "closeFalse" (formula "7"))
                                 )
                              )
                              (branch "messages.length ≥ 1 + iv_8 FALSE"
                                 (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "48")))
                                 (rule "closeTrue" (formula "49"))
                              )
                           )
                        )
                     )
                  )
                  (branch "CUT: array2seq(heap, bal) = array2seq(heapAfter_second, bal) FALSE"
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "28") (inst "iv=iv") (userinteraction))
                     (builtin "One Step Simplification" (formula "14"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (ifseqformula "18"))
                     (rule "true_left" (formula "6"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1") (ifseqformula "23"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1") (ifseqformula "17"))
                     (rule "orRight" (formula "33"))
                     (rule "eqSymm" (formula "29"))
                     (rule "eqSymm" (formula "20") (term "1,0"))
                     (rule "eqSymm" (formula "27") (term "0"))
                     (rule "eqSymm" (formula "27") (term "1,0,1"))
                     (rule "eqSymm" (formula "12"))
                     (rule "eqSymm" (formula "9"))
                     (rule "eqSymm" (formula "36"))
                     (rule "eqSymm" (formula "13") (term "1,0"))
                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "30"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "35"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "33")) (ifInst ""  (formula "34")))
                     (rule "polySimp_addComm0" (formula "36") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "7"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                     (rule "mul_literals" (formula "7") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                     (rule "nonNull" (formula "15") (inst "i=i_1"))
                     (rule "greater_literals" (formula "15") (term "0,1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "sub_literals" (formula "15") (term "2,1,0,1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "27"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                     (rule "array2seqDef" (formula "25") (term "0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "25"))
                     (rule "array2seqDef" (formula "8") (term "0,0") (inst "u=u"))
                     (rule "narrowSelectArrayType" (formula "8") (term "2,0,0") (ifseqformula "1") (ifseqformula "29"))
                     (rule "array2seqDef" (formula "20") (term "1,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "20") (term "1,0"))
                     (rule "array2seqDef" (formula "28") (term "0,0,0") (inst "u=u"))
                     (rule "lenOfSeqDef" (formula "28") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "28") (term "1,0,0"))
                     (rule "times_zero_2" (formula "28") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "28") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                     (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "0,0,0,0"))
                     (rule "array2seqDef" (formula "28") (term "0,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "28") (term "0"))
                     (rule "lenOfSeqDef" (formula "28") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "28") (term "1,0,0"))
                     (rule "times_zero_2" (formula "28") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "28") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                     (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "allRight" (formula "28") (inst "sk=iv_6"))
                     (rule "impRight" (formula "28"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "11"))
                     (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "3") (ifseqformula "31"))
                     (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
                     (rule "array2seqDef" (formula "39") (term "0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "39"))
                     (rule "array2seqDef" (formula "15") (term "0,1,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "15") (term "1,1,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
                     (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "3") (ifseqformula "31"))
                     (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "11"))
                     (rule "array2seqDef" (formula "27") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "27"))
                     (rule "array2seqDef" (formula "22") (term "1,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "22") (term "1,0"))
                     (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=arr_125"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "7")))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "array2seqDef" (formula "30") (term "0,0") (inst "u=u"))
                     (rule "getOfSeqDef" (formula "30") (term "0"))
                     (rule "castDel" (formula "30") (term "1,0"))
                     (rule "castDel" (formula "30") (term "2,0"))
                     (rule "add_zero_right" (formula "30") (term "0,2,1,0"))
                     (rule "polySimp_elimSub" (formula "30") (term "1,1,0,0"))
                     (rule "times_zero_2" (formula "30") (term "1,1,1,0,0"))
                     (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                     (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "0,0,0"))
                     (rule "array2seqDef" (formula "2") (term "0,0") (inst "u=u"))
                     (rule "lenOfSeqDef" (formula "2") (term "0"))
                     (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                     (rule "mul_literals" (formula "2") (term "1,1,0"))
                     (rule "add_zero_right" (formula "2") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "39") (inst "iv=iv"))
                     (rule "lenOfSeqDefEQ" (formula "39") (term "1,1,0,0,1") (ifseqformula "27"))
                     (rule "polySimp_elimSub" (formula "39") (term "1,1,1,0,0,1"))
                     (rule "times_zero_2" (formula "39") (term "1,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "39") (term "1,1,1,0,0,1"))
                     (rule "lenOfSeqDefEQ" (formula "39") (term "0,0") (ifseqformula "27"))
                     (rule "polySimp_elimSub" (formula "39") (term "1,0,0"))
                     (rule "mul_literals" (formula "39") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "39") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1"))
                     (rule "eqSeqDef" (formula "15") (term "1,0") (inst "iv=iv"))
                     (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0"))
                     (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0"))
                     (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0"))
                     (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "15") (term "1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,0,1,0"))
                     (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1,1,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "15") (term "0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,0,0,1,0"))
                     (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0"))
                     (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0"))
                     (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0"))
                     (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0"))
                     (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0"))
                     (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "eqSeqDef" (formula "22") (term "1,0") (inst "iv=iv"))
                     (rule "lenOfSeqDef" (formula "22") (term "0,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "0,1,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,0"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0,1,0"))
                     (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0,1,1,0"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,1,0,0,1,1,0"))
                     (rule "add_zero_right" (formula "22") (term "1,1,1,0,0,1,1,0"))
                     (rule "getOfSeqDef" (formula "22") (term "1,1,0,1,1,0"))
                     (rule "castDel" (formula "22") (term "2,1,1,0,1,1,0"))
                     (rule "castDel" (formula "22") (term "1,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "getOfSeqDef" (formula "22") (term "0,1,0,1,1,0"))
                     (rule "castDel" (formula "22") (term "2,0,1,0,1,1,0"))
                     (rule "castDel" (formula "22") (term "1,0,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "22") (term "0,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "0,1,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,0"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0,1,1,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,1,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0,0,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,1,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0,0,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,1,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,0,0,1,0,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0,1,0"))
                     (rule "array2seqDef" (formula "30") (term "0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "30"))
                     (rule "getOfSeqDef" (formula "30") (term "0"))
                     (rule "castDel" (formula "30") (term "1,0"))
                     (rule "castDel" (formula "30") (term "2,0"))
                     (rule "add_zero_right" (formula "30") (term "0,2,1,0"))
                     (rule "polySimp_elimSub" (formula "30") (term "1,1,0,0"))
                     (rule "times_zero_2" (formula "30") (term "1,1,1,0,0"))
                     (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                     (rule "narrowSelectArrayType" (formula "30") (term "1,0") (ifseqformula "3") (ifseqformula "31"))
                     (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                     (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "0,0,0"))
                     (rule "eqSymm" (formula "30"))
                     (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "eqSeqDef2" (formula "26") (inst "iv=iv") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "pullOutSelect" (formula "37") (term "1,1,0,1,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_10"))
                     (rule "applyEq" (formula "38") (term "1,1,0,1,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEq" (formula "22") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "1,0,1,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "1,0,0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "5")))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "22") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "22") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "22") (term "1,0,0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "22") (term "1,0,1,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "22") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "38") (term "1,1,0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "38") (term "1,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "22") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "28") (term "1,0") (inst "selectSK=arr_126"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "8")))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                     (rule "applyEqReverse" (formula "29") (term "1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "narrowSelectArrayType" (formula "28") (term "1,0") (ifseqformula "3") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "closeTrue" (formula "28"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "14"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (ifseqformula "18"))
                  (rule "true_left" (formula "6"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1") (ifseqformula "23"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1") (ifseqformula "17"))
                  (rule "orRight" (formula "32"))
                  (rule "eqSymm" (formula "12"))
                  (rule "eqSymm" (formula "28"))
                  (rule "eqSymm" (formula "20") (term "1,0"))
                  (rule "eqSymm" (formula "9"))
                  (rule "eqSymm" (formula "13") (term "1,0"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "27"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_right" (formula "35") (term "0,1") (ifseqformula "34"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "34"))
                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "32")) (ifInst ""  (formula "33")))
                  (rule "inEqSimp_ltToLeq" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "7"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                  (rule "mul_literals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                  (rule "array2seqDef" (formula "8") (term "0,0") (inst "u=u"))
                  (rule "narrowSelectArrayType" (formula "8") (term "2,0,0") (ifseqformula "1") (ifseqformula "27"))
                  (rule "nonNull" (formula "15") (inst "i=i_1"))
                  (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "greater_literals" (formula "15") (term "0,1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "notLeft" (formula "15"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "27"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "27"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                  (rule "array2seqDef" (formula "25") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "25"))
                  (rule "array2seqDef" (formula "20") (term "0,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "20") (term "1,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "9"))
                  (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "1") (ifseqformula "28"))
                  (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "9"))
                  (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
                  (rule "eqSymm" (formula "13") (term "1,0"))
                  (rule "array2seqDef" (formula "7") (term "0,0") (inst "u=u"))
                  (rule "narrowSelectArrayType" (formula "7") (term "2,0,0") (ifseqformula "1") (ifseqformula "28"))
                  (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "9"))
                  (rule "array2seqDef" (formula "25") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "25"))
                  (rule "eqSeqDef" (formula "20") (term "1,0") (inst "iv=iv"))
                  (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,1,1,1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,1,0,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "20") (term "0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "0,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,0"))
                  (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,1,0"))
                  (rule "getOfSeqDef" (formula "20") (term "1,1,0,1,1,0"))
                  (rule "castDel" (formula "20") (term "1,1,1,0,1,1,0"))
                  (rule "castDel" (formula "20") (term "2,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,2,1,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "getOfSeqDef" (formula "20") (term "0,1,0,1,1,0"))
                  (rule "castDel" (formula "20") (term "1,0,1,0,1,1,0"))
                  (rule "castDel" (formula "20") (term "2,0,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "20") (term "1,1,1,0,0,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "20") (term "0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "0,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,0"))
                  (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,0,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
                  (rule "eqSymm" (formula "13") (term "1,0"))
                  (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_29"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "5")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "eqSeqDef2" (formula "24") (inst "iv=iv") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "eqSeqDef" (formula "12") (term "1,0") (inst "iv=iv"))
                  (rule "getOfSeqDef" (formula "12") (term "1,1,0,1,1,0"))
                  (rule "castDel" (formula "12") (term "2,1,1,0,1,1,0"))
                  (rule "castDel" (formula "12") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "getOfSeqDef" (formula "12") (term "0,1,0,1,1,0"))
                  (rule "castDel" (formula "12") (term "2,0,1,0,1,1,0"))
                  (rule "castDel" (formula "12") (term "1,0,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "12") (term "1,1,1,0,0,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "12") (term "0,0,1,0"))
                  (rule "eqSymm" (formula "12") (term "0,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0"))
                  (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "1,1,0,1,0"))
                  (rule "lenOfSeqDef" (formula "12") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0,1,1,0"))
                  (rule "times_zero_2" (formula "12") (term "1,1,1,1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "12") (term "1,1,1,0,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "12") (term "0,0,1,0"))
                  (rule "eqSymm" (formula "12") (term "0,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0"))
                  (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "1,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "eqSymm" (formula "12") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "eqSymm" (formula "12") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "eqSymm" (formula "12") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "eqSymm" (formula "12") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "pullOutSelect" (formula "19") (term "1,1,1,0,1,0,1,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_3"))
                  (rule "applyEq" (formula "20") (term "1,0,0,0,0,0,1,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "20") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "20") (term "1,0,1,0,0,1,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "20") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "20") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "19"))
                  (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
                  (rule "elementOfSingleton" (formula "19") (term "0,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "applyEqReverse" (formula "20") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "19"))
                  (rule "applyEqReverse" (formula "20") (term "1,0,0,0,0,0,1,0") (ifseqformula "19"))
                  (rule "applyEqReverse" (formula "20") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "19"))
                  (rule "applyEqReverse" (formula "20") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "19"))
                  (rule "applyEqReverse" (formula "20") (term "1,0,1,0,0,1,0") (ifseqformula "19"))
                  (rule "applyEqReverse" (formula "20") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "19"))
                  (rule "hideAuxiliaryEq" (formula "19"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                  (rule "mul_literals" (formula "8") (term "0,0"))
                  (rule "add_zero_left" (formula "8") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "1"))
                  (rule "nnf_imp2or" (formula "15") (term "0"))
                  (rule "nnf_imp2or" (formula "13") (term "0"))
                  (rule "nnf_imp2or" (formula "20") (term "0"))
                  (rule "nnf_notAnd" (formula "15") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                  (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "13") (term "0,1,1,0"))
                  (rule "nnf_imp2or" (formula "20") (term "0,1,1,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1,0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,1,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,1,0"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "14") (ifseqformula "3"))
                  (rule "andLeft" (formula "14"))
                  (rule "notLeft" (formula "15"))
                  (rule "andLeft" (formula "14"))
                  (rule "notLeft" (formula "15"))
                  (rule "andLeft" (formula "14"))
                  (rule "notLeft" (formula "15"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "notLeft" (formula "16"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "notLeft" (formula "14"))
                  (rule "nonNull" (formula "17") (inst "i=i_1"))
                  (rule "greater_literals" (formula "17") (term "0,1"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "sub_literals" (formula "17") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "notLeft" (formula "17"))
                  (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "29"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "16") (inst "i=i_1"))
                  (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "greater_literals" (formula "16") (term "0,1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "notLeft" (formula "16"))
                  (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "29"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "15") (inst "i=i_1"))
                  (rule "greater_literals" (formula "15") (term "0,1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "sub_literals" (formula "15") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "notLeft" (formula "15"))
                  (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "29"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                  (rule "notLeft" (formula "14"))
                  (rule "applyEq" (formula "14") (term "1,1,1,0,0") (ifseqformula "12"))
                  (rule "nnf_imp2or" (formula "16") (term "0"))
                  (rule "nnf_imp2or" (formula "15") (term "0"))
                  (rule "nnf_imp2or" (formula "14") (term "0"))
                  (rule "nnf_notAnd" (formula "16") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "15") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                  (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                  (rule "commute_or_2" (formula "17") (term "0"))
                  (rule "commute_or_2" (formula "16") (term "0"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "23") (ifseqformula "3"))
                  (rule "replaceKnownSelect_taclet111000_2" (formula "23") (term "1,1,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_3" (formula "23") (term "1,1,0,0,0,0,0,0"))
                  (rule "andLeft" (formula "23"))
                  (rule "notLeft" (formula "24"))
                  (rule "andLeft" (formula "23"))
                  (rule "notLeft" (formula "24"))
                  (rule "andLeft" (formula "23"))
                  (rule "andLeft" (formula "23"))
                  (rule "notLeft" (formula "25"))
                  (rule "andLeft" (formula "23"))
                  (rule "notLeft" (formula "25"))
                  (rule "andLeft" (formula "23"))
                  (rule "andLeft" (formula "23"))
                  (rule "andLeft" (formula "23"))
                  (rule "notLeft" (formula "24"))
                  (rule "notLeft" (formula "23"))
                  (rule "nonNull" (formula "25") (inst "i=i_1"))
                  (rule "greater_literals" (formula "25") (term "0,1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "sub_literals" (formula "25") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "andLeft" (formula "25"))
                  (rule "notLeft" (formula "25"))
                  (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "24") (inst "i=i_1"))
                  (rule "greater_literals" (formula "24") (term "0,1"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "sub_literals" (formula "24") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "23") (inst "i=i_1"))
                  (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "39")))
                  (rule "greater_literals" (formula "23") (term "0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                  (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                  (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "3")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "3")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "3")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "3")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "3")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "3")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_1"))
                  (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                  (rule "applyEq" (formula "32") (term "0") (ifseqformula "25"))
                  (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "46")) (ifInst ""  (formula "2")))
                  (rule "elementOfSingleton" (formula "25") (term "0,0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
                  (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "25"))
                  (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                  (rule "hideAuxiliaryEq" (formula "25"))
                  (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_1"))
                  (rule "applyEq" (formula "31") (term "0") (ifseqformula "24"))
                  (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                  (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "45")) (ifInst ""  (formula "2")))
                  (rule "elementOfSingleton" (formula "24") (term "0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                  (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "24"))
                  (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
                  (rule "hideAuxiliaryEq" (formula "24"))
                  (rule "nnf_imp2or" (formula "23") (term "0"))
                  (rule "nnf_imp2or" (formula "25") (term "0"))
                  (rule "nnf_imp2or" (formula "24") (term "0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "25") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                  (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                  (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "48") (ifseqformula "3"))
                  (rule "nonNull" (formula "48") (term "1,0,0,0,0") (inst "i=i_1"))
                  (rule "sub_literals" (formula "48") (term "2,1,0,1,1,1,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "greater_literals" (formula "48") (term "0,1,1,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1,1,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,1,1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,1,1,0,0,0,0"))
                  (rule "nonNull" (formula "48") (term "1,0,0,0,0,0") (inst "i=i_1"))
                  (rule "sub_literals" (formula "48") (term "2,1,0,1,1,1,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "greater_literals" (formula "48") (term "0,1,1,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1,1,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "nonNull" (formula "48") (term "1,0,0,0,0,0,0") (inst "i=i_1"))
                  (rule "greater_literals" (formula "48") (term "0,1,1,0,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "sub_literals" (formula "48") (term "2,1,0,1,1,0,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,1,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,0,1,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_4"))
                  (rule "applyEq" (formula "49") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "49") (term "1,0,0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet111000_2" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_3" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "1,0,0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "31"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "applyEq" (formula "48") (term "1,1,1,0,0,1,0,0,0,0,0,0") (ifseqformula "12"))
                  (rule "pullOutSelect" (formula "48") (term "0,1,1,1,0,0,1,1,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_2"))
                  (rule "applyEq" (formula "49") (term "0,0,0,1,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "49") (term "1,0,0,1,0,1,1,0,0,0,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet111000_16" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_17" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,0,1,1,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "49") (term "1,0,0,1,0,1,1,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,0,1,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,0,1,0,0,0,0") (ifseqformula "33"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet111000_10" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_11" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,1,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,1,0,0,0") (ifseqformula "35"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet111000_8" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_9" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,1,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,1,0,0") (ifseqformula "36"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet111000_14" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_15" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0") (ifseqformula "34"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "pullOutSelect" (formula "48") (term "0,1,1,1,0,0,1,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_2"))
                  (rule "applyEq" (formula "49") (term "1,0,0,1,0,1,1,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "49") (term "0,0,0,1,0,0,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet111000_18" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_19" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,0,1,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "49") (term "1,0,0,1,0,1,1,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,0,1,1,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,0,1,0,0,0") (ifseqformula "32"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet111000_12" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_13" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet111000_4" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_5" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,1") (ifseqformula "38"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet111000_6" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet111000_7" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,1") (ifseqformula "37"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "commute_or_2" (formula "15") (term "0"))
                  (rule "commute_or_2" (formula "14") (term "0"))
                  (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                  (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                  (rule "commute_or" (formula "17") (term "0,0"))
                  (rule "commute_or" (formula "16") (term "0,0"))
                  (rule "ifthenelse_to_or_left" (formula "22") (term "0,1,0"))
                  (rule "eqSymm" (formula "22") (term "1,1,0,1,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "eqSymm" (formula "22") (term "1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "22") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "22") (term "0,1,1,0,1,0"))
                  (rule "mul_literals" (formula "22") (term "1,0,0,0,1,1,0,1,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0,1,1,0,1,0"))
                  (rule "add_zero_left" (formula "22") (term "0,0,1,1,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "13") (term "0,1,0"))
                  (rule "eqSymm" (formula "13") (term "1,1,0,1,0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "eqSymm" (formula "13") (term "1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,1,1,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1,0,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,1,0,1,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,1,0,1,0"))
                  (rule "nnf_imp2or" (formula "48") (term "0,1"))
                  (rule "nnf_imp2or" (formula "48") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "48") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "48") (term "0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "48") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "48") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "48") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "48") (term "1,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "48") (term "0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0,0,0"))
                  (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "48") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "48") (term "0,0,0,1,0,0,0,0"))
                  (rule "add_zero_left" (formula "48") (term "0,0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "48") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0,1,0"))
                  (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "48") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "48") (term "1,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "48") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "48") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0,1,0"))
                  (rule "commute_or_2" (formula "23") (term "0"))
                  (rule "commute_or_2" (formula "25") (term "0"))
                  (rule "commute_or_2" (formula "24") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "13") (term "0"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                  (rule "arrayLengthIsAShort" (formula "12") (term "0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "arrayLengthIsAShort" (formula "7") (term "1,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                  (rule "leq_literals" (formula "8") (term "0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "cut_direct" (formula "22") (term "0"))
                  (branch "CUT: result_0.<created> = TRUE TRUE"
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "arrayLengthIsAShort" (formula "13") (term "0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "arrayLengthNotNegative" (formula "17") (term "1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "18") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "commute_or" (formula "16") (term "0,0"))
                     (rule "commute_or" (formula "15") (term "0,0"))
                     (rule "commute_or" (formula "24") (term "1,0,1,0"))
                     (rule "commute_or" (formula "24") (term "0,0,1,1,0"))
                     (rule "commute_or" (formula "14") (term "1,0,1,0"))
                     (rule "commute_or" (formula "25") (term "0,0"))
                     (rule "commute_or" (formula "27") (term "0,0"))
                     (rule "commute_or" (formula "14") (term "0,0,1,1,0"))
                     (rule "commute_or" (formula "26") (term "0,0"))
                     (rule "andRight" (formula "50"))
                     (branch "Case 1"
                        (rule "andRight" (formula "50"))
                        (branch "Case 1"
                           (rule "allRight" (formula "50") (inst "sk=i_1_5"))
                           (rule "orRight" (formula "50"))
                           (rule "notRight" (formula "51"))
                           (rule "orRight" (formula "51"))
                           (rule "inEqSimp_leqRight" (formula "51"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "52"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_15"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "25"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "32") (ifseqformula "37"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=arr_16"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "25") (ifseqformula "38"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "6") (ifseqformula "38"))
                           (rule "commute_and" (formula "4") (term "0"))
                           (rule "ifthenelse_to_or_left" (formula "29") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "29") (term "1,0,1,0,0,1,0"))
                           (rule "eqSymm" (formula "29") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,0,1,0"))
                           (rule "ifthenelse_to_or_left" (formula "19") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,0,1,0,0,1,0"))
                           (rule "orLeft" (formula "4"))
                           (branch " arr_16«selectSK» = null ∧ ( self.sorted.<created> = TRUE ∨ (self.sorted@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE)"
                              (rule "andLeft" (formula "4"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "cnf_rightDist" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "commute_or" (formula "3"))
                              (rule "cnf_rightDist" (formula "4"))
                              (rule "andLeft" (formula "4"))
                              (rule "commute_or" (formula "4"))
                              (rule "cnf_rightDist" (formula "3"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "commute_or" (formula "3"))
                              (rule "cnf_rightDist" (formula "32") (term "0,0,1,0"))
                              (rule "inEqSimp_or_subsumption5" (formula "32") (term "1,0,0,1,0"))
                              (rule "greater_literals" (formula "32") (term "0,1,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "cnf_rightDist" (formula "22") (term "0,0,1,0"))
                              (rule "inEqSimp_or_subsumption5" (formula "22") (term "1,0,0,1,0"))
                              (rule "greater_literals" (formula "22") (term "0,1,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "shift_paren_or" (formula "32") (term "0,0,0,1,0"))
                              (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
                              (rule "commute_or" (formula "32") (term "0,0,0,0,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
                              (rule "arrayLengthNotNegative" (formula "24") (term "1,1,0"))
                              (rule "arrayLengthIsAShort" (formula "25") (term "1,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "ifthenelse_to_or_right" (formula "33") (term "0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,1,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0,1,1,0"))
                              (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "shift_paren_or" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "33") (term "0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,0,1,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "ifthenelse_to_or_left" (formula "22") (term "0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "22") (term "1,1,0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "eqSymm" (formula "22") (term "1,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,0,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,1,0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "32"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "8"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "15"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "allLeft" (formula "35") (inst "t=i"))
                              (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "27"))
                              (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                              (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "35") (term "0,0,1"))
                              (rule "leq_literals" (formula "35") (term "0,1"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "35") (term "0,1"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "allLeft" (formula "35") (inst "t=i_1_5"))
                              (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "35") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "11"))
                              (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                              (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                              (rule "add_literals" (formula "35") (term "0,0,1"))
                              (rule "leq_literals" (formula "35") (term "0,1"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "allLeft" (formula "30") (inst "t=i_1_5"))
                              (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "11"))
                              (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                              (rule "add_literals" (formula "30") (term "0,0,1"))
                              (rule "leq_literals" (formula "30") (term "0,1"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "30"))
                              (rule "qeq_literals" (formula "12") (term "0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                           (branch " ¬( self.sorted.<created> = TRUE ∨ (self.sorted@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) ∧ (self.sorted@heap)[i_1_5]@anon_heap_second«anonHeapFunction» = null"
                              (rule "andLeft" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "orRight" (formula "37"))
                              (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "40"))
                              (rule "close" (formula "37") (ifseqformula "6"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "50") (inst "sk=i_1_4"))
                           (rule "orRight" (formula "50"))
                           (rule "notRight" (formula "51"))
                           (rule "orRight" (formula "51"))
                           (rule "inEqSimp_geqRight" (formula "52"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "52"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_13"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "25"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "32") (ifseqformula "38"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=arr_14"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "6") (ifseqformula "39"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "25") (ifseqformula "39"))
                           (rule "commute_or" (formula "3") (term "0,0"))
                           (rule "commute_and" (formula "4") (term "0"))
                           (rule "ifthenelse_to_or_left" (formula "29") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "29") (term "1,0,1,0,0,1,0"))
                           (rule "eqSymm" (formula "29") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,0,1,0"))
                           (rule "ifthenelse_to_or_left" (formula "19") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,0,1,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0"))
                           (rule "commute_or" (formula "3") (term "1,0,0"))
                           (rule "commute_or" (formula "3") (term "0,0,0"))
                           (rule "orLeft" (formula "4"))
                           (branch " arr_14«selectSK» = null ∧ ( self.encrypted.<created> = TRUE ∨ (self.encrypted@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE)"
                              (rule "andLeft" (formula "4"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "commute_and_2" (formula "3") (term "0"))
                              (rule "commute_and" (formula "3") (term "0,0"))
                              (rule "orLeft" (formula "3"))
                              (branch " (self.encrypted@heap)[i_1_4]@anon_heap_getFirst«anonHeapFunction» = null ∧ ( self.encrypted = messages ∨ ¬self.encrypted.<created> = TRUE) ∧ (¬self.encrypted.<created> = TRUE ∨ i_1_4 = i)"
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "cnf_rightDist" (formula "32") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "32") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "32") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "cnf_rightDist" (formula "22") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "22") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "22") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "shift_paren_or" (formula "32") (term "0,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "32") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
                                 (rule "arrayLengthNotNegative" (formula "24") (term "1,1,0"))
                                 (rule "arrayLengthIsAShort" (formula "25") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "33") (term "1,0,0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "33") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "commute_or" (formula "33") (term "1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,0,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "ifthenelse_to_or_right" (formula "22") (term "0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "22") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "0,0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "22") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "22") (term "0,0,1,0,1,1,0"))
                                 (rule "allLeft" (formula "28") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "20"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                 (rule "leq_literals" (formula "28") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "28") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "45"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "33"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "applyEq" (formula "49") (term "0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "30") (term "1,0,0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "40") (term "0,1,1,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "38") (term "1,0,0,0,0,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "8"))
                                 (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "5") (term "0,2,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "26") (term "0,1,1,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "6"))
                                 (rule "close" (formula "55") (ifseqformula "5"))
                              )
                              (branch " ¬( ( self.encrypted = messages ∨ ¬self.encrypted.<created> = TRUE) ∧ (¬self.encrypted.<created> = TRUE ∨ i_1_4 = i)) ∧ self.encrypted[i_1_4] = null"
                                 (rule "andLeft" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "andRight" (formula "38"))
                                 (branch "Case 1"
                                    (rule "orRight" (formula "38"))
                                    (rule "notRight" (formula "39"))
                                    (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
                                    (rule "inEqSimp_or_subsumption5" (formula "30") (term "1,0,0,1,0"))
                                    (rule "greater_literals" (formula "30") (term "0,1,0,1,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                                    (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                                    (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "shift_paren_or" (formula "30") (term "0,0,0,1,0"))
                                    (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                                    (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                                    (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                                    (rule "arrayLengthNotNegative" (formula "22") (term "1,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "23") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "allLeft" (formula "23") (inst "t=i_1_4"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "23") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "3"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "inEqSimp_homoInEq1" (formula "23"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                                    (rule "add_literals" (formula "23") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,0"))
                                    (rule "add_zero_right" (formula "23") (term "0"))
                                    (rule "leq_literals" (formula "23"))
                                    (rule "closeFalse" (formula "23"))
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "38"))
                                    (rule "notRight" (formula "38"))
                                    (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
                                    (rule "inEqSimp_or_subsumption5" (formula "30") (term "1,0,0,1,0"))
                                    (rule "greater_literals" (formula "30") (term "0,1,0,1,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                                    (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                                    (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "shift_paren_or" (formula "30") (term "0,0,0,1,0"))
                                    (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                                    (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                                    (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "22") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "arrayLengthNotNegative" (formula "22") (term "1,1,0"))
                                    (rule "allLeft" (formula "23") (inst "t=i_1_4"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "23") (term "0,0,1"))
                                    (rule "leq_literals" (formula "23") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                              )
                           )
                           (branch " ¬( self.encrypted.<created> = TRUE ∨ (self.encrypted@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) ∧ (self.encrypted@heap)[i_1_4]@anon_heap_second«anonHeapFunction» = null"
                              (rule "andLeft" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "orRight" (formula "37"))
                              (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "41"))
                              (rule "close" (formula "37") (ifseqformula "6"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "50") (inst "sk=i_1_3"))
                        (rule "orRight" (formula "50"))
                        (rule "orRight" (formula "50"))
                        (rule "notRight" (formula "52"))
                        (rule "inEqSimp_geqRight" (formula "52"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "52"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_11"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "25"))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "32") (ifseqformula "39"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                        (rule "ifEqualsNull" (formula "3"))
                        (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=arr_12"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "40")))
                        (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "6") (ifseqformula "40"))
                        (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "25") (ifseqformula "40"))
                        (rule "commute_or" (formula "3") (term "0,0"))
                        (rule "commute_and" (formula "4") (term "0"))
                        (rule "ifthenelse_to_or_left" (formula "29") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "29") (term "1,0,1,0,0,1,0"))
                        (rule "eqSymm" (formula "29") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,0,1,0"))
                        (rule "ifthenelse_to_or_left" (formula "19") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "19") (term "1,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,0,1,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0"))
                        (rule "commute_or" (formula "3") (term "1,0,0"))
                        (rule "commute_or" (formula "3") (term "0,0,0"))
                        (rule "orLeft" (formula "4"))
                        (branch " arr_12«selectSK» = null ∧ ( self.chosen.<created> = TRUE ∨ (self.chosen@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE)"
                           (rule "andLeft" (formula "4"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "commute_and_2" (formula "3") (term "0"))
                           (rule "commute_and" (formula "3") (term "0,0"))
                           (rule "orLeft" (formula "3"))
                           (branch " (self.chosen@heap)[i_1_3]@anon_heap_getFirst«anonHeapFunction» = null ∧ ( self.chosen = messages ∨ ¬self.chosen.<created> = TRUE) ∧ (¬self.chosen.<created> = TRUE ∨ i_1_3 = i)"
                              (rule "andLeft" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "cnf_rightDist" (formula "32") (term "0,0,1,0"))
                              (rule "inEqSimp_or_subsumption5" (formula "32") (term "1,0,0,1,0"))
                              (rule "greater_literals" (formula "32") (term "0,1,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "cnf_rightDist" (formula "22") (term "0,0,1,0"))
                              (rule "inEqSimp_or_subsumption5" (formula "22") (term "1,0,0,1,0"))
                              (rule "greater_literals" (formula "22") (term "0,1,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "shift_paren_or" (formula "32") (term "0,0,0,1,0"))
                              (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
                              (rule "commute_or" (formula "32") (term "0,0,0,0,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
                              (rule "arrayLengthNotNegative" (formula "24") (term "1,1,0"))
                              (rule "arrayLengthIsAShort" (formula "25") (term "1,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "33") (term "1,0,0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "33") (term "1,1,0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,1,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0,1,1,0"))
                              (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "commute_or" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "33") (term "0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,0,1,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "ifthenelse_to_or_right" (formula "22") (term "0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,0,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,1,0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,1,0,1,1,0"))
                              (rule "allLeft" (formula "28") (inst "t=i"))
                              (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                              (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "28") (term "0,0,1"))
                              (rule "leq_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "18"))
                              (rule "qeq_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "allLeft" (formula "27") (inst "t=i_1_3"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "27") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                              (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "27") (term "0,0,1"))
                              (rule "leq_literals" (formula "27") (term "0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "46"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "applyEq" (formula "52") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "10"))
                              (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "39") (term "1,0,0,0,0,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "9"))
                              (rule "close" (formula "59") (ifseqformula "7"))
                           )
                           (branch " ¬( ( self.chosen = messages ∨ ¬self.chosen.<created> = TRUE) ∧ (¬self.chosen.<created> = TRUE ∨ i_1_3 = i)) ∧ self.chosen[i_1_3] = null"
                              (rule "andLeft" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "andRight" (formula "38"))
                              (branch "Case 1"
                                 (rule "orRight" (formula "38"))
                                 (rule "notRight" (formula "39"))
                                 (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "30") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "30") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "shift_paren_or" (formula "30") (term "0,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                                 (rule "arrayLengthNotNegative" (formula "22") (term "1,1,0"))
                                 (rule "arrayLengthIsAShort" (formula "23") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "ifthenelse_to_or_left" (formula "31") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "31") (term "1,0,0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "31") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "31") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "commute_or" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "31") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,0,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "20") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "eqSymm" (formula "20") (term "1,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,0,1,1,0"))
                                 (rule "allLeft" (formula "25") (inst "t=i_1_3"))
                                 (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "25") (term "0,0,1"))
                                 (rule "leq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "25"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "Case 2"
                                 (rule "orRight" (formula "38"))
                                 (rule "notRight" (formula "38"))
                                 (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "30") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "30") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "shift_paren_or" (formula "30") (term "0,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                                 (rule "arrayLengthNotNegative" (formula "22") (term "1,1,0"))
                                 (rule "arrayLengthIsAShort" (formula "23") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "ifthenelse_to_or_left" (formula "31") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "31") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "eqSymm" (formula "31") (term "1,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "1,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "31") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "31") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "commute_or_2" (formula "31") (term "1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,1,0,1,1,0"))
                                 (rule "ifthenelse_to_or_right" (formula "20") (term "0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,1,0,1,1,0"))
                                 (rule "allLeft" (formula "25") (inst "t=i_1_3"))
                                 (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "25") (term "0,0,1"))
                                 (rule "leq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "25") (term "0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "closeFalse" (formula "25"))
                              )
                           )
                        )
                        (branch " ¬( self.chosen.<created> = TRUE ∨ (self.chosen@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) ∧ (self.chosen@heap)[i_1_3]@anon_heap_second«anonHeapFunction» = null"
                           (rule "andLeft" (formula "4"))
                           (rule "notLeft" (formula "4"))
                           (rule "orRight" (formula "37"))
                           (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                           (rule "close" (formula "37") (ifseqformula "6"))
                        )
                     )
                  )
                  (branch "CUT: result_0.<created> = TRUE FALSE"
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "arrayLengthIsAShort" (formula "13") (term "0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "arrayLengthNotNegative" (formula "17") (term "1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "18") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "commute_or" (formula "16") (term "0,0"))
                     (rule "commute_or" (formula "15") (term "0,0"))
                     (rule "commute_or" (formula "24") (term "1,0,1,0"))
                     (rule "commute_or" (formula "24") (term "0,0,1,1,0"))
                     (rule "commute_or" (formula "14") (term "1,0,1,0"))
                     (rule "commute_or" (formula "25") (term "0,0"))
                     (rule "commute_or" (formula "27") (term "0,0"))
                     (rule "commute_or" (formula "26") (term "0,0"))
                     (rule "commute_or" (formula "14") (term "0,0,1,1,0"))
                     (rule "andRight" (formula "51"))
                     (branch "Case 1"
                        (rule "andRight" (formula "51"))
                        (branch "Case 1"
                           (rule "allRight" (formula "51") (inst "sk=i_1_2"))
                           (rule "orRight" (formula "51"))
                           (rule "orRight" (formula "51"))
                           (rule "notRight" (formula "53"))
                           (rule "inEqSimp_geqRight" (formula "53"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "53"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_9"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "25"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "32") (ifseqformula "38"))
                           (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=arr_10"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "6") (ifseqformula "39"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "25") (ifseqformula "39"))
                           (rule "commute_and" (formula "4") (term "0"))
                           (rule "ifthenelse_to_or_left" (formula "29") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "29") (term "1,0,1,0,0,1,0"))
                           (rule "eqSymm" (formula "29") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,0,1,0"))
                           (rule "ifthenelse_to_or_left" (formula "19") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,0,1,0,0,1,0"))
                           (rule "orLeft" (formula "4"))
                           (branch " arr_10«selectSK» = null ∧ ( self.sorted.<created> = TRUE ∨ (self.sorted@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE)"
                              (rule "andLeft" (formula "4"))
                              (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "cnf_rightDist" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "commute_or" (formula "3"))
                              (rule "cnf_rightDist" (formula "4"))
                              (rule "andLeft" (formula "4"))
                              (rule "commute_or" (formula "4"))
                              (rule "cnf_rightDist" (formula "3"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "commute_or" (formula "3"))
                              (rule "cnf_rightDist" (formula "32") (term "0,0,1,0"))
                              (rule "inEqSimp_or_subsumption5" (formula "32") (term "1,0,0,1,0"))
                              (rule "greater_literals" (formula "32") (term "0,1,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "cnf_rightDist" (formula "22") (term "0,0,1,0"))
                              (rule "inEqSimp_or_subsumption5" (formula "22") (term "1,0,0,1,0"))
                              (rule "greater_literals" (formula "22") (term "0,1,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "shift_paren_or" (formula "32") (term "0,0,0,1,0"))
                              (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
                              (rule "commute_or" (formula "32") (term "0,0,0,0,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
                              (rule "arrayLengthIsAShort" (formula "24") (term "1,1,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "arrayLengthNotNegative" (formula "24") (term "1,1,0"))
                              (rule "ifthenelse_to_or_right" (formula "33") (term "0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,1,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0,1,1,0"))
                              (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "shift_paren_or" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "33") (term "0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,0,1,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "ifthenelse_to_or_left" (formula "22") (term "0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "22") (term "1,0,0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "22") (term "1,1,0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,0,0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "31"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "15"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "allLeft" (formula "35") (inst "t=i"))
                              (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "27"))
                              (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                              (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "35") (term "0,0,1"))
                              (rule "leq_literals" (formula "35") (term "0,1"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "35") (term "0,1"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "allLeft" (formula "35") (inst "t=i_1_2"))
                              (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "11"))
                              (rule "qeq_literals" (formula "35") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "12"))
                              (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                              (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "35") (term "0,0,1"))
                              (rule "leq_literals" (formula "35") (term "0,1"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "allLeft" (formula "30") (inst "t=i_1_2"))
                              (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "12"))
                              (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "30") (term "0,0,1"))
                              (rule "leq_literals" (formula "30") (term "0,1"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "11"))
                              (rule "qeq_literals" (formula "30") (term "0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "closeFalse" (formula "30"))
                           )
                           (branch " ¬( self.sorted.<created> = TRUE ∨ (self.sorted@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) ∧ (self.sorted@heap)[i_1_2]@anon_heap_second«anonHeapFunction» = null"
                              (rule "andLeft" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "orRight" (formula "37"))
                              (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "41"))
                              (rule "close" (formula "37") (ifseqformula "6"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "51") (inst "sk=i_1_1"))
                           (rule "orRight" (formula "51"))
                           (rule "orRight" (formula "51"))
                           (rule "notRight" (formula "53"))
                           (rule "inEqSimp_geqRight" (formula "53"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "53"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_7"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "25"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "32") (ifseqformula "39"))
                           (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=arr_8"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "40")))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "25") (ifseqformula "40"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "6") (ifseqformula "40"))
                           (rule "commute_or" (formula "3") (term "0,0"))
                           (rule "commute_and" (formula "4") (term "0"))
                           (rule "ifthenelse_to_or_left" (formula "29") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "29") (term "1,1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "29") (term "1,0,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,0,1,0"))
                           (rule "ifthenelse_to_or_left" (formula "19") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,0,1,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0"))
                           (rule "commute_or" (formula "3") (term "0,0,0"))
                           (rule "commute_or" (formula "3") (term "1,0,0"))
                           (rule "orLeft" (formula "4"))
                           (branch " arr_8«selectSK» = null ∧ ( self.encrypted.<created> = TRUE ∨ (self.encrypted@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE)"
                              (rule "andLeft" (formula "4"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "commute_and_2" (formula "3") (term "0"))
                              (rule "commute_and" (formula "3") (term "0,0"))
                              (rule "orLeft" (formula "3"))
                              (branch " (self.encrypted@heap)[i_1_1]@anon_heap_getFirst«anonHeapFunction» = null ∧ ( self.encrypted = messages ∨ ¬self.encrypted.<created> = TRUE) ∧ (¬self.encrypted.<created> = TRUE ∨ i_1_1 = i)"
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "cnf_rightDist" (formula "32") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "32") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "32") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "cnf_rightDist" (formula "22") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "22") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "22") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "shift_paren_or" (formula "32") (term "0,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "32") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
                                 (rule "arrayLengthIsAShort" (formula "24") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "arrayLengthNotNegative" (formula "24") (term "1,1,0"))
                                 (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "33") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "eqSymm" (formula "33") (term "1,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "0,0,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "1,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,0,1,1,0"))
                                 (rule "commute_or" (formula "33") (term "1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "commute_or_2" (formula "33") (term "1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "0,1,0,1,1,0"))
                                 (rule "ifthenelse_to_or_left" (formula "22") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,0,0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "22") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "0,0,0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "33") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "22") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "22") (term "0,0,1,0,1,1,0"))
                                 (rule "allLeft" (formula "28") (inst "t=i"))
                                 (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "20"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                 (rule "leq_literals" (formula "28") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "28") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,0") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "47"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "33"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "14"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "11"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "38") (term "1,0,0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "48") (term "0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "28") (term "1,0,0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "9"))
                                 (rule "close" (formula "59") (ifseqformula "7"))
                              )
                              (branch " ¬( ( self.encrypted = messages ∨ ¬self.encrypted.<created> = TRUE) ∧ (¬self.encrypted.<created> = TRUE ∨ i_1_1 = i)) ∧ self.encrypted[i_1_1] = null"
                                 (rule "andLeft" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "andRight" (formula "38"))
                                 (branch "Case 1"
                                    (rule "orRight" (formula "38"))
                                    (rule "notRight" (formula "39"))
                                    (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
                                    (rule "inEqSimp_or_subsumption5" (formula "30") (term "1,0,0,1,0"))
                                    (rule "greater_literals" (formula "30") (term "0,1,0,1,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                                    (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                                    (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "shift_paren_or" (formula "30") (term "0,0,0,1,0"))
                                    (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                                    (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                                    (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "22") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "arrayLengthNotNegative" (formula "22") (term "1,1,0"))
                                    (rule "allLeft" (formula "23") (inst "t=i_1_1"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "23") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "23"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "3"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0"))
                                    (rule "add_zero_right" (formula "3") (term "0"))
                                    (rule "leq_literals" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "38"))
                                    (rule "notRight" (formula "38"))
                                    (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
                                    (rule "inEqSimp_or_subsumption5" (formula "30") (term "1,0,0,1,0"))
                                    (rule "greater_literals" (formula "30") (term "0,1,0,1,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                                    (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                                    (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "shift_paren_or" (formula "30") (term "0,0,0,1,0"))
                                    (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                                    (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                                    (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "22") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "arrayLengthNotNegative" (formula "22") (term "1,1,0"))
                                    (rule "allLeft" (formula "23") (inst "t=i_1_1"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                    (rule "leq_literals" (formula "23") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "23") (term "0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "closeFalse" (formula "23"))
                                 )
                              )
                           )
                           (branch " ¬( self.encrypted.<created> = TRUE ∨ (self.encrypted@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) ∧ (self.encrypted@heap)[i_1_1]@anon_heap_second«anonHeapFunction» = null"
                              (rule "andLeft" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "orRight" (formula "37"))
                              (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                              (rule "close" (formula "37") (ifseqformula "6"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "51") (inst "sk=i_1_0"))
                        (rule "orRight" (formula "51"))
                        (rule "orRight" (formula "51"))
                        (rule "notRight" (formula "53"))
                        (rule "inEqSimp_geqRight" (formula "53"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "53"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "40")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "25"))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "32") (ifseqformula "40"))
                        (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                        (rule "ifEqualsNull" (formula "3"))
                        (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=arr_6"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "41")))
                        (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "25") (ifseqformula "41"))
                        (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "6") (ifseqformula "41"))
                        (rule "commute_or" (formula "3") (term "0,0"))
                        (rule "commute_and" (formula "4") (term "0"))
                        (rule "ifthenelse_to_or_left" (formula "29") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "29") (term "1,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "29") (term "1,0,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,0,1,0"))
                        (rule "ifthenelse_to_or_left" (formula "19") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "19") (term "1,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "19") (term "0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,0,1,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0"))
                        (rule "commute_or" (formula "3") (term "0,0,0"))
                        (rule "commute_or" (formula "3") (term "1,0,0"))
                        (rule "orLeft" (formula "4"))
                        (branch " arr_6«selectSK» = null ∧ ( self.chosen.<created> = TRUE ∨ (self.chosen@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE)"
                           (rule "andLeft" (formula "4"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "commute_and_2" (formula "3") (term "0"))
                           (rule "commute_and" (formula "3") (term "0,0"))
                           (rule "orLeft" (formula "3"))
                           (branch " (self.chosen@heap)[i_1_0]@anon_heap_getFirst«anonHeapFunction» = null ∧ ( self.chosen = messages ∨ ¬self.chosen.<created> = TRUE) ∧ (¬self.chosen.<created> = TRUE ∨ i_1_0 = i)"
                              (rule "andLeft" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "cnf_rightDist" (formula "32") (term "0,0,1,0"))
                              (rule "inEqSimp_or_subsumption5" (formula "32") (term "1,0,0,1,0"))
                              (rule "greater_literals" (formula "32") (term "0,1,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "cnf_rightDist" (formula "22") (term "0,0,1,0"))
                              (rule "inEqSimp_or_subsumption5" (formula "22") (term "1,0,0,1,0"))
                              (rule "greater_literals" (formula "22") (term "0,1,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "shift_paren_or" (formula "32") (term "0,0,0,1,0"))
                              (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
                              (rule "commute_or" (formula "32") (term "0,0,0,0,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
                              (rule "arrayLengthIsAShort" (formula "24") (term "1,1,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "arrayLengthNotNegative" (formula "24") (term "1,1,0"))
                              (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "33") (term "1,1,0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "eqSymm" (formula "33") (term "1,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "0,0,1,1,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "33") (term "1,1,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "1,1,1,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "33") (term "0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,0,1,1,0"))
                              (rule "commute_or" (formula "33") (term "1,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,0,1,1,0"))
                              (rule "commute_or_2" (formula "33") (term "0,1,1,0,1,1,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0,1,1,0"))
                              (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "commute_or_2" (formula "33") (term "1,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,1,0,1,1,0"))
                              (rule "ifthenelse_to_or_left" (formula "22") (term "0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "22") (term "1,0,0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "22") (term "1,1,0,0,0,1,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1,1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,0,0,1,1,0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,1,0,1,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,1,1,0,1,1,0"))
                              (rule "commute_or" (formula "22") (term "0,0,1,0,1,1,0"))
                              (rule "allLeft" (formula "28") (inst "t=i"))
                              (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                              (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "28") (term "0,0,1"))
                              (rule "leq_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "18"))
                              (rule "qeq_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "allLeft" (formula "27") (inst "t=i_1_0"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                              (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                              (rule "add_literals" (formula "27") (term "0,0,1"))
                              (rule "leq_literals" (formula "27") (term "0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "27") (term "0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "47"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "10"))
                              (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "9"))
                              (rule "close" (formula "63") (ifseqformula "8"))
                           )
                           (branch " ¬( ( self.chosen = messages ∨ ¬self.chosen.<created> = TRUE) ∧ (¬self.chosen.<created> = TRUE ∨ i_1_0 = i)) ∧ self.chosen[i_1_0] = null"
                              (rule "andLeft" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "andRight" (formula "38"))
                              (branch "Case 1"
                                 (rule "orRight" (formula "38"))
                                 (rule "notRight" (formula "39"))
                                 (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "30") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "30") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "shift_paren_or" (formula "30") (term "0,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                                 (rule "arrayLengthNotNegative" (formula "22") (term "1,1,0"))
                                 (rule "arrayLengthIsAShort" (formula "23") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "ifthenelse_to_or_right" (formula "31") (term "0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "31") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "shift_paren_or" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "31") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,0,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "ifthenelse_to_or_right" (formula "20") (term "0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,0,1,1,0"))
                                 (rule "allLeft" (formula "25") (inst "t=i_1_0"))
                                 (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                 (rule "leq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "25") (term "0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "closeFalse" (formula "25"))
                              )
                              (branch "Case 2"
                                 (rule "orRight" (formula "38"))
                                 (rule "notRight" (formula "38"))
                                 (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "30") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "30") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
                                 (rule "inEqSimp_or_subsumption5" (formula "20") (term "1,0,0,1,0"))
                                 (rule "greater_literals" (formula "20") (term "0,1,0,1,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "shift_paren_or" (formula "30") (term "0,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
                                 (rule "arrayLengthIsAShort" (formula "22") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "arrayLengthNotNegative" (formula "22") (term "1,1,0"))
                                 (rule "ifthenelse_to_or_right" (formula "31") (term "0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,1,0,1,1,0"))
                                 (rule "qeq_literals" (formula "31") (term "1,0,0,1,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "shift_paren_or" (formula "31") (term "1,1,0,1,1,0"))
                                 (rule "commute_or" (formula "31") (term "0,1,1,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "31") (term "0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,0,1,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0,1,1,0"))
                                 (rule "eqSymm" (formula "20") (term "1,1,0,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "eqSymm" (formula "20") (term "1,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0,1,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,0,1,1,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,0,1,1,0"))
                                 (rule "allLeft" (formula "25") (inst "t=i_1_0"))
                                 (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                 (rule "leq_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "25"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                        (branch " ¬( self.chosen.<created> = TRUE ∨ (self.chosen@heap).<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) ∧ (self.chosen@heap)[i_1_0]@anon_heap_second«anonHeapFunction» = null"
                           (rule "andLeft" (formula "4"))
                           (rule "notLeft" (formula "4"))
                           (rule "orRight" (formula "37"))
                           (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                           (rule "close" (formula "37") (ifseqformula "6"))
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "Case 2"
         (builtin "One Step Simplification" (formula "14"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (ifseqformula "18"))
         (rule "true_left" (formula "6"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1") (ifseqformula "17"))
         (rule "orRight" (formula "32"))
         (rule "allRight" (formula "35") (inst "sk=f_0"))
         (rule "allRight" (formula "35") (inst "sk=o_0"))
         (rule "orRight" (formula "35"))
         (rule "orRight" (formula "35"))
         (rule "eqSymm" (formula "12"))
         (rule "eqSymm" (formula "9"))
         (rule "eqSymm" (formula "20") (term "1,0"))
         (rule "eqSymm" (formula "28"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "29"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "34"))
         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "32")) (ifInst ""  (formula "33")))
         (rule "elementOfSingleton" (formula "35"))
         (rule "inEqSimp_ltToLeq" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0"))
         (rule "polySimp_elimOne" (formula "11") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1"))
         (rule "polySimp_rightDist" (formula "7") (term "1"))
         (rule "mul_literals" (formula "7") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1"))
         (rule "array2seqDef" (formula "8") (term "0,0") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "8") (term "2,0,0") (ifseqformula "1") (ifseqformula "27"))
         (rule "array2seqDef" (formula "25") (term "0") (inst "u=u"))
         (rule "nonNull" (formula "15") (inst "i=i_1"))
         (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "greater_literals" (formula "15") (term "0,1"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "15"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "27"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "25") (term "0,1") (inst "u=u"))
         (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "9"))
         (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "1") (ifseqformula "28"))
         (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "9"))
         (rule "array2seqDef" (formula "20") (term "0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "20") (term "1,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "array2seqDef" (formula "7") (term "0,0") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "7") (term "2,0,0") (ifseqformula "1") (ifseqformula "28"))
         (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "9"))
         (rule "eqSeqDef" (formula "20") (term "1,0") (inst "iv=iv"))
         (rule "lenOfSeqDef" (formula "20") (term "1,0,1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,0"))
         (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,0"))
         (rule "add_zero_right" (formula "20") (term "1,1,0,1,0"))
         (rule "lenOfSeqDef" (formula "20") (term "0,0,1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "1,0,0,1,0"))
         (rule "times_zero_2" (formula "20") (term "1,1,0,0,1,0"))
         (rule "add_zero_right" (formula "20") (term "1,0,0,1,0"))
         (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0,1,1,0"))
         (rule "times_zero_2" (formula "20") (term "1,1,1,1,0,0,1,1,0"))
         (rule "add_zero_right" (formula "20") (term "1,1,1,0,0,1,1,0"))
         (rule "getOfSeqDef" (formula "20") (term "1,1,0,1,1,0"))
         (rule "castDel" (formula "20") (term "1,1,1,0,1,1,0"))
         (rule "castDel" (formula "20") (term "2,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "20") (term "0,2,1,1,1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
         (rule "getOfSeqDef" (formula "20") (term "0,1,0,1,1,0"))
         (rule "castDel" (formula "20") (term "2,0,1,0,1,1,0"))
         (rule "castDel" (formula "20") (term "1,0,1,0,1,1,0"))
         (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0,1,1,0"))
         (rule "times_zero_2" (formula "20") (term "1,1,1,0,0,1,0,1,1,0"))
         (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,0,1,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0,1,1,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "0,0,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
         (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "eqSeqDef2" (formula "24") (inst "iv=iv") (ifseqformula "24"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
         (rule "eqSymm" (formula "37"))
         (rule "eqSeqDef" (formula "13") (term "1,0") (inst "iv=iv"))
         (rule "lenOfSeqDef" (formula "13") (term "0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,0"))
         (rule "getOfSeqDef" (formula "13") (term "0,1,0,1,1,0"))
         (rule "castDel" (formula "13") (term "1,0,1,0,1,1,0"))
         (rule "castDel" (formula "13") (term "2,0,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0,1,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,1,0,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,1,0,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "13") (term "0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,0"))
         (rule "getOfSeqDef" (formula "13") (term "0,1,0,1,1,0"))
         (rule "castDel" (formula "13") (term "1,0,1,0,1,1,0"))
         (rule "castDel" (formula "13") (term "2,0,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,1,0,1,1,0"))
         (rule "pullOutSelect" (formula "20") (term "1,0,1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_0"))
         (rule "applyEq" (formula "21") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "1,0,0,0,0,0,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "20"))
         (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "31")) (ifInst ""  (formula "3")))
         (rule "elementOfSingleton" (formula "20") (term "0,0"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,0,0,0,0,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,1,0,0,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "20"))
         (rule "hideAuxiliaryEq" (formula "20"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "36"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
         (rule "mul_literals" (formula "9") (term "0,0"))
         (rule "add_zero_left" (formula "9") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9"))
         (rule "mul_literals" (formula "9") (term "1"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_imp2or" (formula "14") (term "0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "14") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0"))
         (rule "commute_and" (formula "36"))
         (rule "nnf_imp2or" (formula "14") (term "0,1,1,0"))
         (rule "nnf_imp2or" (formula "21") (term "0,1,1,0"))
         (rule "nnf_notAnd" (formula "14") (term "0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,1,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,1,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,1,0"))
         (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,1,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,1,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1,1,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,1,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,1,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,1,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,1,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,1,0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "15") (ifseqformula "4"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "17"))
         (rule "notLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "15"))
         (rule "nonNull" (formula "18") (inst "i=i_1"))
         (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "greater_literals" (formula "18") (term "0,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "18"))
         (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "30"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "17") (inst "i=i_1"))
         (rule "greater_literals" (formula "17") (term "0,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "sub_literals" (formula "17") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "30"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "16") (inst "i=i_1"))
         (rule "greater_literals" (formula "16") (term "0,1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "sub_literals" (formula "16") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "30"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
         (rule "notLeft" (formula "15"))
         (rule "applyEq" (formula "15") (term "1,1,1,0,0") (ifseqformula "13"))
         (rule "nnf_imp2or" (formula "17") (term "0"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_imp2or" (formula "15") (term "0"))
         (rule "nnf_notAnd" (formula "17") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "18") (term "0"))
         (rule "commute_or_2" (formula "17") (term "0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (ifseqformula "4"))
         (rule "replaceKnownSelect_taclet100_3" (formula "24") (term "1,1,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_4" (formula "24") (term "1,1,0,0,0,0,0,0"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "25"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "25"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "25"))
         (rule "notLeft" (formula "24"))
         (rule "nonNull" (formula "26") (inst "i=i_1"))
         (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "greater_literals" (formula "26") (term "0,1"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "notLeft" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "25") (inst "i=i_1"))
         (rule "greater_literals" (formula "25") (term "0,1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "sub_literals" (formula "25") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "25"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "24") (inst "i=i_1"))
         (rule "greater_literals" (formula "24") (term "0,1"))
         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "40")))
         (rule "sub_literals" (formula "24") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
         (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "4")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "4")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "4")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "4")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "4")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "4")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_0"))
         (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
         (rule "applyEq" (formula "33") (term "0") (ifseqformula "26"))
         (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "47")) (ifInst ""  (formula "3")))
         (rule "elementOfSingleton" (formula "26") (term "0,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "26"))
         (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
         (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
         (rule "hideAuxiliaryEq" (formula "26"))
         (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_0"))
         (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
         (rule "applyEq" (formula "32") (term "0") (ifseqformula "25"))
         (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "46")) (ifInst ""  (formula "3")))
         (rule "elementOfSingleton" (formula "25") (term "0,0"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
         (rule "hideAuxiliaryEq" (formula "25"))
         (rule "nnf_imp2or" (formula "24") (term "0"))
         (rule "nnf_imp2or" (formula "26") (term "0"))
         (rule "nnf_imp2or" (formula "25") (term "0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
         (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "25") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "16") (term "0"))
         (rule "commute_or_2" (formula "15") (term "0"))
         (rule "commute_or_2" (formula "14") (term "0,1,1,0"))
         (rule "commute_or_2" (formula "23") (term "0,1,1,0"))
         (rule "commute_or" (formula "18") (term "0,0"))
         (rule "commute_or" (formula "17") (term "0,0"))
         (rule "ifthenelse_to_or_left" (formula "23") (term "0,1,0"))
         (rule "eqSymm" (formula "23") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
         (builtin "One Step Simplification" (formula "23"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,1,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,0,0,1,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,1,1,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,1,1,0,1,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,1,0,1,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,1,0,1,0"))
         (rule "ifthenelse_to_or_right" (formula "14") (term "0,1,0"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
         (rule "add_zero_left" (formula "14") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,1,1,0,1,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,1,0,1,0"))
         (rule "add_zero_left" (formula "14") (term "0,0,1,1,0,1,0"))
         (rule "commute_or_2" (formula "24") (term "0"))
         (rule "commute_or_2" (formula "26") (term "0"))
         (rule "commute_or_2" (formula "25") (term "0"))
         (rule "commute_or" (formula "16") (term "0,0"))
         (rule "commute_or" (formula "15") (term "0,0"))
         (rule "ifthenelse_split" (formula "1") (term "0"))
         (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) TRUE"
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "orRight" (formula "31"))
            (rule "applyEqReverse" (formula "54") (term "1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "eqSymm" (formula "53"))
            (rule "replace_known_right" (formula "52") (term "0,1") (ifseqformula "30"))
            (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "32")))
            (rule "closeTrue" (formula "52"))
         )
         (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getFirst«anonHeapFunction» = TRUE) FALSE"
            (rule "close" (formula "52") (ifseqformula "1"))
         )
      )
   )
   (branch "Exceptional Post (second)"
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "translateJavaAddInt" (formula "6") (term "0,1,0,1,1,0,0,0,1"))
      (rule "andLeft" (formula "5"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,0") (ifseqformula "5"))
      (rule "andLeft" (formula "3"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "4") (term "1,1,0") (ifseqformula "3"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "0,1,0") (ifseqformula "3"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "0,0,1,0,1") (ifseqformula "3"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "15"))
      (rule "close" (formula "18") (ifseqformula "17"))
   )
   (branch "Pre (second)"
      (builtin "One Step Simplification" (formula "4"))
      (builtin "Evaluate Query" (formula "4") (term "0,0,1,0") (newnames "b,callee,queryResult,res_byteArrayToInt"))
      (rule "notLeft" (formula "1") (userinteraction))
      (rule "variableDeclaration" (formula "4") (term "1") (newnames "queryResult") (userinteraction))
      (builtin "Use Operation Contract" (formula "4") (newnames "heapBefore_byteArrayToInt,result_2,exc_2") (contract "verif.utils.MessageTools[verif.utils.MessageTools::byteArrayToInt([B)].JML normal_behavior operation contract.0"))
      (branch "Post (byteArrayToInt)"
         (rule "replaceKnownQuery_verif_utils_MessageTools_byteArrayToInt(heapAfter_getFirst,bal)_20_0" (formula "7") (term "0,0,1,0") (userinteraction))
         (rule "replaceKnownQuery_verif_utils_MessageTools_byteArrayToInt(heapAfter_getFirst,bal)_20_0" (formula "7") (term "1,1,0,0") (userinteraction))
         (builtin "One Step Simplification" (formula "6"))
         (rule "assignment" (formula "6") (term "1") (userinteraction))
         (rule "methodCallEmpty" (formula "6") (term "1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "5"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "4"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "4"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "20"))
         (rule "notLeft" (formula "19"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "13"))
         (rule "notLeft" (formula "1"))
         (rule "notLeft" (formula "21"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "12"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "16"))
         (rule "emptyModality" (formula "30") (term "1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "30"))
         (rule "andRight" (formula "31") (userinteraction))
         (branch "Case 1"
            (rule "translateJavaAddInt" (formula "31") (term "1,0") (userinteraction))
            (rule "notRight" (formula "30") (userinteraction))
            (rule "andRight" (formula "31") (userinteraction))
            (branch "Case 1"
               (rule "cut" (inst "cutFormula=  array2seq(heap, bal)
= array2seq(heapAfter_getFirst, bal)") (userinteraction))
               (branch "CUT: array2seq(heap, bal) = array2seq(heapAfter_getFirst, bal) TRUE"
                  (builtin "One Step Simplification" (formula "15"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "18"))
                  (rule "eqSymm" (formula "10"))
                  (rule "eqSymm" (formula "13"))
                  (rule "eqSymm" (formula "20") (term "1,0"))
                  (rule "eqSymm" (formula "25"))
                  (rule "eqSymm" (formula "27"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "14") (term "1,0"))
                  (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_geqRight" (formula "31"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "9"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "26"))
                  (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "26"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "3"))
                  (rule "applyEq" (formula "26") (term "1") (ifseqformula "3"))
                  (rule "applyEq" (formula "9") (term "1,0,0") (ifseqformula "3"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                  (rule "andLeft" (formula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                  (rule "add_literals" (formula "9") (term "1,1,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0"))
                  (rule "add_zero_right" (formula "9") (term "0"))
                  (rule "leq_literals" (formula "9"))
                  (rule "closeFalse" (formula "9"))
               )
               (branch "CUT: array2seq(heap, bal) = array2seq(heapAfter_getFirst, bal) FALSE"
                  (rule "equalityToSeqGetAndSeqLenRight" (formula "26") (inst "iv=iv") (userinteraction))
                  (builtin "One Step Simplification" (formula "14"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "17"))
                  (rule "eqSymm" (formula "24"))
                  (rule "eqSymm" (formula "9"))
                  (rule "eqSymm" (formula "19") (term "1,0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "eqSymm" (formula "25") (term "0"))
                  (rule "eqSymm" (formula "25") (term "1,0,1"))
                  (rule "eqSymm" (formula "27"))
                  (rule "eqSymm" (formula "13") (term "1,0"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_geqRight" (formula "31"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "8"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "applyEq" (formula "25") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1"))
                  (rule "mul_literals" (formula "8") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                  (rule "nonNull" (formula "16") (inst "i=i_1"))
                  (rule "greater_literals" (formula "16") (term "0,1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "sub_literals" (formula "16") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "notLeft" (formula "16"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "23") (ifseqformula "26"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                  (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
                  (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "23") (ifseqformula "28"))
                  (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "10"))
                  (rule "narrowSelectArrayType" (formula "10") (term "2,0") (ifseqformula "23") (ifseqformula "28"))
                  (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "10"))
                  (rule "array2seqDef" (formula "20") (term "0,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "20") (term "1,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "27") (term "0,1,0") (inst "u=u"))
                  (rule "eqSymm" (formula "27") (term "0"))
                  (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,0,0"))
                  (rule "times_zero_2" (formula "27") (term "1,1,0,0"))
                  (rule "add_zero_right" (formula "27") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                  (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "0,0,0,0"))
                  (rule "array2seqDef" (formula "27") (term "0,0,1,0,1") (inst "u=u"))
                  (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                  (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                  (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                  (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "times_zero_2" (formula "27") (term "1,1,1,0,0,1,0,1"))
                  (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1"))
                  (rule "array2seqDef" (formula "27") (term "0,1,1,0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "27") (term "1,0,1"))
                  (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                  (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                  (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                  (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "times_zero_2" (formula "27") (term "1,1,1,0,0,1,0,1"))
                  (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "narrowSelectArrayType" (formula "27") (term "1,0,1,0,1") (ifseqformula "23") (ifseqformula "28"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1"))
                  (rule "eqSymm" (formula "27") (term "1,0,1"))
                  (rule "array2seqDef" (formula "14") (term "1,1,0") (inst "u=u"))
                  (rule "eqSymm" (formula "14") (term "1,0"))
                  (rule "array2seqDef" (formula "27") (term "0,1,1,1,0,0,1") (inst "u=u"))
                  (rule "lenOfSeqDef" (formula "27") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,1,1,0,0,1"))
                  (rule "times_zero_2" (formula "27") (term "1,1,1,1,1,0,0,1"))
                  (rule "add_zero_right" (formula "27") (term "1,1,1,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,1,1,0,0,1"))
                  (rule "add_zero_right" (formula "27") (term "0,0,1,1,1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,1,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1,1,0,0,1"))
                  (rule "array2seqDef" (formula "8") (term "0,0") (inst "u=u"))
                  (rule "narrowSelectArrayType" (formula "8") (term "2,0,0") (ifseqformula "23") (ifseqformula "28"))
                  (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "10"))
                  (rule "eqSeqDef" (formula "20") (term "1,0") (inst "iv=iv"))
                  (rule "lenOfSeqDef" (formula "20") (term "0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "0,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,0"))
                  (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,1,0"))
                  (rule "getOfSeqDef" (formula "20") (term "0,1,0,1,1,0"))
                  (rule "castDel" (formula "20") (term "1,0,1,0,1,1,0"))
                  (rule "castDel" (formula "20") (term "2,0,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,1,1,1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,1,0,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "20") (term "0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "0,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,0"))
                  (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,1,0"))
                  (rule "getOfSeqDef" (formula "20") (term "0,1,0,1,1,0"))
                  (rule "castDel" (formula "20") (term "1,0,1,0,1,1,0"))
                  (rule "castDel" (formula "20") (term "2,0,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,1,0"))
                  (rule "eqSymm" (formula "20") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "eqSymm" (formula "20") (term "1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "array2seqDef" (formula "27") (term "0,1,0") (inst "u=u"))
                  (rule "eqSymm" (formula "27") (term "0"))
                  (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,1,0,0"))
                  (rule "add_zero_right" (formula "27") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                  (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "0,0,0,0"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "allRight" (formula "27") (inst "sk=iv_5"))
                  (rule "impRight" (formula "27"))
                  (rule "andLeft" (formula "1"))
                  (rule "replace_known_left" (formula "29") (term "0,0,1") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                  (rule "eqSymm" (formula "29"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                  (rule "eqSymm" (formula "29"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                  (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_123"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "8")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "array2seqDef" (formula "16") (term "1,1,0") (inst "u=u"))
                  (rule "eqSymm" (formula "16") (term "1,0"))
                  (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "eqSeqDef" (formula "15") (term "1,0") (inst "iv=iv"))
                  (rule "lenOfSeqDef" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,0"))
                  (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,1,0"))
                  (rule "getOfSeqDef" (formula "15") (term "1,1,0,1,1,0"))
                  (rule "castDel" (formula "15") (term "1,1,1,0,1,1,0"))
                  (rule "castDel" (formula "15") (term "2,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "15") (term "0,2,1,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "15") (term "0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,0"))
                  (rule "times_zero_2" (formula "15") (term "1,1,0,0,1,0"))
                  (rule "add_zero_right" (formula "15") (term "1,0,0,1,0"))
                  (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1,1,0"))
                  (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1,1,0"))
                  (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0"))
                  (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0"))
                  (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "15") (term "1,1,1,0,0,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,1,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                  (rule "pullOutSelect" (formula "21") (term "1,0,1,0,1,0,0,1,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_9"))
                  (rule "applyEq" (formula "22") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "21"))
                  (rule "applyEq" (formula "22") (term "1,0,0,0,0,0,1,0") (ifseqformula "21"))
                  (rule "applyEq" (formula "22") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "21"))
                  (rule "applyEq" (formula "22") (term "1,0,1,0,0,1,0") (ifseqformula "21"))
                  (rule "applyEq" (formula "22") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "21"))
                  (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "33")) (ifInst ""  (formula "5")))
                  (rule "elementOfSingleton" (formula "21") (term "0,0"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "applyEqReverse" (formula "22") (term "1,0,1,0,0,1,0") (ifseqformula "21"))
                  (rule "applyEqReverse" (formula "22") (term "1,0,0,0,0,0,1,0") (ifseqformula "21"))
                  (rule "applyEqReverse" (formula "22") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "21"))
                  (rule "applyEqReverse" (formula "22") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "21"))
                  (rule "applyEqReverse" (formula "22") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "21"))
                  (rule "applyEqReverse" (formula "22") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "21"))
                  (rule "hideAuxiliaryEq" (formula "21"))
                  (rule "pullOutSelect" (formula "28") (term "1,0") (inst "selectSK=arr_124"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "9")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                  (rule "applyEqReverse" (formula "29") (term "1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "narrowSelectArrayType" (formula "28") (term "1,0") (ifseqformula "24") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "28"))
                  (rule "closeTrue" (formula "28"))
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "31") (userinteraction))
               (branch "Case 1"
                  (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1") (userinteraction))
                  (rule "applyEq" (formula "31") (term "0") (ifseqformula "25") (userinteraction))
                  (rule "cut" (inst "cutFormula=  array2seq(heap, bal)
= array2seq(heapAfter_getFirst, bal)") (userinteraction))
                  (branch "CUT: array2seq(heap, bal) = array2seq(heapAfter_getFirst, bal) TRUE"
                     (builtin "One Step Simplification" (formula "15"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "18"))
                     (rule "eqSymm" (formula "10"))
                     (rule "eqSymm" (formula "13"))
                     (rule "eqSymm" (formula "20") (term "1,0"))
                     (rule "eqSymm" (formula "25"))
                     (rule "eqSymm" (formula "27"))
                     (rule "eqSymm" (formula "1"))
                     (rule "eqSymm" (formula "14") (term "1,0"))
                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_geqRight" (formula "31"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "9"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "26"))
                     (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "26"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "26") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "3"))
                     (rule "applyEq" (formula "9") (term "1,0,0") (ifseqformula "3"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "10"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "CUT: array2seq(heap, bal) = array2seq(heapAfter_getFirst, bal) FALSE"
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "26") (inst "iv=iv") (userinteraction))
                     (builtin "One Step Simplification" (formula "14"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "17"))
                     (rule "eqSymm" (formula "24"))
                     (rule "eqSymm" (formula "9"))
                     (rule "eqSymm" (formula "19") (term "1,0"))
                     (rule "eqSymm" (formula "12"))
                     (rule "eqSymm" (formula "25") (term "0"))
                     (rule "eqSymm" (formula "25") (term "1,0,1"))
                     (rule "eqSymm" (formula "27"))
                     (rule "eqSymm" (formula "13") (term "1,0"))
                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_geqRight" (formula "31"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "8"))
                     (rule "polySimp_addComm1" (formula "8") (term "0"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "25"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "25") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1"))
                     (rule "polySimp_rightDist" (formula "8") (term "1"))
                     (rule "mul_literals" (formula "8") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "nonNull" (formula "16") (inst "i=i_1"))
                     (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "greater_literals" (formula "16") (term "0,1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "notLeft" (formula "16"))
                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "23") (ifseqformula "26"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                     (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
                     (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "23") (ifseqformula "28"))
                     (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "10"))
                     (rule "narrowSelectArrayType" (formula "10") (term "2,0") (ifseqformula "23") (ifseqformula "28"))
                     (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "10"))
                     (rule "array2seqDef" (formula "20") (term "1,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "20") (term "1,0"))
                     (rule "array2seqDef" (formula "27") (term "0,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "27") (term "0"))
                     (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,0,0"))
                     (rule "mul_literals" (formula "27") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "0,0,0,0"))
                     (rule "array2seqDef" (formula "27") (term "0,0,1,0,1") (inst "u=u"))
                     (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                     (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                     (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                     (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0,1"))
                     (rule "times_zero_2" (formula "27") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1"))
                     (rule "array2seqDef" (formula "27") (term "0,1,1,0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "27") (term "1,0,1"))
                     (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                     (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                     (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                     (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "27") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0,1"))
                     (rule "narrowSelectArrayType" (formula "27") (term "1,0,1,0,1") (ifseqformula "23") (ifseqformula "28"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1"))
                     (rule "eqSymm" (formula "27") (term "1,0,1"))
                     (rule "array2seqDef" (formula "14") (term "1,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "14") (term "1,0"))
                     (rule "array2seqDef" (formula "27") (term "0,1,1,1,0,0,1") (inst "u=u"))
                     (rule "lenOfSeqDef" (formula "27") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "27") (term "1,1,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "27") (term "1,1,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1,1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1,1,0,0,1"))
                     (rule "array2seqDef" (formula "8") (term "0,0") (inst "u=u"))
                     (rule "narrowSelectArrayType" (formula "8") (term "2,0,0") (ifseqformula "23") (ifseqformula "28"))
                     (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "10"))
                     (rule "array2seqDef" (formula "20") (term "1,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "20") (term "1,0"))
                     (rule "array2seqDef" (formula "27") (term "0,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "27") (term "0"))
                     (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,0,0"))
                     (rule "times_zero_2" (formula "27") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "allRight" (formula "27") (inst "sk=iv_4"))
                     (rule "impRight" (formula "27"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                     (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_121"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "8")))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "array2seqDef" (formula "16") (term "1,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "16") (term "1,0"))
                     (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "eqSeqDef" (formula "21") (term "1,0") (inst "iv=iv"))
                     (rule "getOfSeqDef" (formula "21") (term "1,1,0,1,1,0"))
                     (rule "castDel" (formula "21") (term "1,1,1,0,1,1,0"))
                     (rule "castDel" (formula "21") (term "2,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "21") (term "0,2,1,1,1,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "21") (term "1,1,0,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0,1,1,0"))
                     (rule "times_zero_2" (formula "21") (term "1,1,1,1,0,0,1,1,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,1,0,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "21") (term "1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,0"))
                     (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,1,0"))
                     (rule "getOfSeqDef" (formula "21") (term "0,1,0,1,1,0"))
                     (rule "castDel" (formula "21") (term "2,0,1,0,1,1,0"))
                     (rule "castDel" (formula "21") (term "1,0,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "21") (term "1,1,1,0,0,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "21") (term "0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,0"))
                     (rule "times_zero_2" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "21") (term "1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,1,1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0,0,1,1,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,1,1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,0,1,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,1,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0,1,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,0,1,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0,0,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,0,0,1,1,0"))
                     (rule "eqSeqDef" (formula "15") (term "1,0") (inst "iv=iv"))
                     (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1,1,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "15") (term "1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,0,1,0"))
                     (rule "getOfSeqDef" (formula "15") (term "1,1,0,1,1,0"))
                     (rule "castDel" (formula "15") (term "1,1,1,0,1,1,0"))
                     (rule "castDel" (formula "15") (term "2,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,2,1,1,1,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0"))
                     (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0"))
                     (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0"))
                     (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,1,0,0,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "15") (term "0,0,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "15") (term "1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,1,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
                     (rule "pullOutSelect" (formula "28") (term "1,0") (inst "selectSK=arr_122"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "9")))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                     (rule "applyEqReverse" (formula "29") (term "1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "narrowSelectArrayType" (formula "28") (term "1,0") (ifseqformula "24") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "closeTrue" (formula "28"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "14"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "17"))
                  (rule "notRight" (formula "30"))
                  (rule "close" (formula "26") (ifseqformula "1"))
               )
            )
         )
         (branch "Case 2"
            (builtin "One Step Simplification" (formula "13"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "16"))
            (rule "wellFormedAnonEQ" (formula "30") (term "0") (ifseqformula "16"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,1") (ifseqformula "16"))
            (rule "notRight" (formula "29"))
            (rule "eqSymm" (formula "24"))
            (rule "eqSymm" (formula "26"))
            (rule "eqSymm" (formula "9"))
            (rule "eqSymm" (formula "19") (term "1,0"))
            (rule "eqSymm" (formula "12"))
            (rule "eqSymm" (formula "13") (term "1,0"))
            (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "22")) (ifInst ""  (formula "16")) (ifInst ""  (formula "5")))
            (rule "closeTrue" (formula "30"))
         )
      )
      (branch "Exceptional Post (byteArrayToInt)"
         (builtin "One Step Simplification" (formula "5"))
         (builtin "One Step Simplification" (formula "3"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
         (builtin "One Step Simplification" (formula "6"))
         (rule "replaceKnownQuery_verif_utils_MessageTools_byteArrayToInt(heapAfter_getFirst,bal)_20_0" (formula "7") (term "1,1,0,0"))
         (rule "replaceKnownQuery_verif_utils_MessageTools_byteArrayToInt(heapAfter_getFirst,bal)_20_0" (formula "7") (term "0,0,1,0"))
         (rule "translateJavaAddInt" (formula "7") (term "1,0,0"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "3"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1") (ifseqformula "3"))
         (rule "wellFormedAnonEQ" (formula "9") (term "0,1") (ifseqformula "3"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "4") (term "1,1,0") (ifseqformula "3"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,1") (ifseqformula "3"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "3"))
         (rule "notLeft" (formula "10"))
         (rule "close" (formula "13") (ifseqformula "12"))
      )
      (branch "Pre (byteArrayToInt)"
         (builtin "One Step Simplification" (formula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replaceKnownQuery_verif_utils_MessageTools_byteArrayToInt(heapAfter_getFirst,bal)_20_0" (formula "5") (term "0,0,1,0"))
         (rule "replaceKnownQuery_verif_utils_MessageTools_byteArrayToInt(heapAfter_getFirst,bal)_20_0" (formula "5") (term "1,1,0,0"))
         (rule "translateJavaAddInt" (formula "5") (term "1,0,0"))
         (rule "andLeft" (formula "3"))
         (rule "wellFormedAnonEQ" (formula "6") (term "0,1") (ifseqformula "3"))
         (rule "wellFormedAnonEQ" (formula "5") (term "0,1") (ifseqformula "3"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,1,1") (ifseqformula "3"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "5") (term "1,1,1") (ifseqformula "3"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "4") (term "1,1,0") (ifseqformula "3"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "21"))
         (rule "notLeft" (formula "2"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "12"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "16"))
         (rule "eqSymm" (formula "20") (term "1,0"))
         (rule "eqSymm" (formula "9"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "eqSymm" (formula "12"))
         (rule "eqSymm" (formula "23"))
         (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "replace_known_right" (formula "27") (term "0,1,1") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "22")) (ifInst ""  (formula "1")) (ifInst ""  (formula "16")) (ifInst ""  (formula "5")))
         (rule "replace_known_right" (formula "28") (term "0,1,1") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "22")) (ifInst ""  (formula "1")) (ifInst ""  (formula "16")) (ifInst ""  (formula "5")))
         (rule "inEqSimp_ltToLeq" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_geqRight" (formula "27"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "8"))
         (rule "polySimp_addComm1" (formula "8") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "polySimp_elimOne" (formula "12") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1"))
         (rule "polySimp_rightDist" (formula "8") (term "1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
         (rule "mul_literals" (formula "8") (term "0,1"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1"))
         (rule "array2seqDef" (formula "9") (term "0,0") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "9") (term "2,0,0") (ifseqformula "2") (ifseqformula "23"))
         (rule "nonNull" (formula "16") (inst "i=i_1"))
         (rule "greater_literals" (formula "16") (term "0,1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "sub_literals" (formula "16") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "23"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "21") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "21") (term "1,0"))
         (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "10"))
         (rule "narrowSelectArrayType" (formula "10") (term "2,0") (ifseqformula "2") (ifseqformula "24"))
         (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "10"))
         (rule "array2seqDef" (formula "14") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "14") (term "1,0"))
         (rule "array2seqDef" (formula "8") (term "0,0") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "8") (term "2,0,0") (ifseqformula "2") (ifseqformula "24"))
         (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "10"))
         (rule "array2seqDef" (formula "21") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "21") (term "1,0"))
         (rule "array2seqDef" (formula "14") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "14") (term "1,0"))
         (rule "eqSeqDef" (formula "21") (term "1,0") (inst "iv=iv"))
         (rule "lenOfSeqDef" (formula "21") (term "1,0,1,0"))
         (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,0"))
         (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,0"))
         (rule "add_zero_right" (formula "21") (term "1,1,0,1,0"))
         (rule "getOfSeqDef" (formula "21") (term "0,1,0,1,1,0"))
         (rule "castDel" (formula "21") (term "1,0,1,0,1,1,0"))
         (rule "castDel" (formula "21") (term "2,0,1,0,1,1,0"))
         (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "21") (term "1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "21") (term "0,0,1,0"))
         (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,0"))
         (rule "times_zero_2" (formula "21") (term "1,1,0,0,1,0"))
         (rule "add_zero_right" (formula "21") (term "1,0,0,1,0"))
         (rule "lenOfSeqDef" (formula "21") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0,1,1,0"))
         (rule "times_zero_2" (formula "21") (term "1,1,1,1,0,0,1,1,0"))
         (rule "add_zero_right" (formula "21") (term "1,1,1,0,0,1,1,0"))
         (rule "getOfSeqDef" (formula "21") (term "0,1,0,1,1,0"))
         (rule "castDel" (formula "21") (term "1,0,1,0,1,1,0"))
         (rule "castDel" (formula "21") (term "2,0,1,0,1,1,0"))
         (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "21") (term "1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,0,1,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,1,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0,0,1,1,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,1,1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "21") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "21") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "0,0,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0,0,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "21") (term "1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0,0,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "21") (term "1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "0,1,0,1,1,0,1,1,0"))
         (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "eqSeqDef" (formula "13") (term "1,0") (inst "iv=iv"))
         (rule "lenOfSeqDef" (formula "13") (term "0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,0"))
         (rule "getOfSeqDef" (formula "13") (term "0,1,0,1,1,0"))
         (rule "castDel" (formula "13") (term "1,0,1,0,1,1,0"))
         (rule "castDel" (formula "13") (term "2,0,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0,1,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,1,0,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,1,0,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "13") (term "0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,0"))
         (rule "getOfSeqDef" (formula "13") (term "0,1,0,1,1,0"))
         (rule "castDel" (formula "13") (term "1,0,1,0,1,1,0"))
         (rule "castDel" (formula "13") (term "2,0,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0,1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,1,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,1,0,1,1,0"))
         (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_46"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "6")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "20") (term "1,0,1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_5"))
         (rule "applyEq" (formula "21") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "1,0,0,0,0,0,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "20"))
         (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
         (rule "elementOfSingleton" (formula "20") (term "0,0"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,1,1,0,1,0,1,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0,0,1,0,1,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,0,0,0,0,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "1,0,1,0,0,1,0") (ifseqformula "20"))
         (rule "hideAuxiliaryEq" (formula "20"))
         (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
         (rule "times_zero_1" (formula "9") (term "0,0"))
         (rule "add_zero_left" (formula "9") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9"))
         (rule "mul_literals" (formula "9") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
         (rule "qeq_literals" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "closeFalse" (formula "9"))
      )
   )
)
(branch "Exceptional Post (getFirst)"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "3"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "translateJavaAddInt" (formula "4") (term "0,1,0,1,1,0,0,0,1"))
   (rule "andLeft" (formula "3"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "4") (term "1,0") (ifseqformula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "13") (ifseqformula "12"))
)
(branch "Pre (getFirst)"
   (builtin "One Step Simplification" (formula "2"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "2"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "eqSymm" (formula "19") (term "1,0,0,1,1,1,1,0"))
   (rule "eqSymm" (formula "19") (term "0,1,1,0"))
   (rule "eqSymm" (formula "9"))
   (rule "eqSymm" (formula "13") (term "1,0"))
   (rule "eqSymm" (formula "12"))
   (rule "eqSymm" (formula "17"))
   (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "16"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "replace_known_left" (formula "19") (term "1,0,1,1,1,0") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "1")) (ifInst ""  (formula "4")) (ifInst ""  (formula "16")) (ifInst ""  (formula "5")))
   (rule "closeTrue" (formula "19"))
)
)

}
