\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jul 10 14:45:59 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=6000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Jul 10 14:45:59 CEST 2017
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:reconstructBallotArray([B)].JML behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:reconstructBallotArray([B)].JML behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "80536")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "data,self,result,exc,heapAtPre,o,f") (userinteraction))
(builtin "One Step Simplification" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "10") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "10") (term "1,1") (newnames "heapBefore_reconstructBallotArray,savedHeapBefore_reconstructBallotArray") (userinteraction))
(builtin "One Step Simplification" (formula "10"))
(rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x") (userinteraction))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x") (userinteraction))
(rule "equality_comparison_simple" (formula "10") (term "1") (userinteraction))
(rule "if" (formula "10") (term "1,1") (userinteraction))
(builtin "One Step Simplification" (formula "10"))
(rule "ifthenelse_split_for" (formula "10") (userinteraction))
(branch "data = null TRUE"
   (rule "eqSymm" (formula "11") (term "1,0,0,1,0,1"))
   (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "blockThrow" (formula "10") (term "1"))
   (rule "applyEq" (formula "10") (term "0,1,0,0") (ifseqformula "1"))
   (rule "nonNull" (formula "10") (term "1,1,1,1,0,0,0,1") (inst "i=i"))
   (rule "greater_literals" (formula "10") (term "0,1,1,1,1,1,0,0,0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "sub_literals" (formula "10") (term "2,1,0,1,1,1,1,1,0,0,0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "10") (term "0,1,1,1,1,1,0,0,0,1"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "Contract_axiom_for_ghostFieldsPre_in_MixServer" (formula "6") (term "0") (inst "i=i"))
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "9")) (ifInst ""  (formula "2")))
   (rule "eqSymm" (formula "6") (term "1,0,1,0,0,0,0,0,0,1"))
   (rule "eqSymm" (formula "6") (term "1,0,0,0,0,1"))
   (rule "eqSymm" (formula "6") (term "1,0,0,0,1"))
   (rule "eqSymm" (formula "6") (term "1,0,0,1"))
   (rule "eqSymm" (formula "6") (term "1,0,1"))
   (rule "eqSymm" (formula "6"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
   (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
   (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
   (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
   (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "2") (ifseqformula "16"))
   (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
   (rule "eqSymm" (formula "10"))
   (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
   (rule "eqSymm" (formula "9"))
   (rule "array2seqDef" (formula "7") (term "1,0,0,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
   (rule "eqSymm" (formula "7") (term "1,0"))
   (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
   (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
   (rule "array2seqDef" (formula "7") (term "0,0,1,1,0") (inst "u=u"))
   (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "nnf_notAnd" (formula "7") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "11") (term "0") (inst "i=i"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "6")) (ifInst ""  (formula "8")))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "eqSymm" (formula "15"))
   (rule "eqSymm" (formula "14"))
   (rule "eqSymm" (formula "13"))
   (rule "eqSymm" (formula "12"))
   (rule "eqSymm" (formula "11") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "14"))
   (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "13"))
   (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "array2seqDef" (formula "12") (term "0,0") (inst "u=u"))
   (rule "narrowSelectArrayType" (formula "12") (term "2,0,0") (ifseqformula "2") (ifseqformula "16"))
   (rule "array2seqDef" (formula "12") (term "0,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
   (rule "eqSymm" (formula "12"))
   (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
   (rule "eqSymm" (formula "11"))
   (rule "applyEq" (formula "12") (term "1,1,1") (ifseqformula "11"))
   (rule "applyEq" (formula "12") (term "0,0,1,1,1") (ifseqformula "9"))
   (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "9"))
   (rule "array2seqDef" (formula "10") (term "0,0,0,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
   (rule "eqSymm" (formula "10") (term "1,0"))
   (rule "array2seqDef" (formula "10") (term "1,0,1,1,0") (inst "u=u"))
   (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "11") (ifseqformula "4"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "13"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "13"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "12"))
   (rule "notLeft" (formula "11"))
   (rule "narrowSelectArrayType" (formula "7") (term "2,0,0,1,1,0") (ifseqformula "2") (ifseqformula "19"))
   (rule "nonNull" (formula "13") (inst "i=i"))
   (rule "greater_literals" (formula "13") (term "0,1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "sub_literals" (formula "13") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "13"))
   (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "14"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "12") (inst "i=i"))
   (rule "greater_literals" (formula "12") (term "0,1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "sub_literals" (formula "12") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "12"))
   (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "14"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
   (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "11") (inst "i=i"))
   (rule "greater_literals" (formula "11") (term "0,1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "sub_literals" (formula "11") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "14"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "13") (term "0"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_notAnd" (formula "13") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "6") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
   (rule "eqSymm" (formula "6"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0,0,0"))
   (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
   (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")) (ifInst ""  (formula "17")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
   (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
   (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "6") (term "0"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
   (rule "throwUnfold" (formula "24") (term "1") (inst "#v0=m"))
   (rule "variableDeclarationAssign" (formula "24") (term "1"))
   (rule "variableDeclaration" (formula "24") (term "1") (newnames "m"))
   (rule "commute_or_2" (formula "6") (term "0"))
   (rule "commute_or_2" (formula "12") (term "0"))
   (rule "commute_or_2" (formula "11") (term "0"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
   (rule "arrayLengthIsAShort" (formula "9") (term "0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "arrayLengthNotNegative" (formula "9") (term "1"))
   (rule "arrayLengthIsAShort" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "commute_or" (formula "6") (term "0,0"))
   (rule "commute_or" (formula "13") (term "0,0"))
   (rule "commute_or" (formula "12") (term "0,0"))
   (rule "commute_or" (formula "11") (term "0,0"))
   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
   (rule "arrayLengthIsAShort" (formula "11") (term "0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "instanceCreationAssignmentUnfoldArguments" (formula "26") (term "1"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "var"))
   (rule "assignment" (formula "26") (term "1"))
   (builtin "One Step Simplification" (formula "26"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "var_1"))
   (rule "stringAssignment" (formula "26") (term "1"))
   (builtin "One Step Simplification" (formula "27"))
   (builtin "One Step Simplification" (formula "26"))
   (rule "eqSymm" (formula "26"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,0") (ifseqformula "3"))
   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "18"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0,1") (ifseqformula "3"))
   (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "20"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,0") (ifseqformula "3"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0,1,0,0,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "arrayLengthNotNegative" (formula "7") (term "1,0,0,1,0,0,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "3"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "4"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "5"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "6"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "7"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "8"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "instanceCreationAssignment" (formula "38") (term "1") (inst "#v0=m_1"))
   (rule "variableDeclarationAssign" (formula "38") (term "1"))
   (rule "variableDeclaration" (formula "38") (term "1") (newnames "m_1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "38") (term "1") (inst "#v0=m_2"))
   (rule "variableDeclaration" (formula "38") (term "1") (newnames "m_2"))
   (rule "methodBodyExpand" (formula "38") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
   (builtin "One Step Simplification" (formula "38"))
   (rule "variableDeclaration" (formula "38") (term "1") (newnames "__NEW__"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "38") (term "1") (inst "#v0=m_3"))
   (rule "variableDeclaration" (formula "38") (term "1") (newnames "m_3"))
   (rule "allocateInstance" (formula "38"))
   (builtin "One Step Simplification" (formula "39"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "wellFormedCreate" (formula "1") (term "0,1,0"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "41") (term "1"))
   (rule "assignment" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfCreate" (formula "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "eqSymm" (formula "1") (term "0,1,0,0"))
   (rule "eqSymm" (formula "1") (term "0,0,0"))
   (rule "replace_known_right" (formula "1") (term "0,1,0,0") (ifseqformula "41"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
   (rule "eqSymm" (formula "1") (term "1,0,0"))
   (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "41"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
   (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodBodyExpand" (formula "41") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "assignment_write_attribute_this" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallWithinClass" (formula "41") (term "1"))
   (rule "methodBodyExpand" (formula "41") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallSuper" (formula "41") (term "1"))
   (rule "methodBodyExpand" (formula "41") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallSuper" (formula "41") (term "1"))
   (rule "methodBodyExpand" (formula "41") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallSuper" (formula "41") (term "1"))
   (rule "methodBodyExpand" (formula "41") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallEmpty" (formula "41") (term "1"))
   (rule "blockEmpty" (formula "41") (term "1"))
   (rule "assignment_write_attribute_this" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "castDel" (formula "41") (term "1,0,1,0"))
   (rule "assignment_write_attribute_this" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "castDel" (formula "41") (term "1,0,1,0"))
   (rule "methodCallEmpty" (formula "41") (term "1"))
   (rule "methodCallEmpty" (formula "41") (term "1"))
   (rule "blockEmpty" (formula "41") (term "1"))
   (rule "assignment_write_attribute_this" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "assignment_write_attribute_this" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallEmpty" (formula "41") (term "1"))
   (rule "blockEmpty" (formula "41") (term "1"))
   (rule "methodCallReturnIgnoreResult" (formula "41") (term "1"))
   (rule "methodCallReturn" (formula "41") (term "1"))
   (rule "assignment" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallEmpty" (formula "41") (term "1"))
   (rule "blockEmpty" (formula "41") (term "1"))
   (rule "assignment" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "variableDeclarationAssign" (formula "41") (term "1"))
   (rule "variableDeclaration" (formula "41") (term "1") (newnames "var_2"))
   (rule "assignment" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "variableDeclarationAssign" (formula "41") (term "1"))
   (rule "variableDeclaration" (formula "41") (term "1") (newnames "var_3"))
   (rule "assignment" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodBodyExpand" (formula "41") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallSuper" (formula "41") (term "1"))
   (rule "methodBodyExpand" (formula "41") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallSuper" (formula "41") (term "1"))
   (rule "methodBodyExpand" (formula "41") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallSuper" (formula "41") (term "1"))
   (rule "methodBodyExpand" (formula "41") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallEmpty" (formula "41") (term "1"))
   (rule "blockEmpty" (formula "41") (term "1"))
   (rule "assignment_write_attribute_this" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "castDel" (formula "41") (term "1,0,1,0"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "assignment_write_attribute_this" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "castDel" (formula "41") (term "1,0,1,0"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallEmpty" (formula "41") (term "1"))
   (rule "methodCallEmpty" (formula "41") (term "1"))
   (rule "blockEmpty" (formula "41") (term "1"))
   (rule "assignment_write_attribute_this" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "assignment_write_attribute_this" (formula "41") (term "1"))
   (builtin "One Step Simplification" (formula "41"))
   (rule "methodCallEmpty" (formula "41") (term "1"))
   (rule "blockEmpty" (formula "41") (term "1"))
   (rule "assignment_write_attribute" (formula "41") (term "1"))
   (branch "Normal Execution (m_1 != null)"
      (builtin "One Step Simplification" (formula "42"))
      (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "28")))
      (rule "false_right" (formula "41"))
      (rule "assignment" (formula "41") (term "1"))
      (builtin "One Step Simplification" (formula "41"))
      (rule "blockEmpty" (formula "41") (term "1"))
      (rule "methodCallParamThrow" (formula "41") (term "1"))
      (builtin "One Step Simplification" (formula "41"))
      (rule "tryCatchThrow" (formula "41") (term "1"))
      (rule "ifElseUnfold" (formula "41") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "41") (term "1") (newnames "x_1"))
      (rule "equality_comparison_simple" (formula "41") (term "1"))
      (builtin "One Step Simplification" (formula "41"))
      (rule "replace_known_right" (formula "41") (term "0,0,1,0") (ifseqformula "28"))
      (builtin "One Step Simplification" (formula "41"))
      (rule "ifElseSplit" (formula "41"))
      (branch "if x_1 true"
         (builtin "One Step Simplification" (formula "42"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_1 false"
         (builtin "One Step Simplification" (formula "42"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifElseSplit" (formula "41"))
         (branch "if m instanceof java.lang.Throwable true"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "41") (term "1") (newnames "e"))
            (rule "reference_type_cast" (formula "41") (term "1"))
            (branch "Normal Execution (m instanceof java.lang.Throwable)"
               (builtin "One Step Simplification" (formula "42"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "41") (term "1"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "emptyModality" (formula "41") (term "1"))
               (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "28")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
               (rule "eqSymm" (formula "41") (term "1,0,0,1"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "41") (term "0") (ifseqformula "12"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "1,1,0,0,0,0,0,0,0"))
               (rule "nonNull" (formula "41") (term "1,0,0,0,0,0") (inst "i=i"))
               (rule "sub_literals" (formula "41") (term "2,1,0,1,1,1,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "greater_literals" (formula "41") (term "0,1,1,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,1,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
               (rule "nonNull" (formula "41") (term "1,0,0,0,0,0,0") (inst "i=i"))
               (rule "sub_literals" (formula "41") (term "2,1,0,1,1,1,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "greater_literals" (formula "41") (term "0,1,1,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,1,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,1,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,1,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
               (rule "nonNull" (formula "41") (term "1,0,0,0,0,0,0,0") (inst "i=i"))
               (rule "sub_literals" (formula "41") (term "2,1,0,1,1,1,0,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "greater_literals" (formula "41") (term "0,1,1,0,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "41") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,0"))
               (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0,1,1,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_0"))
               (rule "applyEq" (formula "42") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "42") (term "0,1,1,1,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "41") (term "0,0,1,0,0,0,0,0") (ifseqformula "31"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "pullOutSelect" (formula "41") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_0"))
               (rule "applyEq" (formula "42") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "42") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "41") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "29"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "applyEq" (formula "41") (term "1,1,1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "23"))
               (rule "applyEq" (formula "41") (term "1,1,1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "21"))
               (rule "pullOutSelect" (formula "41") (term "0,0,1,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "41") (term "0,1,0,0,0,0") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "pullOutSelect" (formula "41") (term "0,0,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,0,1,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "41") (term "0,1,0,0,0") (ifseqformula "35"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0,1,1,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_0"))
               (rule "applyEq" (formula "42") (term "0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "42") (term "0,1,1,1,0,0,1,1,0,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0,1,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1,1,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "41") (term "0,0,1,0,0,0,0") (ifseqformula "30"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "applyEq" (formula "41") (term "1,1,1,0,0,1,0,0,0,0") (ifseqformula "21"))
               (rule "pullOutSelect" (formula "41") (term "0,0,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "41") (term "0,0,0,0,0,0,0,0") (ifseqformula "32"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "pullOutSelect" (formula "41") (term "0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "41") (term "0,1,0") (ifseqformula "37"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "pullOutSelect" (formula "41") (term "0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "41") (term "0,0,0,0,0,0") (ifseqformula "33"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "pullOutSelect" (formula "41") (term "0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfCreate" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "42") (term "0,0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "41") (term "0,1,0") (ifseqformula "36"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "nnf_imp2or" (formula "41") (term "0,1,0"))
               (rule "nnf_imp2or" (formula "41") (term "0,0,0,0"))
               (rule "nnf_imp2or" (formula "41") (term "0,1,0,0"))
               (rule "nnf_notAnd" (formula "41") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,1,0"))
               (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "41") (term "0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "41") (term "0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0,0,0"))
               (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "41") (term "0,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,1,0,0"))
               (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,1,0,0"))
               (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1,0,0"))
               (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,1,0,0"))
               (rule "andRight" (formula "41"))
               (branch "Case 1"
                  (rule "andRight" (formula "41"))
                  (branch "Case 1"
                     (rule "andRight" (formula "41"))
                     (branch "Case 1"
                        (rule "allRight" (formula "41") (inst "sk=i_2"))
                        (rule "orRight" (formula "41"))
                        (rule "notRight" (formula "42"))
                        (rule "orRight" (formula "42"))
                        (rule "inEqSimp_geqRight" (formula "43"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "43"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfCreate" (formula "3"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
                        (rule "simplifySelectOfCreate" (formula "3"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "13") (ifseqformula "32"))
                        (rule "allLeft" (formula "27") (inst "t=i_2"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "27") (term "0,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "2"))
                        (rule "andLeft" (formula "27"))
                        (rule "inEqSimp_homoInEq1" (formula "27"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                        (rule "add_literals" (formula "27") (term "1,1,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0"))
                        (rule "add_zero_right" (formula "27") (term "0"))
                        (rule "leq_literals" (formula "27"))
                        (rule "closeFalse" (formula "27"))
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "41") (inst "sk=i_1"))
                        (rule "orRight" (formula "41"))
                        (rule "notRight" (formula "42"))
                        (rule "orRight" (formula "42"))
                        (rule "inEqSimp_geqRight" (formula "43"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "43"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfCreate" (formula "3"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
                        (rule "simplifySelectOfCreate" (formula "3"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "13") (ifseqformula "33"))
                        (rule "allLeft" (formula "28") (inst "t=i_1"))
                        (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                        (rule "add_literals" (formula "28") (term "0,0,1"))
                        (rule "leq_literals" (formula "28") (term "0,1"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "28") (term "0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "closeFalse" (formula "28"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "41") (inst "sk=i_0"))
                     (rule "orRight" (formula "41"))
                     (rule "notRight" (formula "42"))
                     (rule "orRight" (formula "42"))
                     (rule "inEqSimp_leqRight" (formula "42"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "43"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfCreate" (formula "3"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
                     (rule "simplifySelectOfCreate" (formula "3"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "13") (ifseqformula "34"))
                     (rule "allLeft" (formula "29") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                     (rule "add_literals" (formula "29") (term "0,0,1"))
                     (rule "leq_literals" (formula "29") (term "0,1"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "29") (term "0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "closeFalse" (formula "29"))
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "41") (inst "sk=f_0"))
                  (rule "allRight" (formula "41") (inst "sk=o_0"))
                  (rule "orRight" (formula "41"))
                  (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "43"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "34"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_6"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,1,0,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "47"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_and" (formula "7") (term "0,0"))
                  (rule "commute_and" (formula "6") (term "0,0"))
                  (rule "commute_and" (formula "5") (term "0,0"))
                  (rule "commute_and" (formula "4") (term "0,0"))
                  (rule "commute_and" (formula "3") (term "0,0"))
                  (rule "commute_and" (formula "2") (term "0,0"))
                  (rule "commute_and" (formula "1") (term "0,0"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch " f_0 = java.lang.Object::<created> ∧ o_0 = strPool(\"Received data is null.\") TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                     (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEq" (formula "48") (term "0,0,0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "48") (term "0,0"))
                     (rule "replace_known_right" (formula "48") (term "0,0") (ifseqformula "47"))
                     (builtin "One Step Simplification" (formula "48"))
                     (rule "notRight" (formula "48"))
                     (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "applyEqRigid" (formula "5") (term "0,1,0,0") (ifseqformula "3"))
                     (rule "eqSymm" (formula "5") (term "1,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "5") (term "1,0,0"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0"))
                     (rule "replace_known_right" (formula "5") (term "1,1,0,0") (ifseqformula "46"))
                     (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "34")))
                     (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "3"))
                     (rule "eqSymm" (formula "4") (term "1,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "4") (term "1,0,0"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0"))
                     (rule "replace_known_right" (formula "4") (term "0,1,0,0") (ifseqformula "32"))
                     (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "44")))
                     (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "applyEqRigid" (formula "44") (term "1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "44") (term "2,0") (ifseqformula "2"))
                     (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "13"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                     (rule "close" (formula "44") (ifseqformula "1"))
                  )
                  (branch " f_0 = java.lang.Object::<created> ∧ o_0 = strPool(\"Received data is null.\") FALSE"
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = m_3 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "2"))
                        (rule "sortsDisjointModuloNull" (formula "29"))
                        (rule "eqSymm" (formula "29") (term "1"))
                        (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "43"))
                        (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "31")))
                        (rule "false_right" (formula "29"))
                        (rule "applyEq" (formula "44") (term "2,0") (ifseqformula "1"))
                        (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "12"))
                        (rule "replace_known_right" (formula "43") (term "0,1") (ifseqformula "44"))
                        (builtin "One Step Simplification" (formula "43"))
                        (rule "notRight" (formula "43"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "3"))
                        (rule "close" (formula "31") (ifseqformula "3"))
                     )
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = m_3 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "f_0 = Throwable::$cause ∧ o_0 = m_3 TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "false_right" (formula "33"))
                           (rule "applyEqRigid" (formula "32") (term "0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "false_right" (formula "32"))
                           (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEq" (formula "45") (term "2,0") (ifseqformula "1"))
                           (rule "narrowSelectType" (formula "45") (term "0") (ifseqformula "13"))
                           (rule "eqSymm" (formula "45"))
                           (rule "applyEq" (formula "44") (term "1,0,0,1") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "44") (term "0,1") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "44"))
                           (rule "notRight" (formula "44"))
                           (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "eqSymm" (formula "44"))
                           (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3"))
                           (rule "close" (formula "31") (ifseqformula "3"))
                        )
                        (branch "f_0 = Throwable::$cause ∧ o_0 = m_3 FALSE"
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "f_0 = Throwable::$message ∧ o_0 = m_3 TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "false_right" (formula "34"))
                              (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "false_right" (formula "31"))
                              (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "applyEqRigid" (formula "29") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "false_right" (formula "29"))
                              (rule "applyEq" (formula "43") (term "0,0,0") (ifseqformula "2"))
                              (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "43"))
                              (rule "notRight" (formula "43"))
                              (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "44") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "13"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                              (rule "close" (formula "30") (ifseqformula "1"))
                           )
                           (branch "f_0 = Throwable::$message ∧ o_0 = m_3 FALSE"
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "f_0 = MalformedData::$errCode ∧ o_0 = m_3 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "false_right" (formula "34"))
                                 (rule "applyEq" (formula "31") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "false_right" (formula "31"))
                                 (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "applyEq" (formula "46") (term "1,0,0,1") (ifseqformula "2"))
                                 (rule "replace_known_right" (formula "46") (term "0,1") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "46"))
                                 (rule "notRight" (formula "46"))
                                 (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "false_right" (formula "30"))
                                 (rule "applyEq" (formula "30") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "false_right" (formula "30"))
                                 (rule "applyEqRigid" (formula "44") (term "2,0") (ifseqformula "2"))
                                 (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                 (rule "close" (formula "31") (ifseqformula "1"))
                              )
                              (branch "f_0 = MalformedData::$errCode ∧ o_0 = m_3 FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch "f_0 = MalformedData::$description ∧ o_0 = m_3 TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "false_right" (formula "34"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "false_right" (formula "33"))
                                    (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "applyEq" (formula "44") (term "0,0,0") (ifseqformula "2"))
                                    (rule "replace_known_right" (formula "44") (term "0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "notRight" (formula "44"))
                                    (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "3"))
                                    (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "applyEqRigid" (formula "44") (term "2,0") (ifseqformula "2"))
                                    (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                    (rule "close" (formula "30") (ifseqformula "1"))
                                 )
                                 (branch "f_0 = MalformedData::$description ∧ o_0 = m_3 FALSE"
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = m_3 TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "applyEqReverse" (formula "51") (term "1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "false_right" (formula "34"))
                                       (rule "applyEqRigid" (formula "29") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "false_right" (formula "29"))
                                       (rule "applyEq" (formula "48") (term "1,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "48") (term "2,0") (ifseqformula "1"))
                                       (rule "narrowSelectType" (formula "48") (term "0") (ifseqformula "12"))
                                       (rule "applyEq" (formula "47") (term "1,0,0,1") (ifseqformula "2"))
                                       (rule "replace_known_right" (formula "47") (term "0,1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "notRight" (formula "47"))
                                       (rule "applyEq" (formula "32") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "false_right" (formula "32"))
                                       (rule "applyEq" (formula "31") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "false_right" (formula "31"))
                                       (rule "applyEq" (formula "30") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "false_right" (formula "30"))
                                       (rule "applyEq" (formula "30") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "false_right" (formula "30"))
                                       (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                                       (rule "eqSymm" (formula "3"))
                                       (rule "close" (formula "31") (ifseqformula "3"))
                                    )
                                    (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = m_3 FALSE"
                                       (rule "close" (formula "50") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
            (branch "ClassCastException (!(m instanceof java.lang.Throwable))"
               (builtin "One Step Simplification" (formula "42"))
               (builtin "One Step Simplification" (formula "41"))
               (rule "closeTrue" (formula "41"))
            )
         )
         (branch "if m instanceof java.lang.Throwable false"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (m_1 = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "data = null FALSE"
   (rule "variableDeclarationAssign" (formula "11") (term "1") (userinteraction))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "ballotsAsAMessage") (userinteraction))
   (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_checkAndGetBallots,result_0,exc_0,heapAfter_checkAndGetBallots,anon_heap_checkAndGetBallots") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::checkAndGetBallots([B)].JML behavior operation contract.0"))
   (branch "Post (checkAndGetBallots)"
      (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "10") (userinteraction))
      (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "10") (userinteraction))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13") (userinteraction))
      (builtin "One Step Simplification" (formula "12"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "assignment" (formula "16") (term "1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "16") (term "1,1") (userinteraction))
      (rule "variableDeclaration" (formula "16") (term "1,1") (newnames "entr_arr") (userinteraction))
      (builtin "One Step Simplification" (formula "16"))
      (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_extractBallots,result_1,exc_1,heapAfter_extractBallots,anon_heap_extractBallots") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::extractBallots([B)].JML behavior operation contract.0"))
      (branch "Post (extractBallots)"
         (builtin "One Step Simplification" (formula "14"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,0,1,1,0,1,1") (ifseqformula "9"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,1,0") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,1,0") (ifseqformula "9"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "14"))
         (rule "andLeft" (formula "16"))
         (rule "typeEqDerived" (formula "18") (term "0,1,1,1,1") (ifseqformula "16"))
         (rule "typeEqDerived" (formula "18") (term "0,1,0,1,1,1") (ifseqformula "16"))
         (rule "typeEqDerived" (formula "18") (term "0,0,0,1,1,1") (ifseqformula "16"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "20"))
         (rule "notLeft" (formula "19"))
         (rule "orRight" (formula "21"))
         (rule "eqSymm" (formula "28") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "12"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "24"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "replace_known_right" (formula "17") (term "1,0,1") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "23")) (ifInst ""  (formula "21")))
         (rule "assignment" (formula "28") (term "1"))
         (builtin "One Step Simplification" (formula "28"))
         (rule "nonNull" (formula "20") (inst "i=i"))
         (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")))
         (rule "greater_literals" (formula "20") (term "0"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "12"))
         (rule "nonNull" (formula "28") (term "1,1,1,1,0,0,0,1") (inst "i=i"))
         (rule "greater_literals" (formula "28") (term "0,1,1,1,1,1,0,0,0,1"))
         (builtin "One Step Simplification" (formula "28"))
         (rule "sub_literals" (formula "28") (term "2,1,0,1,1,1,1,1,0,0,0,1"))
         (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "12"))
         (rule "eqSeqDef" (formula "12") (inst "iv=iv"))
         (rule "andLeft" (formula "12"))
         (rule "lenOfSeqDef" (formula "12") (term "1"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1"))
         (rule "times_zero_2" (formula "12") (term "1,1,1"))
         (rule "add_zero_right" (formula "12") (term "1,1"))
         (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,1,0,0"))
         (rule "getOfSeqDef" (formula "13") (term "1,1,0"))
         (rule "castDel" (formula "13") (term "1,1,1,0"))
         (rule "castDel" (formula "13") (term "2,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,2,1,1,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "13") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
         (rule "getOfSeqDef" (formula "13") (term "0,1,0"))
         (rule "castDel" (formula "13") (term "1,0,1,0"))
         (rule "castDel" (formula "13") (term "2,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "13") (term "1,1,1,0,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0"))
         (rule "lenOfSeqDef" (formula "12") (term "0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,0"))
         (rule "times_zero_2" (formula "12") (term "1,1,0"))
         (rule "add_zero_right" (formula "12") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
         (rule "apply_eq_monomials" (formula "13") (term "1,0,0,1,0,0") (ifseqformula "12"))
         (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "13") (term "1,1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "13") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1,0,0"))
         (rule "pullOutSelect" (formula "19") (term "1,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_2"))
         (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "16"))
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "27")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,0,0") (ifseqformula "9"))
         (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "27")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "20") (term "1,1") (ifseqformula "19"))
         (rule "hideAuxiliaryEq" (formula "19"))
         (rule "pullOutSelect" (formula "13") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_2"))
         (rule "applyEq" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
         (rule "applyEq" (formula "12") (term "0,0,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "13"))
         (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "27")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "14") (term "1,1,0,1,0") (ifseqformula "13"))
         (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
         (rule "applyEqReverse" (formula "12") (term "0,0,0,0") (ifseqformula "13"))
         (rule "applyEqReverse" (formula "12") (term "0,1,0") (ifseqformula "13"))
         (rule "hideAuxiliaryEq" (formula "13"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_imp2or" (formula "29") (term "0,1,1,1,1,1,0,0,0,1"))
         (rule "nnf_imp2or" (formula "13") (term "0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "13") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0"))
         (rule "Contract_axiom_for_ghostFieldsPre_in_MixServer" (formula "6") (term "0") (inst "i=i"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "27")) (ifInst ""  (formula "1")))
         (rule "eqSymm" (formula "6") (term "1,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,0,1,0,0,0,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,0,1"))
         (rule "eqSymm" (formula "6") (term "1,0,0,0,0,1"))
         (rule "eqSymm" (formula "6"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0,0,0,0,0"))
         (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
         (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
         (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "10"))
         (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "9"))
         (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "7") (term "1,0"))
         (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
         (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
         (rule "array2seqDef" (formula "10") (term "0,1") (inst "u=u"))
         (rule "eqSymm" (formula "10"))
         (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "1") (ifseqformula "34"))
         (rule "eqSymm" (formula "10"))
         (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "7") (term "0,0,1,1,0") (inst "u=u"))
         (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "11") (term "0") (inst "i=i"))
         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "6")) (ifInst ""  (formula "8")))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "eqSymm" (formula "15"))
         (rule "eqSymm" (formula "14"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "12"))
         (rule "eqSymm" (formula "11") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "10"))
         (rule "eqSymm" (formula "14"))
         (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "10"))
         (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "13") (term "0,0") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "13") (term "2,0,0") (ifseqformula "1") (ifseqformula "34"))
         (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "13") (term "0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "13"))
         (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "13") (term "1,1,1") (ifseqformula "12"))
         (rule "array2seqDef" (formula "11") (term "1,0,0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "11") (term "0,0,0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "11") (term "1,0"))
         (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "nnf_imp2or" (formula "7") (term "0"))
         (rule "nnf_notAnd" (formula "33") (term "0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "add_literals" (formula "33") (term "0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "33") (term "1,0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "nnf_notAnd" (formula "7") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "11") (ifseqformula "3"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "13"))
         (rule "notLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "13"))
         (rule "notLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "12"))
         (rule "notLeft" (formula "11"))
         (rule "narrowSelectArrayType" (formula "7") (term "2,0,0,1,1,0") (ifseqformula "1") (ifseqformula "33"))
         (rule "nonNull" (formula "13") (inst "i=i"))
         (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "greater_literals" (formula "13") (term "0,1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "notLeft" (formula "13"))
         (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "28"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "12") (inst "i=i"))
         (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "greater_literals" (formula "12") (term "0,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "notLeft" (formula "12"))
         (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "28"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
         (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "11") (inst "i=i"))
         (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "greater_literals" (formula "11") (term "0,1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "28"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "10"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "13") (term "0"))
         (rule "nnf_imp2or" (formula "12") (term "0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "13") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "12") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
         (rule "commute_or_2" (formula "27") (term "0"))
         (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "30")) (ifInst ""  (formula "29")) (ifInst ""  (formula "28")) (ifInst ""  (formula "32")) (ifInst ""  (formula "31")))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "nnf_imp2or" (formula "6") (term "0"))
         (rule "nnf_imp2or" (formula "8") (term "0"))
         (rule "nnf_imp2or" (formula "7") (term "0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "25") (ifseqformula "3"))
         (rule "replaceKnownSelect_taclet001_0" (formula "25") (term "1,1,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_2" (formula "25") (term "1,1,0,0,0,0"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "27"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "26"))
         (rule "notLeft" (formula "25"))
         (rule "nonNull" (formula "27") (inst "i=i"))
         (rule "greater_literals" (formula "27") (term "0,1"))
         (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "37")))
         (rule "sub_literals" (formula "27") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "26") (inst "i=i"))
         (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "greater_literals" (formula "26") (term "0,1"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "notLeft" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "25") (inst "i=i"))
         (rule "greater_literals" (formula "25") (term "0,1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "sub_literals" (formula "25") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "25"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_3"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
         (rule "replaceKnownSelect_taclet001_3" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_4" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_2"))
         (rule "applyEq" (formula "31") (term "0") (ifseqformula "26"))
         (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
         (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "45")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "45")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
         (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "26"))
         (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
         (rule "hideAuxiliaryEq" (formula "26"))
         (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "8"))
         (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_2"))
         (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
         (rule "applyEq" (formula "30") (term "0") (ifseqformula "25"))
         (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "44")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "44")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
         (rule "hideAuxiliaryEq" (formula "25"))
         (rule "applyEq" (formula "25") (term "1,1,1,0,0") (ifseqformula "9"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "19") (ifseqformula "3"))
         (rule "replaceKnownSelect_taclet001_6" (formula "19") (term "0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_7" (formula "19") (term "0,0,1"))
         (rule "replaceKnownSelect_taclet001_9" (formula "19") (term "0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_10" (formula "19") (term "0,0,1,0"))
         (rule "replaceKnownSelect_taclet001_12" (formula "19") (term "0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_13" (formula "19") (term "0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet001_1" (formula "19") (term "1,1,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_15" (formula "19") (term "0,0,1,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_2" (formula "19") (term "1,1,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_16" (formula "19") (term "0,0,1,0,0,0"))
         (rule "replaceKnownSelect_taclet001_23" (formula "19") (term "1,1,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_26" (formula "19") (term "1,1,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_24" (formula "19") (term "1,1,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_27" (formula "19") (term "1,1,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_20" (formula "19") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_3" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_21" (formula "19") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_4" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "21"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "21"))
         (rule "notLeft" (formula "20"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "20"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "19"))
         (rule "notLeft" (formula "19"))
         (rule "nonNull" (formula "21") (inst "i=i"))
         (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "33")))
         (rule "greater_literals" (formula "21") (term "0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "20") (inst "i=i"))
         (rule "greater_literals" (formula "20") (term "0,1"))
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "32")))
         (rule "sub_literals" (formula "20") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
         (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "19") (inst "i=i"))
         (rule "greater_literals" (formula "19") (term "0,1"))
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "31")))
         (rule "sub_literals" (formula "19") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "arrayLengthNotNegative" (formula "17") (term "1,1"))
         (rule "arrayLengthIsAShort" (formula "18") (term "1,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "commute_or_2" (formula "12") (term "0"))
         (rule "nnf_imp2or" (formula "28") (term "0"))
         (rule "commute_or_2" (formula "11") (term "0"))
         (rule "methodCallReturn" (formula "48") (term "1"))
         (rule "assignment" (formula "48") (term "1"))
         (builtin "One Step Simplification" (formula "48"))
         (rule "commute_or_2" (formula "10") (term "0"))
         (rule "commute_or" (formula "31") (term "0,0"))
         (rule "nnf_imp2or" (formula "22") (term "0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "arrayLengthNotNegative" (formula "18") (term "0,0,0"))
         (rule "arrayLengthIsAShort" (formula "19") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "commute_or" (formula "20") (term "0,0"))
         (rule "nnf_notAnd" (formula "31") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
         (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
         (rule "mul_literals" (formula "31") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "30") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
         (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0"))
         (rule "arrayLengthIsAShort" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "arrayLengthNotNegative" (formula "9") (term "0"))
         (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
         (rule "arrayLengthNotNegative" (formula "8") (term "0"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
         (rule "arrayLengthIsAShort" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "arrayLengthNotNegative" (formula "8") (term "1"))
         (rule "arrayLengthIsAShort" (formula "8") (term "0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "arrayLengthIsAShort" (formula "33") (term "1,1,0"))
         (builtin "One Step Simplification" (formula "33"))
         (rule "true_left" (formula "33"))
         (rule "arrayLengthNotNegative" (formula "33") (term "1,1,0"))
         (rule "commute_or" (formula "6") (term "0,0"))
         (rule "commute_or" (formula "13") (term "0,0"))
         (rule "commute_or" (formula "12") (term "0,0"))
         (rule "commute_or" (formula "11") (term "0,0"))
         (rule "commute_or_2" (formula "32") (term "0"))
         (rule "commute_or_2" (formula "31") (term "0"))
         (rule "commute_or_2" (formula "30") (term "0"))
         (rule "commute_or_2" (formula "24") (term "0"))
         (rule "commute_or_2" (formula "23") (term "0"))
         (rule "commute_or_2" (formula "22") (term "0"))
         (rule "methodCallEmpty" (formula "51") (term "1"))
         (rule "commute_or" (formula "32") (term "0,0"))
         (rule "commute_or" (formula "31") (term "0,0"))
         (rule "commute_or" (formula "30") (term "0,0"))
         (rule "commute_or" (formula "24") (term "0,0"))
         (rule "commute_or" (formula "23") (term "0,0"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
         (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
         (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,0,1,1,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,1,1,0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,0,0,0"))
         (rule "commute_or" (formula "21") (term "0,0"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "commute_or_2" (formula "21") (term "0,1,0"))
         (rule "commute_or" (formula "21") (term "1,1,0"))
         (rule "commute_or" (formula "21") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
         (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
         (rule "tryEmpty" (formula "51") (term "1"))
         (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
         (rule "commute_or" (formula "21") (term "1,1,1,0"))
         (rule "cnf_rightDist" (formula "21") (term "0"))
         (rule "distr_forallAnd" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "commute_or" (formula "22") (term "0"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "commute_or_2" (formula "22") (term "0,1,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0,1,0"))
         (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0"))
         (rule "qeq_literals" (formula "22") (term "1,0,0,1,0"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "commute_or_2" (formula "22") (term "0"))
         (rule "shift_paren_or" (formula "21") (term "0,0"))
         (rule "shift_paren_or" (formula "22") (term "0,0"))
         (rule "shift_paren_or" (formula "21") (term "0,0,0"))
         (rule "shift_paren_or" (formula "22") (term "0,0,0"))
         (rule "commute_or" (formula "21") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "shift_paren_or" (formula "22") (term "0,0,0,0"))
         (rule "commute_or" (formula "22") (term "0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "emptyModality" (formula "52") (term "1"))
         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "45")) (ifInst ""  (formula "47")) (ifInst ""  (formula "47")))
         (rule "replaceKnownSelect_taclet001_0" (formula "52") (term "1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_2" (formula "52") (term "1,1,0,0"))
         (rule "eqSymm" (formula "52") (term "1,0,0,1"))
         (rule "replace_known_left" (formula "52") (term "0,0") (ifseqformula "30"))
         (builtin "One Step Simplification" (formula "52"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "52") (term "0,0") (ifseqformula "3"))
         (rule "replaceKnownSelect_taclet001_5" (formula "52") (term "0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_7" (formula "52") (term "0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet001_8" (formula "52") (term "0,0,1,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_10" (formula "52") (term "0,0,1,0,0,0"))
         (rule "replaceKnownSelect_taclet001_11" (formula "52") (term "0,0,1,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_13" (formula "52") (term "0,0,1,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_0" (formula "52") (term "1,1,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_14" (formula "52") (term "0,0,1,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_2" (formula "52") (term "1,1,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_16" (formula "52") (term "0,0,1,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_22" (formula "52") (term "1,1,0,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_25" (formula "52") (term "1,1,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_24" (formula "52") (term "1,1,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_27" (formula "52") (term "1,1,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_19" (formula "52") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet001_17" (formula "52") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_21" (formula "52") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_18" (formula "52") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "replace_known_right" (formula "52") (term "0,1,0,0,0,0") (ifseqformula "42"))
         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "39")) (ifInst ""  (formula "40")) (ifInst ""  (formula "41")) (ifInst ""  (formula "43")) (ifInst ""  (formula "44")))
         (rule "nonNull" (formula "52") (term "1,0,0,0") (inst "i=i"))
         (rule "sub_literals" (formula "52") (term "2,1,0,1,1,1,0,0,0"))
         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "37")))
         (rule "greater_literals" (formula "52") (term "0,1,0,0,0"))
         (builtin "One Step Simplification" (formula "52"))
         (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,1,0,0,0"))
         (rule "applyEq" (formula "52") (term "0,1,0,0,1,0,0,1,0,0,0") (ifseqformula "8"))
         (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "52") (term "0,1,1,0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0,1,0,0,0"))
         (rule "nonNull" (formula "52") (term "0,0,0,0") (inst "i=i"))
         (rule "sub_literals" (formula "52") (term "2,1,0,1,1,0,0,0,0"))
         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "36")))
         (rule "greater_literals" (formula "52") (term "0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "52"))
         (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,0,0,0,0"))
         (rule "applyEq" (formula "52") (term "0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "10"))
         (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "52") (term "0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0,0,0,0,0"))
         (rule "nonNull" (formula "52") (term "1,0,0") (inst "i=i"))
         (rule "greater_literals" (formula "52") (term "0,1,1,0,0"))
         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "38")))
         (rule "sub_literals" (formula "52") (term "2,1,0,1,0,0"))
         (builtin "One Step Simplification" (formula "52"))
         (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "52") (term "0,1,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0,1,0,0"))
         (rule "nnf_imp2or" (formula "52") (term "0,1,0,0"))
         (rule "nnf_imp2or" (formula "52") (term "0,1,0,0,0"))
         (rule "nnf_imp2or" (formula "52") (term "0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "52") (term "0,0,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "52") (term "0,0,0,1,0,0"))
         (rule "times_zero_1" (formula "52") (term "1,0,0,0,0,0,1,0,0"))
         (rule "add_zero_right" (formula "52") (term "0,0,0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "0,0,0,1,0,0"))
         (rule "mul_literals" (formula "52") (term "1,0,0,0,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "52") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0,1,0,0"))
         (rule "add_literals" (formula "52") (term "0,0,0,1,0,0,1,0,0"))
         (rule "add_zero_left" (formula "52") (term "0,0,1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0,1,0,0"))
         (rule "nnf_notAnd" (formula "52") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "52") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "52") (term "0,0,0,1,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "52") (term "0,0,1,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "52") (term "0,0,0,1,0,0,0"))
         (rule "times_zero_1" (formula "52") (term "1,0,0,0,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "52") (term "0,0,0,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "0,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "52") (term "1,0,0,0,1,0,0,0"))
         (rule "nnf_notAnd" (formula "52") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "52") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "52") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "52") (term "0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "52") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "52") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "52") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "52") (term "1,0,0,0,0,0,0,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "cut_direct" (formula "18") (term "0"))
         (branch "CUT: result_0.<created> = TRUE TRUE"
            (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "1,1") (ifseqformula "2"))
            (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "40"))
            (builtin "One Step Simplification" (formula "31"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0,0,0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "43"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "ifthenelse_to_or_left" (formula "23") (term "0,0,0,0"))
            (rule "eqSymm" (formula "23") (term "1,1,0,0,0,0"))
            (rule "eqSymm" (formula "23") (term "1,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0,0"))
            (rule "commute_or" (formula "23") (term "0,0,0"))
            (rule "commute_or_2" (formula "23") (term "0,0"))
            (rule "commute_or_2" (formula "23") (term "0"))
            (rule "commute_or" (formula "23") (term "1,1,0"))
            (rule "commute_or_2" (formula "23") (term "0,1,0"))
            (rule "andRight" (formula "55"))
            (branch "Case 1"
               (rule "commute_or" (formula "23") (term "0,0,1,0"))
               (rule "ifthenelse_split" (formula "22") (term "1"))
               (branch "result_0.length ≥ 1 TRUE"
                  (rule "replace_known_left" (formula "25") (term "0,1,1,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "replace_known_left" (formula "24") (term "0,1,1,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "22"))
                  (rule "leq_literals" (formula "19") (term "0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "commute_or_2" (formula "24") (term "0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "commute_or_2" (formula "23") (term "0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "ifthenelse_split" (formula "24") (term "0"))
                  (branch "self.concatenated.length ≥ 1 TRUE"
                     (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "24"))
                     (rule "applyEq" (formula "26") (term "1,1,1,0") (ifseqformula "24"))
                     (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "23"))
                     (rule "leq_literals" (formula "21") (term "0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "inEqSimp_or_tautInEq3" (formula "25") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,0"))
                     (rule "add_literals" (formula "25") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "25") (term "0,1,0"))
                     (rule "leq_literals" (formula "25") (term "1,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "andRight" (formula "55"))
                     (branch "Case 1"
                        (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "3"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "4"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "arrayLengthIsAShort" (formula "12") (term "1,0,0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "andRight" (formula "61"))
                        (branch "Case 1"
                           (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                           (rule "cnf_rightDist" (formula "30") (term "0"))
                           (rule "distr_forallAnd" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31") (term "0"))
                           (rule "shift_paren_or" (formula "30") (term "0"))
                           (rule "commute_or_2" (formula "30") (term "0,0"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "commute_or" (formula "31") (term "1,1,0"))
                           (rule "shift_paren_or" (formula "30") (term "0,0"))
                           (rule "commute_or" (formula "30") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "cnf_rightDist" (formula "31") (term "0"))
                           (rule "distr_forallAnd" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "commute_or_2" (formula "31") (term "0"))
                           (rule "shift_paren_or" (formula "32") (term "0"))
                           (rule "commute_or_2" (formula "32") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0"))
                           (rule "add_literals" (formula "32") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "32") (term "0,1,0"))
                           (rule "leq_literals" (formula "32") (term "1,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "shift_paren_or" (formula "31") (term "0,0"))
                           (rule "andRight" (formula "62"))
                           (branch "Case 1"
                              (rule "allRight" (formula "62") (inst "sk=i_21"))
                              (rule "orRight" (formula "62"))
                              (rule "orRight" (formula "62"))
                              (rule "notRight" (formula "64"))
                              (rule "inEqSimp_leqRight" (formula "63"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "64"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_21"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "22")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "49"))
                              (rule "commute_or" (formula "34") (term "0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "34") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "allLeft" (formula "23") (inst "t=i_21"))
                              (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                              (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "23") (term "0,0,1"))
                              (rule "leq_literals" (formula "23") (term "0,1"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "23"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "62") (inst "sk=i_20"))
                              (rule "orRight" (formula "62"))
                              (rule "orRight" (formula "62"))
                              (rule "notRight" (formula "64"))
                              (rule "inEqSimp_leqRight" (formula "63"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "64"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_20"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "19")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "50"))
                              (rule "commute_or" (formula "34") (term "0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "34") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "allLeft" (formula "24") (inst "t=i_20"))
                              (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "24") (term "0,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "61") (inst "sk=i_19"))
                           (rule "orRight" (formula "61"))
                           (rule "notRight" (formula "62"))
                           (rule "orRight" (formula "62"))
                           (rule "inEqSimp_leqRight" (formula "62"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "63"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_19"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "39"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "42")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "50"))
                           (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                           (rule "cnf_rightDist" (formula "33") (term "0"))
                           (rule "distr_forallAnd" (formula "33"))
                           (rule "andLeft" (formula "33"))
                           (rule "commute_or" (formula "34") (term "0"))
                           (rule "shift_paren_or" (formula "33") (term "0"))
                           (rule "commute_or_2" (formula "33") (term "0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "commute_or" (formula "34") (term "1,1,0"))
                           (rule "shift_paren_or" (formula "33") (term "0,0"))
                           (rule "commute_or" (formula "33") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "cnf_rightDist" (formula "34") (term "0"))
                           (rule "distr_forallAnd" (formula "34"))
                           (rule "andLeft" (formula "34"))
                           (rule "commute_or_2" (formula "34") (term "0"))
                           (rule "shift_paren_or" (formula "35") (term "0"))
                           (rule "commute_or_2" (formula "35") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                           (rule "add_literals" (formula "35") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "35") (term "0,1,0"))
                           (rule "leq_literals" (formula "35") (term "1,0"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "shift_paren_or" (formula "34") (term "0,0"))
                           (rule "commute_or" (formula "34") (term "0,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                           (rule "add_literals" (formula "34") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "34") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "allLeft" (formula "25") (inst "t=i_19"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "25") (term "0,0,1"))
                           (rule "leq_literals" (formula "25") (term "0,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "25") (term "0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "55") (inst "sk=i_18"))
                        (rule "orRight" (formula "55"))
                        (rule "notRight" (formula "56"))
                        (rule "orRight" (formula "56"))
                        (rule "inEqSimp_leqRight" (formula "56"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "57"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_18"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "3") (term "1,0,0,0") (ifseqformula "53"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "31") (ifseqformula "53"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "8"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "9"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "arrayLengthIsAShort" (formula "15") (term "1,0,0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "arrayLengthNotNegative" (formula "15") (term "1,0,0,1,0,0,0"))
                        (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                        (rule "cnf_rightDist" (formula "33") (term "0"))
                        (rule "distr_forallAnd" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "commute_or" (formula "34") (term "0"))
                        (rule "shift_paren_or" (formula "33") (term "0"))
                        (rule "commute_or_2" (formula "33") (term "0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "commute_or" (formula "34") (term "1,1,0"))
                        (rule "shift_paren_or" (formula "33") (term "0,0"))
                        (rule "commute_or" (formula "33") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "cnf_rightDist" (formula "34") (term "0"))
                        (rule "distr_forallAnd" (formula "34"))
                        (rule "andLeft" (formula "34"))
                        (rule "commute_or_2" (formula "34") (term "0"))
                        (rule "shift_paren_or" (formula "35") (term "0"))
                        (rule "commute_or_2" (formula "35") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                        (rule "add_literals" (formula "35") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "35") (term "0,1,0"))
                        (rule "leq_literals" (formula "35") (term "1,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "shift_paren_or" (formula "34") (term "0,0"))
                        (rule "commute_or" (formula "34") (term "0,0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                        (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "34") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "allLeft" (formula "47") (inst "t=i_18"))
                        (rule "replaceKnownSelect_taclet10000001_28" (formula "47") (term "0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000001_29" (formula "47") (term "0,0,0,0"))
                        (rule "narrowSelectArrayType" (formula "47") (term "0,0,0,0") (ifseqformula "37") (ifseqformula "60"))
                        (rule "replace_known_left" (formula "47") (term "0,0,0") (ifseqformula "8"))
                        (builtin "One Step Simplification" (formula "47"))
                        (rule "inEqSimp_commuteGeq" (formula "47") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "47") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "47") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,1"))
                        (rule "add_literals" (formula "47") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "47") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "47") (term "0,0,1"))
                        (rule "leq_literals" (formula "47") (term "0,1"))
                        (builtin "One Step Simplification" (formula "47"))
                        (rule "inEqSimp_contradInEq1" (formula "47") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "47") (term "0"))
                        (builtin "One Step Simplification" (formula "47"))
                        (rule "closeFalse" (formula "47"))
                     )
                  )
                  (branch "self.concatenated.length ≥ 1 FALSE"
                     (rule "eqSymm" (formula "24"))
                     (rule "inEqSimp_geqRight" (formula "41"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "25"))
                     (rule "applyEq" (formula "26") (term "1,1,0,1,0") (ifseqformula "25"))
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                     (rule "qeq_literals" (formula "24"))
                     (rule "closeFalse" (formula "24"))
                  )
               )
               (branch "result_0.length ≥ 1 FALSE"
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "replace_known_right" (formula "23") (term "0,1,1,0,0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "replace_known_right" (formula "24") (term "0,1,1,0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_geqRight" (formula "39"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "1"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                  (rule "qeq_literals" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "20"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "20"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "23") (term "1,1,1,1,1,1,0") (ifseqformula "19"))
                  (rule "add_zero_right" (formula "23") (term "1,1,1,1,1,0"))
                  (rule "applyEq" (formula "23") (term "1,1,0,1,0") (ifseqformula "19"))
                  (rule "inEqSimp_notGeq" (formula "22") (term "0"))
                  (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0"))
                  (rule "add_zero_left" (formula "22") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "24") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0,1,0"))
                  (rule "add_zero_right" (formula "23") (term "1,1,0,1,0"))
                  (rule "qeq_literals" (formula "23") (term "1,0,1,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "commute_or_2" (formula "23") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq0" (formula "23") (term "0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "23") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "38"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "andRight" (formula "55"))
                  (branch "Case 1"
                     (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "3"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "4"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "andRight" (formula "61"))
                     (branch "Case 1"
                        (rule "andRight" (formula "61"))
                        (branch "Case 1"
                           (rule "allRight" (formula "61") (inst "sk=i_17"))
                           (rule "orRight" (formula "61"))
                           (rule "orRight" (formula "61"))
                           (rule "notRight" (formula "63"))
                           (rule "inEqSimp_leqRight" (formula "62"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "63"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_17"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "39"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "22")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "48"))
                           (rule "allLeft" (formula "23") (inst "t=i_17"))
                           (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "23") (term "0,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "1"))
                           (rule "andLeft" (formula "23"))
                           (rule "inEqSimp_homoInEq1" (formula "23"))
                           (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                           (rule "add_literals" (formula "23") (term "1,1,0"))
                           (rule "times_zero_1" (formula "23") (term "1,0"))
                           (rule "add_zero_right" (formula "23") (term "0"))
                           (rule "leq_literals" (formula "23"))
                           (rule "closeFalse" (formula "23"))
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "61") (inst "sk=i_16"))
                           (rule "orRight" (formula "61"))
                           (rule "orRight" (formula "61"))
                           (rule "notRight" (formula "63"))
                           (rule "inEqSimp_leqRight" (formula "62"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "63"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_16"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "39"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "19")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "49"))
                           (rule "allLeft" (formula "24") (inst "t=i_16"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "24") (term "0,0,1"))
                           (rule "leq_literals" (formula "24") (term "0,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "24"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "61") (inst "sk=i_15"))
                        (rule "orRight" (formula "61"))
                        (rule "orRight" (formula "61"))
                        (rule "notRight" (formula "63"))
                        (rule "inEqSimp_geqRight" (formula "63"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "63"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_15"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "39"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "42"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "42")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "50"))
                        (rule "allLeft" (formula "25") (inst "t=i_15"))
                        (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "25") (term "0,0"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                        (rule "andLeft" (formula "25"))
                        (rule "inEqSimp_homoInEq1" (formula "25"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0"))
                        (rule "add_zero_right" (formula "25") (term "0"))
                        (rule "leq_literals" (formula "25"))
                        (rule "closeFalse" (formula "25"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "55") (inst "sk=i_14"))
                     (rule "orRight" (formula "55"))
                     (rule "orRight" (formula "55"))
                     (rule "notRight" (formula "57"))
                     (rule "inEqSimp_leqRight" (formula "56"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "57"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_14"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "52"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "31") (ifseqformula "53"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "8"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "9"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "arrayLengthIsAShort" (formula "15") (term "1,0,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "arrayLengthNotNegative" (formula "15") (term "1,0,0,1,0,0,0"))
                     (rule "allLeft" (formula "47") (inst "t=i_14"))
                     (rule "replaceKnownSelect_taclet1100001_28" (formula "47") (term "0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100001_29" (formula "47") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "47") (term "0,0,0,0") (ifseqformula "37") (ifseqformula "60"))
                     (rule "replace_known_left" (formula "47") (term "0,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "47"))
                     (rule "inEqSimp_commuteGeq" (formula "47") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "47") (term "0") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "47") (term "0,0"))
                     (builtin "One Step Simplification" (formula "47"))
                     (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "47"))
                     (rule "andLeft" (formula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "6"))
                     (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                     (rule "add_literals" (formula "6") (term "1,1,0"))
                     (rule "times_zero_1" (formula "6") (term "1,0"))
                     (rule "add_zero_right" (formula "6") (term "0"))
                     (rule "leq_literals" (formula "6"))
                     (rule "closeFalse" (formula "6"))
                  )
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "55") (inst "sk=f_3"))
               (rule "allRight" (formula "55") (inst "sk=o_3"))
               (rule "orRight" (formula "55"))
               (rule "pullOutSelect" (formula "56") (term "0") (inst "selectSK=f_3_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
               (rule "eqSymm" (formula "57"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_3_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_or" (formula "24") (term "0,0,1,0"))
               (rule "ifthenelse_split" (formula "23") (term "1"))
               (branch "result_0.length ≥ 1 TRUE"
                  (rule "replace_known_left" (formula "25") (term "0,1,1,0,0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "replace_known_left" (formula "26") (term "0,1,1,0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "23"))
                  (rule "leq_literals" (formula "20") (term "0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "commute_or_2" (formula "25") (term "0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "commute_or_2" (formula "24") (term "0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "ifthenelse_split" (formula "25") (term "0"))
                  (branch "self.concatenated.length ≥ 1 TRUE"
                     (rule "applyEq" (formula "28") (term "1,1,1,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "26"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                     (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "24"))
                     (rule "leq_literals" (formula "22") (term "0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "inEqSimp_or_tautInEq3" (formula "26") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0"))
                     (rule "add_literals" (formula "26") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "26") (term "0,1,0"))
                     (rule "leq_literals" (formula "26") (term "1,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "3"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "4"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "13") (term "1,0,0,1,0,0,0"))
                     (rule "arrayLengthIsAShort" (formula "14") (term "1,0,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "cnf_rightDist" (formula "31") (term "1,1,0"))
                     (rule "cnf_rightDist" (formula "31") (term "0"))
                     (rule "distr_forallAnd" (formula "31"))
                     (rule "andLeft" (formula "31"))
                     (rule "commute_or" (formula "32") (term "0"))
                     (rule "shift_paren_or" (formula "31") (term "0"))
                     (rule "commute_or_2" (formula "31") (term "0,0"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "commute_or" (formula "32") (term "1,1,0"))
                     (rule "shift_paren_or" (formula "31") (term "0,0"))
                     (rule "commute_or" (formula "31") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "cnf_rightDist" (formula "32") (term "0"))
                     (rule "distr_forallAnd" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "commute_or_2" (formula "32") (term "0"))
                     (rule "shift_paren_or" (formula "33") (term "0"))
                     (rule "commute_or_2" (formula "33") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0"))
                     (rule "add_literals" (formula "33") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "33") (term "0,1,0"))
                     (rule "leq_literals" (formula "33") (term "1,0"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "true_left" (formula "33"))
                     (rule "shift_paren_or" (formula "32") (term "0,0"))
                     (rule "commute_or" (formula "32") (term "0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                     (rule "add_zero_right" (formula "32") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "32") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "true_left" (formula "32"))
                     (rule "ifthenelse_split" (formula "6") (term "0"))
                     (branch " ¬o_3 = null ∧ ¬( o_3.<created> = TRUE ∨ o_3.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                        (rule "andLeft" (formula "6"))
                        (rule "notLeft" (formula "6"))
                        (rule "notLeft" (formula "6"))
                        (rule "orRight" (formula "46"))
                        (rule "applyEqReverse" (formula "66") (term "1") (ifseqformula "6"))
                        (rule "hideAuxiliaryEq" (formula "6"))
                        (rule "eqSymm" (formula "65"))
                        (rule "replace_known_right" (formula "64") (term "0,1") (ifseqformula "45"))
                        (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "47")))
                        (rule "closeTrue" (formula "64"))
                     )
                     (branch " ¬o_3 = null ∧ ¬( o_3.<created> = TRUE ∨ o_3.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                        (rule "close" (formula "64") (ifseqformula "6"))
                     )
                  )
                  (branch "self.concatenated.length ≥ 1 FALSE"
                     (rule "eqSymm" (formula "25"))
                     (rule "inEqSimp_geqRight" (formula "42"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "27") (term "1,1,0,0,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "27") (term "1,1,1,1,1,1,0") (ifseqformula "26"))
                     (rule "add_zero_right" (formula "27") (term "1,1,1,1,1,0"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                     (rule "qeq_literals" (formula "25"))
                     (rule "closeFalse" (formula "25"))
                  )
               )
               (branch "result_0.length ≥ 1 FALSE"
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "replace_known_right" (formula "25") (term "0,1,1,0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "replace_known_right" (formula "24") (term "0,1,1,0,0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_geqRight" (formula "40"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "25") (term "1,1,1,1,1,1,0") (ifseqformula "20"))
                  (rule "add_zero_right" (formula "25") (term "1,1,1,1,1,0"))
                  (rule "applyEq" (formula "25") (term "1,1,0,1,0") (ifseqformula "20"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                  (rule "qeq_literals" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "20"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0,1,0"))
                  (rule "add_zero_right" (formula "24") (term "1,1,0,1,0"))
                  (rule "qeq_literals" (formula "24") (term "1,0,1,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0,0,0"))
                  (rule "add_zero_right" (formula "25") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "25") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "commute_or_2" (formula "24") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq0" (formula "24") (term "0,0,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "24") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "13") (term "1,0,0,1,0,0,0"))
                  (rule "arrayLengthIsAShort" (formula "14") (term "1,0,0,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "ifthenelse_split" (formula "6") (term "0"))
                  (branch " ¬o_3 = null ∧ ¬( o_3.<created> = TRUE ∨ o_3.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                     (rule "andLeft" (formula "6"))
                     (rule "notLeft" (formula "6"))
                     (rule "notLeft" (formula "6"))
                     (rule "orRight" (formula "46"))
                     (rule "applyEqReverse" (formula "66") (term "1") (ifseqformula "6"))
                     (rule "hideAuxiliaryEq" (formula "6"))
                     (rule "eqSymm" (formula "65"))
                     (rule "replace_known_right" (formula "64") (term "0,1") (ifseqformula "45"))
                     (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "47")))
                     (rule "closeTrue" (formula "64"))
                  )
                  (branch " ¬o_3 = null ∧ ¬( o_3.<created> = TRUE ∨ o_3.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                     (rule "close" (formula "64") (ifseqformula "6"))
                  )
               )
            )
         )
         (branch "CUT: result_0.<created> = TRUE FALSE"
            (builtin "One Step Simplification" (formula "18"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "1,1") (ifseqformula "2"))
            (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "41"))
            (builtin "One Step Simplification" (formula "31"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0,0,0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "44"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "ifthenelse_to_or_left" (formula "23") (term "0,0,0,0"))
            (rule "eqSymm" (formula "23") (term "1,0,0,0,0,0"))
            (rule "eqSymm" (formula "23") (term "1,1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,0"))
            (rule "commute_or" (formula "23") (term "0,0,0"))
            (rule "commute_or_2" (formula "23") (term "0,0"))
            (rule "commute_or_2" (formula "23") (term "0"))
            (rule "commute_or" (formula "23") (term "1,1,0"))
            (rule "commute_or_2" (formula "23") (term "0,1,0"))
            (rule "andRight" (formula "56"))
            (branch "Case 1"
               (rule "commute_or" (formula "23") (term "0,0,1,0"))
               (rule "ifthenelse_split" (formula "22") (term "1"))
               (branch "result_0.length ≥ 1 TRUE"
                  (rule "replace_known_left" (formula "25") (term "0,1,1,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "replace_known_left" (formula "24") (term "0,1,1,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "22"))
                  (rule "leq_literals" (formula "19") (term "0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "commute_or_2" (formula "24") (term "0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "commute_or_2" (formula "23") (term "0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "43"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "ifthenelse_split" (formula "24") (term "0"))
                  (branch "self.concatenated.length ≥ 1 TRUE"
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                     (rule "applyEq" (formula "26") (term "1,1,1,0") (ifseqformula "24"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "24"))
                     (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "23"))
                     (rule "leq_literals" (formula "21") (term "0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "inEqSimp_or_tautInEq3" (formula "25") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,0"))
                     (rule "add_literals" (formula "25") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "25") (term "0,1,0"))
                     (rule "leq_literals" (formula "25") (term "1,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "andRight" (formula "56"))
                     (branch "Case 1"
                        (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "3"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "4"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "arrayLengthIsAShort" (formula "12") (term "1,0,0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "andRight" (formula "62"))
                        (branch "Case 1"
                           (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                           (rule "cnf_rightDist" (formula "30") (term "0"))
                           (rule "distr_forallAnd" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31") (term "0"))
                           (rule "shift_paren_or" (formula "30") (term "0"))
                           (rule "commute_or_2" (formula "30") (term "0,0"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "commute_or" (formula "31") (term "1,1,0"))
                           (rule "shift_paren_or" (formula "30") (term "0,0"))
                           (rule "commute_or" (formula "30") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "cnf_rightDist" (formula "31") (term "0"))
                           (rule "distr_forallAnd" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "commute_or_2" (formula "31") (term "0"))
                           (rule "shift_paren_or" (formula "32") (term "0"))
                           (rule "commute_or_2" (formula "32") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0"))
                           (rule "add_literals" (formula "32") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "32") (term "0,1,0"))
                           (rule "leq_literals" (formula "32") (term "1,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "shift_paren_or" (formula "31") (term "0,0"))
                           (rule "andRight" (formula "63"))
                           (branch "Case 1"
                              (rule "allRight" (formula "63") (inst "sk=i_13"))
                              (rule "orRight" (formula "63"))
                              (rule "notRight" (formula "64"))
                              (rule "orRight" (formula "64"))
                              (rule "inEqSimp_geqRight" (formula "65"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "65"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_13"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "22")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "50"))
                              (rule "commute_or" (formula "34") (term "0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                              (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "34") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "allLeft" (formula "23") (inst "t=i_13"))
                              (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                              (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "23") (term "0,0,1"))
                              (rule "leq_literals" (formula "23") (term "0,1"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "23") (term "0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "closeFalse" (formula "23"))
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "63") (inst "sk=i_12"))
                              (rule "orRight" (formula "63"))
                              (rule "notRight" (formula "64"))
                              (rule "orRight" (formula "64"))
                              (rule "inEqSimp_geqRight" (formula "65"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "65"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_12"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")) (ifInst ""  (formula "19")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "51"))
                              (rule "commute_or" (formula "34") (term "0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                              (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "34") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "allLeft" (formula "24") (inst "t=i_12"))
                              (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "24") (term "0,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                              (rule "andLeft" (formula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "24"))
                              (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                              (rule "add_literals" (formula "24") (term "1,1,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0"))
                              (rule "add_zero_right" (formula "24") (term "0"))
                              (rule "leq_literals" (formula "24"))
                              (rule "closeFalse" (formula "24"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "62") (inst "sk=i_11"))
                           (rule "orRight" (formula "62"))
                           (rule "notRight" (formula "63"))
                           (rule "orRight" (formula "63"))
                           (rule "inEqSimp_geqRight" (formula "64"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "64"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_11"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "39"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")) (ifInst ""  (formula "42")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "51"))
                           (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                           (rule "cnf_rightDist" (formula "33") (term "0"))
                           (rule "distr_forallAnd" (formula "33"))
                           (rule "andLeft" (formula "33"))
                           (rule "commute_or" (formula "34") (term "0"))
                           (rule "shift_paren_or" (formula "33") (term "0"))
                           (rule "commute_or_2" (formula "33") (term "0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "commute_or" (formula "34") (term "1,1,0"))
                           (rule "shift_paren_or" (formula "33") (term "0,0"))
                           (rule "commute_or" (formula "33") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "cnf_rightDist" (formula "34") (term "0"))
                           (rule "distr_forallAnd" (formula "34"))
                           (rule "andLeft" (formula "34"))
                           (rule "commute_or_2" (formula "34") (term "0"))
                           (rule "shift_paren_or" (formula "35") (term "0"))
                           (rule "commute_or_2" (formula "35") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                           (rule "add_literals" (formula "35") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "35") (term "0,1,0"))
                           (rule "leq_literals" (formula "35") (term "1,0"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "shift_paren_or" (formula "34") (term "0,0"))
                           (rule "commute_or" (formula "34") (term "0,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                           (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "34") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "allLeft" (formula "25") (inst "t=i_11"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "25") (term "0,0,1"))
                           (rule "leq_literals" (formula "25") (term "0,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "56") (inst "sk=i_10"))
                        (rule "orRight" (formula "56"))
                        (rule "notRight" (formula "57"))
                        (rule "orRight" (formula "57"))
                        (rule "inEqSimp_leqRight" (formula "57"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "58"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_10"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "53"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "31") (ifseqformula "54"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "8"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "9"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "arrayLengthNotNegative" (formula "15") (term "1,0,0,1,0,0,0"))
                        (rule "arrayLengthIsAShort" (formula "16") (term "1,0,0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                        (rule "cnf_rightDist" (formula "33") (term "0"))
                        (rule "distr_forallAnd" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "commute_or" (formula "34") (term "0"))
                        (rule "shift_paren_or" (formula "33") (term "0"))
                        (rule "commute_or_2" (formula "33") (term "0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "commute_or" (formula "34") (term "1,1,0"))
                        (rule "shift_paren_or" (formula "33") (term "0,0"))
                        (rule "commute_or" (formula "33") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "cnf_rightDist" (formula "34") (term "0"))
                        (rule "distr_forallAnd" (formula "34"))
                        (rule "andLeft" (formula "34"))
                        (rule "commute_or_2" (formula "34") (term "0"))
                        (rule "shift_paren_or" (formula "35") (term "0"))
                        (rule "commute_or_2" (formula "35") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                        (rule "add_literals" (formula "35") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "35") (term "0,1,0"))
                        (rule "leq_literals" (formula "35") (term "1,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "shift_paren_or" (formula "34") (term "0,0"))
                        (rule "commute_or" (formula "34") (term "0,0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                        (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "34") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "allLeft" (formula "47") (inst "t=i_10"))
                        (rule "replaceKnownSelect_taclet10001001_28" (formula "47") (term "0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10001001_29" (formula "47") (term "0,0,0,0"))
                        (rule "narrowSelectArrayType" (formula "47") (term "0,0,0,0") (ifseqformula "37") (ifseqformula "61"))
                        (rule "replace_known_left" (formula "47") (term "0,0,0") (ifseqformula "8"))
                        (builtin "One Step Simplification" (formula "47"))
                        (rule "inEqSimp_commuteGeq" (formula "47") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "47") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "47") (term "0,0"))
                        (builtin "One Step Simplification" (formula "47"))
                        (rule "inEqSimp_contradInEq1" (formula "47") (ifseqformula "6"))
                        (rule "andLeft" (formula "47"))
                        (rule "inEqSimp_homoInEq1" (formula "47"))
                        (rule "polySimp_pullOutFactor1b" (formula "47") (term "0"))
                        (rule "add_literals" (formula "47") (term "1,1,0"))
                        (rule "times_zero_1" (formula "47") (term "1,0"))
                        (rule "add_zero_right" (formula "47") (term "0"))
                        (rule "leq_literals" (formula "47"))
                        (rule "closeFalse" (formula "47"))
                     )
                  )
                  (branch "self.concatenated.length ≥ 1 FALSE"
                     (rule "eqSymm" (formula "24"))
                     (rule "inEqSimp_geqRight" (formula "41"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                     (rule "qeq_literals" (formula "24"))
                     (rule "closeFalse" (formula "24"))
                  )
               )
               (branch "result_0.length ≥ 1 FALSE"
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "replace_known_right" (formula "23") (term "0,1,1,0,0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "replace_known_right" (formula "24") (term "0,1,1,0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_geqRight" (formula "39"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "1"))
                  (rule "applyEq" (formula "25") (term "1,1,1,1,1,1,0") (ifseqformula "20"))
                  (rule "add_zero_right" (formula "25") (term "1,1,1,1,1,0"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                  (rule "qeq_literals" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "20"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "23") (term "1,1,0,1,0") (ifseqformula "19"))
                  (rule "inEqSimp_notGeq" (formula "22") (term "0"))
                  (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0"))
                  (rule "add_zero_left" (formula "22") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "24") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0,1,0"))
                  (rule "add_zero_right" (formula "23") (term "1,1,0,1,0"))
                  (rule "qeq_literals" (formula "23") (term "1,0,1,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "commute_or_2" (formula "23") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq0" (formula "23") (term "0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "23") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "41"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "andRight" (formula "56"))
                  (branch "Case 1"
                     (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "3"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "4"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "andRight" (formula "62"))
                     (branch "Case 1"
                        (rule "andRight" (formula "62"))
                        (branch "Case 1"
                           (rule "allRight" (formula "62") (inst "sk=i_9"))
                           (rule "orRight" (formula "62"))
                           (rule "notRight" (formula "63"))
                           (rule "orRight" (formula "63"))
                           (rule "inEqSimp_geqRight" (formula "64"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "64"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_9"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "39"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "22")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "49"))
                           (rule "allLeft" (formula "23") (inst "t=i_9"))
                           (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                           (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "23") (term "0,0,1"))
                           (rule "leq_literals" (formula "23") (term "0,1"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "23"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "62") (inst "sk=i_8"))
                           (rule "orRight" (formula "62"))
                           (rule "notRight" (formula "63"))
                           (rule "orRight" (formula "63"))
                           (rule "inEqSimp_geqRight" (formula "64"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "64"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_8"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "39"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "19")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "50"))
                           (rule "allLeft" (formula "24") (inst "t=i_8"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "24") (term "0,0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                           (rule "andLeft" (formula "24"))
                           (rule "inEqSimp_homoInEq1" (formula "24"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "1,1,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0"))
                           (rule "add_zero_right" (formula "24") (term "0"))
                           (rule "leq_literals" (formula "24"))
                           (rule "closeFalse" (formula "24"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "62") (inst "sk=i_7"))
                        (rule "orRight" (formula "62"))
                        (rule "notRight" (formula "63"))
                        (rule "orRight" (formula "63"))
                        (rule "inEqSimp_geqRight" (formula "64"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "64"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_7"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "39"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "28"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "42"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")) (ifInst ""  (formula "42")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "51"))
                        (rule "allLeft" (formula "25") (inst "t=i_7"))
                        (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "25") (term "0,0,1"))
                        (rule "leq_literals" (formula "25") (term "0,1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "25"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "56") (inst "sk=i_6"))
                     (rule "orRight" (formula "56"))
                     (rule "notRight" (formula "57"))
                     (rule "orRight" (formula "57"))
                     (rule "inEqSimp_geqRight" (formula "58"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "58"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_6"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "53"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "31") (ifseqformula "54"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "8"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "9"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "arrayLengthIsAShort" (formula "15") (term "1,0,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "arrayLengthNotNegative" (formula "15") (term "1,0,0,1,0,0,0"))
                     (rule "allLeft" (formula "47") (inst "t=i_6"))
                     (rule "replaceKnownSelect_taclet1101001_28" (formula "47") (term "0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1101001_29" (formula "47") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "47") (term "0,0,0,0") (ifseqformula "37") (ifseqformula "61"))
                     (rule "replace_known_left" (formula "47") (term "0,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "47"))
                     (rule "inEqSimp_commuteGeq" (formula "47") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "47") (term "1") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq1" (formula "47") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,1"))
                     (rule "add_literals" (formula "47") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "47") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "47") (term "0,0,1"))
                     (rule "leq_literals" (formula "47") (term "0,1"))
                     (builtin "One Step Simplification" (formula "47"))
                     (rule "inEqSimp_contradInEq1" (formula "47") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "47") (term "0"))
                     (builtin "One Step Simplification" (formula "47"))
                     (rule "closeFalse" (formula "47"))
                  )
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "56") (inst "sk=f_2"))
               (rule "allRight" (formula "56") (inst "sk=o_2"))
               (rule "orRight" (formula "56"))
               (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=f_2_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
               (rule "eqSymm" (formula "58"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_or" (formula "24") (term "0,0,1,0"))
               (rule "ifthenelse_split" (formula "23") (term "1"))
               (branch "result_0.length ≥ 1 TRUE"
                  (rule "replace_known_left" (formula "25") (term "0,1,1,0,0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "replace_known_left" (formula "26") (term "0,1,1,0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "23"))
                  (rule "leq_literals" (formula "20") (term "0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "commute_or_2" (formula "25") (term "0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "commute_or_2" (formula "24") (term "0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "44"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "ifthenelse_split" (formula "25") (term "0"))
                  (branch "self.concatenated.length ≥ 1 TRUE"
                     (rule "applyEq" (formula "28") (term "1,1,1,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "25"))
                     (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "24"))
                     (rule "leq_literals" (formula "22") (term "0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "inEqSimp_or_tautInEq3" (formula "26") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0"))
                     (rule "add_literals" (formula "26") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "26") (term "0,1,0"))
                     (rule "leq_literals" (formula "26") (term "1,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "3"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "4"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "13") (term "1,0,0,1,0,0,0"))
                     (rule "arrayLengthIsAShort" (formula "14") (term "1,0,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "cnf_rightDist" (formula "31") (term "1,1,0"))
                     (rule "cnf_rightDist" (formula "31") (term "0"))
                     (rule "distr_forallAnd" (formula "31"))
                     (rule "andLeft" (formula "31"))
                     (rule "commute_or" (formula "32") (term "0"))
                     (rule "shift_paren_or" (formula "31") (term "0"))
                     (rule "commute_or_2" (formula "31") (term "0,0"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "commute_or" (formula "32") (term "1,1,0"))
                     (rule "shift_paren_or" (formula "31") (term "0,0"))
                     (rule "commute_or" (formula "31") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "cnf_rightDist" (formula "32") (term "0"))
                     (rule "distr_forallAnd" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "commute_or_2" (formula "32") (term "0"))
                     (rule "shift_paren_or" (formula "33") (term "0"))
                     (rule "commute_or_2" (formula "33") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0"))
                     (rule "add_literals" (formula "33") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "33") (term "0,1,0"))
                     (rule "leq_literals" (formula "33") (term "1,0"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "true_left" (formula "33"))
                     (rule "shift_paren_or" (formula "32") (term "0,0"))
                     (rule "commute_or" (formula "32") (term "0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                     (rule "add_literals" (formula "32") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "32") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "true_left" (formula "32"))
                     (rule "ifthenelse_split" (formula "6") (term "0"))
                     (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                        (rule "andLeft" (formula "6"))
                        (rule "notLeft" (formula "7"))
                        (rule "notLeft" (formula "6"))
                        (rule "orRight" (formula "47"))
                        (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "6"))
                        (rule "hideAuxiliaryEq" (formula "6"))
                        (rule "eqSymm" (formula "66"))
                        (rule "replace_known_right" (formula "65") (term "0,0") (ifseqformula "45"))
                        (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "46")))
                        (rule "closeTrue" (formula "65"))
                     )
                     (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                        (rule "close" (formula "65") (ifseqformula "6"))
                     )
                  )
                  (branch "self.concatenated.length ≥ 1 FALSE"
                     (rule "eqSymm" (formula "25"))
                     (rule "inEqSimp_geqRight" (formula "42"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                     (rule "qeq_literals" (formula "25"))
                     (rule "closeFalse" (formula "25"))
                  )
               )
               (branch "result_0.length ≥ 1 FALSE"
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "replace_known_right" (formula "25") (term "0,1,1,0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "replace_known_right" (formula "24") (term "0,1,1,0,0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_geqRight" (formula "40"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "26") (term "1,1,0,0,0") (ifseqformula "20"))
                  (rule "applyEq" (formula "25") (term "1,1,0,1,0") (ifseqformula "20"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                  (rule "qeq_literals" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "24") (term "1,1,1,1,1,1,0") (ifseqformula "20"))
                  (rule "add_zero_right" (formula "24") (term "1,1,1,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0,0,0"))
                  (rule "add_zero_right" (formula "25") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "25") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0,1,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,1,0"))
                  (rule "qeq_literals" (formula "24") (term "1,0,1,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "commute_or_2" (formula "24") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq0" (formula "24") (term "0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "24") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "13") (term "1,0,0,1,0,0,0"))
                  (rule "arrayLengthIsAShort" (formula "14") (term "1,0,0,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "ifthenelse_split" (formula "6") (term "0"))
                  (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                     (rule "andLeft" (formula "6"))
                     (rule "notLeft" (formula "7"))
                     (rule "notLeft" (formula "6"))
                     (rule "orRight" (formula "47"))
                     (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "6"))
                     (rule "hideAuxiliaryEq" (formula "6"))
                     (rule "eqSymm" (formula "66"))
                     (rule "replace_known_right" (formula "65") (term "0,1") (ifseqformula "46"))
                     (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "45")))
                     (rule "closeTrue" (formula "65"))
                  )
                  (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                     (rule "close" (formula "65") (ifseqformula "6"))
                  )
               )
            )
         )
      )
      (branch "Exceptional Post (extractBallots)"
         (builtin "One Step Simplification" (formula "14"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,0,1,1,0,1,1") (ifseqformula "9"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,0") (ifseqformula "9"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "14"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "16"))
         (rule "eqSymm" (formula "24") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "12"))
         (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "19"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "19"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "nonNull" (formula "24") (term "1,1,1,1,0,0,0,1") (inst "i=i"))
         (rule "sub_literals" (formula "24") (term "2,1,0,1,1,1,1,1,1,0,0,0,1"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "greater_literals" (formula "24") (term "0,1,1,1,1,1,0,0,0,1"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "array2seqDef" (formula "12") (term "0") (inst "u=u"))
         (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
         (rule "eqSeqDef" (formula "12") (inst "iv=iv"))
         (rule "andLeft" (formula "12"))
         (rule "lenOfSeqDef" (formula "12") (term "1"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1"))
         (rule "times_zero_2" (formula "12") (term "1,1,1"))
         (rule "add_zero_right" (formula "12") (term "1,1"))
         (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,1,0,0"))
         (rule "lenOfSeqDef" (formula "12") (term "0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,0"))
         (rule "times_zero_2" (formula "12") (term "1,1,0"))
         (rule "add_zero_right" (formula "12") (term "1,0"))
         (rule "getOfSeqDef" (formula "13") (term "0,1,0"))
         (rule "castDel" (formula "13") (term "1,0,1,0"))
         (rule "castDel" (formula "13") (term "2,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
         (rule "getOfSeqDef" (formula "13") (term "0,1,0"))
         (rule "castDel" (formula "13") (term "1,0,1,0"))
         (rule "castDel" (formula "13") (term "2,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
         (rule "apply_eq_monomials" (formula "13") (term "1,0,0,1,0,0") (ifseqformula "12"))
         (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "13") (term "1,1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "13") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "13") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "12") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_4"))
         (rule "applyEq" (formula "14") (term "1,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "12"))
         (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "23")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "13") (term "0,1,0") (ifseqformula "12"))
         (rule "applyEqReverse" (formula "14") (term "1,1,0,1,0") (ifseqformula "12"))
         (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
         (rule "applyEqReverse" (formula "13") (term "0,0,0,0") (ifseqformula "12"))
         (rule "hideAuxiliaryEq" (formula "12"))
         (rule "nnf_imp2or" (formula "25") (term "0,1,1,1,1,1,0,0,0,1"))
         (rule "nnf_imp2or" (formula "13") (term "0"))
         (rule "nnf_notAnd" (formula "13") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0"))
         (rule "Contract_axiom_for_ghostFieldsPre_in_MixServer" (formula "6") (term "0") (inst "i=i"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "23")) (ifInst ""  (formula "1")))
         (rule "eqSymm" (formula "6") (term "1,0,1,0,0,0,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,0,1"))
         (rule "eqSymm" (formula "6") (term "1,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,0,0,0,0,1"))
         (rule "eqSymm" (formula "6"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0,0,0,0,0"))
         (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
         (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
         (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "1") (ifseqformula "30"))
         (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "10"))
         (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "9"))
         (rule "array2seqDef" (formula "7") (term "1,0,0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "7") (term "1,0"))
         (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
         (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
         (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "nnf_imp2or" (formula "7") (term "0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
         (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "11") (term "0") (inst "i=i"))
         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "6")) (ifInst ""  (formula "8")))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "eqSymm" (formula "15"))
         (rule "eqSymm" (formula "14"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "11") (term "1,0"))
         (rule "eqSymm" (formula "12"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "10"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "10"))
         (rule "eqSymm" (formula "14"))
         (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "13") (term "0,0") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "13") (term "2,0,0") (ifseqformula "1") (ifseqformula "30"))
         (rule "array2seqDef" (formula "13") (term "0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "13"))
         (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "11") (term "1,0"))
         (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "13") (term "1,1,1") (ifseqformula "12"))
         (rule "array2seqDef" (formula "11") (term "0,0,1,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "11") (term "1,0,1,1,0") (inst "u=u"))
         (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "nnf_notAnd" (formula "30") (term "0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "add_literals" (formula "30") (term "0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "11") (ifseqformula "3"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "13"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "13"))
         (rule "notLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "13"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "12"))
         (rule "notLeft" (formula "11"))
         (rule "narrowSelectArrayType" (formula "7") (term "2,0,0,1,1,0") (ifseqformula "1") (ifseqformula "31"))
         (rule "nonNull" (formula "13") (inst "i=i"))
         (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "greater_literals" (formula "13") (term "0,1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "notLeft" (formula "13"))
         (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "26"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "12") (inst "i=i"))
         (rule "greater_literals" (formula "12") (term "0,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "sub_literals" (formula "12") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "notLeft" (formula "12"))
         (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "26"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
         (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "11") (inst "i=i"))
         (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "greater_literals" (formula "11") (term "0,1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "26"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "10"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "13") (term "0"))
         (rule "nnf_imp2or" (formula "12") (term "0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "13") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "12") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "6") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "38")) (ifInst ""  (formula "1")) (ifInst ""  (formula "29")) (ifInst ""  (formula "28")) (ifInst ""  (formula "27")) (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
         (rule "eqSymm" (formula "6"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0,0,0"))
         (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
         (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")) (ifInst ""  (formula "29")) (ifInst ""  (formula "33")) (ifInst ""  (formula "32")))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "nnf_imp2or" (formula "6") (term "0"))
         (rule "nnf_imp2or" (formula "8") (term "0"))
         (rule "nnf_imp2or" (formula "7") (term "0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "19") (ifseqformula "3"))
         (rule "replaceKnownSelect_taclet101_0" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_1" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "21"))
         (rule "notLeft" (formula "20"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "21"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "21"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "20"))
         (rule "notLeft" (formula "19"))
         (rule "nonNull" (formula "21") (inst "i=i"))
         (rule "greater_literals" (formula "21") (term "0,1"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "sub_literals" (formula "21") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "21"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "20") (inst "i=i"))
         (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "greater_literals" (formula "20") (term "0,1"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "notLeft" (formula "20"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "19") (inst "i=i"))
         (rule "greater_literals" (formula "19") (term "0,1"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "sub_literals" (formula "19") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "19"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_3"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_3"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_3"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_3"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_3"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "21") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_3"))
         (rule "applyEq" (formula "30") (term "0") (ifseqformula "21"))
         (rule "applyEq" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
         (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "42")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "22") (term "1,0,0,1,0") (ifseqformula "21"))
         (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "21"))
         (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
         (rule "hideAuxiliaryEq" (formula "21"))
         (rule "pullOutSelect" (formula "20") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_3"))
         (rule "applyEq" (formula "29") (term "0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
         (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "41")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "20"))
         (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
         (rule "hideAuxiliaryEq" (formula "20"))
         (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "8"))
         (rule "pullOutSelect" (formula "19") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_3"))
         (rule "applyEq" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
         (rule "applyEq" (formula "28") (term "0") (ifseqformula "19"))
         (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "40")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "20") (term "1,0,0,1,0") (ifseqformula "19"))
         (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
         (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "19"))
         (rule "hideAuxiliaryEq" (formula "19"))
         (rule "applyEq" (formula "19") (term "1,1,1,0,0") (ifseqformula "9"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "25") (ifseqformula "3"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "27"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "25"))
         (rule "notLeft" (formula "25"))
         (rule "nonNull" (formula "27") (inst "i=i"))
         (rule "greater_literals" (formula "27") (term "0,1"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "sub_literals" (formula "27") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "andLeft" (formula "27"))
         (rule "notLeft" (formula "27"))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "26") (inst "i=i"))
         (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "greater_literals" (formula "26") (term "0,1"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "notLeft" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "25") (inst "i=i"))
         (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "greater_literals" (formula "25") (term "0,1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "25"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_4"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
         (rule "replaceKnownSelect_taclet101_2" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_3" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_4"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
         (rule "replaceKnownSelect_taclet101_4" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_5" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_4"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
         (rule "replaceKnownSelect_taclet101_6" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_7" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_4"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
         (rule "replaceKnownSelect_taclet101_8" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_9" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_4"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
         (rule "replaceKnownSelect_taclet101_10" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_11" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_5"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
         (rule "replaceKnownSelect_taclet101_0" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_1" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_4"))
         (rule "applyEq" (formula "32") (term "0") (ifseqformula "27"))
         (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
         (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "44")))
         (rule "replaceKnownSelect_taclet101_12" (formula "27") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_13" (formula "27") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "27") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
         (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
         (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "27"))
         (rule "hideAuxiliaryEq" (formula "27"))
         (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_4"))
         (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
         (rule "applyEq" (formula "31") (term "0") (ifseqformula "26"))
         (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "43")))
         (rule "replaceKnownSelect_taclet101_14" (formula "26") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_15" (formula "26") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "26"))
         (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
         (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
         (rule "hideAuxiliaryEq" (formula "26"))
         (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "8"))
         (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_4"))
         (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
         (rule "applyEq" (formula "30") (term "0") (ifseqformula "25"))
         (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "42")))
         (rule "replaceKnownSelect_taclet101_16" (formula "25") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_17" (formula "25") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
         (rule "hideAuxiliaryEq" (formula "25"))
         (rule "applyEq" (formula "25") (term "1,1,1,0,0") (ifseqformula "9"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "arrayLengthIsAShort" (formula "17") (term "1,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "arrayLengthNotNegative" (formula "17") (term "1,1"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "commute_or_2" (formula "12") (term "0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "commute_or_2" (formula "11") (term "0"))
         (rule "methodCallParamThrow" (formula "44") (term "1"))
         (rule "commute_or_2" (formula "10") (term "0"))
         (rule "arrayLengthNotNegative" (formula "18") (term "1,0"))
         (rule "arrayLengthIsAShort" (formula "19") (term "1,0"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "arrayLengthIsAShort" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "arrayLengthNotNegative" (formula "9") (term "0"))
         (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
         (rule "arrayLengthNotNegative" (formula "8") (term "0"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
         (rule "arrayLengthIsAShort" (formula "8") (term "0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "commute_or" (formula "21") (term "0,0"))
         (rule "arrayLengthIsAShort" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "arrayLengthNotNegative" (formula "8") (term "1"))
         (rule "nnf_imp2or" (formula "30") (term "0"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "nnf_imp2or" (formula "28") (term "0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "30") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "28") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
         (rule "mul_literals" (formula "28") (term "1,0,0,0"))
         (rule "commute_or" (formula "6") (term "0,0"))
         (rule "commute_or" (formula "13") (term "0,0"))
         (rule "commute_or" (formula "12") (term "0,0"))
         (rule "commute_or" (formula "11") (term "0,0"))
         (rule "commute_or_2" (formula "24") (term "0"))
         (rule "commute_or_2" (formula "23") (term "0"))
         (rule "commute_or_2" (formula "22") (term "0"))
         (rule "commute_or_2" (formula "30") (term "0"))
         (rule "commute_or_2" (formula "29") (term "0"))
         (rule "commute_or_2" (formula "28") (term "0"))
         (rule "tryCatchThrow" (formula "46") (term "1"))
         (rule "commute_or" (formula "24") (term "0,0"))
         (rule "commute_or" (formula "23") (term "0,0"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "commute_or" (formula "30") (term "0,0"))
         (rule "commute_or" (formula "29") (term "0,0"))
         (rule "commute_or" (formula "28") (term "0,0"))
         (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
         (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,1,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,1,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,1,1,0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,0,0,0"))
         (rule "commute_or" (formula "21") (term "0,0"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "commute_or_2" (formula "21") (term "0,1,0"))
         (rule "commute_or" (formula "21") (term "1,1,0"))
         (rule "commute_or" (formula "21") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
         (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
         (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
         (rule "commute_or" (formula "21") (term "1,1,1,0"))
         (rule "cnf_rightDist" (formula "21") (term "0"))
         (rule "distr_forallAnd" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "commute_or" (formula "22") (term "0"))
         (rule "shift_paren_or" (formula "21") (term "0,0"))
         (rule "commute_or_2" (formula "22") (term "0,1,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0,1,0"))
         (rule "add_literals" (formula "22") (term "1,1,0,0,1,0"))
         (rule "qeq_literals" (formula "22") (term "1,0,0,1,0"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "commute_or_2" (formula "22") (term "0"))
         (rule "shift_paren_or" (formula "22") (term "0,0"))
         (rule "shift_paren_or" (formula "21") (term "0,0,0"))
         (rule "shift_paren_or" (formula "22") (term "0,0,0"))
         (rule "commute_or" (formula "21") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "shift_paren_or" (formula "22") (term "0,0,0,0"))
         (rule "commute_or" (formula "22") (term "0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1,0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "39"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0,0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "36"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "39"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "39"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0,0"))
         (rule "eqSymm" (formula "26") (term "1,1,0,0,0,0"))
         (rule "eqSymm" (formula "26") (term "1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,0"))
         (rule "commute_or" (formula "26") (term "0,0,0"))
         (rule "commute_or_2" (formula "26") (term "0,0"))
         (rule "commute_or_2" (formula "26") (term "0"))
         (rule "commute_or" (formula "26") (term "1,1,0"))
         (rule "commute_or_2" (formula "26") (term "0,1,0"))
         (rule "commute_or" (formula "26") (term "0,0,1,0"))
         (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
         (rule "cnf_rightDist" (formula "26") (term "0"))
         (rule "distr_forallAnd" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "commute_or_2" (formula "26") (term "0"))
         (rule "commute_or" (formula "27") (term "0"))
         (rule "commute_or_2" (formula "26") (term "0,0"))
         (rule "commute_or" (formula "27") (term "1,1,0"))
         (rule "cnf_rightDist" (formula "27") (term "0"))
         (rule "distr_forallAnd" (formula "27"))
         (rule "andLeft" (formula "27"))
         (rule "commute_or_2" (formula "27") (term "0"))
         (rule "shift_paren_or" (formula "28") (term "0"))
         (rule "commute_or_2" (formula "27") (term "0,0"))
         (rule "shift_paren_or" (formula "28") (term "0,0"))
         (rule "commute_or_2" (formula "28") (term "0,0,0"))
         (rule "shift_paren_or" (formula "26") (term "0,0,0"))
         (rule "shift_paren_or" (formula "27") (term "0,0,0"))
         (rule "commute_or" (formula "27") (term "0,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,0"))
         (rule "add_zero_right" (formula "27") (term "1,1,0,0,0"))
         (rule "qeq_literals" (formula "27") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "true_left" (formula "27"))
         (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
         (rule "commute_or" (formula "26") (term "0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "ifElseUnfold" (formula "53") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "53") (term "1") (newnames "x_3"))
         (rule "equality_comparison_simple" (formula "53") (term "1"))
         (builtin "One Step Simplification" (formula "53"))
         (rule "replace_known_right" (formula "53") (term "0,0,1,0") (ifseqformula "48"))
         (builtin "One Step Simplification" (formula "53"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "3"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "4"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "5"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "6"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "arrayLengthIsAShort" (formula "12") (term "1,0,0,1,0,0,0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,1,0,0,0"))
         (rule "ifElseSplit" (formula "59"))
         (branch "if x_3 true"
            (builtin "One Step Simplification" (formula "60"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_3 false"
            (builtin "One Step Simplification" (formula "60"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifElseSplit" (formula "59"))
            (branch "if exc_1 instanceof java.lang.Throwable true"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "59") (term "1") (newnames "e_2"))
               (rule "reference_type_cast" (formula "59") (term "1"))
               (branch "Normal Execution (exc_1 instanceof java.lang.Throwable)"
                  (builtin "One Step Simplification" (formula "60"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "59") (term "1"))
                  (builtin "One Step Simplification" (formula "59"))
                  (rule "emptyModality" (formula "59") (term "1"))
                  (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "54")) (ifInst ""  (formula "54")))
                  (rule "eqSymm" (formula "59") (term "1,0,0,1"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "59") (term "0,0") (ifseqformula "9"))
                  (rule "replaceKnownSelect_taclet101_18" (formula "59") (term "0,0,1,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet101_19" (formula "59") (term "0,0,1,0,0"))
                  (rule "replaceKnownSelect_taclet101_20" (formula "59") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet101_21" (formula "59") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownSelect_taclet101_22" (formula "59") (term "0,0,1,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet101_23" (formula "59") (term "0,0,1,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet101_30" (formula "59") (term "1,1,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet101_24" (formula "59") (term "0,0,1,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet101_31" (formula "59") (term "1,1,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet101_25" (formula "59") (term "0,0,1,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet101_32" (formula "59") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet101_34" (formula "59") (term "1,1,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet101_33" (formula "59") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet101_35" (formula "59") (term "1,1,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet101_26" (formula "59") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownSelect_taclet101_28" (formula "59") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet101_27" (formula "59") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet101_29" (formula "59") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "replace_known_right" (formula "59") (term "0,1,0,0") (ifseqformula "53"))
                  (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "48")) (ifInst ""  (formula "49")) (ifInst ""  (formula "50")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                  (rule "nonNull" (formula "59") (term "1,0,0,0") (inst "i=i"))
                  (rule "sub_literals" (formula "59") (term "2,1,0,1,1,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "46")))
                  (rule "greater_literals" (formula "59") (term "0,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "59"))
                  (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,1,0,0,0"))
                  (rule "applyEq" (formula "59") (term "0,1,0,0,1,0,0,1,0,0,0") (ifseqformula "17"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "59") (term "0,1,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,1,0,0,0"))
                  (rule "nonNull" (formula "59") (term "0,0,0,0") (inst "i=i"))
                  (rule "greater_literals" (formula "59") (term "0,1,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "45")))
                  (rule "sub_literals" (formula "59") (term "2,1,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "59"))
                  (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,0,0,0,0"))
                  (rule "applyEq" (formula "59") (term "0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "20"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "59") (term "0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,0,0,0,0"))
                  (rule "nonNull" (formula "59") (term "1,0,0") (inst "i=i"))
                  (rule "greater_literals" (formula "59") (term "0,1,1,0,0"))
                  (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "47")))
                  (rule "sub_literals" (formula "59") (term "2,1,0,1,0,0"))
                  (builtin "One Step Simplification" (formula "59"))
                  (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "59") (term "0,1,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "59") (term "0,1,0,0"))
                  (rule "nnf_imp2or" (formula "59") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "59") (term "0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "59") (term "0,0,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "59") (term "0,0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "59") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "59") (term "0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "59") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "59") (term "1,1,0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "59") (term "0,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "59") (term "1,0,0,0,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "59") (term "0,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "59") (term "1,0,0,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "59") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "59") (term "0,0,1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "59") (term "0,0,0,1,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "59") (term "0,0,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "59") (term "1,1,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "59") (term "1,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "59") (term "0,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "59") (term "1,0,0,0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "59") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "59") (term "1,0,0,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "59") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "59") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "59") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "59") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "59") (term "1,1,0,0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "59") (term "1,1,0,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "59") (term "0,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "59") (term "1,0,0,0,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "59") (term "0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "59") (term "1,0,0,0,1,0,0,0"))
                  (rule "ifthenelse_split" (formula "31") (term "1"))
                  (branch "result_0.length ≥ 1 TRUE"
                     (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "31"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "31"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "31"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "31"))
                     (rule "leq_literals" (formula "28") (term "0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "commute_or_2" (formula "32") (term "0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "commute_or_2" (formula "33") (term "0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                     (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                     (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                     (rule "leq_literals" (formula "33") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "true_left" (formula "33"))
                     (rule "commute_or_2" (formula "33") (term "0"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "ifthenelse_split" (formula "31") (term "0"))
                     (branch "self.concatenated.length ≥ 1 TRUE"
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "31"))
                        (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "30"))
                        (rule "leq_literals" (formula "28") (term "0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "inEqSimp_or_tautInEq3" (formula "32") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0"))
                        (rule "add_literals" (formula "32") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "32") (term "0,1,0"))
                        (rule "leq_literals" (formula "32") (term "1,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "cut_direct" (formula "41") (term "1"))
                        (branch "CUT: verif.selectvoting.system.core.MixServer.ServerMisbehavior::instance(exc_1) = TRUE TRUE"
                           (rule "instanceof_not_compatible_5" (formula "42") (term "1,0") (ifseqformula "41"))
                           (rule "instanceof_not_compatible_5" (formula "42") (term "0,0") (ifseqformula "41"))
                           (rule "instanceof_not_compatible_5" (formula "57") (term "1,0,1,0") (ifseqformula "41"))
                           (rule "instanceof_not_compatible_5" (formula "57") (term "0,0,0,1,0") (ifseqformula "41"))
                           (rule "instanceof_not_compatible_5" (formula "57") (term "1,0,0,1,0") (ifseqformula "41"))
                           (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "52")) (ifInst ""  (formula "52")))
                           (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "52")) (ifInst ""  (formula "52")) (ifInst ""  (formula "52")) (ifInst ""  (formula "41")))
                           (rule "true_left" (formula "42"))
                           (rule "andRight" (formula "56"))
                           (branch "Case 1"
                              (rule "andRight" (formula "56"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "56"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "56") (inst "sk=i_45"))
                                    (rule "orRight" (formula "56"))
                                    (rule "notRight" (formula "57"))
                                    (rule "orRight" (formula "57"))
                                    (rule "inEqSimp_leqRight" (formula "57"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "58"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_45"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "23")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "45"))
                                    (rule "cut_direct" (formula "40") (term "0,0"))
                                    (branch "CUT: exc_1.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "true_left" (formula "41"))
                                       (rule "cut_direct" (formula "30") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "allLeft" (formula "24") (inst "t=i_45"))
                                          (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "24") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "allLeft" (formula "24") (inst "t=i_45"))
                                          (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                          (rule "leq_literals" (formula "24") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "24") (term "0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "closeFalse" (formula "24"))
                                       )
                                    )
                                    (branch "CUT: exc_1.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "cut_direct" (formula "30") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "allLeft" (formula "24") (inst "t=i_45"))
                                          (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "24") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "allLeft" (formula "24") (inst "t=i_45"))
                                          (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                          (rule "leq_literals" (formula "24") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "24"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "56") (inst "sk=i_44"))
                                    (rule "orRight" (formula "56"))
                                    (rule "notRight" (formula "57"))
                                    (rule "orRight" (formula "57"))
                                    (rule "inEqSimp_leqRight" (formula "57"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "58"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_44"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "20")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "46"))
                                    (rule "cut_direct" (formula "40") (term "0,0"))
                                    (branch "CUT: exc_1.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "true_left" (formula "41"))
                                       (rule "cut_direct" (formula "30") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "allLeft" (formula "25") (inst "t=i_44"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "25") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "25"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "allLeft" (formula "25") (inst "t=i_44"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                          (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                          (rule "leq_literals" (formula "25") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "25") (term "0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "closeFalse" (formula "25"))
                                       )
                                    )
                                    (branch "CUT: exc_1.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "cut_direct" (formula "30") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "allLeft" (formula "25") (inst "t=i_44"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "25") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "25"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "allLeft" (formula "25") (inst "t=i_44"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                          (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                          (rule "leq_literals" (formula "25") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "25"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "56") (inst "sk=i_43"))
                                 (rule "orRight" (formula "56"))
                                 (rule "notRight" (formula "57"))
                                 (rule "orRight" (formula "57"))
                                 (rule "inEqSimp_geqRight" (formula "58"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "58"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_43"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "19")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "47"))
                                 (rule "cut_direct" (formula "40") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "true_left" (formula "41"))
                                    (rule "cut_direct" (formula "30") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "allLeft" (formula "26") (inst "t=i_43"))
                                       (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "26") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "26"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_literals" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "allLeft" (formula "26") (inst "t=i_43"))
                                       (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                       (rule "leq_literals" (formula "26") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "cut_direct" (formula "30") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "allLeft" (formula "26") (inst "t=i_43"))
                                       (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                       (rule "leq_literals" (formula "26") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "26") (term "0"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "closeFalse" (formula "26"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "allLeft" (formula "26") (inst "t=i_43"))
                                       (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                       (rule "leq_literals" (formula "26") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "26") (term "0"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "closeFalse" (formula "26"))
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "56") (inst "sk=f_11"))
                              (rule "allRight" (formula "56") (inst "sk=o_11"))
                              (rule "orRight" (formula "56"))
                              (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=f_11_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                              (rule "eqSymm" (formula "58"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_11_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "cut_direct" (formula "38") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "39"))
                                 (rule "true_left" (formula "39"))
                                 (rule "cut_direct" (formula "28") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_11 = null ∧ ¬( o_11.<created> = TRUE ∨ o_11.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "44"))
                                       (rule "applyEqReverse" (formula "61") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "60"))
                                       (rule "replace_known_right" (formula "59") (term "0,1") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "42")))
                                       (rule "closeTrue" (formula "59"))
                                    )
                                    (branch " ¬o_11 = null ∧ ¬( o_11.<created> = TRUE ∨ o_11.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "59") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_11 = null ∧ ¬( o_11.<created> = TRUE ∨ o_11.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "44"))
                                       (rule "applyEqReverse" (formula "62") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "61"))
                                       (rule "replace_known_right" (formula "60") (term "0,1") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "42")))
                                       (rule "closeTrue" (formula "60"))
                                    )
                                    (branch " ¬o_11 = null ∧ ¬( o_11.<created> = TRUE ∨ o_11.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "60") (ifseqformula "1"))
                                    )
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "cut_direct" (formula "28") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_11 = null ∧ ¬( o_11.<created> = TRUE ∨ o_11.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "43"))
                                       (rule "applyEqReverse" (formula "62") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "61"))
                                       (rule "replace_known_right" (formula "60") (term "0,0") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "42")))
                                       (rule "closeTrue" (formula "60"))
                                    )
                                    (branch " ¬o_11 = null ∧ ¬( o_11.<created> = TRUE ∨ o_11.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "60") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_11 = null ∧ ¬( o_11.<created> = TRUE ∨ o_11.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "44"))
                                       (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "62"))
                                       (rule "replace_known_right" (formula "61") (term "0,1") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "42")))
                                       (rule "closeTrue" (formula "61"))
                                    )
                                    (branch " ¬o_11 = null ∧ ¬( o_11.<created> = TRUE ∨ o_11.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "61") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "CUT: verif.selectvoting.system.core.MixServer.ServerMisbehavior::instance(exc_1) = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "41"))
                           (rule "replace_known_left" (formula "57") (term "0,0,1,0") (ifseqformula "41"))
                           (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "42")))
                           (rule "andRight" (formula "57"))
                           (branch "Case 1"
                              (rule "andRight" (formula "57"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "57"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "57") (inst "sk=i_42"))
                                    (rule "orRight" (formula "57"))
                                    (rule "orRight" (formula "57"))
                                    (rule "notRight" (formula "59"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_42"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "23")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "46"))
                                    (rule "cut_direct" (formula "40") (term "0,0"))
                                    (branch "CUT: exc_1.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "true_left" (formula "41"))
                                       (rule "cut_direct" (formula "30") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "allLeft" (formula "24") (inst "t=i_42"))
                                          (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                          (rule "leq_literals" (formula "24") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "allLeft" (formula "24") (inst "t=i_42"))
                                          (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "24") (term "0,0,1"))
                                          (rule "leq_literals" (formula "24") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "24") (term "0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "closeFalse" (formula "24"))
                                       )
                                    )
                                    (branch "CUT: exc_1.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "cut_direct" (formula "30") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "allLeft" (formula "24") (inst "t=i_42"))
                                          (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "24") (term "0,0,1"))
                                          (rule "leq_literals" (formula "24") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "allLeft" (formula "24") (inst "t=i_42"))
                                          (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "24") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "24"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "57") (inst "sk=i_41"))
                                    (rule "orRight" (formula "57"))
                                    (rule "orRight" (formula "57"))
                                    (rule "notRight" (formula "59"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_41"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "20")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "47"))
                                    (rule "cut_direct" (formula "40") (term "0,0"))
                                    (branch "CUT: exc_1.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "true_left" (formula "41"))
                                       (rule "cut_direct" (formula "30") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "allLeft" (formula "25") (inst "t=i_41"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                          (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                          (rule "leq_literals" (formula "25") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "25"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "allLeft" (formula "25") (inst "t=i_41"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                          (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "25") (term "0,0,1"))
                                          (rule "leq_literals" (formula "25") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "25") (term "0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "closeFalse" (formula "25"))
                                       )
                                    )
                                    (branch "CUT: exc_1.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "cut_direct" (formula "30") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "allLeft" (formula "25") (inst "t=i_41"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "25") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "25"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_literals" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "allLeft" (formula "25") (inst "t=i_41"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "25") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "25"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "57") (inst "sk=i_40"))
                                 (rule "orRight" (formula "57"))
                                 (rule "orRight" (formula "57"))
                                 (rule "notRight" (formula "59"))
                                 (rule "inEqSimp_geqRight" (formula "59"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "59"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_40"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "19")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "48"))
                                 (rule "cut_direct" (formula "40") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "true_left" (formula "41"))
                                    (rule "cut_direct" (formula "30") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "allLeft" (formula "26") (inst "t=i_40"))
                                       (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "26") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "26"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "allLeft" (formula "26") (inst "t=i_40"))
                                       (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "26") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "2"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "inEqSimp_homoInEq1" (formula "26"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                                       (rule "add_literals" (formula "26") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0"))
                                       (rule "add_zero_right" (formula "26") (term "0"))
                                       (rule "leq_literals" (formula "26"))
                                       (rule "closeFalse" (formula "26"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "cut_direct" (formula "30") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "allLeft" (formula "26") (inst "t=i_40"))
                                       (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "26") (term "0,0,1"))
                                       (rule "leq_literals" (formula "26") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "allLeft" (formula "26") (inst "t=i_40"))
                                       (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                       (rule "leq_literals" (formula "26") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "57") (inst "sk=f_10"))
                              (rule "allRight" (formula "57") (inst "sk=o_10"))
                              (rule "orRight" (formula "57"))
                              (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=f_10_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                              (rule "eqSymm" (formula "59"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_10_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "cut_direct" (formula "38") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "39"))
                                 (rule "true_left" (formula "39"))
                                 (rule "cut_direct" (formula "28") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_10 = null ∧ ¬( o_10.<created> = TRUE ∨ o_10.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "44"))
                                       (rule "applyEqReverse" (formula "62") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "61"))
                                       (rule "replace_known_right" (formula "60") (term "0,0") (ifseqformula "42"))
                                       (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "43")))
                                       (rule "closeTrue" (formula "60"))
                                    )
                                    (branch " ¬o_10 = null ∧ ¬( o_10.<created> = TRUE ∨ o_10.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "60") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_10 = null ∧ ¬( o_10.<created> = TRUE ∨ o_10.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "44"))
                                       (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "62"))
                                       (rule "replace_known_right" (formula "61") (term "0,0") (ifseqformula "42"))
                                       (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "43")))
                                       (rule "closeTrue" (formula "61"))
                                    )
                                    (branch " ¬o_10 = null ∧ ¬( o_10.<created> = TRUE ∨ o_10.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "61") (ifseqformula "1"))
                                    )
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "cut_direct" (formula "28") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_10 = null ∧ ¬( o_10.<created> = TRUE ∨ o_10.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "43"))
                                       (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "62"))
                                       (rule "replace_known_right" (formula "61") (term "0,0") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "42")))
                                       (rule "closeTrue" (formula "61"))
                                    )
                                    (branch " ¬o_10 = null ∧ ¬( o_10.<created> = TRUE ∨ o_10.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "61") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_10 = null ∧ ¬( o_10.<created> = TRUE ∨ o_10.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "44"))
                                       (rule "applyEqReverse" (formula "64") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "63"))
                                       (rule "replace_known_right" (formula "62") (term "0,0") (ifseqformula "42"))
                                       (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "43")))
                                       (rule "closeTrue" (formula "62"))
                                    )
                                    (branch " ¬o_10 = null ∧ ¬( o_10.<created> = TRUE ∨ o_10.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "62") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "self.concatenated.length ≥ 1 FALSE"
                        (rule "eqSymm" (formula "31"))
                        (rule "inEqSimp_geqRight" (formula "44"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                        (rule "qeq_literals" (formula "31"))
                        (rule "closeFalse" (formula "31"))
                     )
                  )
                  (branch "result_0.length ≥ 1 FALSE"
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "45"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "45"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "45"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_geqRight" (formula "45"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "1"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "29"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "34") (term "1,1,1,0,0,0") (ifseqformula "28"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "applyEq" (formula "33") (term "1,1,0,0,0") (ifseqformula "28"))
                     (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                     (rule "qeq_literals" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "28"))
                     (rule "inEqSimp_notGeq" (formula "31") (term "0"))
                     (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                     (rule "add_literals" (formula "31") (term "0,0,0"))
                     (rule "add_zero_left" (formula "31") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0,0"))
                     (rule "add_zero_right" (formula "32") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "32") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "true_left" (formula "32"))
                     (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,0"))
                     (rule "add_zero_right" (formula "33") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "33") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "true_left" (formula "33"))
                     (rule "commute_or_2" (formula "32") (term "0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                     (rule "add_zero_right" (formula "32") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "32") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "true_left" (formula "32"))
                     (rule "cut_direct" (formula "37") (term "0,0"))
                     (branch "CUT: exc_1.<created> = TRUE TRUE"
                        (builtin "One Step Simplification" (formula "38"))
                        (rule "true_left" (formula "38"))
                        (rule "cut_direct" (formula "27") (term "0"))
                        (branch "CUT: result_0.<created> = TRUE TRUE"
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "cut_direct" (formula "41") (term "1"))
                           (branch "CUT: verif.selectvoting.system.core.MixServer.ServerMisbehavior::instance(exc_1) = TRUE TRUE"
                              (rule "instanceof_not_compatible_5" (formula "42") (term "0,0") (ifseqformula "41"))
                              (rule "instanceof_not_compatible_5" (formula "42") (term "1,0") (ifseqformula "41"))
                              (rule "instanceof_not_compatible_5" (formula "57") (term "1,0,1,0") (ifseqformula "41"))
                              (rule "instanceof_not_compatible_5" (formula "57") (term "1,0,0,1,0") (ifseqformula "41"))
                              (rule "instanceof_not_compatible_5" (formula "57") (term "0,0,0,1,0") (ifseqformula "41"))
                              (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "52")) (ifInst ""  (formula "52")))
                              (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "52")) (ifInst ""  (formula "52")) (ifInst ""  (formula "52")) (ifInst ""  (formula "41")))
                              (rule "true_left" (formula "42"))
                              (rule "andRight" (formula "56"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "56"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "56"))
                                    (branch "Case 1"
                                       (rule "allRight" (formula "56") (inst "sk=i_39"))
                                       (rule "orRight" (formula "56"))
                                       (rule "orRight" (formula "56"))
                                       (rule "notRight" (formula "58"))
                                       (rule "inEqSimp_geqRight" (formula "58"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "58"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_39"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "23")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "45"))
                                       (rule "allLeft" (formula "24") (inst "t=i_39"))
                                       (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "24") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "inEqSimp_homoInEq1" (formula "24"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0"))
                                       (rule "add_literals" (formula "24") (term "0"))
                                       (rule "leq_literals" (formula "24"))
                                       (rule "closeFalse" (formula "24"))
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "56") (inst "sk=i_38"))
                                       (rule "orRight" (formula "56"))
                                       (rule "orRight" (formula "56"))
                                       (rule "notRight" (formula "58"))
                                       (rule "inEqSimp_geqRight" (formula "58"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "58"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_38"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "20")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "46"))
                                       (rule "allLeft" (formula "25") (inst "t=i_38"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                       (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                       (rule "leq_literals" (formula "25") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "25") (term "0"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "closeFalse" (formula "25"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "56") (inst "sk=i_37"))
                                    (rule "orRight" (formula "56"))
                                    (rule "orRight" (formula "56"))
                                    (rule "notRight" (formula "58"))
                                    (rule "inEqSimp_geqRight" (formula "58"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "58"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_37"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "19")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "47"))
                                    (rule "allLeft" (formula "26") (inst "t=i_37"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "26") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "2"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_homoInEq1" (formula "26"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                                    (rule "add_literals" (formula "26") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0"))
                                    (rule "add_literals" (formula "26") (term "0"))
                                    (rule "leq_literals" (formula "26"))
                                    (rule "closeFalse" (formula "26"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "56") (inst "sk=f_9"))
                                 (rule "allRight" (formula "56") (inst "sk=o_9"))
                                 (rule "orRight" (formula "56"))
                                 (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=f_9_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                                 (rule "eqSymm" (formula "58"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_9_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_9 = null ∧ ¬( o_9.<created> = TRUE ∨ o_9.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "44"))
                                    (rule "applyEqReverse" (formula "61") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "60"))
                                    (rule "replace_known_right" (formula "59") (term "0,1") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "42")))
                                    (rule "closeTrue" (formula "59"))
                                 )
                                 (branch " ¬o_9 = null ∧ ¬( o_9.<created> = TRUE ∨ o_9.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "59") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "CUT: verif.selectvoting.system.core.MixServer.ServerMisbehavior::instance(exc_1) = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "41"))
                              (rule "replace_known_left" (formula "57") (term "0,0,1,0") (ifseqformula "41"))
                              (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "42")))
                              (rule "andRight" (formula "57"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "57"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "57"))
                                    (branch "Case 1"
                                       (rule "allRight" (formula "57") (inst "sk=i_36"))
                                       (rule "orRight" (formula "57"))
                                       (rule "orRight" (formula "57"))
                                       (rule "notRight" (formula "59"))
                                       (rule "inEqSimp_geqRight" (formula "59"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "59"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_36"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "23")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "46"))
                                       (rule "allLeft" (formula "24") (inst "t=i_36"))
                                       (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                       (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                       (rule "leq_literals" (formula "24") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "57") (inst "sk=i_35"))
                                       (rule "orRight" (formula "57"))
                                       (rule "orRight" (formula "57"))
                                       (rule "notRight" (formula "59"))
                                       (rule "inEqSimp_geqRight" (formula "59"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "59"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_35"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "20")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "47"))
                                       (rule "allLeft" (formula "25") (inst "t=i_35"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                       (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                       (rule "leq_literals" (formula "25") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "57") (inst "sk=i_34"))
                                    (rule "orRight" (formula "57"))
                                    (rule "orRight" (formula "57"))
                                    (rule "notRight" (formula "59"))
                                    (rule "inEqSimp_leqRight" (formula "58"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_34"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "19")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "48"))
                                    (rule "allLeft" (formula "26") (inst "t=i_34"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "26") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "57") (inst "sk=f_8"))
                                 (rule "allRight" (formula "57") (inst "sk=o_8"))
                                 (rule "orRight" (formula "57"))
                                 (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=f_8_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                                 (rule "eqSymm" (formula "59"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_8_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "44"))
                                    (rule "applyEqReverse" (formula "62") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "61"))
                                    (rule "replace_known_right" (formula "60") (term "0,0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "43")))
                                    (rule "closeTrue" (formula "60"))
                                 )
                                 (branch " ¬o_8 = null ∧ ¬( o_8.<created> = TRUE ∨ o_8.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "60") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: result_0.<created> = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "cut_direct" (formula "41") (term "1"))
                           (branch "CUT: verif.selectvoting.system.core.MixServer.ServerMisbehavior::instance(exc_1) = TRUE TRUE"
                              (rule "instanceof_not_compatible_5" (formula "42") (term "0,0") (ifseqformula "41"))
                              (rule "instanceof_not_compatible_5" (formula "42") (term "1,0") (ifseqformula "41"))
                              (rule "instanceof_not_compatible_5" (formula "58") (term "1,0,1,0") (ifseqformula "41"))
                              (rule "instanceof_not_compatible_5" (formula "58") (term "0,0,0,1,0") (ifseqformula "41"))
                              (rule "instanceof_not_compatible_5" (formula "58") (term "1,0,0,1,0") (ifseqformula "41"))
                              (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "53")) (ifInst ""  (formula "53")))
                              (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "53")) (ifInst ""  (formula "53")) (ifInst ""  (formula "53")) (ifInst ""  (formula "41")))
                              (rule "true_left" (formula "42"))
                              (rule "andRight" (formula "57"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "57"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "57"))
                                    (branch "Case 1"
                                       (rule "allRight" (formula "57") (inst "sk=i_33"))
                                       (rule "orRight" (formula "57"))
                                       (rule "notRight" (formula "58"))
                                       (rule "orRight" (formula "58"))
                                       (rule "inEqSimp_geqRight" (formula "59"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "59"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_33"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "23")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "46"))
                                       (rule "allLeft" (formula "24") (inst "t=i_33"))
                                       (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "24") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "inEqSimp_homoInEq1" (formula "24"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0"))
                                       (rule "add_zero_right" (formula "24") (term "0"))
                                       (rule "leq_literals" (formula "24"))
                                       (rule "closeFalse" (formula "24"))
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "57") (inst "sk=i_32"))
                                       (rule "orRight" (formula "57"))
                                       (rule "notRight" (formula "58"))
                                       (rule "orRight" (formula "58"))
                                       (rule "inEqSimp_geqRight" (formula "59"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "59"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_32"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "20")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "47"))
                                       (rule "allLeft" (formula "25") (inst "t=i_32"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "25") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                                       (rule "andLeft" (formula "25"))
                                       (rule "inEqSimp_homoInEq1" (formula "25"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                                       (rule "add_literals" (formula "25") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0"))
                                       (rule "add_zero_right" (formula "25") (term "0"))
                                       (rule "leq_literals" (formula "25"))
                                       (rule "closeFalse" (formula "25"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "57") (inst "sk=i_31"))
                                    (rule "orRight" (formula "57"))
                                    (rule "notRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "inEqSimp_leqRight" (formula "58"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_31"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "19")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "48"))
                                    (rule "allLeft" (formula "26") (inst "t=i_31"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "26") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_homoInEq1" (formula "26"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                                    (rule "add_literals" (formula "26") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0"))
                                    (rule "add_zero_right" (formula "26") (term "0"))
                                    (rule "leq_literals" (formula "26"))
                                    (rule "closeFalse" (formula "26"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "57") (inst "sk=f_7"))
                                 (rule "allRight" (formula "57") (inst "sk=o_7"))
                                 (rule "orRight" (formula "57"))
                                 (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=f_7_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                                 (rule "eqSymm" (formula "59"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_7_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "44"))
                                    (rule "applyEqReverse" (formula "62") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "61"))
                                    (rule "replace_known_right" (formula "60") (term "0,0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "43")))
                                    (rule "closeTrue" (formula "60"))
                                 )
                                 (branch " ¬o_7 = null ∧ ¬( o_7.<created> = TRUE ∨ o_7.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "60") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "CUT: verif.selectvoting.system.core.MixServer.ServerMisbehavior::instance(exc_1) = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "41"))
                              (rule "replace_known_right" (formula "58") (term "1,1,0") (ifseqformula "42"))
                              (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "41")))
                              (rule "andRight" (formula "58"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "58"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "58"))
                                    (branch "Case 1"
                                       (rule "allRight" (formula "58") (inst "sk=i_30"))
                                       (rule "orRight" (formula "58"))
                                       (rule "orRight" (formula "58"))
                                       (rule "notRight" (formula "60"))
                                       (rule "inEqSimp_geqRight" (formula "60"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "60"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_30"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "23")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "47"))
                                       (rule "allLeft" (formula "24") (inst "t=i_30"))
                                       (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                       (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "24") (term "0,0,1"))
                                       (rule "leq_literals" (formula "24") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "58") (inst "sk=i_29"))
                                       (rule "orRight" (formula "58"))
                                       (rule "orRight" (formula "58"))
                                       (rule "notRight" (formula "60"))
                                       (rule "inEqSimp_geqRight" (formula "60"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "60"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_29"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "20")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "48"))
                                       (rule "allLeft" (formula "25") (inst "t=i_29"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                       (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "25") (term "0,0,1"))
                                       (rule "leq_literals" (formula "25") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "58") (inst "sk=i_28"))
                                    (rule "orRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "notRight" (formula "60"))
                                    (rule "inEqSimp_geqRight" (formula "60"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "60"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_28"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "19")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "49"))
                                    (rule "allLeft" (formula "26") (inst "t=i_28"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                    (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "26") (term "0,0,1"))
                                    (rule "leq_literals" (formula "26") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "26") (term "0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "closeFalse" (formula "26"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "58") (inst "sk=f_6"))
                                 (rule "allRight" (formula "58") (inst "sk=o_6"))
                                 (rule "orRight" (formula "58"))
                                 (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=f_6_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                                 (rule "eqSymm" (formula "60"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_6_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "43"))
                                    (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "62"))
                                    (rule "replace_known_right" (formula "61") (term "0,1") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "44")))
                                    (rule "closeTrue" (formula "61"))
                                 )
                                 (branch " ¬o_6 = null ∧ ¬( o_6.<created> = TRUE ∨ o_6.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "61") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: exc_1.<created> = TRUE FALSE"
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "cut_direct" (formula "41") (term "1"))
                        (branch "CUT: verif.selectvoting.system.core.MixServer.ServerMisbehavior::instance(exc_1) = TRUE TRUE"
                           (rule "instanceof_not_compatible_5" (formula "42") (term "1,0") (ifseqformula "41"))
                           (rule "instanceof_not_compatible_5" (formula "42") (term "0,0") (ifseqformula "41"))
                           (rule "instanceof_not_compatible_5" (formula "58") (term "1,0,1,0") (ifseqformula "41"))
                           (rule "instanceof_not_compatible_5" (formula "58") (term "1,0,0,1,0") (ifseqformula "41"))
                           (rule "instanceof_not_compatible_5" (formula "58") (term "0,0,0,1,0") (ifseqformula "41"))
                           (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "53")) (ifInst ""  (formula "53")))
                           (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "53")) (ifInst ""  (formula "53")) (ifInst ""  (formula "53")) (ifInst ""  (formula "41")))
                           (rule "true_left" (formula "42"))
                           (rule "andRight" (formula "57"))
                           (branch "Case 1"
                              (rule "andRight" (formula "57"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "57"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "57") (inst "sk=i_27"))
                                    (rule "orRight" (formula "57"))
                                    (rule "notRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_27"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "23")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "46"))
                                    (rule "cut_direct" (formula "30") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "allLeft" (formula "24") (inst "t=i_27"))
                                       (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                       (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                       (rule "leq_literals" (formula "24") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "24") (term "0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "closeFalse" (formula "24"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "allLeft" (formula "24") (inst "t=i_27"))
                                       (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                       (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                       (rule "leq_literals" (formula "24") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "57") (inst "sk=i_26"))
                                    (rule "orRight" (formula "57"))
                                    (rule "notRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "inEqSimp_geqRight" (formula "59"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "59"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_26"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "20")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "47"))
                                    (rule "cut_direct" (formula "30") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "allLeft" (formula "25") (inst "t=i_26"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                       (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                       (rule "leq_literals" (formula "25") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "25") (term "0"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "closeFalse" (formula "25"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "allLeft" (formula "25") (inst "t=i_26"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                       (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                       (rule "leq_literals" (formula "25") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "57") (inst "sk=i_25"))
                                 (rule "orRight" (formula "57"))
                                 (rule "notRight" (formula "58"))
                                 (rule "orRight" (formula "58"))
                                 (rule "inEqSimp_geqRight" (formula "59"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "59"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_25"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "19")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "48"))
                                 (rule "cut_direct" (formula "30") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "allLeft" (formula "26") (inst "t=i_25"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                    (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                    (rule "leq_literals" (formula "26") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "26") (term "0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "closeFalse" (formula "26"))
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "allLeft" (formula "26") (inst "t=i_25"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                    (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                    (rule "leq_literals" (formula "26") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "57") (inst "sk=f_5"))
                              (rule "allRight" (formula "57") (inst "sk=o_5"))
                              (rule "orRight" (formula "57"))
                              (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=f_5_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                              (rule "eqSymm" (formula "59"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_5_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "cut_direct" (formula "28") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_5 = null ∧ ¬( o_5.<created> = TRUE ∨ o_5.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "43"))
                                    (rule "applyEqReverse" (formula "62") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "61"))
                                    (rule "replace_known_right" (formula "60") (term "0,1") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "44")))
                                    (rule "closeTrue" (formula "60"))
                                 )
                                 (branch " ¬o_5 = null ∧ ¬( o_5.<created> = TRUE ∨ o_5.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "60") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_5 = null ∧ ¬( o_5.<created> = TRUE ∨ o_5.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "43"))
                                    (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "62"))
                                    (rule "replace_known_right" (formula "61") (term "0,1") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "44")))
                                    (rule "closeTrue" (formula "61"))
                                 )
                                 (branch " ¬o_5 = null ∧ ¬( o_5.<created> = TRUE ∨ o_5.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "61") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: verif.selectvoting.system.core.MixServer.ServerMisbehavior::instance(exc_1) = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "41"))
                           (rule "replace_known_right" (formula "58") (term "1,1,0") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "41")))
                           (rule "andRight" (formula "58"))
                           (branch "Case 1"
                              (rule "andRight" (formula "58"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "58"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "58") (inst "sk=i_24"))
                                    (rule "orRight" (formula "58"))
                                    (rule "notRight" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "inEqSimp_geqRight" (formula "60"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "60"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_24"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "23")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "47"))
                                    (rule "cut_direct" (formula "30") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "allLeft" (formula "24") (inst "t=i_24"))
                                       (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "24") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "inEqSimp_homoInEq1" (formula "24"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0"))
                                       (rule "add_literals" (formula "24") (term "0"))
                                       (rule "leq_literals" (formula "24"))
                                       (rule "closeFalse" (formula "24"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "allLeft" (formula "24") (inst "t=i_24"))
                                       (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "24") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "24"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "58") (inst "sk=i_23"))
                                    (rule "orRight" (formula "58"))
                                    (rule "notRight" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "inEqSimp_geqRight" (formula "60"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "60"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_23"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "20")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "48"))
                                    (rule "cut_direct" (formula "30") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "allLeft" (formula "25") (inst "t=i_23"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "25") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                                       (rule "andLeft" (formula "25"))
                                       (rule "inEqSimp_homoInEq1" (formula "25"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                                       (rule "add_literals" (formula "25") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0"))
                                       (rule "add_literals" (formula "25") (term "0"))
                                       (rule "leq_literals" (formula "25"))
                                       (rule "closeFalse" (formula "25"))
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "allLeft" (formula "25") (inst "t=i_23"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "25") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "25"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "58") (inst "sk=i_22"))
                                 (rule "orRight" (formula "58"))
                                 (rule "notRight" (formula "59"))
                                 (rule "orRight" (formula "59"))
                                 (rule "inEqSimp_leqRight" (formula "59"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "60"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_22"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "29"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "19")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "10") (ifseqformula "49"))
                                 (rule "cut_direct" (formula "30") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "allLeft" (formula "26") (inst "t=i_22"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "26") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_homoInEq1" (formula "26"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                                    (rule "add_literals" (formula "26") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0"))
                                    (rule "add_literals" (formula "26") (term "0"))
                                    (rule "leq_literals" (formula "26"))
                                    (rule "closeFalse" (formula "26"))
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "allLeft" (formula "26") (inst "t=i_22"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "26") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_homoInEq1" (formula "26"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                                    (rule "add_literals" (formula "26") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0"))
                                    (rule "add_zero_right" (formula "26") (term "0"))
                                    (rule "leq_literals" (formula "26"))
                                    (rule "closeFalse" (formula "26"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "58") (inst "sk=f_4"))
                              (rule "allRight" (formula "58") (inst "sk=o_4"))
                              (rule "orRight" (formula "58"))
                              (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=f_4_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                              (rule "eqSymm" (formula "60"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_4_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "cut_direct" (formula "28") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "43"))
                                    (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "62"))
                                    (rule "replace_known_right" (formula "61") (term "0,1") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "44")))
                                    (rule "closeTrue" (formula "61"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "61") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "44"))
                                    (rule "applyEqReverse" (formula "64") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "63"))
                                    (rule "replace_known_right" (formula "62") (term "0,0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "43")))
                                    (rule "closeTrue" (formula "62"))
                                 )
                                 (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_checkAndGetBallots«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "62") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                     )
                  )
               )
               (branch "ClassCastException (!(exc_1 instanceof java.lang.Throwable))"
                  (builtin "One Step Simplification" (formula "59"))
                  (rule "closeTrue" (formula "59"))
               )
            )
            (branch "if exc_1 instanceof java.lang.Throwable false"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Pre (extractBallots)"
         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")) (ifInst ""  (formula "11")))
         (rule "andRight" (formula "16") (userinteraction))
         (branch "Case 1"
            (rule "andLeft" (formula "12") (userinteraction))
            (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (inst "i=i") (userinteraction))
            (builtin "One Step Simplification" (formula "6"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "6"))
            (rule "notLeft" (formula "15"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "24") (term "0") (inst "i=i") (userinteraction))
            (builtin "One Step Simplification" (formula "24"))
            (rule "andRight" (formula "24"))
            (branch "Case 1"
               (rule "andRight" (formula "24"))
               (branch "Case 1"
                  (rule "andRight" (formula "24"))
                  (branch "Case 1"
                     (rule "andRight" (formula "24"))
                     (branch "Case 1"
                        (rule "andRight" (formula "24"))
                        (branch "Case 1"
                           (rule "andRight" (formula "24"))
                           (branch "Case 1"
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "15"))
                              (rule "eqSymm" (formula "12"))
                              (rule "eqSymm" (formula "11"))
                              (rule "eqSymm" (formula "10"))
                              (rule "eqSymm" (formula "18"))
                              (rule "eqSymm" (formula "9"))
                              (rule "eqSymm" (formula "7") (term "1,0"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                              (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                              (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                              (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "1") (ifseqformula "22"))
                              (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "10"))
                              (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "18"))
                              (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
                              (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                              (rule "eqSymm" (formula "7") (term "1,0"))
                              (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "18"))
                              (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "7") (term "0,0,1,1,0") (inst "u=u"))
                              (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "eqSeqDef" (formula "17") (inst "iv=iv"))
                              (rule "andLeft" (formula "17"))
                              (rule "getOfSeqDef" (formula "18") (term "0,1,0"))
                              (rule "castDel" (formula "18") (term "1,0,1,0"))
                              (rule "castDel" (formula "18") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "17") (term "0"))
                              (rule "eqSymm" (formula "17"))
                              (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                              (rule "times_zero_2" (formula "17") (term "1,1,1"))
                              (rule "add_zero_right" (formula "17") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                              (rule "getOfSeqDef" (formula "18") (term "0,1,0"))
                              (rule "castDel" (formula "18") (term "1,0,1,0"))
                              (rule "castDel" (formula "18") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "17") (term "0"))
                              (rule "eqSymm" (formula "17"))
                              (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                              (rule "times_zero_2" (formula "17") (term "1,1,1"))
                              (rule "add_zero_right" (formula "17") (term "1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1"))
                              (rule "add_zero_right" (formula "17") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0"))
                              (rule "apply_eq_monomials" (formula "18") (term "1,0,0,1,0,0") (ifseqformula "17"))
                              (rule "polySimp_rightDist" (formula "18") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "18") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "18") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                              (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_7"))
                              (rule "applyEq" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
                              (rule "applyEq" (formula "18") (term "1,1,0,1,0") (ifseqformula "16"))
                              (rule "applyEq" (formula "17") (term "0,0,0,0") (ifseqformula "16"))
                              (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "21")) (ifInst ""  (formula "2")))
                              (rule "applyEqReverse" (formula "17") (term "0,1,0") (ifseqformula "16"))
                              (rule "applyEqReverse" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
                              (rule "applyEqReverse" (formula "18") (term "1,1,0,1,0") (ifseqformula "16"))
                              (rule "applyEqReverse" (formula "17") (term "0,0,0,0") (ifseqformula "16"))
                              (rule "hideAuxiliaryEq" (formula "16"))
                              (rule "nnf_imp2or" (formula "7") (term "0"))
                              (rule "nnf_imp2or" (formula "17") (term "0"))
                              (rule "nnf_notAnd" (formula "7") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "17") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                              (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "6") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                              (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "21")) (ifInst ""  (formula "1")))
                              (rule "eqSymm" (formula "6"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "andLeft" (formula "6"))
                              (rule "andLeft" (formula "6"))
                              (rule "andLeft" (formula "6"))
                              (rule "andLeft" (formula "6"))
                              (rule "notLeft" (formula "7"))
                              (rule "andLeft" (formula "6"))
                              (rule "notLeft" (formula "7"))
                              (rule "andLeft" (formula "6"))
                              (rule "andLeft" (formula "6"))
                              (rule "notLeft" (formula "8"))
                              (rule "notLeft" (formula "7"))
                              (rule "notLeft" (formula "6"))
                              (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "6") (term "0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_imp2or" (formula "7") (term "0"))
                              (rule "nnf_notAnd" (formula "6") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                              (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "7") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                              (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "31") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "replaceKnownSelect_taclet0000000201_0" (formula "31") (term "0,0,1,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000000201_1" (formula "31") (term "0,0,1,0,0,0,0"))
                              (rule "replace_known_right" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0"))
                              (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_6"))
                              (rule "applyEq" (formula "32") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "32") (term "0,0,1,0,0,0,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "32") (term "0,0,1,0,0,0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "31") (term "0,1,0,0,0,0,0") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0") (ifseqformula "12"))
                              (rule "pullOutSelect" (formula "31") (term "0,1,1,1,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_6"))
                              (rule "applyEq" (formula "32") (term "1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "32") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "32") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "applyEq" (formula "31") (term "1,1,1,0,0,1") (ifseqformula "13"))
                              (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_6"))
                              (rule "applyEq" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "32") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "31") (term "0,0,0,0,0") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "pullOutSelect" (formula "31") (term "0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_6"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "31") (term "0,0,0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                              (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                              (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "33") (term "0,1"))
                              (rule "nnf_imp2or" (formula "33") (term "0,1,0"))
                              (rule "nnf_imp2or" (formula "33") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_imp2or" (formula "10") (term "0"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0,1"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,1,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "3"))
                              (rule "replaceKnownSelect_taclet0000000201_6" (formula "20") (term "1,1,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000000201_7" (formula "20") (term "1,1,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet0000000201_2" (formula "20") (term "1,1,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000000201_3" (formula "20") (term "1,1,0,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet0000000201_4" (formula "20") (term "1,1,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000000201_5" (formula "20") (term "1,1,0,0,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet0000000201_8" (formula "20") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet0000000201_0" (formula "20") (term "0,0,1,0,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000000201_9" (formula "20") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000000201_1" (formula "20") (term "0,0,1,0,0,0,0,0,0,0"))
                              (rule "andLeft" (formula "20"))
                              (rule "notLeft" (formula "21"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "notLeft" (formula "22"))
                              (rule "notLeft" (formula "21"))
                              (rule "andLeft" (formula "20"))
                              (rule "notLeft" (formula "21"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "notLeft" (formula "21"))
                              (rule "notLeft" (formula "20"))
                              (rule "nonNull" (formula "22") (inst "i=i"))
                              (rule "greater_literals" (formula "22") (term "0,1"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "27")))
                              (rule "sub_literals" (formula "22") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "21") (inst "i=i"))
                              (rule "greater_literals" (formula "21") (term "0,1"))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "28")))
                              (rule "sub_literals" (formula "21") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                              (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "20") (inst "i=i"))
                              (rule "greater_literals" (formula "20") (term "0,1"))
                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "29")))
                              (rule "sub_literals" (formula "20") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                              (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_6"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "narrowSelectArrayType" (formula "9") (term "2,0,0,1,1,0") (ifseqformula "1") (ifseqformula "26"))
                              (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_6"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_6"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_6"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "13") (ifseqformula "3"))
                              (rule "andLeft" (formula "13"))
                              (rule "notLeft" (formula "14"))
                              (rule "andLeft" (formula "13"))
                              (rule "notLeft" (formula "14"))
                              (rule "andLeft" (formula "13"))
                              (rule "notLeft" (formula "14"))
                              (rule "andLeft" (formula "13"))
                              (rule "notLeft" (formula "14"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "notLeft" (formula "14"))
                              (rule "notLeft" (formula "13"))
                              (rule "nonNull" (formula "15") (inst "i=i"))
                              (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "29")))
                              (rule "greater_literals" (formula "15") (term "0"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "29"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "14") (inst "i=i"))
                              (rule "greater_literals" (formula "14") (term "0,1"))
                              (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "30")))
                              (rule "sub_literals" (formula "14") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "30"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "13") (inst "i=i"))
                              (rule "greater_literals" (formula "13") (term "0,1"))
                              (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "31")))
                              (rule "sub_literals" (formula "13") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "31"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                              (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                              (rule "commute_or_2" (formula "21") (term "0"))
                              (rule "commute_or_2" (formula "6") (term "0"))
                              (rule "nnf_imp2or" (formula "24") (term "0"))
                              (rule "commute_or_2" (formula "8") (term "0"))
                              (rule "nnf_imp2or" (formula "23") (term "0"))
                              (rule "commute_or_2" (formula "7") (term "0"))
                              (rule "nnf_imp2or" (formula "22") (term "0"))
                              (rule "arrayLengthIsAShort" (formula "12") (term "0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "arrayLengthNotNegative" (formula "12") (term "0"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                              (rule "arrayLengthNotNegative" (formula "11") (term "1"))
                              (rule "arrayLengthIsAShort" (formula "11") (term "0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                              (rule "arrayLengthIsAShort" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "nnf_imp2or" (formula "16") (term "0"))
                              (rule "cut_direct" (formula "20") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "nnf_imp2or" (formula "15") (term "0"))
                                 (rule "ifthenelse_split" (formula "21") (term "1"))
                                 (branch "result_0.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "nnf_imp2or" (formula "14") (term "0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                    (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.concatenated.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "1,0,0,1,1,0"))
                                       (rule "arrayLengthIsAShort" (formula "10") (term "1,0,0,1,1,0"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "andRight" (formula "41"))
                                       (branch "Case 1"
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or" (formula "6") (term "0,0"))
                                          (rule "commute_or" (formula "8") (term "0,0"))
                                          (rule "commute_or" (formula "7") (term "0,0"))
                                          (rule "commute_or_2" (formula "27") (term "0"))
                                          (rule "commute_or_2" (formula "26") (term "0"))
                                          (rule "commute_or_2" (formula "25") (term "0"))
                                          (rule "commute_or_2" (formula "17") (term "0"))
                                          (rule "commute_or_2" (formula "16") (term "0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or_2" (formula "15") (term "0"))
                                          (rule "commute_or" (formula "10") (term "0,0"))
                                          (rule "commute_or" (formula "27") (term "0,0"))
                                          (rule "commute_or" (formula "26") (term "0,0"))
                                          (rule "commute_or" (formula "25") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or" (formula "16") (term "0,0"))
                                          (rule "commute_or" (formula "15") (term "0,0"))
                                          (rule "andRight" (formula "38"))
                                          (branch "Case 1"
                                             (rule "allRight" (formula "38") (inst "sk=i_1_3"))
                                             (rule "orRight" (formula "38"))
                                             (rule "orRight" (formula "38"))
                                             (rule "notRight" (formula "40"))
                                             (rule "inEqSimp_leqRight" (formula "39"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_geqRight" (formula "40"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_135"))
                                             (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "33")))
                                             (rule "ifthenelse_negated" (formula "3") (term "0"))
                                             (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                             (rule "ifEqualsNull" (formula "3"))
                                             (rule "cnf_rightDist" (formula "3"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "commute_or" (formula "3"))
                                             (rule "cnf_rightDist" (formula "4"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "commute_or" (formula "4"))
                                             (rule "cnf_rightDist" (formula "3"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "commute_or" (formula "3"))
                                             (rule "ifthenelse_to_or_right" (formula "27") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,1,1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,1,1,0,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0"))
                                             (rule "commute_or_2" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                             (rule "commute_or" (formula "27") (term "1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "27") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,1,0"))
                                             (rule "qeq_literals" (formula "27") (term "1,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "1,1,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "27") (term "1,1,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,1,1,0"))
                                             (rule "add_literals" (formula "27") (term "1,0,1,1,1,0"))
                                             (rule "times_zero_1" (formula "27") (term "0,1,1,1,0"))
                                             (rule "leq_literals" (formula "27") (term "1,1,1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "7"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "7"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "8"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1") (ifseqformula "8"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "arrayLengthNotNegative" (formula "28") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "27"))
                                             (rule "leq_literals" (formula "28") (term "0"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "arrayLengthIsAShort" (formula "28") (term "1"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "11") (inst "t=i_1_3"))
                                             (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                             (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "11") (term "0,0,1"))
                                             (rule "leq_literals" (formula "11") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "11") (term "0"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "closeFalse" (formula "11"))
                                          )
                                          (branch "Case 2"
                                             (rule "allRight" (formula "38") (inst "sk=i_0_3"))
                                             (rule "orRight" (formula "38"))
                                             (rule "orRight" (formula "38"))
                                             (rule "notRight" (formula "40"))
                                             (rule "inEqSimp_leqRight" (formula "39"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_geqRight" (formula "40"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_134"))
                                             (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "34")))
                                             (rule "ifthenelse_negated" (formula "3") (term "0"))
                                             (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                             (rule "ifEqualsNull" (formula "3"))
                                             (rule "cnf_rightDist" (formula "3"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "commute_or" (formula "3"))
                                             (rule "cnf_rightDist" (formula "4"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "commute_or" (formula "4"))
                                             (rule "cnf_rightDist" (formula "3"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "commute_or" (formula "3"))
                                             (rule "ifthenelse_to_or_right" (formula "27") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,1,1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,1,1,0,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0"))
                                             (rule "commute_or_2" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                             (rule "commute_or" (formula "27") (term "1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "27") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,1,0"))
                                             (rule "qeq_literals" (formula "27") (term "1,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "1,1,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "27") (term "1,1,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,1,1,0"))
                                             (rule "add_literals" (formula "27") (term "1,0,1,1,1,0"))
                                             (rule "times_zero_1" (formula "27") (term "0,1,1,1,0"))
                                             (rule "leq_literals" (formula "27") (term "1,1,1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "7"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "7"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "8"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "17"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1") (ifseqformula "6"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "arrayLengthIsAShort" (formula "28") (term "1"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "28"))
                                             (rule "leq_literals" (formula "27") (term "0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "allLeft" (formula "12") (inst "t=i_0_3"))
                                             (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                             (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                             (rule "leq_literals" (formula "12") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "12"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "allRight" (formula "41") (inst "sk=i_50"))
                                          (rule "orRight" (formula "41"))
                                          (rule "notRight" (formula "42"))
                                          (rule "orRight" (formula "42"))
                                          (rule "inEqSimp_leqRight" (formula "42"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "43"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_133"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                                          (rule "ifthenelse_negated" (formula "3") (term "0"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                          (rule "ifEqualsNull" (formula "3"))
                                          (rule "commute_or_2" (formula "14") (term "0"))
                                          (rule "commute_or" (formula "10") (term "0,0"))
                                          (rule "commute_or" (formula "12") (term "0,0"))
                                          (rule "commute_or" (formula "11") (term "0,0"))
                                          (rule "commute_or_2" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "21") (term "0"))
                                          (rule "commute_or_2" (formula "20") (term "0"))
                                          (rule "commute_or" (formula "28") (term "0,0"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "commute_or" (formula "14") (term "0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0"))
                                          (rule "commute_or" (formula "19") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "cnf_rightDist" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or" (formula "4"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "ifthenelse_to_or_right" (formula "27") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "27") (term "0,0"))
                                          (rule "commute_or_2" (formula "27") (term "0"))
                                          (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                          (rule "commute_or" (formula "27") (term "1,1,0"))
                                          (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                          (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "27") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,1,0"))
                                          (rule "qeq_literals" (formula "27") (term "1,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "shift_paren_or" (formula "27") (term "1,1,0"))
                                          (rule "commute_or" (formula "27") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "27") (term "1,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "27") (term "1,1,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,1,1,0"))
                                          (rule "add_literals" (formula "27") (term "1,0,1,1,1,0"))
                                          (rule "times_zero_1" (formula "27") (term "0,1,1,1,0"))
                                          (rule "leq_literals" (formula "27") (term "1,1,1,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "shift_paren_or" (formula "27") (term "0"))
                                          (rule "commute_or_2" (formula "27") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "shift_paren_or" (formula "27") (term "0,0"))
                                          (rule "commute_or" (formula "27") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "7"))
                                          (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1,1") (ifseqformula "5"))
                                          (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "36"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "5"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "1"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "28"))
                                          (rule "leq_literals" (formula "27") (term "0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "0"))
                                          (rule "distr_forallAnd" (formula "29"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "cnf_rightDist" (formula "30") (term "0"))
                                          (rule "distr_forallAnd" (formula "30"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                          (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                          (rule "leq_literals" (formula "31") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "shift_paren_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                          (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "allLeft" (formula "13") (inst "t=i_50"))
                                          (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                          (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                          (rule "leq_literals" (formula "13") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "3") (term "0"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "closeFalse" (formula "3"))
                                       )
                                    )
                                    (branch "self.concatenated.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "27"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                                 (branch "result_0.length ≥ 1 FALSE"
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_geqRight" (formula "26"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_notGeq" (formula "22") (term "0"))
                                    (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,0"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                    (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                    (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "10") (term "1,0,0,1,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "11") (term "1,0,0,1,1,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "andRight" (formula "41"))
                                    (branch "Case 1"
                                       (rule "commute_or_2" (formula "11") (term "0"))
                                       (rule "commute_or" (formula "7") (term "0,0"))
                                       (rule "commute_or" (formula "9") (term "0,0"))
                                       (rule "commute_or" (formula "8") (term "0,0"))
                                       (rule "commute_or" (formula "24") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0"))
                                       (rule "add_zero_right" (formula "24") (term "1,1,0"))
                                       (rule "qeq_literals" (formula "24") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "commute_or_2" (formula "26") (term "0"))
                                       (rule "commute_or_2" (formula "25") (term "0"))
                                       (rule "commute_or_2" (formula "24") (term "0"))
                                       (rule "commute_or_2" (formula "18") (term "0"))
                                       (rule "commute_or_2" (formula "17") (term "0"))
                                       (rule "commute_or_2" (formula "16") (term "0"))
                                       (rule "commute_or" (formula "11") (term "0,0"))
                                       (rule "commute_or" (formula "26") (term "0,0"))
                                       (rule "commute_or" (formula "25") (term "0,0"))
                                       (rule "commute_or" (formula "24") (term "0,0"))
                                       (rule "commute_or" (formula "18") (term "0,0"))
                                       (rule "commute_or" (formula "17") (term "0,0"))
                                       (rule "commute_or" (formula "16") (term "0,0"))
                                       (rule "andRight" (formula "37"))
                                       (branch "Case 1"
                                          (rule "allRight" (formula "37") (inst "sk=i_1_2"))
                                          (rule "orRight" (formula "37"))
                                          (rule "notRight" (formula "38"))
                                          (rule "orRight" (formula "38"))
                                          (rule "inEqSimp_leqRight" (formula "38"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "39"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_132"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
                                          (rule "ifthenelse_negated" (formula "3") (term "0"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                          (rule "ifEqualsNull" (formula "3"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "cnf_rightDist" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or" (formula "4"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "8"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "8"))
                                          (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "8"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "9"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0,1"))
                                          (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                          (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                          (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "allLeft" (formula "12") (inst "t=i_1_2"))
                                          (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                          (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                          (rule "leq_literals" (formula "12") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "12") (term "0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "closeFalse" (formula "12"))
                                       )
                                       (branch "Case 2"
                                          (rule "allRight" (formula "37") (inst "sk=i_0_2"))
                                          (rule "orRight" (formula "37"))
                                          (rule "notRight" (formula "38"))
                                          (rule "orRight" (formula "38"))
                                          (rule "inEqSimp_leqRight" (formula "38"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "39"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_131"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "33")))
                                          (rule "ifthenelse_negated" (formula "3") (term "0"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                          (rule "ifEqualsNull" (formula "3"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "cnf_rightDist" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or" (formula "4"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "8"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "8"))
                                          (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "18"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "18"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,1") (ifseqformula "7"))
                                          (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "36"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0,1"))
                                          (rule "arrayLengthIsAShort" (formula "29") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                          (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                          (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "allLeft" (formula "13") (inst "t=i_0_2"))
                                          (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "13") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "2"))
                                          (rule "andLeft" (formula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "13"))
                                          (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                                          (rule "add_literals" (formula "13") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0"))
                                          (rule "add_zero_right" (formula "13") (term "0"))
                                          (rule "leq_literals" (formula "13"))
                                          (rule "closeFalse" (formula "13"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "41") (inst "sk=i_49"))
                                       (rule "orRight" (formula "41"))
                                       (rule "notRight" (formula "42"))
                                       (rule "orRight" (formula "42"))
                                       (rule "inEqSimp_leqRight" (formula "42"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "43"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_130"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                                       (rule "ifthenelse_negated" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                       (rule "ifEqualsNull" (formula "3"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "commute_or" (formula "11") (term "0,0"))
                                       (rule "commute_or" (formula "13") (term "0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0"))
                                       (rule "commute_or" (formula "28") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0"))
                                       (rule "add_zero_right" (formula "28") (term "1,1,0"))
                                       (rule "qeq_literals" (formula "28") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "commute_or_2" (formula "30") (term "0"))
                                       (rule "commute_or_2" (formula "29") (term "0"))
                                       (rule "commute_or_2" (formula "28") (term "0"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "commute_or_2" (formula "20") (term "0"))
                                       (rule "commute_or" (formula "15") (term "0,0"))
                                       (rule "commute_or" (formula "30") (term "0,0"))
                                       (rule "commute_or" (formula "29") (term "0,0"))
                                       (rule "commute_or" (formula "28") (term "0,0"))
                                       (rule "commute_or" (formula "22") (term "0,0"))
                                       (rule "commute_or" (formula "21") (term "0,0"))
                                       (rule "commute_or" (formula "20") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "commute_or" (formula "3"))
                                       (rule "cnf_rightDist" (formula "4"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "commute_or" (formula "4"))
                                       (rule "cnf_rightDist" (formula "3"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "commute_or" (formula "3"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,0") (ifseqformula "8"))
                                       (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "37"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "7"))
                                       (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1") (ifseqformula "7"))
                                       (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "arrayLengthNotNegative" (formula "28") (term "0,1"))
                                       (rule "arrayLengthIsAShort" (formula "29") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                       (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                       (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                       (rule "leq_literals" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "cut_direct" (formula "29") (term "0"))
                                       (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "29"))
                                          (rule "applyEq" (formula "30") (term "0") (ifseqformula "28"))
                                          (rule "leq_literals" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                                          (rule "qeq_literals" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "allLeft" (formula "14") (inst "t=i_49"))
                                          (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "14") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "2"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "inEqSimp_homoInEq1" (formula "14"))
                                          (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                                          (rule "add_literals" (formula "14") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "14") (term "1,0"))
                                          (rule "add_zero_right" (formula "14") (term "0"))
                                          (rule "leq_literals" (formula "14"))
                                          (rule "closeFalse" (formula "14"))
                                       )
                                       (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_leqRight" (formula "33"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                          (rule "qeq_literals" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "29"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "nnf_imp2or" (formula "15") (term "0"))
                                 (rule "ifthenelse_split" (formula "21") (term "1"))
                                 (branch "result_0.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "nnf_imp2or" (formula "14") (term "0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                    (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                    (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "22") (term "0"))
                                    (branch "self.concatenated.length ≥ 1 TRUE"
                                       (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "1,0,0,1,1,0"))
                                       (rule "arrayLengthIsAShort" (formula "10") (term "1,0,0,1,1,0"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "andRight" (formula "42"))
                                       (branch "Case 1"
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "commute_or" (formula "6") (term "0,0"))
                                          (rule "commute_or" (formula "8") (term "0,0"))
                                          (rule "commute_or" (formula "7") (term "0,0"))
                                          (rule "commute_or_2" (formula "27") (term "0"))
                                          (rule "commute_or_2" (formula "26") (term "0"))
                                          (rule "commute_or_2" (formula "25") (term "0"))
                                          (rule "commute_or_2" (formula "17") (term "0"))
                                          (rule "commute_or_2" (formula "16") (term "0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or_2" (formula "15") (term "0"))
                                          (rule "commute_or" (formula "10") (term "0,0"))
                                          (rule "commute_or" (formula "27") (term "0,0"))
                                          (rule "commute_or" (formula "26") (term "0,0"))
                                          (rule "commute_or" (formula "25") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or" (formula "16") (term "0,0"))
                                          (rule "commute_or" (formula "15") (term "0,0"))
                                          (rule "andRight" (formula "39"))
                                          (branch "Case 1"
                                             (rule "allRight" (formula "39") (inst "sk=i_1_1"))
                                             (rule "orRight" (formula "39"))
                                             (rule "notRight" (formula "40"))
                                             (rule "orRight" (formula "40"))
                                             (rule "inEqSimp_geqRight" (formula "41"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "41"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_129"))
                                             (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "34")))
                                             (rule "ifthenelse_negated" (formula "3") (term "0"))
                                             (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                             (rule "ifEqualsNull" (formula "3"))
                                             (rule "cnf_rightDist" (formula "3"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "commute_or" (formula "3"))
                                             (rule "cnf_rightDist" (formula "4"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "commute_or" (formula "4"))
                                             (rule "cnf_rightDist" (formula "3"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "commute_or" (formula "3"))
                                             (rule "ifthenelse_to_or_left" (formula "27") (term "0,0,0"))
                                             (rule "eqSymm" (formula "27") (term "1,0,0,0,0"))
                                             (rule "eqSymm" (formula "27") (term "1,1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,1,1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,1,1,0,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0"))
                                             (rule "commute_or_2" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                             (rule "commute_or" (formula "27") (term "1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "27") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,1,0"))
                                             (rule "qeq_literals" (formula "27") (term "1,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "1,1,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "27") (term "1,1,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,1,1,0"))
                                             (rule "add_literals" (formula "27") (term "1,0,1,1,1,0"))
                                             (rule "times_zero_1" (formula "27") (term "0,1,1,1,0"))
                                             (rule "leq_literals" (formula "27") (term "1,1,1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "7"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "7"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "8"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1") (ifseqformula "8"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "arrayLengthNotNegative" (formula "28") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "27"))
                                             (rule "leq_literals" (formula "28") (term "0"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "11") (inst "t=i_1_1"))
                                             (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "11") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "11"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "3") (term "1,0"))
                                             (rule "add_literals" (formula "3") (term "0"))
                                             (rule "leq_literals" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch "Case 2"
                                             (rule "allRight" (formula "39") (inst "sk=i_0_1"))
                                             (rule "orRight" (formula "39"))
                                             (rule "notRight" (formula "40"))
                                             (rule "orRight" (formula "40"))
                                             (rule "inEqSimp_geqRight" (formula "41"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "41"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_128"))
                                             (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "35")))
                                             (rule "ifthenelse_negated" (formula "3") (term "0"))
                                             (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                             (rule "ifEqualsNull" (formula "3"))
                                             (rule "cnf_rightDist" (formula "3"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "commute_or" (formula "3"))
                                             (rule "cnf_rightDist" (formula "4"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "commute_or" (formula "4"))
                                             (rule "cnf_rightDist" (formula "3"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "commute_or" (formula "3"))
                                             (rule "ifthenelse_to_or_left" (formula "27") (term "0,0,0"))
                                             (rule "eqSymm" (formula "27") (term "1,0,0,0,0"))
                                             (rule "eqSymm" (formula "27") (term "1,1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,1,1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,1,1,0,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0"))
                                             (rule "commute_or_2" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                             (rule "commute_or" (formula "27") (term "1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "27") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,1,0"))
                                             (rule "qeq_literals" (formula "27") (term "1,0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "1,1,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "27") (term "1,1,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,1,1,0"))
                                             (rule "add_literals" (formula "27") (term "1,0,1,1,1,0"))
                                             (rule "times_zero_1" (formula "27") (term "0,1,1,1,0"))
                                             (rule "leq_literals" (formula "27") (term "1,1,1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "shift_paren_or" (formula "27") (term "0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "7"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "7"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "8"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1") (ifseqformula "6"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "28"))
                                             (rule "leq_literals" (formula "27") (term "0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "allLeft" (formula "12") (inst "t=i_0_1"))
                                             (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                             (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                             (rule "leq_literals" (formula "12") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "12") (term "0"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "closeFalse" (formula "12"))
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "allRight" (formula "42") (inst "sk=i_48"))
                                          (rule "orRight" (formula "42"))
                                          (rule "notRight" (formula "43"))
                                          (rule "orRight" (formula "43"))
                                          (rule "inEqSimp_geqRight" (formula "44"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "44"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_127"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")))
                                          (rule "ifthenelse_negated" (formula "3") (term "0"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                          (rule "ifEqualsNull" (formula "3"))
                                          (rule "commute_or_2" (formula "14") (term "0"))
                                          (rule "commute_or" (formula "10") (term "0,0"))
                                          (rule "commute_or" (formula "12") (term "0,0"))
                                          (rule "commute_or" (formula "11") (term "0,0"))
                                          (rule "commute_or_2" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "21") (term "0"))
                                          (rule "commute_or_2" (formula "20") (term "0"))
                                          (rule "commute_or" (formula "28") (term "0,0"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "commute_or" (formula "14") (term "0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0"))
                                          (rule "commute_or" (formula "19") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "cnf_rightDist" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or" (formula "4"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "ifthenelse_to_or_right" (formula "27") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,1,1,0,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,0"))
                                          (rule "commute_or" (formula "27") (term "0,0"))
                                          (rule "commute_or_2" (formula "27") (term "0"))
                                          (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                          (rule "commute_or" (formula "27") (term "1,1,0"))
                                          (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                          (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "27") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,1,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,1,0"))
                                          (rule "qeq_literals" (formula "27") (term "1,0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "shift_paren_or" (formula "27") (term "1,1,0"))
                                          (rule "commute_or" (formula "27") (term "0,1,1,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "27") (term "1,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "27") (term "1,1,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,1,1,0"))
                                          (rule "add_literals" (formula "27") (term "1,0,1,1,1,0"))
                                          (rule "times_zero_1" (formula "27") (term "0,1,1,1,0"))
                                          (rule "leq_literals" (formula "27") (term "1,1,1,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "shift_paren_or" (formula "27") (term "0"))
                                          (rule "commute_or_2" (formula "27") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "shift_paren_or" (formula "27") (term "0,0"))
                                          (rule "commute_or" (formula "27") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,0") (ifseqformula "7"))
                                          (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "17"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "17"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "1,1") (ifseqformula "5"))
                                          (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "5"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,1") (ifseqformula "6"))
                                          (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "28"))
                                          (rule "leq_literals" (formula "27") (term "0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                          (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                          (rule "commute_or" (formula "29") (term "1,1,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "29") (term "0"))
                                          (rule "distr_forallAnd" (formula "29"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "commute_or" (formula "30") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "cnf_rightDist" (formula "30") (term "0"))
                                          (rule "distr_forallAnd" (formula "30"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "shift_paren_or" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                          (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                          (rule "leq_literals" (formula "31") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "shift_paren_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                          (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "allLeft" (formula "13") (inst "t=i_48"))
                                          (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "13") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "3"))
                                          (rule "andLeft" (formula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "13"))
                                          (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                                          (rule "add_literals" (formula "13") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0"))
                                          (rule "add_literals" (formula "13") (term "0"))
                                          (rule "leq_literals" (formula "13"))
                                          (rule "closeFalse" (formula "13"))
                                       )
                                    )
                                    (branch "self.concatenated.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "22"))
                                       (rule "inEqSimp_geqRight" (formula "27"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "closeFalse" (formula "22"))
                                    )
                                 )
                                 (branch "result_0.length ≥ 1 FALSE"
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_geqRight" (formula "26"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_notGeq" (formula "22") (term "0"))
                                    (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "22") (term "0,0"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                    (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                    (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "10") (term "1,0,0,1,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "11") (term "1,0,0,1,1,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "andRight" (formula "42"))
                                    (branch "Case 1"
                                       (rule "commute_or_2" (formula "11") (term "0"))
                                       (rule "commute_or" (formula "7") (term "0,0"))
                                       (rule "commute_or" (formula "9") (term "0,0"))
                                       (rule "commute_or" (formula "8") (term "0,0"))
                                       (rule "commute_or" (formula "24") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0"))
                                       (rule "qeq_literals" (formula "24") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "commute_or_2" (formula "26") (term "0"))
                                       (rule "commute_or_2" (formula "25") (term "0"))
                                       (rule "commute_or_2" (formula "24") (term "0"))
                                       (rule "commute_or_2" (formula "18") (term "0"))
                                       (rule "commute_or_2" (formula "17") (term "0"))
                                       (rule "commute_or_2" (formula "16") (term "0"))
                                       (rule "commute_or" (formula "11") (term "0,0"))
                                       (rule "commute_or" (formula "26") (term "0,0"))
                                       (rule "commute_or" (formula "25") (term "0,0"))
                                       (rule "commute_or" (formula "24") (term "0,0"))
                                       (rule "commute_or" (formula "18") (term "0,0"))
                                       (rule "commute_or" (formula "17") (term "0,0"))
                                       (rule "commute_or" (formula "16") (term "0,0"))
                                       (rule "andRight" (formula "38"))
                                       (branch "Case 1"
                                          (rule "allRight" (formula "38") (inst "sk=i_1_0"))
                                          (rule "orRight" (formula "38"))
                                          (rule "notRight" (formula "39"))
                                          (rule "orRight" (formula "39"))
                                          (rule "inEqSimp_leqRight" (formula "39"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "40"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_126"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "33")))
                                          (rule "ifthenelse_negated" (formula "3") (term "0"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                          (rule "ifEqualsNull" (formula "3"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "cnf_rightDist" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or" (formula "4"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "8"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "8"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "9"))
                                          (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "9"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0,1"))
                                          (rule "arrayLengthIsAShort" (formula "29") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                          (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "allLeft" (formula "12") (inst "t=i_1_0"))
                                          (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                          (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                          (rule "leq_literals" (formula "12") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "12") (term "0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "closeFalse" (formula "12"))
                                       )
                                       (branch "Case 2"
                                          (rule "allRight" (formula "38") (inst "sk=i_0_0"))
                                          (rule "orRight" (formula "38"))
                                          (rule "notRight" (formula "39"))
                                          (rule "orRight" (formula "39"))
                                          (rule "inEqSimp_leqRight" (formula "39"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "40"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_125"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "34")))
                                          (rule "ifthenelse_negated" (formula "3") (term "0"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                          (rule "ifEqualsNull" (formula "3"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "cnf_rightDist" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or" (formula "4"))
                                          (rule "cnf_rightDist" (formula "3"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_or" (formula "3"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "8"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "8"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "9"))
                                          (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "19"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "19"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,1") (ifseqformula "7"))
                                          (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0,1"))
                                          (rule "arrayLengthIsAShort" (formula "29") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                          (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "allLeft" (formula "13") (inst "t=i_0_0"))
                                          (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "13") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "2"))
                                          (rule "andLeft" (formula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "13"))
                                          (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                                          (rule "add_literals" (formula "13") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "13") (term "1,0"))
                                          (rule "add_literals" (formula "13") (term "0"))
                                          (rule "leq_literals" (formula "13"))
                                          (rule "closeFalse" (formula "13"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "42") (inst "sk=i_47"))
                                       (rule "orRight" (formula "42"))
                                       (rule "notRight" (formula "43"))
                                       (rule "orRight" (formula "43"))
                                       (rule "inEqSimp_geqRight" (formula "44"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "44"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_124"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")))
                                       (rule "ifthenelse_negated" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                       (rule "ifEqualsNull" (formula "3"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "commute_or" (formula "11") (term "0,0"))
                                       (rule "commute_or" (formula "13") (term "0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0"))
                                       (rule "commute_or" (formula "28") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0"))
                                       (rule "add_zero_right" (formula "28") (term "1,1,0"))
                                       (rule "qeq_literals" (formula "28") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "commute_or_2" (formula "30") (term "0"))
                                       (rule "commute_or_2" (formula "29") (term "0"))
                                       (rule "commute_or_2" (formula "28") (term "0"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "commute_or_2" (formula "20") (term "0"))
                                       (rule "commute_or" (formula "15") (term "0,0"))
                                       (rule "commute_or" (formula "30") (term "0,0"))
                                       (rule "commute_or" (formula "29") (term "0,0"))
                                       (rule "commute_or" (formula "28") (term "0,0"))
                                       (rule "commute_or" (formula "22") (term "0,0"))
                                       (rule "commute_or" (formula "21") (term "0,0"))
                                       (rule "commute_or" (formula "20") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "commute_or" (formula "3"))
                                       (rule "cnf_rightDist" (formula "4"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "commute_or" (formula "4"))
                                       (rule "cnf_rightDist" (formula "3"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "commute_or" (formula "3"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,0") (ifseqformula "8"))
                                       (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "17"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1") (ifseqformula "7"))
                                       (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "37"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "arrayLengthIsAShort" (formula "28") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "arrayLengthNotNegative" (formula "28") (term "0,1"))
                                       (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                       (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                       (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                       (rule "leq_literals" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "cut_direct" (formula "29") (term "0"))
                                       (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "29"))
                                          (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                                          (rule "qeq_literals" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                                          (rule "leq_literals" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "allLeft" (formula "14") (inst "t=i_47"))
                                          (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "14") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "3"))
                                          (rule "andLeft" (formula "14"))
                                          (rule "inEqSimp_homoInEq1" (formula "14"))
                                          (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                                          (rule "add_literals" (formula "14") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "14") (term "1,0"))
                                          (rule "add_literals" (formula "14") (term "0"))
                                          (rule "leq_literals" (formula "14"))
                                          (rule "closeFalse" (formula "14"))
                                       )
                                       (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_leqRight" (formula "33"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "30"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch
                              (rule "allRight" (formula "24") (inst "sk=i_51") (userinteraction))
                              (rule "impRight" (formula "24") (userinteraction))
                              (rule "instAll" (formula "1") (term "1,0") (ifseqformula "8") (userinteraction))
                              (rule "impLeft" (formula "1") (userinteraction))
                              (branch "Case 1"
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "9") (term "1,0"))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_ltRight" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "2"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "10") (term "1,0,0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "10") (term "0,0,0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "10") (term "1,0"))
                                 (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "array2seqDef" (formula "13") (term "0,0") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "13") (term "2,0,0") (ifseqformula "4") (ifseqformula "25"))
                                 (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
                                 (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "12"))
                                 (rule "array2seqDef" (formula "13") (term "0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "27") (inst "iv=iv"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                                 (rule "array2seqDef" (formula "21") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "27") (term "0,0,0,0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "27") (term "0,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "27") (term "0"))
                                 (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                                 (rule "eqSymm" (formula "27") (term "0"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "27") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "0,0,1,0"))
                                 (rule "array2seqDef" (formula "27") (term "0,1,1,0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "27") (term "1,0,1"))
                                 (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                                 (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                                 (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0,1"))
                                 (rule "times_zero_2" (formula "27") (term "1,1,1,0,0,1,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1"))
                                 (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1"))
                                 (rule "array2seqDef" (formula "27") (term "1,0,0,1,1,1,0,0,1") (inst "u=u"))
                                 (rule "inEqSimp_homoInEq0" (formula "27") (term "1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                                 (rule "eqSeqDef" (formula "21") (inst "iv=iv"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "getOfSeqDef" (formula "22") (term "0,1,0"))
                                 (rule "castDel" (formula "22") (term "1,0,1,0"))
                                 (rule "castDel" (formula "22") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "21") (term "1"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,1"))
                                 (rule "mul_literals" (formula "21") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "21") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "21") (term "0"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                                 (rule "times_zero_2" (formula "21") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,0"))
                                 (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "22") (term "0,1,0"))
                                 (rule "castDel" (formula "22") (term "2,0,1,0"))
                                 (rule "castDel" (formula "22") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                                 (rule "apply_eq_monomials" (formula "22") (term "1,0,0,1,0,0") (ifseqformula "21"))
                                 (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1,0,0"))
                                 (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "array2seqDef" (formula "26") (term "1,0,0,0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "26") (term "1,0,0,1,1,0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "26") (term "1,0,1"))
                                 (rule "array2seqDef" (formula "26") (term "0,0,0,0,1,0,0,1") (inst "u=u"))
                                 (rule "pullOutSelect" (formula "3") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_29"))
                                 (rule "applyEq" (formula "27") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "27") (term "1,0,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "27") (term "1,1,1,1,1,0,1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "27") (term "1,0,1,1,0") (ifseqformula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "27") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "27") (term "1,0,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "27") (term "1,1,1,1,1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "27") (term "1,0,1,1,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "12"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0"))
                                 (rule "add_literals" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                              (branch "Case 2"
                                 (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndGetBallots,
            byte[]::select(heapAfter_checkAndGetBallots,
                           byte[][]::select(heapAfter_checkAndGetBallots,
                                            self,
                                            verif.selectvoting.system.core.MixServer::$encrypted),
                           arr(i_51)))
= array2seq(heap,
            byte[]::select(heap,
                           byte[][]::select(heap,
                                            self,
                                            verif.selectvoting.system.core.MixServer::$encrypted),
                           arr(i_51)))") (userinteraction))
                                 (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.encrypted[i_51]@heapAfter_checkAndGetBallots) = array2seq(heap, self.encrypted[i_51]) TRUE"
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "1") (userinteraction))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "2") (userinteraction))
                                    (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndGetBallots,
            byte[]::select(heapAfter_checkAndGetBallots,
                           self,
                           verif.selectvoting.system.core.MixServer::$electionID))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$electionID))") (userinteraction))
                                    (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.electionID@heapAfter_checkAndGetBallots) = array2seq(heap, self.electionID) TRUE"
                                       (rule "applyEq" (formula "28") (term "0,0,1") (ifseqformula "1") (userinteraction))
                                       (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndGetBallots,
            byte[]::select(heapAfter_checkAndGetBallots,
                           byte[][]::select(heapAfter_checkAndGetBallots,
                                            self,
                                            verif.selectvoting.system.core.MixServer::$chosen),
                           arr(i_51)))
= array2seq(heap,
            byte[]::select(heap,
                           byte[][]::select(heap,
                                            self,
                                            verif.selectvoting.system.core.MixServer::$chosen),
                           arr(i_51)))") (userinteraction))
                                       (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.chosen[i_51]@heapAfter_checkAndGetBallots) = array2seq(heap, self.chosen[i_51]) TRUE"
                                          (rule "applyEq" (formula "29") (term "1,0,1") (ifseqformula "1") (userinteraction))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "closeTrue" (formula "29") (userinteraction))
                                       )
                                       (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.chosen[i_51]@heapAfter_checkAndGetBallots) = array2seq(heap, self.chosen[i_51]) FALSE"
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "24") (inst "iv=iv") (userinteraction))
                                          (rule "andRight" (formula "24") (userinteraction))
                                          (branch "Case 1"
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "eqSymm" (formula "30"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "eqSymm" (formula "14"))
                                             (rule "eqSymm" (formula "12") (term "1,0"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "eqSymm" (formula "15"))
                                             (rule "eqSymm" (formula "16"))
                                             (rule "eqSymm" (formula "3"))
                                             (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "29"))
                                             (builtin "One Step Simplification" (formula "9"))
                                             (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4"))
                                             (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "17"))
                                             (rule "applyEq" (formula "30") (term "1") (ifseqformula "3"))
                                             (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "16"))
                                             (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                                             (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                             (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "2"))
                                             (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "array2seqDef" (formula "25") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "25"))
                                             (rule "lenOfSeqDef" (formula "25") (term "0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                             (rule "times_zero_2" (formula "25") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "30") (term "1,0,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "30") (term "0,0,0") (inst "u=u"))
                                             (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "1"))
                                             (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "14"))
                                             (rule "array2seqDef" (formula "12") (term "0,0,0,1,0") (inst "u=u"))
                                             (rule "applyEq" (formula "12") (term "0,0,0,1,0") (ifseqformula "1"))
                                             (rule "array2seqDef" (formula "12") (term "1,0,0,1,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
                                             (rule "eqSymm" (formula "12") (term "1,0"))
                                             (rule "array2seqDef" (formula "23") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "23") (term "1") (inst "u=u"))
                                             (rule "array2seqDef" (formula "15") (term "1,1,0") (inst "u=u"))
                                             (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "14"))
                                             (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "15"))
                                             (rule "array2seqDef" (formula "3") (term "1,0,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "3"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "3") (term "1") (ifseqformula "2"))
                                             (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                                             (rule "applyEq" (formula "30") (term "1") (ifseqformula "3"))
                                             (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "2"))
                                             (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "array2seqDef" (formula "25") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "25"))
                                             (rule "lenOfSeqDef" (formula "25") (term "0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                             (rule "times_zero_2" (formula "25") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "30") (term "0,0,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "12") (term "0,0,1,1,0") (inst "u=u"))
                                             (rule "eqSymm" (formula "12") (term "1,0"))
                                             (rule "eqSeqDef" (formula "23") (inst "iv=iv"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "getOfSeqDef" (formula "24") (term "1,1,0"))
                                             (rule "castDel" (formula "24") (term "2,1,1,0"))
                                             (rule "castDel" (formula "24") (term "1,1,1,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,2,1,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "24") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "24") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "24") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "23") (term "0"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "polySimp_elimSub" (formula "23") (term "1,1"))
                                             (rule "times_zero_2" (formula "23") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "23") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "24") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "24") (term "1,1,1,0,0"))
                                             (rule "getOfSeqDef" (formula "24") (term "0,1,0"))
                                             (rule "castDel" (formula "24") (term "1,0,1,0"))
                                             (rule "castDel" (formula "24") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "24") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "23") (term "0"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "polySimp_elimSub" (formula "23") (term "1,1"))
                                             (rule "mul_literals" (formula "23") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "23") (term "1,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,0,0"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,0,0"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0"))
                                             (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "23"))
                                             (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "polySimp_elimOne" (formula "23") (term "0,0,1"))
                                             (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "23"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "polySimp_elimOne" (formula "23") (term "0,0,1"))
                                             (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "23"))
                                             (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                             (rule "array2seqDef" (formula "15") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "15"))
                                             (rule "narrowSelectArrayType" (formula "15") (term "2,0,0") (ifseqformula "6") (ifseqformula "29"))
                                             (rule "eqSymm" (formula "15"))
                                             (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "3"))
                                             (rule "array2seqDef" (formula "31") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "array2seqDef" (formula "2") (term "0,0,1") (inst "u=u"))
                                             (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                                             (rule "getOfSeqDef" (formula "2") (term "1,1,0"))
                                             (rule "castDel" (formula "2") (term "1,1,1,0"))
                                             (rule "castDel" (formula "2") (term "2,1,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,1,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                             (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                             (rule "castDel" (formula "2") (term "2,0,1,0"))
                                             (rule "castDel" (formula "2") (term "1,0,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "2") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,1,0,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "1") (term "1"))
                                             (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                             (rule "times_zero_2" (formula "1") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "1") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "1") (term "0"))
                                             (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                                             (rule "mul_literals" (formula "1") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "1") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                                             (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                                             (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "2") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,0,0"))
                                             (rule "eqSeqDef2" (formula "15") (inst "iv=iv") (ifseqformula "15"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "eqSeqDef" (formula "13") (term "1,0") (inst "iv=iv"))
                                             (rule "lenOfSeqDef" (formula "13") (term "1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,0"))
                                             (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,0"))
                                             (rule "add_zero_right" (formula "13") (term "1,1,0,1,0"))
                                             (rule "getOfSeqDef" (formula "13") (term "1,1,0,1,1,0"))
                                             (rule "castDel" (formula "13") (term "1,1,1,0,1,1,0"))
                                             (rule "castDel" (formula "13") (term "2,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "13") (term "0,2,1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,1,0"))
                                             (rule "add_zero_right" (formula "13") (term "0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
                                             (rule "pullOutSelect" (formula "6") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_35"))
                                             (rule "applyEq" (formula "3") (term "1,1,2,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "3") (term "1,0,1,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "32") (term "1,1,2,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "4") (term "1,1,2,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "4") (term "1,0,1,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "32") (term "1,0,1,0") (ifseqformula "6"))
                                             (rule "simplifySelectOfAnonEQ" (formula "6") (ifseqformula "21"))
                                             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "29")) (ifInst ""  (formula "9")))
                                             (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "3") (term "1,1,2,0") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "3") (term "1,0,1,0") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "32") (term "1,1,2,0") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "4") (term "1,1,2,0") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "4") (term "1,0,1,0") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "32") (term "1,0,1,0") (ifseqformula "6"))
                                             (rule "hideAuxiliaryEq" (formula "6"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "16"))
                                             (rule "pullOutSelect" (formula "26") (term "1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_30"))
                                             (rule "applyEq" (formula "32") (term "1,0,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "32") (term "1,1,2,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "27") (term "1,0,0,0,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "9")))
                                             (rule "applyEqReverse" (formula "27") (term "1,0,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "32") (term "1,0,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "32") (term "1,1,2,1,0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "27") (term "1,0,0,0,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "array2seqDef" (formula "15") (term "0,1,1") (inst "u=u"))
                                             (rule "pullOutSelect" (formula "24") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_26"))
                                             (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,1,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "24"))
                                             (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")) (ifInst ""  (formula "8")))
                                             (rule "applyEqReverse" (formula "25") (term "1,1,0,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "23") (term "0,0,0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "pullOutSelect" (formula "2") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_26"))
                                             (rule "applyEq" (formula "14") (term "1,2,0,0,0,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "1") (term "0,0,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "14") (term "1,2,0,0,0,0,1,0,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,1,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "32") (term "0,1,0,0,1") (ifseqformula "2"))
                                             (rule "applyEq" (formula "14") (term "1,2,0,0,0,0,1,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "32") (term "1,2,0,0,1") (ifseqformula "2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "21"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "29")) (ifInst ""  (formula "9")))
                                             (rule "applyEqReverse" (formula "3") (term "1,1,0,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "14") (term "1,2,0,0,0,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "1") (term "0,0,0,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "14") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "14") (term "0,1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "14") (term "1,2,0,0,0,0,1,0,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "14") (term "0,1,0,0,0,0,1,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,0,0,1") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "14") (term "1,2,0,0,0,0,1,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "1") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "31") (term "1,2,0,0,1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "lenOfSeqDef" (formula "4") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "4") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,1,1,0,0"))
                                             (rule "lenOfSeqDef" (formula "3") (term "1"))
                                             (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                             (rule "times_zero_2" (formula "3") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "3") (term "1,1"))
                                             (rule "getOfSeqDef" (formula "4") (term "1,1,0"))
                                             (rule "castDel" (formula "4") (term "1,1,1,0"))
                                             (rule "castDel" (formula "4") (term "2,1,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,2,1,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                                             (rule "castDel" (formula "4") (term "1,0,1,0"))
                                             (rule "castDel" (formula "4") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "4") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,1,0,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "3") (term "0"))
                                             (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                             (rule "times_zero_2" (formula "3") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "3") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                                             (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                                             (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                                             (rule "apply_eq_monomials" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                                             (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                                             (rule "equalityToSeqGetAndSeqLenRight" (formula "31") (inst "iv=iv"))
                                             (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                                             (rule "eqSymm" (formula "31") (term "0"))
                                             (rule "polySimp_elimSub" (formula "31") (term "1,1,0"))
                                             (rule "times_zero_2" (formula "31") (term "1,1,1,0"))
                                             (rule "add_zero_right" (formula "31") (term "1,1,0"))
                                             (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                                             (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                                             (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                                             (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                                             (rule "eqSymm" (formula "31") (term "1,0,1"))
                                             (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0,1"))
                                             (rule "times_zero_2" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                             (rule "add_zero_right" (formula "31") (term "1,1,0,1,1,0,1"))
                                             (rule "lenOfSeqDef" (formula "31") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimSub" (formula "31") (term "1,1,1,0,0,1"))
                                             (rule "times_zero_2" (formula "31") (term "1,1,1,1,0,0,1"))
                                             (rule "add_zero_right" (formula "31") (term "1,1,1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,0"))
                                             (rule "add_zero_right" (formula "31") (term "0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,1,1,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,1,0,0,1"))
                                             (rule "add_zero_right" (formula "31") (term "0,0,1,1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,1,1,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0,1"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                             (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
                                             (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,1,1,1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1,1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "31") (term "0,0,1,1,1,0,0,1"))
                                             (rule "eqSeqDef2" (formula "2") (inst "iv=iv") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "pullOutSelect" (formula "25") (term "0,1,0") (inst "selectSK=arr_218"))
                                             (rule "applyEq" (formula "26") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "31") (term "1,2,1,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "31") (term "0,1,1,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "31") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "31") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "eqSymm" (formula "26"))
                                             (rule "eqSeqDef2" (formula "15") (inst "iv=iv") (ifseqformula "15"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "pullOutSelect" (formula "4") (term "1,1,0,1,0") (inst "selectSK=arr_219"))
                                             (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "31") (term "0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "31") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "4"))
                                             (rule "applyEq" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "31") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                             (rule "applyEq" (formula "31") (term "0,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "31") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                             (rule "applyEq" (formula "31") (term "0,1,1,1,1,0,0,1") (ifseqformula "4"))
                                             (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "eqSymm" (formula "5") (term "1,0"))
                                             (rule "eqSymm" (formula "3"))
                                             (rule "applyEq" (formula "5") (term "1,1,1,0,0") (ifseqformula "3"))
                                             (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "13") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "notLeft" (formula "14"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "notLeft" (formula "13"))
                                             (rule "notLeft" (formula "13"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "29"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "28"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "ifthenelse_negated" (formula "1") (term "0"))
                                             (rule "ifthenelse_negated" (formula "4") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                             (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "26") (term "0"))
                                             (rule "nnf_imp2or" (formula "16") (term "0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0"))
                                             (rule "nnf_imp2or" (formula "5") (term "0"))
                                             (rule "nnf_imp2or" (formula "38") (term "0,1"))
                                             (rule "nnf_imp2or" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "14") (term "0"))
                                             (rule "nnf_imp2or" (formula "15") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                             (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                             (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                             (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "1"))
                                             (rule "arrayLengthIsAShort" (formula "18") (term "1"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "cut_direct" (formula "25") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "2") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                                                (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                                (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                                (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                                (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "39") (term "0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1"))
                                                (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,1"))
                                                (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "39") (term "1,0,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1"))
                                                (rule "nnf_imp2or" (formula "16") (term "0,1,1,0"))
                                                (rule "ifthenelse_split" (formula "26") (term "1"))
                                                (branch "result_0.length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "nnf_notAnd" (formula "16") (term "0,0,1,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,1,0"))
                                                   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,1,1,0"))
                                                   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,1,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,1,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,0,0,0,1,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,1,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,1,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,1,0"))
                                                   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,1,0"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "29") (ifseqformula "10"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_6" (formula "29") (term "0,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_7" (formula "29") (term "0,0,1"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_2" (formula "29") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_3" (formula "29") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_0" (formula "29") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_1" (formula "29") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_4" (formula "29") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_5" (formula "29") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "notLeft" (formula "30"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "notLeft" (formula "30"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "notLeft" (formula "30"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "notLeft" (formula "30"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "narrowSelectArrayType" (formula "2") (term "1,1,1,0") (ifseqformula "8") (ifseqformula "36"))
                                                   (rule "nonNull" (formula "31") (inst "i=i"))
                                                   (rule "sub_literals" (formula "31") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "38")))
                                                   (rule "greater_literals" (formula "31") (term "0"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "30") (inst "i=i"))
                                                   (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "37")))
                                                   (rule "greater_literals" (formula "30") (term "0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                                   (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "29") (inst "i=i"))
                                                   (rule "greater_literals" (formula "29") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "sub_literals" (formula "29") (term "2,1,0,1"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_36"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_36"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_36"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_32"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_39"))
                                                   (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                                                   (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "23"))
                                                   (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "45")) (ifInst ""  (formula "9")))
                                                   (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "29"))
                                                   (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                                   (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                                                   (rule "hideAuxiliaryEq" (formula "29"))
                                                   (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "20"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "21") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "notLeft" (formula "23"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "notLeft" (formula "21"))
                                                   (rule "notLeft" (formula "21"))
                                                   (rule "nonNull" (formula "23") (inst "i=i"))
                                                   (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "39")))
                                                   (rule "greater_literals" (formula "23") (term "0"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "39"))
                                                   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "22") (inst "i=i"))
                                                   (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "38")))
                                                   (rule "greater_literals" (formula "22") (term "0"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "38"))
                                                   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                                   (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "21") (inst "i=i"))
                                                   (rule "greater_literals" (formula "21") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "40")))
                                                   (rule "sub_literals" (formula "21") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "40"))
                                                   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                                   (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                                   (rule "nnf_imp2or" (formula "33") (term "0"))
                                                   (rule "nnf_imp2or" (formula "32") (term "0"))
                                                   (rule "nnf_imp2or" (formula "31") (term "0"))
                                                   (rule "ifthenelse_split" (formula "29") (term "0"))
                                                   (branch "self.concatenated.length ≥ 1 TRUE"
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0") (ifseqformula "29"))
                                                      (rule "nnf_imp2or" (formula "23") (term "0"))
                                                      (rule "nnf_imp2or" (formula "22") (term "0"))
                                                      (rule "nnf_imp2or" (formula "21") (term "0"))
                                                      (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                                      (rule "commute_or_2" (formula "5") (term "0"))
                                                      (rule "commute_or_2" (formula "13") (term "0"))
                                                      (rule "commute_or_2" (formula "14") (term "0"))
                                                      (rule "commute_or_2" (formula "15") (term "0"))
                                                      (rule "ifthenelse_to_or_right" (formula "16") (term "0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "16") (term "0,0,0,0,1,0"))
                                                      (rule "commute_or_2" (formula "2") (term "0"))
                                                      (rule "ifthenelse_split" (formula "40") (term "0"))
                                                      (branch "self.chosen[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "41"))
                                                         (rule "ifthenelse_split" (formula "4") (term "0"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "5"))
                                                            (rule "applyEq" (formula "47") (term "1,1,0,0,1") (ifseqformula "5"))
                                                            (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "5"))
                                                            (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "5"))
                                                            (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                            (rule "commute_or_2" (formula "19") (term "0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "3") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "4"))
                                                               (builtin "One Step Simplification" (formula "44"))
                                                               (rule "orRight" (formula "44"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,0") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "44") (term "0,0") (ifseqformula "4"))
                                                               (rule "close" (formula "44") (ifseqformula "2"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "40"))
                                                               (rule "close" (formula "34") (ifseqformula "11"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "4"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "inEqSimp_geqRight" (formula "32"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_notGeq" (formula "5") (term "0"))
                                                            (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                                            (rule "add_literals" (formula "5") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "5") (term "0,0"))
                                                            (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                            (rule "commute_or_2" (formula "19") (term "0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "4") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "44") (term "0,0,0,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "5"))
                                                               (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "3")))
                                                               (rule "closeTrue" (formula "44"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "40"))
                                                               (rule "close" (formula "34") (ifseqformula "11"))
                                                            )
                                                         )
                                                      )
                                                      (branch "self.chosen[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "41"))
                                                         (builtin "One Step Simplification" (formula "41"))
                                                         (rule "orRight" (formula "41"))
                                                         (rule "notRight" (formula "41"))
                                                         (rule "inEqSimp_geqRight" (formula "41"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "2"))
                                                         (rule "mul_literals" (formula "42") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "42") (term "0,0"))
                                                         (rule "leq_literals" (formula "42") (term "0"))
                                                         (builtin "One Step Simplification" (formula "42"))
                                                         (rule "false_right" (formula "42"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "6"))
                                                            (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "6"))
                                                            (rule "applyEq" (formula "47") (term "1,1,0,0,1") (ifseqformula "6"))
                                                            (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "6"))
                                                            (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                            (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "4") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                                               (rule "qeq_literals" (formula "3") (term "0"))
                                                               (builtin "One Step Simplification" (formula "3"))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "41"))
                                                               (rule "close" (formula "35") (ifseqformula "12"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "5"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "inEqSimp_geqRight" (formula "33"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_notGeq" (formula "6") (term "0"))
                                                            (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                                            (rule "add_literals" (formula "6") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "6") (term "0,0"))
                                                            (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                            (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "4") (term "0"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "closeFalse" (formula "4"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "41"))
                                                               (rule "close" (formula "35") (ifseqformula "12"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "self.concatenated.length ≥ 1 FALSE"
                                                      (rule "eqSymm" (formula "29"))
                                                      (rule "inEqSimp_geqRight" (formula "34"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                                      (rule "qeq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                )
                                                (branch "result_0.length ≥ 1 FALSE"
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "replace_known_right" (formula "27") (term "0,1,1,0,0") (ifseqformula "29"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "inEqSimp_geqRight" (formula "29"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_notGeq" (formula "27") (term "0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "27") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "28") (term "0,0"))
                                                   (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "28") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "true_left" (formula "28"))
                                                   (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,0"))
                                                   (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,1,0"))
                                                   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,0"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "11"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_6" (formula "28") (term "0,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_7" (formula "28") (term "0,0,1"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_2" (formula "28") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_3" (formula "28") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_0" (formula "28") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_1" (formula "28") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_4" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_5" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "28"))
                                                   (rule "notLeft" (formula "28"))
                                                   (rule "narrowSelectArrayType" (formula "3") (term "1,1,1,0") (ifseqformula "9") (ifseqformula "35"))
                                                   (rule "nonNull" (formula "30") (inst "i=i"))
                                                   (rule "greater_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "37")))
                                                   (rule "sub_literals" (formula "30") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "29") (inst "i=i"))
                                                   (rule "greater_literals" (formula "29") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "36")))
                                                   (rule "sub_literals" (formula "29") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                                   (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "28") (inst "i=i"))
                                                   (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "greater_literals" (formula "28") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "28"))
                                                   (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_35"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "11")))
                                                   (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_35"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "11")))
                                                   (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_35"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "11")))
                                                   (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_31"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "11")))
                                                   (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_38"))
                                                   (rule "applyEq" (formula "32") (term "0") (ifseqformula "28"))
                                                   (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "24"))
                                                   (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "44")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "28"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                                   (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                                                   (rule "hideAuxiliaryEq" (formula "28"))
                                                   (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "21"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "11"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "notLeft" (formula "23"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "notLeft" (formula "23"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "notLeft" (formula "24"))
                                                   (rule "notLeft" (formula "23"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "nonNull" (formula "24") (inst "i=i"))
                                                   (rule "greater_literals" (formula "24") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "38")))
                                                   (rule "sub_literals" (formula "24") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "24"))
                                                   (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "38"))
                                                   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "23") (inst "i=i"))
                                                   (rule "greater_literals" (formula "23") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "37")))
                                                   (rule "sub_literals" (formula "23") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "37"))
                                                   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                                   (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "22") (inst "i=i"))
                                                   (rule "greater_literals" (formula "22") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "39")))
                                                   (rule "sub_literals" (formula "22") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "39"))
                                                   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                                   (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                                   (rule "nnf_imp2or" (formula "32") (term "0"))
                                                   (rule "nnf_imp2or" (formula "31") (term "0"))
                                                   (rule "nnf_imp2or" (formula "30") (term "0"))
                                                   (rule "nnf_imp2or" (formula "24") (term "0"))
                                                   (rule "nnf_imp2or" (formula "23") (term "0"))
                                                   (rule "nnf_imp2or" (formula "22") (term "0"))
                                                   (rule "commute_or_2" (formula "6") (term "0"))
                                                   (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                                   (rule "commute_or_2" (formula "14") (term "0"))
                                                   (rule "commute_or_2" (formula "15") (term "0"))
                                                   (rule "commute_or_2" (formula "16") (term "0"))
                                                   (rule "ifthenelse_to_or_right" (formula "17") (term "0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,0,0,1,0"))
                                                   (rule "ifthenelse_split" (formula "39") (term "0"))
                                                   (branch "self.chosen[i_51].length ≥ 1 TRUE"
                                                      (rule "eqSymm" (formula "40"))
                                                      (rule "ifthenelse_split" (formula "5") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "6"))
                                                         (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "6"))
                                                         (rule "applyEq" (formula "46") (term "1,1,0,0,1") (ifseqformula "6"))
                                                         (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "6"))
                                                         (rule "commute_or_2" (formula "4") (term "0"))
                                                         (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0,0"))
                                                         (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "ifthenelse_split" (formula "4") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "43") (term "0,1,0") (ifseqformula "5"))
                                                            (builtin "One Step Simplification" (formula "43"))
                                                            (rule "orRight" (formula "43"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "43") (term "0,0") (ifseqformula "5"))
                                                            (rule "close" (formula "43") (ifseqformula "2"))
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "39"))
                                                            (rule "close" (formula "33") (ifseqformula "12"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "5"))
                                                         (builtin "One Step Simplification" (formula "5"))
                                                         (rule "inEqSimp_geqRight" (formula "31"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "6") (term "0"))
                                                         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "6") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "6") (term "0,0"))
                                                         (rule "commute_or_2" (formula "5") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "46") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0,0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "43") (term "0,1,0") (ifseqformula "6"))
                                                            (builtin "One Step Simplification" (formula "43"))
                                                            (rule "orRight" (formula "43"))
                                                            (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "43") (term "0,0") (ifseqformula "6"))
                                                            (rule "close" (formula "43") (ifseqformula "3"))
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "39"))
                                                            (rule "close" (formula "33") (ifseqformula "12"))
                                                         )
                                                      )
                                                   )
                                                   (branch "self.chosen[i_51].length ≥ 1 FALSE"
                                                      (rule "eqSymm" (formula "40"))
                                                      (builtin "One Step Simplification" (formula "40"))
                                                      (rule "orRight" (formula "40"))
                                                      (rule "notRight" (formula "40"))
                                                      (rule "inEqSimp_geqRight" (formula "40"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "2"))
                                                      (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "41") (term "0,0"))
                                                      (rule "leq_literals" (formula "41") (term "0"))
                                                      (builtin "One Step Simplification" (formula "41"))
                                                      (rule "false_right" (formula "41"))
                                                      (rule "ifthenelse_split" (formula "6") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "7"))
                                                         (rule "applyEq" (formula "46") (term "1,1,0,0,1") (ifseqformula "7"))
                                                         (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "7"))
                                                         (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "7"))
                                                         (rule "commute_or_2" (formula "5") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "46") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0,0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "48") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "48") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                                            (rule "qeq_literals" (formula "3") (term "0"))
                                                            (builtin "One Step Simplification" (formula "3"))
                                                            (rule "closeFalse" (formula "3"))
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "40"))
                                                            (rule "close" (formula "34") (ifseqformula "13"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "6"))
                                                         (builtin "One Step Simplification" (formula "6"))
                                                         (rule "inEqSimp_geqRight" (formula "32"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "7") (term "0"))
                                                         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "7") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "7") (term "0,0"))
                                                         (rule "commute_or_2" (formula "6") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "46") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0,0"))
                                                         (rule "ifthenelse_split" (formula "6") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "7"))
                                                            (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
                                                            (rule "applyEqReverse" (formula "48") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                                            (rule "applyEqReverse" (formula "48") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                            (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                            (rule "hideAuxiliaryEq" (formula "7"))
                                                            (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "4") (term "0"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "closeFalse" (formula "4"))
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "40"))
                                                            (rule "close" (formula "34") (ifseqformula "13"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "2") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                                                (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                                                (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                                (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                                (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "40") (term "0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1"))
                                                (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,1"))
                                                (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "40") (term "1,0,0,0,1"))
                                                (rule "nnf_imp2or" (formula "16") (term "0,1,1,0"))
                                                (rule "ifthenelse_split" (formula "26") (term "1"))
                                                (branch "result_0.length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "nnf_notAnd" (formula "16") (term "0,0,1,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,1,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,1,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,1,0"))
                                                   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,1,0"))
                                                   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,1,1,0"))
                                                   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,1,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,1,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,0,0,0,1,1,0"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "21") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "notLeft" (formula "21"))
                                                   (rule "notLeft" (formula "21"))
                                                   (rule "narrowSelectArrayType" (formula "2") (term "1,1,1,0") (ifseqformula "8") (ifseqformula "35"))
                                                   (rule "nonNull" (formula "23") (inst "i=i"))
                                                   (rule "greater_literals" (formula "23") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "38")))
                                                   (rule "sub_literals" (formula "23") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "38"))
                                                   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "22") (inst "i=i"))
                                                   (rule "greater_literals" (formula "22") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "37")))
                                                   (rule "sub_literals" (formula "22") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "37"))
                                                   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                                   (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "21") (inst "i=i"))
                                                   (rule "greater_literals" (formula "21") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "39")))
                                                   (rule "sub_literals" (formula "21") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "39"))
                                                   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                                   (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "31") (ifseqformula "10"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_6" (formula "31") (term "0,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_7" (formula "31") (term "0,0,1"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_2" (formula "31") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_3" (formula "31") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_0" (formula "31") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_1" (formula "31") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_4" (formula "31") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_5" (formula "31") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "32"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "33"))
                                                   (rule "notLeft" (formula "32"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "33"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "32"))
                                                   (rule "notLeft" (formula "31"))
                                                   (rule "nonNull" (formula "33") (inst "i=i"))
                                                   (rule "sub_literals" (formula "33") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "44")))
                                                   (rule "greater_literals" (formula "33") (term "0"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "32") (inst "i=i"))
                                                   (rule "greater_literals" (formula "32") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "43")))
                                                   (rule "sub_literals" (formula "32") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                                   (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "31") (inst "i=i"))
                                                   (rule "sub_literals" (formula "31") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "greater_literals" (formula "31") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "31"))
                                                   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_34"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_34"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_34"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_30"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_37"))
                                                   (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                                                   (rule "applyEq" (formula "35") (term "0") (ifseqformula "31"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "48")) (ifInst ""  (formula "9")))
                                                   (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                                                   (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "31"))
                                                   (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
                                                   (rule "hideAuxiliaryEq" (formula "31"))
                                                   (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "20"))
                                                   (rule "nnf_imp2or" (formula "23") (term "0"))
                                                   (rule "nnf_imp2or" (formula "22") (term "0"))
                                                   (rule "nnf_imp2or" (formula "21") (term "0"))
                                                   (rule "nnf_imp2or" (formula "33") (term "0"))
                                                   (rule "ifthenelse_split" (formula "29") (term "0"))
                                                   (branch "self.concatenated.length ≥ 1 TRUE"
                                                      (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                                      (rule "nnf_imp2or" (formula "32") (term "0"))
                                                      (rule "nnf_imp2or" (formula "31") (term "0"))
                                                      (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                                      (rule "commute_or_2" (formula "5") (term "0"))
                                                      (rule "commute_or_2" (formula "13") (term "0"))
                                                      (rule "commute_or_2" (formula "14") (term "0"))
                                                      (rule "commute_or_2" (formula "15") (term "0"))
                                                      (rule "ifthenelse_to_or_right" (formula "16") (term "0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "16") (term "0,0,0,0,1,0"))
                                                      (rule "commute_or_2" (formula "2") (term "0"))
                                                      (rule "ifthenelse_split" (formula "41") (term "0"))
                                                      (branch "self.chosen[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "42"))
                                                         (rule "ifthenelse_split" (formula "4") (term "0"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "5"))
                                                            (rule "applyEq" (formula "48") (term "1,1,0,0,1") (ifseqformula "5"))
                                                            (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "5"))
                                                            (rule "applyEq" (formula "48") (term "1,0") (ifseqformula "5"))
                                                            (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "arrayLengthNotNegative" (formula "48") (term "1,0,0,0,0,0"))
                                                            (rule "commute_or_2" (formula "19") (term "0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "3") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "45") (term "0,0,0,0") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,0") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "45") (term "0,1,0") (ifseqformula "4"))
                                                               (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "2")))
                                                               (rule "closeTrue" (formula "45"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "41"))
                                                               (rule "close" (formula "34") (ifseqformula "11"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "4"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "inEqSimp_geqRight" (formula "32"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_notGeq" (formula "5") (term "0"))
                                                            (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                                            (rule "add_literals" (formula "5") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "5") (term "0,0"))
                                                            (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "arrayLengthNotNegative" (formula "48") (term "1,0,0,0,0,0"))
                                                            (rule "commute_or_2" (formula "19") (term "0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "4") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "45") (term "0,0,0,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "45") (term "0,1,0") (ifseqformula "5"))
                                                               (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "3")))
                                                               (rule "closeTrue" (formula "45"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "41"))
                                                               (rule "close" (formula "34") (ifseqformula "11"))
                                                            )
                                                         )
                                                      )
                                                      (branch "self.chosen[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "42"))
                                                         (builtin "One Step Simplification" (formula "42"))
                                                         (rule "orRight" (formula "42"))
                                                         (rule "notRight" (formula "42"))
                                                         (rule "inEqSimp_geqRight" (formula "42"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "2"))
                                                         (rule "mul_literals" (formula "43") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "43") (term "0,0"))
                                                         (rule "leq_literals" (formula "43") (term "0"))
                                                         (builtin "One Step Simplification" (formula "43"))
                                                         (rule "false_right" (formula "43"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "6"))
                                                            (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "6"))
                                                            (rule "applyEq" (formula "48") (term "1,1,0,0,1") (ifseqformula "6"))
                                                            (rule "applyEq" (formula "48") (term "1,0") (ifseqformula "6"))
                                                            (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "arrayLengthNotNegative" (formula "48") (term "1,0,0,0,0,0"))
                                                            (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "4") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                                               (rule "qeq_literals" (formula "3") (term "0"))
                                                               (builtin "One Step Simplification" (formula "3"))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "42"))
                                                               (rule "close" (formula "35") (ifseqformula "12"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "5"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "inEqSimp_geqRight" (formula "33"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_notGeq" (formula "6") (term "0"))
                                                            (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                                            (rule "add_literals" (formula "6") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "6") (term "0,0"))
                                                            (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "arrayLengthNotNegative" (formula "48") (term "1,0,0,0,0,0"))
                                                            (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "4") (term "0"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "closeFalse" (formula "4"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "42"))
                                                               (rule "close" (formula "35") (ifseqformula "12"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "self.concatenated.length ≥ 1 FALSE"
                                                      (rule "eqSymm" (formula "29"))
                                                      (rule "inEqSimp_geqRight" (formula "34"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                                      (rule "qeq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                )
                                                (branch "result_0.length ≥ 1 FALSE"
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "replace_known_right" (formula "27") (term "0,1,1,0,0") (ifseqformula "29"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "inEqSimp_geqRight" (formula "29"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_notGeq" (formula "27") (term "0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "27") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "28") (term "0,0"))
                                                   (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "28") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "true_left" (formula "28"))
                                                   (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,1,1,0"))
                                                   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,0"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "11"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_6" (formula "28") (term "0,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_7" (formula "28") (term "0,0,1"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_2" (formula "28") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_3" (formula "28") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_0" (formula "28") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_1" (formula "28") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet010011000000201_4" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010011000000201_5" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "29"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "30"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "30"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "28"))
                                                   (rule "notLeft" (formula "28"))
                                                   (rule "narrowSelectArrayType" (formula "3") (term "1,1,1,0") (ifseqformula "9") (ifseqformula "35"))
                                                   (rule "nonNull" (formula "30") (inst "i=i"))
                                                   (rule "greater_literals" (formula "30") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "38")))
                                                   (rule "sub_literals" (formula "30") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "29") (inst "i=i"))
                                                   (rule "sub_literals" (formula "29") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "37")))
                                                   (rule "greater_literals" (formula "29") (term "0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                                   (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "28") (inst "i=i"))
                                                   (rule "greater_literals" (formula "28") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "sub_literals" (formula "28") (term "2,1,0,1"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "andLeft" (formula "28"))
                                                   (rule "notLeft" (formula "28"))
                                                   (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_33"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "11")))
                                                   (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_33"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "11")))
                                                   (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_33"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "11")))
                                                   (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_29"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "11")))
                                                   (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_36"))
                                                   (rule "applyEq" (formula "32") (term "0") (ifseqformula "28"))
                                                   (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "24"))
                                                   (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "45")) (ifInst ""  (formula "10")))
                                                   (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "28"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                                   (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                                                   (rule "hideAuxiliaryEq" (formula "28"))
                                                   (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "21"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "11"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "notLeft" (formula "23"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "notLeft" (formula "24"))
                                                   (rule "notLeft" (formula "23"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "notLeft" (formula "24"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "notLeft" (formula "22"))
                                                   (rule "nonNull" (formula "24") (inst "i=i"))
                                                   (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "39")))
                                                   (rule "greater_literals" (formula "24") (term "0"))
                                                   (builtin "One Step Simplification" (formula "24"))
                                                   (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "39"))
                                                   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "23") (inst "i=i"))
                                                   (rule "greater_literals" (formula "23") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "38")))
                                                   (rule "sub_literals" (formula "23") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "38"))
                                                   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                                   (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "22") (inst "i=i"))
                                                   (rule "greater_literals" (formula "22") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "40")))
                                                   (rule "sub_literals" (formula "22") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "40"))
                                                   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                                   (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                                   (rule "nnf_imp2or" (formula "32") (term "0"))
                                                   (rule "nnf_imp2or" (formula "31") (term "0"))
                                                   (rule "nnf_imp2or" (formula "30") (term "0"))
                                                   (rule "nnf_imp2or" (formula "24") (term "0"))
                                                   (rule "nnf_imp2or" (formula "23") (term "0"))
                                                   (rule "nnf_imp2or" (formula "22") (term "0"))
                                                   (rule "commute_or_2" (formula "6") (term "0"))
                                                   (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                                   (rule "commute_or_2" (formula "14") (term "0"))
                                                   (rule "commute_or_2" (formula "15") (term "0"))
                                                   (rule "commute_or_2" (formula "16") (term "0"))
                                                   (rule "ifthenelse_to_or_right" (formula "17") (term "0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,0,0,1,0"))
                                                   (rule "ifthenelse_split" (formula "40") (term "0"))
                                                   (branch "self.chosen[i_51].length ≥ 1 TRUE"
                                                      (rule "eqSymm" (formula "41"))
                                                      (rule "ifthenelse_split" (formula "5") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "6"))
                                                         (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "6"))
                                                         (rule "applyEq" (formula "47") (term "1,1,0,0,1") (ifseqformula "6"))
                                                         (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "6"))
                                                         (rule "commute_or_2" (formula "4") (term "0"))
                                                         (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                         (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "ifthenelse_split" (formula "4") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "44") (term "0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "5"))
                                                            (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "2")))
                                                            (rule "closeTrue" (formula "44"))
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "40"))
                                                            (rule "close" (formula "33") (ifseqformula "12"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "5"))
                                                         (builtin "One Step Simplification" (formula "5"))
                                                         (rule "inEqSimp_geqRight" (formula "31"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "6") (term "0"))
                                                         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "6") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "6") (term "0,0"))
                                                         (rule "commute_or_2" (formula "5") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "6"))
                                                            (builtin "One Step Simplification" (formula "44"))
                                                            (rule "orRight" (formula "44"))
                                                            (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "44") (term "0,0") (ifseqformula "6"))
                                                            (rule "close" (formula "44") (ifseqformula "3"))
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "40"))
                                                            (rule "close" (formula "33") (ifseqformula "12"))
                                                         )
                                                      )
                                                   )
                                                   (branch "self.chosen[i_51].length ≥ 1 FALSE"
                                                      (rule "eqSymm" (formula "41"))
                                                      (builtin "One Step Simplification" (formula "41"))
                                                      (rule "orRight" (formula "41"))
                                                      (rule "notRight" (formula "41"))
                                                      (rule "inEqSimp_geqRight" (formula "41"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "2"))
                                                      (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "42") (term "0,0"))
                                                      (rule "leq_literals" (formula "42") (term "0"))
                                                      (builtin "One Step Simplification" (formula "42"))
                                                      (rule "false_right" (formula "42"))
                                                      (rule "ifthenelse_split" (formula "6") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "7"))
                                                         (rule "applyEq" (formula "47") (term "1,1,0,0,1") (ifseqformula "7"))
                                                         (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "7"))
                                                         (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "7"))
                                                         (rule "commute_or_2" (formula "5") (term "0"))
                                                         (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                         (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                                            (rule "qeq_literals" (formula "3") (term "0"))
                                                            (builtin "One Step Simplification" (formula "3"))
                                                            (rule "closeFalse" (formula "3"))
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "41"))
                                                            (rule "close" (formula "34") (ifseqformula "13"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "6"))
                                                         (builtin "One Step Simplification" (formula "6"))
                                                         (rule "inEqSimp_geqRight" (formula "32"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "7") (term "0"))
                                                         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "7") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "7") (term "0,0"))
                                                         (rule "commute_or_2" (formula "6") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                         (rule "ifthenelse_split" (formula "6") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                            (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "7"))
                                                            (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                            (rule "applyEqReverse" (formula "49") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                                            (rule "hideAuxiliaryEq" (formula "7"))
                                                            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "4"))
                                                            (rule "qeq_literals" (formula "3") (term "0"))
                                                            (builtin "One Step Simplification" (formula "3"))
                                                            (rule "closeFalse" (formula "3"))
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "41"))
                                                            (rule "close" (formula "34") (ifseqformula "13"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "Case 2"
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "allRight" (formula "25") (inst "sk=iv_47"))
                                             (rule "impRight" (formula "25"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "eqSymm" (formula "19"))
                                             (rule "eqSymm" (formula "14") (term "1,0"))
                                             (rule "eqSymm" (formula "5"))
                                             (rule "eqSymm" (formula "32"))
                                             (rule "eqSymm" (formula "25"))
                                             (rule "eqSymm" (formula "16"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "eqSymm" (formula "18"))
                                             (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "31"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "28"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEq" (formula "32") (term "1") (ifseqformula "5"))
                                             (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "19"))
                                             (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "18"))
                                             (rule "applyEq" (formula "19") (term "1") (ifseqformula "18"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                             (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "4"))
                                             (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "3"))
                                             (rule "array2seqDef" (formula "27") (term "0,0") (inst "u=u"))
                                             (rule "getOfSeqDef" (formula "27") (term "0"))
                                             (rule "castDel" (formula "27") (term "1,0"))
                                             (rule "castDel" (formula "27") (term "2,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,2,1,0"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0"))
                                             (rule "times_zero_2" (formula "27") (term "1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "14") (term "1,0,0,1,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "14") (term "1,1,0") (inst "u=u"))
                                             (rule "eqSymm" (formula "14") (term "1,0"))
                                             (rule "array2seqDef" (formula "5") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "5"))
                                             (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                             (rule "eqSymm" (formula "5"))
                                             (rule "array2seqDef" (formula "32") (term "0,0,0") (inst "u=u"))
                                             (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                             (rule "array2seqDef" (formula "32") (term "1,0,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "25") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "25") (term "1") (inst "u=u"))
                                             (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "16"))
                                             (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "array2seqDef" (formula "32") (term "1") (inst "u=u"))
                                             (rule "applyEq" (formula "32") (term "1") (ifseqformula "4"))
                                             (rule "array2seqDef" (formula "2") (term "0,0") (inst "u=u"))
                                             (rule "lenOfSeqDef" (formula "2") (term "0"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                             (rule "times_zero_2" (formula "2") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "4"))
                                             (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "3"))
                                             (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "27"))
                                             (rule "getOfSeqDef" (formula "27") (term "0"))
                                             (rule "castDel" (formula "27") (term "1,0"))
                                             (rule "castDel" (formula "27") (term "2,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,2,1,0"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                                             (rule "eqSymm" (formula "27"))
                                             (rule "polySimp_elimOne" (formula "27") (term "0,0,1"))
                                             (rule "array2seqDef" (formula "14") (term "0,0,1,1,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "5") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "5"))
                                             (rule "array2seqDef" (formula "32") (term "0,0,0") (inst "u=u"))
                                             (rule "eqSeqDef" (formula "25") (inst "iv=iv"))
                                             (rule "andLeft" (formula "25"))
                                             (rule "getOfSeqDef" (formula "26") (term "1,1,0"))
                                             (rule "castDel" (formula "26") (term "2,1,1,0"))
                                             (rule "castDel" (formula "26") (term "1,1,1,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,2,1,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "26") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0"))
                                             (rule "getOfSeqDef" (formula "26") (term "0,1,0"))
                                             (rule "castDel" (formula "26") (term "2,0,1,0"))
                                             (rule "castDel" (formula "26") (term "1,0,1,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "25") (term "1"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,1"))
                                             (rule "mul_literals" (formula "25") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "25") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "26") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "1,1,1,0,0"))
                                             (rule "lenOfSeqDef" (formula "25") (term "0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                             (rule "mul_literals" (formula "25") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
                                             (rule "apply_eq_monomials" (formula "26") (term "1,0,0,1,0,0") (ifseqformula "25"))
                                             (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "25") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1,1,0,0"))
                                             (rule "array2seqDef" (formula "17") (term "1,1,1") (inst "u=u"))
                                             (rule "applyEq" (formula "17") (term "1,1,1") (ifseqformula "16"))
                                             (rule "array2seqDef" (formula "17") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "narrowSelectArrayType" (formula "17") (term "2,0,0") (ifseqformula "8") (ifseqformula "31"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "array2seqDef" (formula "33") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "33"))
                                             (rule "eqSeqDef" (formula "4") (inst "iv=iv"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "getOfSeqDef" (formula "5") (term "0,1,0"))
                                             (rule "castDel" (formula "5") (term "2,0,1,0"))
                                             (rule "castDel" (formula "5") (term "1,0,1,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "5") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "5") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "5") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "5") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "4") (term "1"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                                             (rule "times_zero_2" (formula "4") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "4") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "5") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "5") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "5") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "1,1,1,0,0"))
                                             (rule "lenOfSeqDef" (formula "4") (term "0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,0"))
                                             (rule "mul_literals" (formula "4") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,0"))
                                             (rule "getOfSeqDef" (formula "5") (term "0,1,0"))
                                             (rule "castDel" (formula "5") (term "1,0,1,0"))
                                             (rule "castDel" (formula "5") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "5") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "5") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "5") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "5") (term "1,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                                             (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "5") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "5") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,1,0"))
                                             (rule "apply_eq_monomials" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "5") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "5") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "5") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "5") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,1,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "0,0,1,1,1,0,0"))
                                             (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "lenOfSeqDef" (formula "4") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "4") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,1,1,0,0"))
                                             (rule "lenOfSeqDef" (formula "3") (term "1"))
                                             (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                             (rule "mul_literals" (formula "3") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "3") (term "1,1"))
                                             (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                                             (rule "castDel" (formula "4") (term "2,0,1,0"))
                                             (rule "castDel" (formula "4") (term "1,0,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "3") (term "0"))
                                             (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                             (rule "mul_literals" (formula "3") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "3") (term "1,0"))
                                             (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                                             (rule "castDel" (formula "4") (term "1,0,1,0"))
                                             (rule "castDel" (formula "4") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                                             (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                                             (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                                             (rule "apply_eq_monomials" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                                             (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1,0,0"))
                                             (rule "array2seqDef" (formula "7") (term "1,0,1") (inst "u=u"))
                                             (rule "array2seqDef" (formula "7") (term "0,0,1") (inst "u=u"))
                                             (rule "pullOutSelect" (formula "9") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_34"))
                                             (rule "applyEq" (formula "6") (term "1,1,1,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "5") (term "1,0,0,0,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "7") (term "1,1,2,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "6") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "36") (term "1,1,2,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "5") (term "1,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "7") (term "1,0,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "36") (term "1,0,1,0") (ifseqformula "9"))
                                             (rule "simplifySelectOfAnonEQ" (formula "9") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "33")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "10") (term "0,0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "6") (term "1,1,1,0,1,0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "5") (term "1,0,0,0,0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "7") (term "1,1,2,0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "6") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "36") (term "1,1,2,0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "5") (term "1,0,1,0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "7") (term "1,0,1,0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "36") (term "1,0,1,0") (ifseqformula "9"))
                                             (rule "hideAuxiliaryEq" (formula "9"))
                                             (rule "eqSymm" (formula "35"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "20"))
                                             (rule "pullOutSelect" (formula "2") (term "0,1,0") (inst "selectSK=arr_215"))
                                             (rule "applyEq" (formula "36") (term "1,2,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "31") (term "0,0,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "36") (term "0,1,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "eqSymm" (formula "36"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "eqSeqDef2" (formula "19") (inst "iv=iv") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "array2seqDef" (formula "19") (term "0,1,1") (inst "u=u"))
                                             (rule "pullOutSelect" (formula "28") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_25"))
                                             (rule "applyEq" (formula "27") (term "0,0,0,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "29") (term "0,1,1,1,0,0,1,0") (ifseqformula "28"))
                                             (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "24"))
                                             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "33")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "27") (term "0,0,0,0") (ifseqformula "28"))
                                             (rule "applyEqReverse" (formula "29") (term "1,1,0,1,0") (ifseqformula "28"))
                                             (rule "applyEqReverse" (formula "27") (term "0,1,0") (ifseqformula "28"))
                                             (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,1,0") (ifseqformula "28"))
                                             (rule "hideAuxiliaryEq" (formula "28"))
                                             (rule "equalityToSeqGetAndSeqLenRight" (formula "35") (inst "iv=iv"))
                                             (rule "getOfSeqDef" (formula "35") (term "0,1,0,1"))
                                             (rule "castDel" (formula "35") (term "2,0,1,0,1"))
                                             (rule "castDel" (formula "35") (term "1,0,1,0,1"))
                                             (rule "add_zero_right" (formula "35") (term "0,2,1,0,1,0,1"))
                                             (rule "eqSymm" (formula "35") (term "1,0,1"))
                                             (rule "polySimp_elimSub" (formula "35") (term "1,1,0,1,1,0,1"))
                                             (rule "mul_literals" (formula "35") (term "1,1,1,0,1,1,0,1"))
                                             (rule "add_zero_right" (formula "35") (term "1,1,0,1,1,0,1"))
                                             (rule "lenOfSeqDef" (formula "35") (term "0,0"))
                                             (rule "eqSymm" (formula "35") (term "0"))
                                             (rule "polySimp_elimSub" (formula "35") (term "1,1,0"))
                                             (rule "mul_literals" (formula "35") (term "1,1,1,0"))
                                             (rule "add_zero_right" (formula "35") (term "1,1,0"))
                                             (rule "lenOfSeqDef" (formula "35") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimSub" (formula "35") (term "1,1,1,0,0,1"))
                                             (rule "times_zero_2" (formula "35") (term "1,1,1,1,0,0,1"))
                                             (rule "add_zero_right" (formula "35") (term "1,1,1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,1,1,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,0"))
                                             (rule "add_zero_right" (formula "35") (term "0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,1,0,0,1"))
                                             (rule "add_zero_right" (formula "35") (term "0,0,1,1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,1,1,0,1"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,1,0,1,1,0,1"))
                                             (rule "mul_literals" (formula "35") (term "0,1,1,0,1,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,1,1,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                             (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1,1,1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1,1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "35") (term "0,0,1,1,1,0,0,1"))
                                             (rule "pullOutSelect" (formula "4") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_25"))
                                             (rule "applyEq" (formula "36") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "4"))
                                             (rule "applyEq" (formula "6") (term "0,1,1,1,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "36") (term "1,2,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "36") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "4"))
                                             (rule "applyEq" (formula "6") (term "1,1,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "36") (term "0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "33")) (ifInst ""  (formula "13")))
                                             (rule "applyEqReverse" (formula "36") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "6") (term "0,1,1,1,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "36") (term "1,2,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "applyEqReverse" (formula "35") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "1,1,0,1,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "35") (term "0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "eqSeqDef2" (formula "7") (inst "iv=iv") (ifseqformula "7"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "pullOutSelect" (formula "6") (term "1,1,0,1,0") (inst "selectSK=arr_216"))
                                             (rule "applyEq" (formula "7") (term "0,1,1,1,0,0,1,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "34") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "6"))
                                             (rule "applyEq" (formula "34") (term "0,1,1,1,1,0,0,1") (ifseqformula "6"))
                                             (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "34") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "6"))
                                             (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "34") (term "1,1,1,1,0,1") (ifseqformula "6"))
                                             (rule "applyEq" (formula "34") (term "0,1,1,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "34") (term "0,0,0,1,0") (ifseqformula "6"))
                                             (rule "simplifySelectOfAnonEQ" (formula "6") (ifseqformula "23"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "eqSymm" (formula "7") (term "1,0"))
                                             (rule "eqSymm" (formula "5"))
                                             (rule "applyEq" (formula "7") (term "1,1,1,0,0") (ifseqformula "5"))
                                             (rule "eqSeqDef2" (formula "18") (inst "iv=iv") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "pullOutSelect" (formula "2") (term "0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_29"))
                                             (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "23"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "31")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "pullOutSelect" (formula "28") (term "1,1") (inst "selectSK=arr_217"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "17") (term "0"))
                                             (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "16") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "notLeft" (formula "17"))
                                             (rule "notLeft" (formula "16"))
                                             (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "31"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "ifthenelse_negated" (formula "7") (term "0"))
                                             (rule "ifthenelse_negated" (formula "3") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                             (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                             (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "29") (term "0"))
                                             (rule "nnf_imp2or" (formula "5") (term "0"))
                                             (rule "nnf_imp2or" (formula "8") (term "0"))
                                             (rule "nnf_imp2or" (formula "41") (term "0,1"))
                                             (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "16") (term "0"))
                                             (rule "nnf_imp2or" (formula "17") (term "0"))
                                             (rule "nnf_imp2or" (formula "18") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                             (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                             (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                             (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                             (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                             (rule "arrayLengthNotNegative" (formula "21") (term "1"))
                                             (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                             (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "21") (term "1"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                             (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                             (rule "cut_direct" (formula "28") (term "0"))
                                             (branch "CUT: result_0.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "true_left" (formula "29"))
                                                (rule "nnf_notAnd" (formula "42") (term "0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,1"))
                                                (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,1"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                                (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                                (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                                (rule "ifthenelse_split" (formula "29") (term "1"))
                                                (branch "result_0.length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "31") (term "0,1,1,0,0") (ifseqformula "29"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "32") (ifseqformula "13"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_5" (formula "32") (term "0,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_6" (formula "32") (term "0,0,1"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_8" (formula "32") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_9" (formula "32") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_0" (formula "32") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_1" (formula "32") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_3" (formula "32") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_4" (formula "32") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "notLeft" (formula "33"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "notLeft" (formula "33"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "notLeft" (formula "33"))
                                                   (rule "notLeft" (formula "32"))
                                                   (rule "narrowSelectArrayType" (formula "19") (term "2,0,0,1,1,0") (ifseqformula "11") (ifseqformula "39"))
                                                   (rule "narrowSelectArrayType" (formula "5") (term "1,1,1,0") (ifseqformula "11") (ifseqformula "39"))
                                                   (rule "nonNull" (formula "34") (inst "i=i"))
                                                   (rule "sub_literals" (formula "34") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "40")))
                                                   (rule "greater_literals" (formula "34") (term "0"))
                                                   (builtin "One Step Simplification" (formula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "33") (inst "i=i"))
                                                   (rule "sub_literals" (formula "33") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "41")))
                                                   (rule "greater_literals" (formula "33") (term "0"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                                   (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "32") (inst "i=i"))
                                                   (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "greater_literals" (formula "32") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "notLeft" (formula "32"))
                                                   (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_32"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_32"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_32"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_28"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_35"))
                                                   (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "36") (term "0") (ifseqformula "32"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "48")) (ifInst ""  (formula "12")))
                                                   (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                                   (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "32"))
                                                   (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
                                                   (rule "hideAuxiliaryEq" (formula "32"))
                                                   (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "23"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (ifseqformula "13"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "notLeft" (formula "24"))
                                                   (rule "nonNull" (formula "26") (inst "i=i"))
                                                   (rule "greater_literals" (formula "26") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "41")))
                                                   (rule "sub_literals" (formula "26") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "narrowSelectArrayType" (formula "26") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "41"))
                                                   (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "25") (inst "i=i"))
                                                   (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "42")))
                                                   (rule "greater_literals" (formula "25") (term "0"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "narrowSelectArrayType" (formula "25") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "42"))
                                                   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                                   (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "24") (inst "i=i"))
                                                   (rule "greater_literals" (formula "24") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "43")))
                                                   (rule "sub_literals" (formula "24") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "24"))
                                                   (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "43"))
                                                   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                                   (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "23"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0"))
                                                   (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "26") (term "0"))
                                                   (rule "nnf_imp2or" (formula "25") (term "0"))
                                                   (rule "nnf_imp2or" (formula "24") (term "0"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                                   (rule "commute_or_2" (formula "8") (term "0"))
                                                   (rule "ifthenelse_split" (formula "43") (term "0"))
                                                   (branch "self.chosen[i_51].length ≥ 1 + iv_47 TRUE"
                                                      (rule "eqSymm" (formula "44"))
                                                      (rule "ifthenelse_split" (formula "30") (term "0"))
                                                      (branch "self.concatenated.length ≥ 1 TRUE"
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                         (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0") (ifseqformula "30"))
                                                         (rule "commute_or_2" (formula "17") (term "0"))
                                                         (rule "commute_or_2" (formula "18") (term "0"))
                                                         (rule "commute_or_2" (formula "19") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "5") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "5"))
                                                         (rule "true_left" (formula "5"))
                                                         (rule "arrayLengthNotNegative" (formula "5") (term "1,0"))
                                                         (rule "commute_or_2" (formula "21") (term "0"))
                                                         (rule "commute_or_2" (formula "7") (term "0"))
                                                         (rule "ifthenelse_split" (formula "8") (term "0"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "9"))
                                                            (rule "applyEq" (formula "51") (term "1,1,0,0,1") (ifseqformula "9"))
                                                            (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "9"))
                                                            (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "9"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "11"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,0") (ifseqformula "11"))
                                                               (rule "hideAuxiliaryEq" (formula "11"))
                                                               (rule "eqSymm" (formula "9") (term "1"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "8"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "true_left" (formula "9"))
                                                               (rule "ifthenelse_split" (formula "4") (term "0"))
                                                               (branch "self.chosen.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,1,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "46") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "45"))
                                                                  (rule "eqSymm" (formula "45"))
                                                                  (rule "arrayLengthNotNegative" (formula "50") (term "1,0,0,0,0,0"))
                                                                  (rule "arrayLengthIsAShort" (formula "51") (term "1,0,0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "commute_or_2" (formula "36") (term "0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "1,0") (ifseqformula "14"))
                                                                  (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "44"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,1") (ifseqformula "14"))
                                                                  (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "10"))
                                                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "44")))
                                                                  (rule "true_left" (formula "24"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "14"))
                                                                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "commute_or_2" (formula "36") (term "0"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "15"))
                                                                  (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "6"))
                                                                  (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "44")))
                                                                  (rule "true_left" (formula "26"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0"))
                                                                  (rule "commute_or" (formula "23") (term "0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,0"))
                                                                  (rule "arrayLengthNotNegative" (formula "34") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "33"))
                                                                  (rule "leq_literals" (formula "34") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "arrayLengthIsAShort" (formula "34") (term "1"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "commute_or" (formula "38") (term "0,0"))
                                                                  (rule "commute_or" (formula "37") (term "0,0"))
                                                                  (rule "commute_or" (formula "36") (term "0,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "9") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "9") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0"))
                                                                  (rule "commute_or" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,1,1,0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "12") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "12"))
                                                                  (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "12") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0"))
                                                                  (rule "commute_or" (formula "12") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "9") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "ifthenelse_to_or_right" (formula "35") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "35") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,0,1,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "9") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "9") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "9") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "9") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "commute_or_2" (formula "9") (term "0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "ifthenelse_split" (formula "8") (term "0"))
                                                                  (branch "self.chosen[i_51].length ≥ 1 TRUE"
                                                                     (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
                                                                     (rule "leq_literals" (formula "7") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "true_left" (formula "7"))
                                                                     (rule "cnf_rightDist" (formula "11") (term "1,1,0"))
                                                                     (rule "commute_or_2" (formula "11") (term "0,1,1,0"))
                                                                     (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0,0,1,1,0"))
                                                                     (rule "add_zero_right" (formula "11") (term "1,1,0,0,1,1,0"))
                                                                     (rule "qeq_literals" (formula "11") (term "1,0,0,1,1,0"))
                                                                     (builtin "One Step Simplification" (formula "11"))
                                                                     (rule "shift_paren_or" (formula "11") (term "1,1,0"))
                                                                     (rule "commute_or" (formula "11") (term "0,1,1,0"))
                                                                     (rule "inEqSimp_or_tautInEq1" (formula "11") (term "1,1,0"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1,1,1,0"))
                                                                     (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,1,1,0"))
                                                                     (rule "add_literals" (formula "11") (term "1,0,1,1,1,0"))
                                                                     (rule "times_zero_1" (formula "11") (term "0,1,1,1,0"))
                                                                     (rule "leq_literals" (formula "11") (term "1,1,1,0"))
                                                                     (builtin "One Step Simplification" (formula "11"))
                                                                     (rule "shift_paren_or" (formula "11") (term "0"))
                                                                     (rule "commute_or_2" (formula "11") (term "0,0"))
                                                                     (builtin "One Step Simplification" (formula "11"))
                                                                     (rule "shift_paren_or" (formula "11") (term "0,0"))
                                                                     (rule "commute_or" (formula "11") (term "0,0,0"))
                                                                     (builtin "One Step Simplification" (formula "11"))
                                                                     (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE TRUE"
                                                                        (rule "andLeft" (formula "4"))
                                                                        (rule "notLeft" (formula "4"))
                                                                        (rule "notLeft" (formula "4"))
                                                                        (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "39"))
                                                                        (rule "close" (formula "38") (ifseqformula "14"))
                                                                     )
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE FALSE"
                                                                        (rule "close" (formula "48") (ifseqformula "4"))
                                                                     )
                                                                  )
                                                                  (branch "self.chosen[i_51].length ≥ 1 FALSE"
                                                                     (rule "inEqSimp_geqRight" (formula "39"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "9"))
                                                                     (rule "mul_literals" (formula "9") (term "1,0"))
                                                                     (rule "add_zero_right" (formula "9") (term "0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                                     (rule "mul_literals" (formula "9") (term "1"))
                                                                     (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "9"))
                                                                     (rule "qeq_literals" (formula "6") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "closeFalse" (formula "6"))
                                                                  )
                                                               )
                                                               (branch "self.chosen.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "41"))
                                                                  (rule "close" (formula "36") (ifseqformula "13"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                               (rule "close" (formula "37") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "8"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "inEqSimp_geqRight" (formula "36"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_notGeq" (formula "9") (term "0"))
                                                            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                                            (rule "add_literals" (formula "9") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "9") (term "0,0"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "52") (term "0,0,0,1,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,0,0,1,1,0,0,1") (ifseqformula "11"))
                                                               (rule "hideAuxiliaryEq" (formula "11"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "true_left" (formula "9"))
                                                               (rule "inEqSimp_contradInEq0" (formula "50") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "50") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "50"))
                                                               (rule "inEqSimp_contradInEq0" (formula "10") (term "0,1,1,0") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "10") (term "0,0,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "inEqSimp_contradInEq0" (formula "50") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "50") (term "0,0,1,1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "50"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "50") (term "0,0,1"))
                                                               (rule "add_literals" (formula "50") (term "1,1,0,0,1"))
                                                               (rule "qeq_literals" (formula "50") (term "1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "50"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "self.chosen.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "46") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "2"))
                                                                  (builtin "One Step Simplification" (formula "45"))
                                                                  (rule "eqSymm" (formula "45"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "commute_or_2" (formula "34") (term "0"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1,0") (ifseqformula "13"))
                                                                  (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "43"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "13"))
                                                                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,1") (ifseqformula "14"))
                                                                  (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "10"))
                                                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "44")))
                                                                  (rule "true_left" (formula "24"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1") (ifseqformula "14"))
                                                                  (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "43"))
                                                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "6")))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "commute_or_2" (formula "34") (term "0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0"))
                                                                  (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "33"))
                                                                  (rule "leq_literals" (formula "32") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "true_left" (formula "32"))
                                                                  (rule "commute_or" (formula "11") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0"))
                                                                  (rule "add_zero_right" (formula "11") (term "1,1,0"))
                                                                  (rule "qeq_literals" (formula "11") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "11"))
                                                                  (rule "true_left" (formula "11"))
                                                                  (rule "arrayLengthIsAShort" (formula "31") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "31"))
                                                                  (rule "true_left" (formula "31"))
                                                                  (rule "commute_or" (formula "36") (term "0,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "commute_or" (formula "34") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "9") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "9") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0"))
                                                                  (rule "commute_or" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "9") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "shift_paren_or" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "9") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "9") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "9") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "9") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "commute_or_2" (formula "9") (term "0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "ifthenelse_to_or_right" (formula "33") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "33") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "33") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "33") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "33") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "33") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                  (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE TRUE"
                                                                     (rule "andLeft" (formula "4"))
                                                                     (rule "notLeft" (formula "4"))
                                                                     (rule "notLeft" (formula "4"))
                                                                     (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "38"))
                                                                     (rule "close" (formula "37") (ifseqformula "13"))
                                                                  )
                                                                  (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE FALSE"
                                                                     (rule "close" (formula "47") (ifseqformula "4"))
                                                                  )
                                                               )
                                                               (branch "self.chosen.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "41"))
                                                                  (rule "close" (formula "36") (ifseqformula "13"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                               (rule "close" (formula "37") (ifseqformula "14"))
                                                            )
                                                         )
                                                      )
                                                      (branch "self.concatenated.length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "30"))
                                                         (rule "inEqSimp_geqRight" (formula "35"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                         (rule "qeq_literals" (formula "30"))
                                                         (rule "closeFalse" (formula "30"))
                                                      )
                                                   )
                                                   (branch "self.chosen[i_51].length ≥ 1 + iv_47 FALSE"
                                                      (rule "eqSymm" (formula "44"))
                                                      (builtin "One Step Simplification" (formula "44"))
                                                      (rule "orRight" (formula "44"))
                                                      (rule "notRight" (formula "44"))
                                                      (rule "eqSymm" (formula "45"))
                                                      (rule "inEqSimp_geqRight" (formula "44"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "ifthenelse_split" (formula "31") (term "0"))
                                                      (branch "self.concatenated.length ≥ 1 TRUE"
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                         (rule "applyEq" (formula "32") (term "1,1,1,0,0,1,0") (ifseqformula "31"))
                                                         (rule "commute_or_2" (formula "18") (term "0"))
                                                         (rule "commute_or_2" (formula "19") (term "0"))
                                                         (rule "commute_or_2" (formula "20") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "6") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "6"))
                                                         (rule "true_left" (formula "6"))
                                                         (rule "arrayLengthNotNegative" (formula "6") (term "1,0"))
                                                         (rule "commute_or_2" (formula "22") (term "0"))
                                                         (rule "commute_or_2" (formula "8") (term "0"))
                                                         (rule "ifthenelse_split" (formula "9") (term "0"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "10"))
                                                            (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "10"))
                                                            (rule "applyEq" (formula "52") (term "1,1,0,0,1") (ifseqformula "10"))
                                                            (rule "applyEq" (formula "52") (term "1,0") (ifseqformula "10"))
                                                            (rule "ifthenelse_split" (formula "11") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "53") (term "1,1,1,1,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,0,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,1,0") (ifseqformula "12"))
                                                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
                                                               (rule "true_left" (formula "10"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "11"))
                                                               (rule "hideAuxiliaryEq" (formula "11"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "self.chosen.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                                                  (rule "andLeft" (formula "2"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "2"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                                  (rule "add_literals" (formula "2") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "2") (term "1,0"))
                                                                  (rule "add_literals" (formula "2") (term "0"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                               (branch "self.chosen.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                                  (rule "close" (formula "37") (ifseqformula "14"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "44"))
                                                               (rule "close" (formula "38") (ifseqformula "15"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "9"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "inEqSimp_geqRight" (formula "37"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_notGeq" (formula "10") (term "0"))
                                                            (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                                            (rule "add_literals" (formula "10") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "10") (term "0,0"))
                                                            (rule "ifthenelse_split" (formula "11") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "13") (term "0,0,0,1,1,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,0,0,1,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,0,0,1,1,0,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "53") (term "1,1,1,1,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                                               (rule "hideAuxiliaryEq" (formula "12"))
                                                               (rule "eqSymm" (formula "12") (term "1,0,0"))
                                                               (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "true_left" (formula "10"))
                                                               (rule "inEqSimp_contradInEq0" (formula "11") (term "0,1,1,0") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "11") (term "0,0,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "inEqSimp_contradInEq0" (formula "51") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "51") (term "0,0,1,1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "51"))
                                                               (rule "inEqSimp_contradInEq0" (formula "51") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "51") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "51"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "51") (term "0,0,1"))
                                                               (rule "add_zero_right" (formula "51") (term "1,1,0,0,1"))
                                                               (rule "qeq_literals" (formula "51") (term "1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "51"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch "self.chosen.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                                                  (rule "andLeft" (formula "3"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "3"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                                  (rule "add_literals" (formula "3") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "3") (term "1,0"))
                                                                  (rule "add_literals" (formula "3") (term "0"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "closeFalse" (formula "3"))
                                                               )
                                                               (branch "self.chosen.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                                  (rule "close" (formula "37") (ifseqformula "14"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "44"))
                                                               (rule "close" (formula "38") (ifseqformula "15"))
                                                            )
                                                         )
                                                      )
                                                      (branch "self.concatenated.length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "31"))
                                                         (rule "inEqSimp_geqRight" (formula "36"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "32"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                         (rule "qeq_literals" (formula "31"))
                                                         (rule "closeFalse" (formula "31"))
                                                      )
                                                   )
                                                )
                                                (branch "result_0.length ≥ 1 FALSE"
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "replace_known_right" (formula "30") (term "0,1,1,0,0") (ifseqformula "32"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_geqRight" (formula "32"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_notGeq" (formula "30") (term "0"))
                                                   (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "30") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "30") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "31") (term "0,0"))
                                                   (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "31") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "25") (ifseqformula "14"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "notLeft" (formula "27"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "notLeft" (formula "27"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "narrowSelectArrayType" (formula "6") (term "1,1,1,0") (ifseqformula "12") (ifseqformula "37"))
                                                   (rule "narrowSelectArrayType" (formula "20") (term "2,0,0,1,1,0") (ifseqformula "12") (ifseqformula "37"))
                                                   (rule "nonNull" (formula "27") (inst "i=i"))
                                                   (rule "sub_literals" (formula "27") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "38")))
                                                   (rule "greater_literals" (formula "27") (term "0"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "narrowSelectArrayType" (formula "27") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "38"))
                                                   (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "26") (inst "i=i"))
                                                   (rule "greater_literals" (formula "26") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "39")))
                                                   (rule "sub_literals" (formula "26") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "narrowSelectArrayType" (formula "26") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "39"))
                                                   (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                                   (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "25") (inst "i=i"))
                                                   (rule "greater_literals" (formula "25") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "40")))
                                                   (rule "sub_literals" (formula "25") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "narrowSelectArrayType" (formula "25") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "40"))
                                                   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                                   (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "24"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "33") (ifseqformula "14"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_5" (formula "33") (term "0,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_6" (formula "33") (term "0,0,1"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_8" (formula "33") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_9" (formula "33") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_0" (formula "33") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_1" (formula "33") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_3" (formula "33") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_4" (formula "33") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "andLeft" (formula "33"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "andLeft" (formula "33"))
                                                   (rule "andLeft" (formula "33"))
                                                   (rule "notLeft" (formula "35"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "andLeft" (formula "33"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "andLeft" (formula "33"))
                                                   (rule "andLeft" (formula "33"))
                                                   (rule "andLeft" (formula "33"))
                                                   (rule "andLeft" (formula "33"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "notLeft" (formula "33"))
                                                   (rule "nonNull" (formula "35") (inst "i=i"))
                                                   (rule "sub_literals" (formula "35") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "44")))
                                                   (rule "greater_literals" (formula "35") (term "0"))
                                                   (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "34") (inst "i=i"))
                                                   (rule "greater_literals" (formula "34") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "45")))
                                                   (rule "sub_literals" (formula "34") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                                   (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "33") (inst "i=i"))
                                                   (rule "sub_literals" (formula "33") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "greater_literals" (formula "33") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "andLeft" (formula "33"))
                                                   (rule "notLeft" (formula "33"))
                                                   (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_31"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "14")))
                                                   (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_31"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "14")))
                                                   (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_31"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "14")))
                                                   (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_27"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "14")))
                                                   (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_34"))
                                                   (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                                   (rule "applyEq" (formula "37") (term "0") (ifseqformula "33"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "29"))
                                                   (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "49")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "applyEq" (formula "33") (term "1,1,1,0,0") (ifseqformula "24"))
                                                   (rule "nnf_imp2or" (formula "27") (term "0"))
                                                   (rule "nnf_imp2or" (formula "26") (term "0"))
                                                   (rule "nnf_imp2or" (formula "25") (term "0"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0"))
                                                   (rule "nnf_imp2or" (formula "33") (term "0"))
                                                   (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                                   (rule "commute_or_2" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "42") (term "0"))
                                                   (branch "self.chosen[i_51].length ≥ 1 + iv_47 TRUE"
                                                      (rule "eqSymm" (formula "43"))
                                                      (rule "commute_or_2" (formula "18") (term "0"))
                                                      (rule "commute_or_2" (formula "19") (term "0"))
                                                      (rule "commute_or_2" (formula "20") (term "0"))
                                                      (rule "arrayLengthIsAShort" (formula "6") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "true_left" (formula "6"))
                                                      (rule "arrayLengthNotNegative" (formula "6") (term "1,0"))
                                                      (rule "commute_or_2" (formula "8") (term "0"))
                                                      (rule "ifthenelse_split" (formula "9") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "10"))
                                                         (rule "applyEq" (formula "50") (term "1,1,0,0,1") (ifseqformula "10"))
                                                         (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "10"))
                                                         (rule "applyEq" (formula "50") (term "1,0") (ifseqformula "10"))
                                                         (rule "commute_or_2" (formula "23") (term "0"))
                                                         (rule "ifthenelse_split" (formula "11") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "10") (term "0,1,0") (ifseqformula "12"))
                                                            (builtin "One Step Simplification" (formula "10"))
                                                            (rule "applyEqReverse" (formula "51") (term "1,1,1,1,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                                            (rule "hideAuxiliaryEq" (formula "12"))
                                                            (rule "eqSymm" (formula "10") (term "1"))
                                                            (rule "eqSymm" (formula "12") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "9"))
                                                            (builtin "One Step Simplification" (formula "10"))
                                                            (rule "true_left" (formula "10"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "45") (term "0,0,0,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "44"))
                                                               (rule "eqSymm" (formula "44"))
                                                               (rule "arrayLengthNotNegative" (formula "49") (term "1,0,0,0,0,0"))
                                                               (rule "arrayLengthIsAShort" (formula "50") (term "1,0,0,0,0,0"))
                                                               (builtin "One Step Simplification" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "15"))
                                                               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                                               (builtin "One Step Simplification" (formula "1"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "1,0") (ifseqformula "16"))
                                                               (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "44"))
                                                               (builtin "One Step Simplification" (formula "25"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,1") (ifseqformula "16"))
                                                               (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "12"))
                                                               (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "44")))
                                                               (rule "true_left" (formula "26"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0,1") (ifseqformula "16"))
                                                               (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "7"))
                                                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "43")))
                                                               (rule "true_left" (formula "27"))
                                                               (rule "commute_or_2" (formula "37") (term "0"))
                                                               (rule "commute_or_2" (formula "36") (term "0"))
                                                               (rule "commute_or_2" (formula "35") (term "0"))
                                                               (rule "commute_or" (formula "21") (term "0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0"))
                                                               (rule "commute_or" (formula "10") (term "0,0"))
                                                               (rule "commute_or" (formula "24") (term "0,0"))
                                                               (rule "commute_or" (formula "13") (term "0,0"))
                                                               (rule "arrayLengthNotNegative" (formula "34") (term "0,1"))
                                                               (rule "arrayLengthIsAShort" (formula "35") (term "0,1"))
                                                               (builtin "One Step Simplification" (formula "35"))
                                                               (rule "true_left" (formula "35"))
                                                               (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                                               (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "5"))
                                                               (rule "applyEq" (formula "6") (term "0") (ifseqformula "4"))
                                                               (rule "leq_literals" (formula "6"))
                                                               (rule "true_left" (formula "6"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                               (rule "qeq_literals" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "cut_direct" (formula "35") (term "0"))
                                                               (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "inEqSimp_antiSymm" (formula "34") (ifseqformula "35"))
                                                                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                                                                  (rule "qeq_literals" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                                                                  (rule "leq_literals" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "commute_or" (formula "37") (term "0,0"))
                                                                  (rule "commute_or" (formula "36") (term "0,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "10") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "eqSymm" (formula "10") (term "1,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0"))
                                                                  (rule "commute_or" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,1,0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "eqSymm" (formula "13") (term "1,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0"))
                                                                  (rule "commute_or" (formula "13") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,1,1,0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "shift_paren_or" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "10") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "10") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "commute_or_2" (formula "10") (term "0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "13") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "shift_paren_or" (formula "13") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "13") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "13") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "13") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "13") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "shift_paren_or" (formula "13") (term "0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "shift_paren_or" (formula "13") (term "0,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "ifthenelse_split" (formula "9") (term "0"))
                                                                  (branch "self.chosen[i_51].length ≥ 1 TRUE"
                                                                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                                                                     (rule "leq_literals" (formula "8") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "8"))
                                                                     (rule "true_left" (formula "8"))
                                                                     (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE TRUE"
                                                                        (rule "andLeft" (formula "5"))
                                                                        (rule "notLeft" (formula "5"))
                                                                        (rule "notLeft" (formula "5"))
                                                                        (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "38"))
                                                                        (rule "close" (formula "37") (ifseqformula "15"))
                                                                     )
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE FALSE"
                                                                        (rule "close" (formula "47") (ifseqformula "5"))
                                                                     )
                                                                  )
                                                                  (branch "self.chosen[i_51].length ≥ 1 FALSE"
                                                                     (rule "inEqSimp_geqRight" (formula "38"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "10"))
                                                                     (rule "times_zero_2" (formula "10") (term "1,0"))
                                                                     (rule "add_zero_right" (formula "10") (term "0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                                     (rule "mul_literals" (formula "10") (term "1"))
                                                                     (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "10"))
                                                                     (rule "qeq_literals" (formula "7") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "closeFalse" (formula "7"))
                                                                  )
                                                               )
                                                               (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "inEqSimp_leqRight" (formula "39"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "36"))
                                                                  (rule "add_zero_right" (formula "1") (term "0"))
                                                                  (rule "qeq_literals" (formula "1"))
                                                                  (rule "closeFalse" (formula "1"))
                                                               )
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "40"))
                                                               (rule "close" (formula "35") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                            (rule "close" (formula "36") (ifseqformula "15"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "9"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "inEqSimp_geqRight" (formula "35"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "10") (term "0"))
                                                         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "10") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "10") (term "0,0"))
                                                         (rule "commute_or_2" (formula "23") (term "0"))
                                                         (rule "ifthenelse_split" (formula "11") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "51") (term "0,0,0,1,1,0,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "51") (term "0,0,0,1,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "10") (term "0,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "51") (term "0,1,1,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,0,0,1,1,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "51") (term "1,1,1,1,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                                            (rule "hideAuxiliaryEq" (formula "12"))
                                                            (rule "eqSymm" (formula "12") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "10"))
                                                            (rule "true_left" (formula "10"))
                                                            (rule "inEqSimp_contradInEq0" (formula "49") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "49") (term "0,0,1,1,0,0,1"))
                                                            (builtin "One Step Simplification" (formula "49"))
                                                            (rule "inEqSimp_contradInEq0" (formula "11") (term "0,1,1,0") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "11") (term "0,0,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "inEqSimp_contradInEq0" (formula "49") (term "0,1,0") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "49") (term "0,0,1,0"))
                                                            (builtin "One Step Simplification" (formula "49"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "49") (term "0,0,1"))
                                                            (rule "add_zero_right" (formula "49") (term "1,1,0,0,1"))
                                                            (rule "qeq_literals" (formula "49") (term "1,0,0,1"))
                                                            (builtin "One Step Simplification" (formula "49"))
                                                            (rule "ifthenelse_split" (formula "6") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "8") (term "0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "45") (term "0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "44"))
                                                               (rule "eqSymm" (formula "44"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "1,1") (ifseqformula "14"))
                                                               (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "10"))
                                                               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "41")))
                                                               (rule "true_left" (formula "23"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "14"))
                                                               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                                               (builtin "One Step Simplification" (formula "1"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,0") (ifseqformula "15"))
                                                               (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "43"))
                                                               (builtin "One Step Simplification" (formula "24"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "15"))
                                                               (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "7"))
                                                               (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "42")))
                                                               (rule "true_left" (formula "26"))
                                                               (rule "commute_or_2" (formula "36") (term "0"))
                                                               (rule "commute_or_2" (formula "35") (term "0"))
                                                               (rule "commute_or_2" (formula "34") (term "0"))
                                                               (rule "commute_or" (formula "20") (term "0,0"))
                                                               (rule "commute_or" (formula "21") (term "0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or" (formula "10") (term "0,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0"))
                                                               (rule "arrayLengthNotNegative" (formula "33") (term "0,1"))
                                                               (rule "arrayLengthIsAShort" (formula "34") (term "0,1"))
                                                               (builtin "One Step Simplification" (formula "34"))
                                                               (rule "true_left" (formula "34"))
                                                               (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                                               (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "5"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                               (rule "qeq_literals" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                               (rule "leq_literals" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "commute_or" (formula "12") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0"))
                                                               (rule "add_zero_right" (formula "12") (term "1,1,0"))
                                                               (rule "qeq_literals" (formula "12") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "12"))
                                                               (rule "true_left" (formula "12"))
                                                               (rule "cut_direct" (formula "33") (term "0"))
                                                               (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "inEqSimp_antiSymm" (formula "32") (ifseqformula "33"))
                                                                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                                                                  (rule "qeq_literals" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                                                                  (rule "leq_literals" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "commute_or" (formula "34") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "10") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0"))
                                                                  (rule "commute_or" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "shift_paren_or" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "10") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "10") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "commute_or_2" (formula "10") (term "0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "ifthenelse_split" (formula "9") (term "0"))
                                                                  (branch "self.chosen[i_51].length ≥ 1 TRUE"
                                                                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                                                                     (rule "leq_literals" (formula "8") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "8"))
                                                                     (rule "true_left" (formula "8"))
                                                                     (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE TRUE"
                                                                        (rule "andLeft" (formula "5"))
                                                                        (rule "notLeft" (formula "5"))
                                                                        (rule "notLeft" (formula "5"))
                                                                        (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "36"))
                                                                        (rule "close" (formula "35") (ifseqformula "13"))
                                                                     )
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE FALSE"
                                                                        (rule "close" (formula "45") (ifseqformula "5"))
                                                                     )
                                                                  )
                                                                  (branch "self.chosen[i_51].length ≥ 1 FALSE"
                                                                     (rule "inEqSimp_geqRight" (formula "36"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "10"))
                                                                     (rule "times_zero_2" (formula "10") (term "1,0"))
                                                                     (rule "add_zero_right" (formula "10") (term "0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                                     (rule "mul_literals" (formula "10") (term "1"))
                                                                     (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "7"))
                                                                     (rule "qeq_literals" (formula "10") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "10"))
                                                                     (rule "closeFalse" (formula "10"))
                                                                  )
                                                               )
                                                               (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "inEqSimp_leqRight" (formula "37"))
                                                                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                                  (rule "add_zero_right" (formula "1") (term "0,0"))
                                                                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "34"))
                                                                  (rule "add_zero_right" (formula "1") (term "0"))
                                                                  (rule "qeq_literals" (formula "1"))
                                                                  (rule "closeFalse" (formula "1"))
                                                               )
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "40"))
                                                               (rule "close" (formula "35") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                            (rule "close" (formula "36") (ifseqformula "15"))
                                                         )
                                                      )
                                                   )
                                                   (branch "self.chosen[i_51].length ≥ 1 + iv_47 FALSE"
                                                      (rule "eqSymm" (formula "43"))
                                                      (builtin "One Step Simplification" (formula "43"))
                                                      (rule "orRight" (formula "43"))
                                                      (rule "notRight" (formula "43"))
                                                      (rule "eqSymm" (formula "44"))
                                                      (rule "inEqSimp_geqRight" (formula "43"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "commute_or_2" (formula "19") (term "0"))
                                                      (rule "commute_or_2" (formula "20") (term "0"))
                                                      (rule "commute_or_2" (formula "21") (term "0"))
                                                      (rule "arrayLengthNotNegative" (formula "7") (term "1,0"))
                                                      (rule "arrayLengthIsAShort" (formula "8") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "commute_or_2" (formula "9") (term "0"))
                                                      (rule "ifthenelse_split" (formula "10") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "11"))
                                                         (rule "applyEq" (formula "51") (term "1,1,0,0,1") (ifseqformula "11"))
                                                         (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "11"))
                                                         (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "11"))
                                                         (rule "commute_or_2" (formula "24") (term "0"))
                                                         (rule "ifthenelse_split" (formula "12") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "11") (term "0,1,0") (ifseqformula "13"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "1,1,1,1,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "13"))
                                                            (rule "hideAuxiliaryEq" (formula "13"))
                                                            (rule "eqSymm" (formula "11") (term "1"))
                                                            (rule "eqSymm" (formula "13") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "10"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "true_left" (formula "11"))
                                                            (rule "ifthenelse_split" (formula "6") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "8") (term "0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                                               (rule "andLeft" (formula "1"))
                                                               (rule "inEqSimp_homoInEq1" (formula "1"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                               (rule "add_literals" (formula "1") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "1") (term "1,0"))
                                                               (rule "add_literals" (formula "1") (term "0"))
                                                               (rule "leq_literals" (formula "1"))
                                                               (rule "closeFalse" (formula "1"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "41"))
                                                               (rule "close" (formula "36") (ifseqformula "15"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                            (rule "close" (formula "37") (ifseqformula "16"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "10"))
                                                         (builtin "One Step Simplification" (formula "10"))
                                                         (rule "inEqSimp_geqRight" (formula "36"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "11") (term "0"))
                                                         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "11") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "11") (term "0,0"))
                                                         (rule "commute_or_2" (formula "24") (term "0"))
                                                         (rule "ifthenelse_split" (formula "12") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "1,1,1,1,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,0,0,1,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,0,0,1,1,0,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "0,0,0,1,1,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "11") (term "0,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,0") (ifseqformula "13"))
                                                            (rule "hideAuxiliaryEq" (formula "13"))
                                                            (rule "eqSymm" (formula "13") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "true_left" (formula "11"))
                                                            (rule "inEqSimp_contradInEq0" (formula "50") (term "0,1,0") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "50") (term "0,0,1,0"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "inEqSimp_contradInEq0" (formula "12") (term "0,1,1,0") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "12") (term "0,0,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "12"))
                                                            (rule "inEqSimp_contradInEq0" (formula "50") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "50") (term "0,0,1,1,0,0,1"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "50") (term "0,0,1"))
                                                            (rule "add_literals" (formula "50") (term "1,1,0,0,1"))
                                                            (rule "qeq_literals" (formula "50") (term "1,0,0,1"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "ifthenelse_split" (formula "7") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,0,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,1,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "8"))
                                                               (rule "hideAuxiliaryEq" (formula "8"))
                                                               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                                               (rule "andLeft" (formula "3"))
                                                               (rule "inEqSimp_homoInEq1" (formula "3"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                               (rule "add_literals" (formula "3") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "3") (term "1,0"))
                                                               (rule "add_literals" (formula "3") (term "0"))
                                                               (rule "leq_literals" (formula "3"))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "41"))
                                                               (rule "close" (formula "36") (ifseqformula "15"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                            (rule "close" (formula "37") (ifseqformula "16"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_0.<created> = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "nnf_notAnd" (formula "43") (term "0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,1"))
                                                (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "43") (term "1,0,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,1"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                                (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                                (rule "ifthenelse_split" (formula "29") (term "1"))
                                                (branch "result_0.length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "31") (term "0,1,1,0,0") (ifseqformula "29"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (ifseqformula "13"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "andLeft" (formula "24"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "notLeft" (formula "24"))
                                                   (rule "narrowSelectArrayType" (formula "19") (term "2,0,0,1,1,0") (ifseqformula "11") (ifseqformula "38"))
                                                   (rule "narrowSelectArrayType" (formula "5") (term "1,1,1,0") (ifseqformula "11") (ifseqformula "38"))
                                                   (rule "nonNull" (formula "26") (inst "i=i"))
                                                   (rule "greater_literals" (formula "26") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "40")))
                                                   (rule "sub_literals" (formula "26") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "narrowSelectArrayType" (formula "26") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "40"))
                                                   (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "25") (inst "i=i"))
                                                   (rule "greater_literals" (formula "25") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "41")))
                                                   (rule "sub_literals" (formula "25") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "narrowSelectArrayType" (formula "25") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "41"))
                                                   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                                   (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "24") (inst "i=i"))
                                                   (rule "greater_literals" (formula "24") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "42")))
                                                   (rule "sub_literals" (formula "24") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "24"))
                                                   (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "42"))
                                                   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                                   (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "23"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                                   (rule "nnf_imp2or" (formula "26") (term "0"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "34") (ifseqformula "13"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_5" (formula "34") (term "0,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_6" (formula "34") (term "0,0,1"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_8" (formula "34") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_9" (formula "34") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_0" (formula "34") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_1" (formula "34") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_3" (formula "34") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_4" (formula "34") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "notLeft" (formula "35"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "notLeft" (formula "35"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "notLeft" (formula "36"))
                                                   (rule "notLeft" (formula "35"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "notLeft" (formula "35"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "nonNull" (formula "36") (inst "i=i"))
                                                   (rule "greater_literals" (formula "36") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "46")))
                                                   (rule "sub_literals" (formula "36") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "35") (inst "i=i"))
                                                   (rule "greater_literals" (formula "35") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "47")))
                                                   (rule "sub_literals" (formula "35") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                                   (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "34") (inst "i=i"))
                                                   (rule "sub_literals" (formula "34") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "34"))
                                                   (rule "greater_literals" (formula "34") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "34"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_30"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_30"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_30"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_26"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "34") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_33"))
                                                   (rule "applyEq" (formula "38") (term "0") (ifseqformula "34"))
                                                   (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "28"))
                                                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "51")) (ifInst ""  (formula "12")))
                                                   (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "1,0,0,1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "23"))
                                                   (rule "nnf_imp2or" (formula "25") (term "0"))
                                                   (rule "nnf_imp2or" (formula "24") (term "0"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0"))
                                                   (rule "nnf_imp2or" (formula "33") (term "0"))
                                                   (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                                   (rule "commute_or_2" (formula "8") (term "0"))
                                                   (rule "ifthenelse_split" (formula "44") (term "0"))
                                                   (branch "self.chosen[i_51].length ≥ 1 + iv_47 TRUE"
                                                      (rule "eqSymm" (formula "45"))
                                                      (rule "ifthenelse_split" (formula "30") (term "0"))
                                                      (branch "self.concatenated.length ≥ 1 TRUE"
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                         (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0") (ifseqformula "30"))
                                                         (rule "commute_or_2" (formula "17") (term "0"))
                                                         (rule "commute_or_2" (formula "18") (term "0"))
                                                         (rule "commute_or_2" (formula "19") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "5") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "5"))
                                                         (rule "true_left" (formula "5"))
                                                         (rule "arrayLengthNotNegative" (formula "5") (term "1,0"))
                                                         (rule "commute_or_2" (formula "21") (term "0"))
                                                         (rule "commute_or_2" (formula "7") (term "0"))
                                                         (rule "ifthenelse_split" (formula "8") (term "0"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "9"))
                                                            (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "9"))
                                                            (rule "applyEq" (formula "52") (term "1,1,0,0,1") (ifseqformula "9"))
                                                            (rule "applyEq" (formula "52") (term "1,0") (ifseqformula "9"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "53") (term "1,1,1,1,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "11"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,0") (ifseqformula "11"))
                                                               (rule "hideAuxiliaryEq" (formula "11"))
                                                               (rule "eqSymm" (formula "9") (term "1"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "8"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "true_left" (formula "9"))
                                                               (rule "ifthenelse_split" (formula "4") (term "0"))
                                                               (branch "self.chosen.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "47") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,1,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "46"))
                                                                  (rule "eqSymm" (formula "46"))
                                                                  (rule "arrayLengthNotNegative" (formula "51") (term "1,0,0,0,0,0"))
                                                                  (rule "arrayLengthIsAShort" (formula "52") (term "1,0,0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "1,0") (ifseqformula "14"))
                                                                  (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "45"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,1") (ifseqformula "14"))
                                                                  (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "45"))
                                                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "10")))
                                                                  (rule "true_left" (formula "24"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0") (ifseqformula "14"))
                                                                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "52"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "15"))
                                                                  (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "45"))
                                                                  (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "6")))
                                                                  (rule "true_left" (formula "26"))
                                                                  (rule "commute_or_2" (formula "38") (term "0"))
                                                                  (rule "commute_or_2" (formula "37") (term "0"))
                                                                  (rule "commute_or_2" (formula "36") (term "0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0"))
                                                                  (rule "commute_or" (formula "23") (term "0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,0"))
                                                                  (rule "arrayLengthNotNegative" (formula "33") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "34"))
                                                                  (rule "leq_literals" (formula "33") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "arrayLengthIsAShort" (formula "34") (term "1"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "commute_or" (formula "38") (term "0,0"))
                                                                  (rule "commute_or" (formula "37") (term "0,0"))
                                                                  (rule "commute_or" (formula "36") (term "0,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "9") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "9") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0"))
                                                                  (rule "commute_or" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,1,1,0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "12") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "12"))
                                                                  (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "12") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0"))
                                                                  (rule "commute_or" (formula "12") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "9") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "ifthenelse_to_or_right" (formula "35") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "35") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,0,1,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "9") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "9") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "9") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "9") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "commute_or_2" (formula "9") (term "0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "cnf_rightDist" (formula "12") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "12") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "12"))
                                                                  (rule "shift_paren_or" (formula "12") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "12") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "12") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "12") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "12"))
                                                                  (rule "shift_paren_or" (formula "12") (term "0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "12"))
                                                                  (rule "shift_paren_or" (formula "12") (term "0,0"))
                                                                  (rule "commute_or" (formula "12") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "12"))
                                                                  (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                  (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE TRUE"
                                                                     (rule "andLeft" (formula "4"))
                                                                     (rule "notLeft" (formula "4"))
                                                                     (rule "notLeft" (formula "4"))
                                                                     (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "40"))
                                                                     (rule "close" (formula "39") (ifseqformula "15"))
                                                                  )
                                                                  (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE FALSE"
                                                                     (rule "close" (formula "50") (ifseqformula "4"))
                                                                  )
                                                               )
                                                               (branch "self.chosen.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                                  (rule "close" (formula "36") (ifseqformula "13"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "44"))
                                                               (rule "close" (formula "37") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "8"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "inEqSimp_geqRight" (formula "36"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_notGeq" (formula "9") (term "0"))
                                                            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                                            (rule "add_literals" (formula "9") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "9") (term "0,0"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,0,0,1,1,0,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,0,0,1,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,0") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "53") (term "1,1,1,1,0,1") (ifseqformula "11"))
                                                               (rule "hideAuxiliaryEq" (formula "11"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "true_left" (formula "9"))
                                                               (rule "inEqSimp_contradInEq0" (formula "10") (term "0,1,1,0") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "10") (term "0,0,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "inEqSimp_contradInEq0" (formula "51") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "51") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "51"))
                                                               (rule "inEqSimp_contradInEq0" (formula "51") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "51") (term "0,0,1,1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "51"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "51") (term "0,0,1"))
                                                               (rule "add_literals" (formula "51") (term "1,1,0,0,1"))
                                                               (rule "qeq_literals" (formula "51") (term "1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "51"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "self.chosen.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "47") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "2"))
                                                                  (builtin "One Step Simplification" (formula "46"))
                                                                  (rule "eqSymm" (formula "46"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1,1") (ifseqformula "13"))
                                                                  (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "43"))
                                                                  (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "9")))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1,0") (ifseqformula "13"))
                                                                  (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "44"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "13"))
                                                                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1") (ifseqformula "14"))
                                                                  (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "6"))
                                                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "44")))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "commute_or_2" (formula "37") (term "0"))
                                                                  (rule "commute_or_2" (formula "36") (term "0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "commute_or_2" (formula "34") (term "0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0"))
                                                                  (rule "commute_or" (formula "11") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0"))
                                                                  (rule "add_zero_right" (formula "11") (term "1,1,0"))
                                                                  (rule "qeq_literals" (formula "11") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "11"))
                                                                  (rule "true_left" (formula "11"))
                                                                  (rule "arrayLengthNotNegative" (formula "32") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "31"))
                                                                  (rule "leq_literals" (formula "32") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "true_left" (formula "32"))
                                                                  (rule "arrayLengthIsAShort" (formula "32") (term "1"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "true_left" (formula "32"))
                                                                  (rule "commute_or" (formula "36") (term "0,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "commute_or" (formula "34") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "9") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "9") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0"))
                                                                  (rule "commute_or" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "9") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "shift_paren_or" (formula "9") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "9") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "9") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "9") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "9") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "9") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "commute_or_2" (formula "9") (term "0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "9") (term "0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "33") (term "1,1,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "eqSymm" (formula "33") (term "1,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "33") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "33") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "33") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "33") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "33") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "33") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "ifthenelse_split" (formula "8") (term "0"))
                                                                  (branch "self.chosen[i_51].length ≥ 1 TRUE"
                                                                     (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
                                                                     (rule "leq_literals" (formula "7") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "true_left" (formula "7"))
                                                                     (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE TRUE"
                                                                        (rule "andLeft" (formula "4"))
                                                                        (rule "notLeft" (formula "4"))
                                                                        (rule "notLeft" (formula "4"))
                                                                        (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "37"))
                                                                        (rule "close" (formula "36") (ifseqformula "12"))
                                                                     )
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE FALSE"
                                                                        (rule "close" (formula "47") (ifseqformula "4"))
                                                                     )
                                                                  )
                                                                  (branch "self.chosen[i_51].length ≥ 1 FALSE"
                                                                     (rule "inEqSimp_geqRight" (formula "37"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "9"))
                                                                     (rule "times_zero_2" (formula "9") (term "1,0"))
                                                                     (rule "add_zero_right" (formula "9") (term "0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                                     (rule "mul_literals" (formula "9") (term "1"))
                                                                     (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "6"))
                                                                     (rule "qeq_literals" (formula "9") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "9"))
                                                                     (rule "closeFalse" (formula "9"))
                                                                  )
                                                               )
                                                               (branch "self.chosen.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                                  (rule "close" (formula "36") (ifseqformula "13"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "44"))
                                                               (rule "close" (formula "37") (ifseqformula "14"))
                                                            )
                                                         )
                                                      )
                                                      (branch "self.concatenated.length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "30"))
                                                         (rule "inEqSimp_geqRight" (formula "35"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                         (rule "qeq_literals" (formula "30"))
                                                         (rule "closeFalse" (formula "30"))
                                                      )
                                                   )
                                                   (branch "self.chosen[i_51].length ≥ 1 + iv_47 FALSE"
                                                      (rule "eqSymm" (formula "45"))
                                                      (builtin "One Step Simplification" (formula "45"))
                                                      (rule "orRight" (formula "45"))
                                                      (rule "notRight" (formula "45"))
                                                      (rule "eqSymm" (formula "46"))
                                                      (rule "inEqSimp_geqRight" (formula "45"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "ifthenelse_split" (formula "31") (term "0"))
                                                      (branch "self.concatenated.length ≥ 1 TRUE"
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                         (rule "applyEq" (formula "32") (term "1,1,1,0,0,1,0") (ifseqformula "31"))
                                                         (rule "commute_or_2" (formula "18") (term "0"))
                                                         (rule "commute_or_2" (formula "19") (term "0"))
                                                         (rule "commute_or_2" (formula "20") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "6") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "6"))
                                                         (rule "true_left" (formula "6"))
                                                         (rule "arrayLengthNotNegative" (formula "6") (term "1,0"))
                                                         (rule "commute_or_2" (formula "22") (term "0"))
                                                         (rule "commute_or_2" (formula "8") (term "0"))
                                                         (rule "ifthenelse_split" (formula "9") (term "0"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "10"))
                                                            (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "10"))
                                                            (rule "applyEq" (formula "53") (term "1,1,0,0,1") (ifseqformula "10"))
                                                            (rule "applyEq" (formula "53") (term "1,0") (ifseqformula "10"))
                                                            (rule "ifthenelse_split" (formula "11") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,0,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,1,0") (ifseqformula "12"))
                                                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
                                                               (rule "true_left" (formula "10"))
                                                               (rule "applyEqReverse" (formula "53") (term "1,1,1,1,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "11"))
                                                               (rule "hideAuxiliaryEq" (formula "11"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "self.chosen.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "1"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                                  (rule "add_literals" (formula "1") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "1") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "1") (term "0"))
                                                                  (rule "leq_literals" (formula "1"))
                                                                  (rule "closeFalse" (formula "1"))
                                                               )
                                                               (branch "self.chosen.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                                  (rule "close" (formula "37") (ifseqformula "14"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "45"))
                                                               (rule "close" (formula "38") (ifseqformula "15"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "9"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "inEqSimp_geqRight" (formula "37"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_notGeq" (formula "10") (term "0"))
                                                            (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                                            (rule "add_literals" (formula "10") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "10") (term "0,0"))
                                                            (rule "ifthenelse_split" (formula "11") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "54") (term "1,1,1,1,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "54") (term "0,0,0,1,1,0,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "54") (term "0,1,1,1,0,0,1") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "54") (term "0,0,0,1,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "13") (term "0,0,0,1,1,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "54") (term "0,1,1,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "12"))
                                                               (rule "applyEqReverse" (formula "54") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "12"))
                                                               (rule "hideAuxiliaryEq" (formula "12"))
                                                               (rule "eqSymm" (formula "12") (term "1,0,0"))
                                                               (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "true_left" (formula "10"))
                                                               (rule "inEqSimp_contradInEq0" (formula "11") (term "0,1,1,0") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "11") (term "0,0,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "inEqSimp_contradInEq0" (formula "52") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "52") (term "0,0,1,1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "inEqSimp_contradInEq0" (formula "52") (term "0,1,0") (ifseqformula "1"))
                                                               (rule "qeq_literals" (formula "52") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "52") (term "0,0,1"))
                                                               (rule "add_zero_right" (formula "52") (term "1,1,0,0,1"))
                                                               (rule "qeq_literals" (formula "52") (term "1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch "self.chosen.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                                                  (rule "andLeft" (formula "3"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "3"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                                  (rule "add_literals" (formula "3") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "3") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "3") (term "0"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "closeFalse" (formula "3"))
                                                               )
                                                               (branch "self.chosen.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                                  (rule "close" (formula "37") (ifseqformula "14"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "45"))
                                                               (rule "close" (formula "38") (ifseqformula "15"))
                                                            )
                                                         )
                                                      )
                                                      (branch "self.concatenated.length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "31"))
                                                         (rule "inEqSimp_geqRight" (formula "36"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                         (rule "qeq_literals" (formula "31"))
                                                         (rule "closeFalse" (formula "31"))
                                                      )
                                                   )
                                                )
                                                (branch "result_0.length ≥ 1 FALSE"
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "replace_known_right" (formula "30") (term "0,1,1,0,0") (ifseqformula "32"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_geqRight" (formula "32"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_notGeq" (formula "30") (term "0"))
                                                   (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "30") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "30") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "31") (term "0,0"))
                                                   (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "31") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "31") (ifseqformula "14"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_5" (formula "31") (term "0,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_6" (formula "31") (term "0,0,1"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_8" (formula "31") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_9" (formula "31") (term "1,1,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_0" (formula "31") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_1" (formula "31") (term "1,1,0,0,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet110011000000201_3" (formula "31") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet110011000000201_4" (formula "31") (term "0,0,1,0,0,0,0,0,0,0"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "32"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "32"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "32"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "33"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "31"))
                                                   (rule "notLeft" (formula "31"))
                                                   (rule "narrowSelectArrayType" (formula "20") (term "2,0,0,1,1,0") (ifseqformula "12") (ifseqformula "38"))
                                                   (rule "narrowSelectArrayType" (formula "6") (term "1,1,1,0") (ifseqformula "12") (ifseqformula "38"))
                                                   (rule "nonNull" (formula "33") (inst "i=i"))
                                                   (rule "greater_literals" (formula "33") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "40")))
                                                   (rule "sub_literals" (formula "33") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "32") (inst "i=i"))
                                                   (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "41")))
                                                   (rule "greater_literals" (formula "32") (term "0"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                                   (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "31") (inst "i=i"))
                                                   (rule "greater_literals" (formula "31") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "sub_literals" (formula "31") (term "2,1,0,1"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "andLeft" (formula "31"))
                                                   (rule "notLeft" (formula "31"))
                                                   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_29"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "14")))
                                                   (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_29"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "14")))
                                                   (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_29"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "14")))
                                                   (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_25"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "14")))
                                                   (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_32"))
                                                   (rule "applyEq" (formula "35") (term "0") (ifseqformula "31"))
                                                   (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "27"))
                                                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "48")) (ifInst ""  (formula "13")))
                                                   (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "31"))
                                                   (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                                                   (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
                                                   (rule "hideAuxiliaryEq" (formula "31"))
                                                   (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "24"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "25") (ifseqformula "14"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "notLeft" (formula "27"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "notLeft" (formula "27"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "nonNull" (formula "27") (inst "i=i"))
                                                   (rule "sub_literals" (formula "27") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "41")))
                                                   (rule "greater_literals" (formula "27") (term "0"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "narrowSelectArrayType" (formula "27") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "41"))
                                                   (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "26") (inst "i=i"))
                                                   (rule "greater_literals" (formula "26") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "42")))
                                                   (rule "sub_literals" (formula "26") (term "2,1,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "narrowSelectArrayType" (formula "26") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "42"))
                                                   (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                                   (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "25") (inst "i=i"))
                                                   (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "43")))
                                                   (rule "greater_literals" (formula "25") (term "0"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "narrowSelectArrayType" (formula "25") (term "0,0,1,0") (ifseqformula "12") (ifseqformula "43"))
                                                   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                                   (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "24"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0"))
                                                   (rule "nnf_imp2or" (formula "33") (term "0"))
                                                   (rule "nnf_imp2or" (formula "27") (term "0"))
                                                   (rule "nnf_imp2or" (formula "26") (term "0"))
                                                   (rule "nnf_imp2or" (formula "25") (term "0"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                                   (rule "commute_or_2" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "43") (term "0"))
                                                   (branch "self.chosen[i_51].length ≥ 1 + iv_47 TRUE"
                                                      (rule "eqSymm" (formula "44"))
                                                      (rule "commute_or_2" (formula "18") (term "0"))
                                                      (rule "commute_or_2" (formula "19") (term "0"))
                                                      (rule "commute_or_2" (formula "20") (term "0"))
                                                      (rule "arrayLengthIsAShort" (formula "6") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "true_left" (formula "6"))
                                                      (rule "arrayLengthNotNegative" (formula "6") (term "1,0"))
                                                      (rule "ifthenelse_split" (formula "9") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "10"))
                                                         (rule "applyEq" (formula "51") (term "1,1,0,0,1") (ifseqformula "10"))
                                                         (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "10"))
                                                         (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "10"))
                                                         (rule "commute_or_2" (formula "23") (term "0"))
                                                         (rule "commute_or_2" (formula "8") (term "0"))
                                                         (rule "ifthenelse_split" (formula "11") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "10") (term "0,1,0") (ifseqformula "12"))
                                                            (builtin "One Step Simplification" (formula "10"))
                                                            (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                                            (rule "hideAuxiliaryEq" (formula "12"))
                                                            (rule "eqSymm" (formula "10") (term "1"))
                                                            (rule "eqSymm" (formula "12") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "9"))
                                                            (builtin "One Step Simplification" (formula "10"))
                                                            (rule "true_left" (formula "10"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "46") (term "0,0,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "45"))
                                                               (rule "eqSymm" (formula "45"))
                                                               (rule "arrayLengthNotNegative" (formula "50") (term "1,0,0,0,0,0"))
                                                               (rule "arrayLengthIsAShort" (formula "51") (term "1,0,0,0,0,0"))
                                                               (builtin "One Step Simplification" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "commute_or_2" (formula "35") (term "0"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "15"))
                                                               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                                                               (builtin "One Step Simplification" (formula "1"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "1,0") (ifseqformula "16"))
                                                               (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "45"))
                                                               (builtin "One Step Simplification" (formula "25"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,1") (ifseqformula "16"))
                                                               (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "45"))
                                                               (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "12")))
                                                               (rule "true_left" (formula "26"))
                                                               (rule "commute_or_2" (formula "36") (term "0"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0,1") (ifseqformula "16"))
                                                               (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "44"))
                                                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "7")))
                                                               (rule "true_left" (formula "27"))
                                                               (rule "commute_or_2" (formula "35") (term "0"))
                                                               (rule "commute_or" (formula "21") (term "0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0"))
                                                               (rule "commute_or" (formula "24") (term "0,0"))
                                                               (rule "commute_or" (formula "10") (term "0,0"))
                                                               (rule "commute_or" (formula "13") (term "0,0"))
                                                               (rule "arrayLengthNotNegative" (formula "34") (term "0,1"))
                                                               (rule "arrayLengthIsAShort" (formula "35") (term "0,1"))
                                                               (builtin "One Step Simplification" (formula "35"))
                                                               (rule "true_left" (formula "35"))
                                                               (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                                               (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "5"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                               (rule "qeq_literals" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                               (rule "leq_literals" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "cut_direct" (formula "35") (term "0"))
                                                               (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "inEqSimp_antiSymm" (formula "34") (ifseqformula "35"))
                                                                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                                                                  (rule "qeq_literals" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                                                                  (rule "leq_literals" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "commute_or" (formula "37") (term "0,0"))
                                                                  (rule "commute_or" (formula "36") (term "0,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "10") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "13") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "13") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,1,1,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "shift_paren_or" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "10") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "10") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "commute_or_2" (formula "10") (term "0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "13") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "shift_paren_or" (formula "13") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "13") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "13") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "13") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "13") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "shift_paren_or" (formula "13") (term "0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "shift_paren_or" (formula "13") (term "0,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE TRUE"
                                                                     (rule "andLeft" (formula "5"))
                                                                     (rule "notLeft" (formula "6"))
                                                                     (rule "notLeft" (formula "5"))
                                                                     (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "38"))
                                                                     (rule "close" (formula "39") (ifseqformula "16"))
                                                                  )
                                                                  (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE FALSE"
                                                                     (rule "close" (formula "49") (ifseqformula "5"))
                                                                  )
                                                               )
                                                               (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "inEqSimp_leqRight" (formula "39"))
                                                                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                                  (rule "add_zero_right" (formula "1") (term "0,0"))
                                                                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "36"))
                                                                  (rule "add_literals" (formula "1") (term "0"))
                                                                  (rule "qeq_literals" (formula "1"))
                                                                  (rule "closeFalse" (formula "1"))
                                                               )
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "41"))
                                                               (rule "close" (formula "35") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "43"))
                                                            (rule "close" (formula "36") (ifseqformula "15"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "9"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "inEqSimp_geqRight" (formula "35"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "10") (term "0"))
                                                         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "10") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "10") (term "0,0"))
                                                         (rule "commute_or_2" (formula "23") (term "0"))
                                                         (rule "commute_or_2" (formula "9") (term "0"))
                                                         (rule "ifthenelse_split" (formula "11") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "13") (term "0,0,0,1,1,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "10") (term "0,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,0,0,1,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "12"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,0,0,1,1,0,0,1") (ifseqformula "12"))
                                                            (rule "hideAuxiliaryEq" (formula "12"))
                                                            (rule "eqSymm" (formula "12") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "10"))
                                                            (rule "true_left" (formula "10"))
                                                            (rule "inEqSimp_contradInEq0" (formula "11") (term "0,1,1,0") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "11") (term "0,0,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "inEqSimp_contradInEq0" (formula "50") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "50") (term "0,0,1,1,0,0,1"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "inEqSimp_contradInEq0" (formula "50") (term "0,1,0") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "50") (term "0,0,1,0"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "50") (term "0,0,1"))
                                                            (rule "add_zero_right" (formula "50") (term "1,1,0,0,1"))
                                                            (rule "qeq_literals" (formula "50") (term "1,0,0,1"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "ifthenelse_split" (formula "6") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "8") (term "0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "46") (term "0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "45"))
                                                               (rule "eqSymm" (formula "45"))
                                                               (rule "commute_or_2" (formula "34") (term "0"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "14"))
                                                               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                                               (builtin "One Step Simplification" (formula "1"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,1") (ifseqformula "15"))
                                                               (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "43"))
                                                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "11")))
                                                               (rule "true_left" (formula "24"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,0") (ifseqformula "15"))
                                                               (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "44"))
                                                               (builtin "One Step Simplification" (formula "24"))
                                                               (rule "commute_or_2" (formula "35") (term "0"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "15"))
                                                               (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "43"))
                                                               (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "7")))
                                                               (rule "true_left" (formula "26"))
                                                               (rule "commute_or_2" (formula "34") (term "0"))
                                                               (rule "commute_or" (formula "20") (term "0,0"))
                                                               (rule "commute_or" (formula "21") (term "0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0"))
                                                               (rule "commute_or" (formula "10") (term "0,0"))
                                                               (rule "arrayLengthIsAShort" (formula "33") (term "0,1"))
                                                               (builtin "One Step Simplification" (formula "33"))
                                                               (rule "true_left" (formula "33"))
                                                               (rule "arrayLengthNotNegative" (formula "33") (term "0,1"))
                                                               (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                                               (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "5"))
                                                               (rule "applyEq" (formula "6") (term "0") (ifseqformula "4"))
                                                               (rule "leq_literals" (formula "6"))
                                                               (rule "true_left" (formula "6"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                               (rule "qeq_literals" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "commute_or" (formula "12") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0"))
                                                               (rule "add_zero_right" (formula "12") (term "1,1,0"))
                                                               (rule "qeq_literals" (formula "12") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "12"))
                                                               (rule "true_left" (formula "12"))
                                                               (rule "cut_direct" (formula "33") (term "0"))
                                                               (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "inEqSimp_antiSymm" (formula "32") (ifseqformula "33"))
                                                                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "32"))
                                                                  (rule "leq_literals" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                                                                  (rule "qeq_literals" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "commute_or" (formula "35") (term "0,0"))
                                                                  (rule "commute_or" (formula "34") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "10") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "eqSymm" (formula "10") (term "1,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
                                                                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
                                                                  (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0"))
                                                                  (rule "commute_or" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "shift_paren_or" (formula "10") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "10") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "10") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "10") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "commute_or_2" (formula "10") (term "0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "10") (term "0,0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "ifthenelse_split" (formula "9") (term "0"))
                                                                  (branch "self.chosen[i_51].length ≥ 1 TRUE"
                                                                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                                                                     (rule "leq_literals" (formula "8") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "8"))
                                                                     (rule "true_left" (formula "8"))
                                                                     (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE TRUE"
                                                                        (rule "andLeft" (formula "5"))
                                                                        (rule "notLeft" (formula "5"))
                                                                        (rule "notLeft" (formula "5"))
                                                                        (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "36"))
                                                                        (rule "close" (formula "35") (ifseqformula "13"))
                                                                     )
                                                                     (branch " ¬self.chosen[i_51] = null ∧ ¬self.chosen[i_51].<created> = TRUE FALSE"
                                                                        (rule "close" (formula "46") (ifseqformula "5"))
                                                                     )
                                                                  )
                                                                  (branch "self.chosen[i_51].length ≥ 1 FALSE"
                                                                     (rule "inEqSimp_geqRight" (formula "36"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "10"))
                                                                     (rule "times_zero_2" (formula "10") (term "1,0"))
                                                                     (rule "add_zero_right" (formula "10") (term "0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                                     (rule "mul_literals" (formula "10") (term "1"))
                                                                     (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "7"))
                                                                     (rule "qeq_literals" (formula "10") (term "0"))
                                                                     (builtin "One Step Simplification" (formula "10"))
                                                                     (rule "closeFalse" (formula "10"))
                                                                  )
                                                               )
                                                               (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "inEqSimp_leqRight" (formula "37"))
                                                                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                                  (rule "add_zero_right" (formula "1") (term "0,0"))
                                                                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "34"))
                                                                  (rule "add_zero_right" (formula "1") (term "0"))
                                                                  (rule "qeq_literals" (formula "1"))
                                                                  (rule "closeFalse" (formula "1"))
                                                               )
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "41"))
                                                               (rule "close" (formula "35") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "43"))
                                                            (rule "close" (formula "36") (ifseqformula "15"))
                                                         )
                                                      )
                                                   )
                                                   (branch "self.chosen[i_51].length ≥ 1 + iv_47 FALSE"
                                                      (rule "eqSymm" (formula "44"))
                                                      (builtin "One Step Simplification" (formula "44"))
                                                      (rule "orRight" (formula "44"))
                                                      (rule "notRight" (formula "44"))
                                                      (rule "eqSymm" (formula "45"))
                                                      (rule "inEqSimp_geqRight" (formula "44"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "commute_or_2" (formula "19") (term "0"))
                                                      (rule "commute_or_2" (formula "20") (term "0"))
                                                      (rule "commute_or_2" (formula "21") (term "0"))
                                                      (rule "arrayLengthIsAShort" (formula "7") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "7"))
                                                      (rule "true_left" (formula "7"))
                                                      (rule "arrayLengthNotNegative" (formula "7") (term "1,0"))
                                                      (rule "ifthenelse_split" (formula "10") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "11"))
                                                         (rule "applyEq" (formula "52") (term "1,1,0,0,1") (ifseqformula "11"))
                                                         (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "11"))
                                                         (rule "applyEq" (formula "52") (term "1,0") (ifseqformula "11"))
                                                         (rule "commute_or_2" (formula "24") (term "0"))
                                                         (rule "commute_or_2" (formula "9") (term "0"))
                                                         (rule "ifthenelse_split" (formula "12") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "11") (term "0,1,0") (ifseqformula "13"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "53") (term "1,1,1,1,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "1,1,1,1,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "13"))
                                                            (rule "hideAuxiliaryEq" (formula "13"))
                                                            (rule "eqSymm" (formula "11") (term "1"))
                                                            (rule "eqSymm" (formula "13") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "10"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "true_left" (formula "11"))
                                                            (rule "ifthenelse_split" (formula "6") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "8") (term "0,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                                               (rule "andLeft" (formula "1"))
                                                               (rule "inEqSimp_homoInEq1" (formula "1"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                               (rule "add_literals" (formula "1") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "1") (term "1,0"))
                                                               (rule "add_zero_right" (formula "1") (term "0"))
                                                               (rule "leq_literals" (formula "1"))
                                                               (rule "closeFalse" (formula "1"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                               (rule "close" (formula "36") (ifseqformula "15"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "44"))
                                                            (rule "close" (formula "37") (ifseqformula "16"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "10"))
                                                         (builtin "One Step Simplification" (formula "10"))
                                                         (rule "inEqSimp_geqRight" (formula "36"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "11") (term "0"))
                                                         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "11") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "11") (term "0,0"))
                                                         (rule "commute_or_2" (formula "24") (term "0"))
                                                         (rule "commute_or_2" (formula "10") (term "0"))
                                                         (rule "ifthenelse_split" (formula "12") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "0,0,0,1,1,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "11") (term "0,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,0,0,1,1,0,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "53") (term "1,1,1,1,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,0,0,1,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "1,1,1,1,0,0") (ifseqformula "13"))
                                                            (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0") (ifseqformula "13"))
                                                            (rule "hideAuxiliaryEq" (formula "13"))
                                                            (rule "eqSymm" (formula "13") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "true_left" (formula "11"))
                                                            (rule "inEqSimp_contradInEq0" (formula "12") (term "0,1,1,0") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "12") (term "0,0,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "12"))
                                                            (rule "inEqSimp_contradInEq0" (formula "51") (term "0,1,0") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "51") (term "0,0,1,0"))
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "inEqSimp_contradInEq0" (formula "51") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "51") (term "0,0,1,1,0,0,1"))
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "51") (term "0,0,1"))
                                                            (rule "add_zero_right" (formula "51") (term "1,1,0,0,1"))
                                                            (rule "qeq_literals" (formula "51") (term "1,0,0,1"))
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "ifthenelse_split" (formula "7") (term "0"))
                                                            (branch "self.chosen.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,0,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "9") (term "0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "10") (term "0,1,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "8"))
                                                               (rule "hideAuxiliaryEq" (formula "8"))
                                                               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                                               (rule "andLeft" (formula "3"))
                                                               (rule "inEqSimp_homoInEq1" (formula "3"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                               (rule "add_literals" (formula "3") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "3") (term "1,0"))
                                                               (rule "add_zero_right" (formula "3") (term "0"))
                                                               (rule "leq_literals" (formula "3"))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                            (branch "self.chosen.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                               (rule "close" (formula "36") (ifseqformula "15"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "44"))
                                                            (rule "close" (formula "37") (ifseqformula "16"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.electionID@heapAfter_checkAndGetBallots) = array2seq(heap, self.electionID) FALSE"
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "23") (inst "iv=iv") (userinteraction))
                                       (rule "andRight" (formula "23") (userinteraction))
                                       (branch "Case 1"
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "eqSymm" (formula "29"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "eqSymm" (formula "11") (term "1,0"))
                                          (rule "eqSymm" (formula "22"))
                                          (rule "eqSymm" (formula "13"))
                                          (rule "eqSymm" (formula "14"))
                                          (rule "eqSymm" (formula "15"))
                                          (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "28"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "25"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "3"))
                                          (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "16"))
                                          (rule "applyEq" (formula "29") (term "1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                          (rule "array2seqDef" (formula "24") (term "0,1") (inst "u=u"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "lenOfSeqDef" (formula "24") (term "0"))
                                          (rule "polySimp_elimSub" (formula "24") (term "1,0"))
                                          (rule "times_zero_2" (formula "24") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "24") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                                          (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "array2seqDef" (formula "29") (term "1,0,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "29") (term "0,0,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "2") (term "0,0,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "array2seqDef" (formula "11") (term "0,0,0,1,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
                                          (rule "eqSymm" (formula "11") (term "1,0"))
                                          (rule "array2seqDef" (formula "22") (term "0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "22") (term "1") (inst "u=u"))
                                          (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "13"))
                                          (rule "array2seqDef" (formula "14") (term "0,0") (inst "u=u"))
                                          (rule "narrowSelectArrayType" (formula "14") (term "2,0,0") (ifseqformula "5") (ifseqformula "27"))
                                          (rule "array2seqDef" (formula "14") (term "1,1,0") (inst "u=u"))
                                          (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "13"))
                                          (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "14"))
                                          (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                                          (rule "applyEq" (formula "29") (term "1") (ifseqformula "1"))
                                          (rule "array2seqDef" (formula "24") (term "0,1") (inst "u=u"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "lenOfSeqDef" (formula "24") (term "0"))
                                          (rule "polySimp_elimSub" (formula "24") (term "1,0"))
                                          (rule "mul_literals" (formula "24") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "24") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                                          (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "array2seqDef" (formula "11") (term "1,0,1,1,0") (inst "u=u"))
                                          (rule "eqSeqDef" (formula "22") (inst "iv=iv"))
                                          (rule "andLeft" (formula "22"))
                                          (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                                          (rule "castDel" (formula "23") (term "2,0,1,0"))
                                          (rule "castDel" (formula "23") (term "1,0,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "23") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "1,1,0,1,1,0"))
                                          (rule "lenOfSeqDef" (formula "23") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "23") (term "1,1,1,0,0"))
                                          (rule "times_zero_2" (formula "23") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "23") (term "1,1,1,0,0"))
                                          (rule "lenOfSeqDef" (formula "22") (term "1"))
                                          (rule "polySimp_elimSub" (formula "22") (term "1,1"))
                                          (rule "times_zero_2" (formula "22") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "22") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "22") (term "0"))
                                          (rule "polySimp_elimSub" (formula "22") (term "1,0"))
                                          (rule "times_zero_2" (formula "22") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "22") (term "1,0"))
                                          (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                                          (rule "castDel" (formula "23") (term "1,0,1,0"))
                                          (rule "castDel" (formula "23") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "23") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "1,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "23") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1"))
                                          (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                                          (rule "add_zero_right" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,1,0"))
                                          (rule "apply_eq_monomials" (formula "23") (term "1,0,0,1,0,0") (ifseqformula "22"))
                                          (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "23") (term "1,1,1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1"))
                                          (rule "polySimp_elimOne" (formula "22") (term "0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "23") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "0,0,1,1,1,0,0"))
                                          (rule "array2seqDef" (formula "14") (term "0,1,1") (inst "u=u"))
                                          (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "30"))
                                          (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "lenOfSeqDef" (formula "1") (term "1"))
                                          (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                          (rule "times_zero_2" (formula "1") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "1") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                                          (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                                          (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                          (rule "castDel" (formula "2") (term "2,0,1,0"))
                                          (rule "castDel" (formula "2") (term "1,0,1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                          (rule "eqSymm" (formula "2") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                          (rule "lenOfSeqDef" (formula "1") (term "0"))
                                          (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                                          (rule "times_zero_2" (formula "1") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "1") (term "1,0"))
                                          (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                          (rule "castDel" (formula "2") (term "1,0,1,0"))
                                          (rule "castDel" (formula "2") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                          (rule "eqSymm" (formula "2") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "2") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "2") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                                          (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "2") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "2") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                                          (rule "array2seqDef" (formula "3") (term "1,0,1") (inst "u=u"))
                                          (rule "pullOutSelect" (formula "5") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_33"))
                                          (rule "applyEq" (formula "2") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "3") (term "1,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "32") (term "1,1,2,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "3") (term "1,1,2,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "2") (term "1,1,1,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "32") (term "1,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "1,0,1,0") (ifseqformula "5"))
                                          (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "29")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "2") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "3") (term "1,0,1,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "32") (term "1,1,2,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "3") (term "1,1,2,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "2") (term "1,1,1,0,1,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "32") (term "1,0,1,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "1") (term "1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "1") (term "1,0,1,0") (ifseqformula "5"))
                                          (rule "hideAuxiliaryEq" (formula "5"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "16"))
                                          (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "pullOutSelect" (formula "25") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_24"))
                                          (rule "applyEq" (formula "31") (term "1,2,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "26") (term "0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "31") (term "0,1,0,0,0") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "31") (term "1,2,0,0,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "closeTrue" (formula "26"))
                                       )
                                       (branch "Case 2"
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "allRight" (formula "24") (inst "sk=iv_46"))
                                          (rule "impRight" (formula "24"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "eqSymm" (formula "15"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "eqSymm" (formula "17"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "eqSymm" (formula "18"))
                                          (rule "eqSymm" (formula "13") (term "1,0"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "30"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "27"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "6"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "18"))
                                          (rule "applyEq" (formula "31") (term "1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "18") (term "1") (ifseqformula "17"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                          (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "3"))
                                          (rule "array2seqDef" (formula "26") (term "0,0") (inst "u=u"))
                                          (rule "getOfSeqDef" (formula "26") (term "0"))
                                          (rule "castDel" (formula "26") (term "2,0"))
                                          (rule "castDel" (formula "26") (term "1,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,2,1,0"))
                                          (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0"))
                                          (rule "times_zero_2" (formula "26") (term "1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
                                          (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "15"))
                                          (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "array2seqDef" (formula "31") (term "1,0,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "31") (term "0,0,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "13") (term "1,0,0,1,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
                                          (rule "eqSymm" (formula "13") (term "1,0"))
                                          (rule "array2seqDef" (formula "24") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "array2seqDef" (formula "4") (term "0,0,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "4") (term "1,0,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "array2seqDef" (formula "31") (term "1") (inst "u=u"))
                                          (rule "applyEq" (formula "31") (term "1") (ifseqformula "3"))
                                          (rule "array2seqDef" (formula "2") (term "0,0") (inst "u=u"))
                                          (rule "lenOfSeqDef" (formula "2") (term "0"))
                                          (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                          (rule "times_zero_2" (formula "2") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "2") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                          (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                          (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "3"))
                                          (rule "array2seqDef" (formula "26") (term "0,1") (inst "u=u"))
                                          (rule "eqSymm" (formula "26"))
                                          (rule "getOfSeqDef" (formula "26") (term "0"))
                                          (rule "castDel" (formula "26") (term "1,0"))
                                          (rule "castDel" (formula "26") (term "2,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,2,1,0"))
                                          (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0"))
                                          (rule "times_zero_2" (formula "26") (term "1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                                          (rule "eqSymm" (formula "26"))
                                          (rule "polySimp_elimOne" (formula "26") (term "0,0,1"))
                                          (rule "array2seqDef" (formula "16") (term "0,1") (inst "u=u"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "narrowSelectArrayType" (formula "16") (term "2,0,0") (ifseqformula "7") (ifseqformula "29"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "array2seqDef" (formula "13") (term "0,0,1,1,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "24") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "31") (inst "iv=iv"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "31") (term "0,1,0,0,1"))
                                          (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "lenOfSeqDef" (formula "4") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "4") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "4") (term "1,1,1,0,0"))
                                          (rule "lenOfSeqDef" (formula "3") (term "1"))
                                          (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                          (rule "times_zero_2" (formula "3") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "3") (term "1,1"))
                                          (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                                          (rule "castDel" (formula "4") (term "1,0,1,0"))
                                          (rule "castDel" (formula "4") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                                          (rule "eqSymm" (formula "4") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "4") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                                          (rule "lenOfSeqDef" (formula "3") (term "0"))
                                          (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                          (rule "times_zero_2" (formula "3") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "3") (term "1,0"))
                                          (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                                          (rule "castDel" (formula "4") (term "2,0,1,0"))
                                          (rule "castDel" (formula "4") (term "1,0,1,0"))
                                          (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                                          (rule "eqSymm" (formula "4") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "4") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                                          (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                                          (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "4") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "4") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
                                          (rule "apply_eq_monomials" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                                          (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "4") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "4") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "4") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                                          (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "array2seqDef" (formula "16") (term "0,1,1") (inst "u=u"))
                                          (rule "array2seqDef" (formula "16") (term "1,1,1") (inst "u=u"))
                                          (rule "eqSeqDef" (formula "24") (inst "iv=iv"))
                                          (rule "andLeft" (formula "24"))
                                          (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0"))
                                          (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "1,1,1,0,0"))
                                          (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                                          (rule "castDel" (formula "25") (term "1,0,1,0"))
                                          (rule "castDel" (formula "25") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                                          (rule "eqSymm" (formula "25") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "lenOfSeqDef" (formula "24") (term "1"))
                                          (rule "polySimp_elimSub" (formula "24") (term "1,1"))
                                          (rule "times_zero_2" (formula "24") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "24") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "24") (term "0"))
                                          (rule "polySimp_elimSub" (formula "24") (term "1,0"))
                                          (rule "times_zero_2" (formula "24") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "24") (term "1,0"))
                                          (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                                          (rule "castDel" (formula "25") (term "1,0,1,0"))
                                          (rule "castDel" (formula "25") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                                          (rule "eqSymm" (formula "25") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                                          (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "25") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "25") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                                          (rule "apply_eq_monomials" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
                                          (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "1,1,1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "25") (term "1,1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1"))
                                          (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "25") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "25") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                          (rule "array2seqDef" (formula "32") (term "0,1,0") (inst "u=u"))
                                          (rule "eqSymm" (formula "32") (term "0"))
                                          (rule "lenOfSeqDef" (formula "32") (term "0,0"))
                                          (rule "eqSymm" (formula "32") (term "0"))
                                          (rule "polySimp_elimSub" (formula "32") (term "1,1,0"))
                                          (rule "times_zero_2" (formula "32") (term "1,1,1,0"))
                                          (rule "add_zero_right" (formula "32") (term "1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "0,0,1,0"))
                                          (rule "array2seqDef" (formula "32") (term "0,1,1,0,1") (inst "u=u"))
                                          (rule "eqSymm" (formula "32") (term "1,0,1"))
                                          (rule "getOfSeqDef" (formula "32") (term "0,1,0,1"))
                                          (rule "castDel" (formula "32") (term "1,0,1,0,1"))
                                          (rule "castDel" (formula "32") (term "2,0,1,0,1"))
                                          (rule "add_zero_right" (formula "32") (term "0,2,1,0,1,0,1"))
                                          (rule "eqSymm" (formula "32") (term "1,0,1"))
                                          (rule "polySimp_elimSub" (formula "32") (term "1,1,0,1,1,0,1"))
                                          (rule "mul_literals" (formula "32") (term "1,1,1,0,1,1,0,1"))
                                          (rule "add_zero_right" (formula "32") (term "1,1,0,1,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,1,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,1,1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,1,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,1,0,1"))
                                          (rule "mul_literals" (formula "32") (term "0,1,1,0,1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,1,1,0,1"))
                                          (rule "pullOutSelect" (formula "7") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_32"))
                                          (rule "applyEq" (formula "5") (term "1,1,2,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "3") (term "1,0,0,0,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "3") (term "1,0,1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "33") (term "1,1,1,1,1,0,1") (ifseqformula "7"))
                                          (rule "applyEq" (formula "33") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "7"))
                                          (rule "applyEq" (formula "4") (term "1,1,1,0,1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "33") (term "1,0,0,0,1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "5") (term "1,0,1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "4") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "33") (term "1,0,1,1,0") (ifseqformula "7"))
                                          (rule "simplifySelectOfAnonEQ" (formula "7") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "30")) (ifInst ""  (formula "10")))
                                          (rule "applyEqReverse" (formula "8") (term "0,0") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "5") (term "1,1,2,0") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "3") (term "1,0,0,0,0") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "3") (term "1,0,1,0") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "33") (term "1,1,1,1,1,0,1") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "33") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "4") (term "1,1,1,0,1,0") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "33") (term "1,0,0,0,1,0") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "5") (term "1,0,1,0") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "4") (term "1,0,1,1,1,0,0,1,0") (ifseqformula "7"))
                                          (rule "applyEqReverse" (formula "33") (term "1,0,1,1,0") (ifseqformula "7"))
                                          (rule "hideAuxiliaryEq" (formula "7"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "17"))
                                          (rule "pullOutSelect" (formula "2") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_23"))
                                          (rule "applyEq" (formula "33") (term "1,2,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "33") (term "0,1,0,0,0,0,1,0,0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "33") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "33") (term "0,1,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "33") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "28") (term "0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "33") (term "1,2,0,0,0,0,1,0,0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "30")) (ifInst ""  (formula "10")))
                                          (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "33") (term "1,2,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0,0,1,0,0,1") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "33") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "28") (term "0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "33") (term "1,2,0,0,0,0,1,0,0,1") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "28") (term "1,1,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "pullOutSelect" (formula "32") (term "1,2,1,0,0,0,1,0,0,1") (inst "selectSK=arr_212"))
                                          (rule "applyEq" (formula "33") (term "1,2,1,0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "33") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "33") (term "0,1,1,0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "33") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "33") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "pullOutSelect" (formula "25") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_24"))
                                          (rule "applyEq" (formula "27") (term "0,1,1,1,0,0,1,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "26") (term "0,0,0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "27") (term "1,1,0,1,0") (ifseqformula "25"))
                                          (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "31")) (ifInst ""  (formula "10")))
                                          (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0,1,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "27") (term "1,1,0,1,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,1,0") (ifseqformula "25"))
                                          (rule "hideAuxiliaryEq" (formula "25"))
                                          (rule "eqSeqDef2" (formula "17") (inst "iv=iv") (ifseqformula "17"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "6"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "pullOutSelect" (formula "4") (term "0,0,0,0") (inst "selectSK=arr_213"))
                                          (rule "applyEq" (formula "32") (term "0,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "6") (term "0,1,1,1,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "6") (term "1,1,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "32") (term "0,1,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "32") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "32") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                          (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "5"))
                                          (rule "eqSymm" (formula "6") (term "1,0"))
                                          (rule "applyEq" (formula "6") (term "1,1,1,0,0") (ifseqformula "5"))
                                          (rule "pullOutSelect" (formula "27") (term "1,0") (inst "selectSK=arr_214"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "28"))
                                          (rule "pullOutSelect" (formula "2") (term "0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_28"))
                                          (rule "applyEq" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "23"))
                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "31")) (ifInst ""  (formula "12")))
                                          (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "nnf_imp2or" (formula "16") (term "0"))
                                          (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "15") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "31")) (ifInst ""  (formula "10")))
                                          (rule "eqSymm" (formula "15"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,0,0,0"))
                                          (rule "applyEq" (formula "15") (term "1") (ifseqformula "16"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "17"))
                                          (rule "notLeft" (formula "15"))
                                          (rule "notLeft" (formula "15"))
                                          (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "31"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "ifthenelse_negated" (formula "2") (term "0"))
                                          (rule "ifthenelse_negated" (formula "5") (term "0"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                          (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "18") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "32")) (ifInst ""  (formula "31")) (ifInst ""  (formula "33")) (ifInst ""  (formula "34")) (ifInst ""  (formula "35")))
                                          (rule "andLeft" (formula "18"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "24"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "23"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "28") (term "0"))
                                          (rule "nnf_imp2or" (formula "7") (term "0"))
                                          (rule "nnf_imp2or" (formula "40") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "15") (term "0"))
                                          (rule "nnf_imp2or" (formula "16") (term "0"))
                                          (rule "nnf_imp2or" (formula "17") (term "0"))
                                          (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "7") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                          (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "40") (term "0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "40") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1"))
                                          (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1"))
                                          (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1"))
                                          (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,1"))
                                          (rule "add_literals" (formula "40") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1"))
                                          (rule "mul_literals" (formula "40") (term "1,0,0,0,1"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "20") (term "1"))
                                          (rule "arrayLengthIsAShort" (formula "21") (term "1"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                          (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                          (rule "cut_direct" (formula "27") (term "0"))
                                          (branch "CUT: result_0.<created> = TRUE TRUE"
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "30") (ifseqformula "12"))
                                             (rule "replaceKnownSelect_taclet11011000000201_2" (formula "30") (term "0,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11011000000201_3" (formula "30") (term "0,0,1"))
                                             (rule "replaceKnownSelect_taclet11011000000201_9" (formula "30") (term "1,1,0,0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11011000000201_10" (formula "30") (term "1,1,0,0,0,0"))
                                             (rule "replaceKnownSelect_taclet11011000000201_0" (formula "30") (term "1,1,0,0,0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11011000000201_1" (formula "30") (term "1,1,0,0,0,0,0"))
                                             (rule "replaceKnownSelect_taclet11011000000201_5" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11011000000201_6" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "31"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "31"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "31"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "32"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "31"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "ifthenelse_negated" (formula "1") (term "0"))
                                             (rule "narrowSelectArrayType" (formula "18") (term "2,0,0,1,1,0") (ifseqformula "10") (ifseqformula "37"))
                                             (rule "narrowSelectArrayType" (formula "43") (term "1,0") (ifseqformula "10") (ifseqformula "37"))
                                             (rule "eqSymm" (formula "43"))
                                             (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "10") (ifseqformula "37"))
                                             (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "24") (ifseqformula "37"))
                                             (rule "nonNull" (formula "32") (inst "i=i"))
                                             (rule "greater_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "39")))
                                             (rule "sub_literals" (formula "32") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                             (rule "nonNull" (formula "31") (inst "i=i"))
                                             (rule "greater_literals" (formula "31") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "38")))
                                             (rule "sub_literals" (formula "31") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                             (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                             (rule "nonNull" (formula "30") (inst "i=i"))
                                             (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "greater_literals" (formula "30") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                             (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_28"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_28"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_28"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_24"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_31"))
                                             (rule "applyEq" (formula "34") (term "0") (ifseqformula "30"))
                                             (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                             (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "46")) (ifInst ""  (formula "11")))
                                             (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "22"))
                                             (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "23") (ifseqformula "12"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "25"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "25"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "23"))
                                             (rule "notLeft" (formula "23"))
                                             (rule "nonNull" (formula "25") (inst "i=i"))
                                             (rule "greater_literals" (formula "25") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "40")))
                                             (rule "sub_literals" (formula "25") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "narrowSelectArrayType" (formula "25") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "40"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "nonNull" (formula "24") (inst "i=i"))
                                             (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
                                             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "39")))
                                             (rule "greater_literals" (formula "24") (term "0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "39"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                             (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                             (rule "nonNull" (formula "23") (inst "i=i"))
                                             (rule "greater_literals" (formula "23") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "41")))
                                             (rule "sub_literals" (formula "23") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "41"))
                                             (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                             (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "34") (term "0"))
                                             (rule "nnf_imp2or" (formula "33") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "ifthenelse_split" (formula "30") (term "1"))
                                             (branch "result_0.length ≥ 1 TRUE"
                                                (rule "replace_known_left" (formula "32") (term "0,1,1,0,0") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "nnf_imp2or" (formula "24") (term "0"))
                                                (rule "nnf_imp2or" (formula "23") (term "0"))
                                                (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                (rule "commute_or_2" (formula "7") (term "0"))
                                                (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                                (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.electionID.length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "5")))
                                                   (rule "ifthenelse_split" (formula "29") (term "0"))
                                                   (branch "self.concatenated.length ≥ 1 TRUE"
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0") (ifseqformula "29"))
                                                      (rule "ifthenelse_split" (formula "7") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "8"))
                                                         (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "8"))
                                                         (rule "applyEq" (formula "49") (term "1,0") (ifseqformula "8"))
                                                         (rule "commute_or_2" (formula "20") (term "0"))
                                                         (rule "arrayLengthNotNegative" (formula "49") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                                         (rule "leq_literals" (formula "1") (term "0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthIsAShort" (formula "49") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "49") (term "1,1,0,0,0,0"))
                                                         (rule "lenNonNegative" (formula "50") (term "0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "1"))
                                                         (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "ifthenelse_split" (formula "4") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "1") (term "1,2,1,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "1") (term "0,1,1,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "ifthenelse_split" (formula "8") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "9"))
                                                               (rule "applyEqReverse" (formula "11") (term "0,1,0") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "9"))
                                                               (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "9"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "9"))
                                                               (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "9"))
                                                               (rule "hideAuxiliaryEq" (formula "9"))
                                                               (rule "eqSymm" (formula "10") (term "1"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "true_left" (formula "10"))
                                                               (rule "commute_or_2" (formula "35") (term "0"))
                                                               (rule "commute_or_2" (formula "34") (term "0"))
                                                               (rule "commute_or_2" (formula "33") (term "0"))
                                                               (rule "commute_or_2" (formula "32") (term "0"))
                                                               (rule "ifthenelse_split" (formula "3") (term "0"))
                                                               (branch "self.electionID.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "4"))
                                                                  (builtin "One Step Simplification" (formula "46"))
                                                                  (rule "closeTrue" (formula "46"))
                                                               )
                                                               (branch "self.electionID.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                                  (rule "close" (formula "36") (ifseqformula "13"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                               (rule "close" (formula "37") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                            (rule "close" (formula "37") (ifseqformula "14"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "7"))
                                                         (builtin "One Step Simplification" (formula "7"))
                                                         (rule "inEqSimp_geqRight" (formula "34"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "8") (term "0"))
                                                         (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "8") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "8") (term "0,0"))
                                                         (rule "commute_or_2" (formula "20") (term "0"))
                                                         (rule "arrayLengthNotNegative" (formula "49") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                                         (rule "leq_literals" (formula "1") (term "0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthIsAShort" (formula "49") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "lenNonNegative" (formula "49") (term "0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "1"))
                                                         (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0,0,0,0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "2") (term "0,1,1,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,2,1,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "ifthenelse_split" (formula "9") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "11") (term "0,0,1") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,1,1,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "52") (term "0,0,0,1,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "10"))
                                                               (rule "hideAuxiliaryEq" (formula "10"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "true_left" (formula "10"))
                                                               (rule "inEqSimp_contradInEq0" (formula "10") (term "0,1,1,0") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "10") (term "0,0,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "inEqSimp_contradInEq0" (formula "50") (term "0,1,0") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "50") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "50"))
                                                               (rule "commute_or_2" (formula "35") (term "0"))
                                                               (rule "commute_or_2" (formula "34") (term "0"))
                                                               (rule "commute_or_2" (formula "33") (term "0"))
                                                               (rule "commute_or_2" (formula "32") (term "0"))
                                                               (rule "ifthenelse_split" (formula "4") (term "0"))
                                                               (branch "self.electionID.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "5"))
                                                                  (builtin "One Step Simplification" (formula "46"))
                                                                  (rule "closeTrue" (formula "46"))
                                                               )
                                                               (branch "self.electionID.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                                  (rule "close" (formula "36") (ifseqformula "13"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                               (rule "close" (formula "37") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                            (rule "close" (formula "37") (ifseqformula "14"))
                                                         )
                                                      )
                                                   )
                                                   (branch "self.concatenated.length ≥ 1 FALSE"
                                                      (rule "eqSymm" (formula "29"))
                                                      (rule "inEqSimp_geqRight" (formula "34"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                                      (rule "qeq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                )
                                                (branch "self.electionID.length ≥ 1 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "33"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "5"))
                                                   (rule "mul_literals" (formula "5") (term "1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                   (rule "mul_literals" (formula "5") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                             (branch "result_0.length ≥ 1 FALSE"
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "replace_known_right" (formula "31") (term "0,1,1,0,0") (ifseqformula "35"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_notGeq" (formula "31") (term "0"))
                                                (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "31") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "31") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "32") (term "0,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "32") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "true_left" (formula "32"))
                                                (rule "nnf_imp2or" (formula "25") (term "0"))
                                                (rule "nnf_imp2or" (formula "24") (term "0"))
                                                (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                                (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                                (rule "commute_or_2" (formula "8") (term "0"))
                                                (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "commute_or_2" (formula "18") (term "0"))
                                                (rule "ifthenelse_split" (formula "5") (term "0"))
                                                (branch "self.electionID.length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "42") (term "0,1") (ifseqformula "6"))
                                                   (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "6")))
                                                   (rule "ifthenelse_split" (formula "8") (term "0"))
                                                   (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                      (rule "eqSymm" (formula "9"))
                                                      (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "9"))
                                                      (rule "applyEq" (formula "48") (term "1,0") (ifseqformula "9"))
                                                      (rule "commute_or_2" (formula "21") (term "0"))
                                                      (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthNotNegative" (formula "48") (term "1,0,0,0,0,0"))
                                                      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                                      (rule "leq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthNotNegative" (formula "48") (term "1,1,0,0,0,0"))
                                                      (rule "arrayLengthIsAShort" (formula "49") (term "1,1,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "lenNonNegative" (formula "49") (term "0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "1"))
                                                      (rule "ifthenelse_split" (formula "5") (term "0"))
                                                      (branch "self.chosen.<created> = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "1") (term "0,1,1,0,0,0") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "1") (term "1,2,1,0,0,0") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "ifthenelse_split" (formula "9") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "12") (term "0,0,0,0") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "51") (term "1,1,1,1,0,1") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "12") (term "0,1,0") (ifseqformula "10"))
                                                            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
                                                            (rule "true_left" (formula "12"))
                                                            (rule "hideAuxiliaryEq" (formula "10"))
                                                            (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                            (rule "commute_or_2" (formula "34") (term "0"))
                                                            (rule "commute_or_2" (formula "33") (term "0"))
                                                            (rule "commute_or_2" (formula "32") (term "0"))
                                                            (rule "ifthenelse_split" (formula "4") (term "0"))
                                                            (branch "self.electionID.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "5"))
                                                               (builtin "One Step Simplification" (formula "45"))
                                                               (rule "closeTrue" (formula "45"))
                                                            )
                                                            (branch "self.electionID.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "39"))
                                                               (rule "close" (formula "35") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "41"))
                                                            (rule "close" (formula "36") (ifseqformula "15"))
                                                         )
                                                      )
                                                      (branch "self.chosen.<created> = TRUE FALSE"
                                                         (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                         (rule "close" (formula "36") (ifseqformula "15"))
                                                      )
                                                   )
                                                   (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                      (rule "eqSymm" (formula "8"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "inEqSimp_geqRight" (formula "33"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_notGeq" (formula "9") (term "0"))
                                                      (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                                      (rule "add_literals" (formula "9") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "9") (term "0,0"))
                                                      (rule "commute_or_2" (formula "21") (term "0"))
                                                      (rule "arrayLengthNotNegative" (formula "48") (term "1,0,0,0,0,0"))
                                                      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthIsAShort" (formula "48") (term "1,1,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthNotNegative" (formula "48") (term "1,1,0,0,0,0"))
                                                      (rule "lenNonNegative" (formula "49") (term "0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "1"))
                                                      (rule "ifthenelse_split" (formula "6") (term "0"))
                                                      (branch "self.chosen.<created> = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "1") (term "1,2,1,0,0,0") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "1") (term "0,1,1,0,0,0") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
                                                         (rule "hideAuxiliaryEq" (formula "7"))
                                                         (rule "ifthenelse_split" (formula "10") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "51") (term "1,1,1,1,0,1") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,0,0,1,1,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "12") (term "0,0,1") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "51") (term "0,0,0,1,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "51") (term "0,1,1,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0") (ifseqformula "11"))
                                                            (rule "hideAuxiliaryEq" (formula "11"))
                                                            (rule "eqSymm" (formula "12") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "true_left" (formula "11"))
                                                            (rule "inEqSimp_contradInEq0" (formula "49") (term "0,1,0") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "49") (term "0,0,1,0"))
                                                            (builtin "One Step Simplification" (formula "49"))
                                                            (rule "inEqSimp_contradInEq0" (formula "11") (term "0,1,1,0") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "11") (term "0,0,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "commute_or_2" (formula "34") (term "0"))
                                                            (rule "commute_or_2" (formula "33") (term "0"))
                                                            (rule "commute_or_2" (formula "32") (term "0"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch "self.electionID.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "6"))
                                                               (builtin "One Step Simplification" (formula "45"))
                                                               (rule "closeTrue" (formula "45"))
                                                            )
                                                            (branch "self.electionID.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "39"))
                                                               (rule "close" (formula "35") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "41"))
                                                            (rule "close" (formula "36") (ifseqformula "15"))
                                                         )
                                                      )
                                                      (branch "self.chosen.<created> = TRUE FALSE"
                                                         (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                         (rule "close" (formula "36") (ifseqformula "15"))
                                                      )
                                                   )
                                                )
                                                (branch "self.electionID.length ≥ 1 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "32"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "times_zero_2" (formula "6") (term "1,0"))
                                                   (rule "add_zero_right" (formula "6") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                   (rule "mul_literals" (formula "6") (term "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                          )
                                          (branch "CUT: result_0.<created> = TRUE FALSE"
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "30") (ifseqformula "12"))
                                             (rule "replaceKnownSelect_taclet11011000000201_2" (formula "30") (term "0,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11011000000201_3" (formula "30") (term "0,0,1"))
                                             (rule "replaceKnownSelect_taclet11011000000201_9" (formula "30") (term "1,1,0,0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11011000000201_10" (formula "30") (term "1,1,0,0,0,0"))
                                             (rule "replaceKnownSelect_taclet11011000000201_0" (formula "30") (term "1,1,0,0,0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11011000000201_1" (formula "30") (term "1,1,0,0,0,0,0"))
                                             (rule "replaceKnownSelect_taclet11011000000201_5" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11011000000201_6" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "32"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "32"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "32"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "32"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "ifthenelse_negated" (formula "1") (term "0"))
                                             (rule "narrowSelectArrayType" (formula "44") (term "1,0") (ifseqformula "10") (ifseqformula "37"))
                                             (rule "eqSymm" (formula "44"))
                                             (rule "narrowSelectArrayType" (formula "18") (term "2,0,0,1,1,0") (ifseqformula "10") (ifseqformula "37"))
                                             (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "24") (ifseqformula "37"))
                                             (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "10") (ifseqformula "37"))
                                             (rule "nonNull" (formula "32") (inst "i=i"))
                                             (rule "greater_literals" (formula "32") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "40")))
                                             (rule "sub_literals" (formula "32") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                             (rule "nonNull" (formula "31") (inst "i=i"))
                                             (rule "greater_literals" (formula "31") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")))
                                             (rule "sub_literals" (formula "31") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                             (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                             (rule "nonNull" (formula "30") (inst "i=i"))
                                             (rule "greater_literals" (formula "30") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "sub_literals" (formula "30") (term "2,1,0,1"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                             (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_27"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_27"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_27"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_23"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_30"))
                                             (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                             (rule "applyEq" (formula "34") (term "0") (ifseqformula "30"))
                                             (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "47")) (ifInst ""  (formula "11")))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "22"))
                                             (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "23") (ifseqformula "12"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "notLeft" (formula "23"))
                                             (rule "nonNull" (formula "25") (inst "i=i"))
                                             (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                                             (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "41")))
                                             (rule "greater_literals" (formula "25") (term "0"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "narrowSelectArrayType" (formula "25") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "41"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "nonNull" (formula "24") (inst "i=i"))
                                             (rule "greater_literals" (formula "24") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "40")))
                                             (rule "sub_literals" (formula "24") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "40"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                             (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                             (rule "nonNull" (formula "23") (inst "i=i"))
                                             (rule "greater_literals" (formula "23") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "42")))
                                             (rule "sub_literals" (formula "23") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "42"))
                                             (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                             (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "34") (term "0"))
                                             (rule "nnf_imp2or" (formula "33") (term "0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "ifthenelse_split" (formula "30") (term "1"))
                                             (branch "result_0.length ≥ 1 TRUE"
                                                (rule "replace_known_left" (formula "32") (term "0,1,1,0,0") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "nnf_imp2or" (formula "24") (term "0"))
                                                (rule "nnf_imp2or" (formula "23") (term "0"))
                                                (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                                (rule "commute_or_2" (formula "7") (term "0"))
                                                (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                                (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.electionID.length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "5")))
                                                   (rule "ifthenelse_split" (formula "29") (term "0"))
                                                   (branch "self.concatenated.length ≥ 1 TRUE"
                                                      (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                                      (rule "ifthenelse_split" (formula "7") (term "0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "8"))
                                                         (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "8"))
                                                         (rule "applyEq" (formula "50") (term "1,0") (ifseqformula "8"))
                                                         (rule "commute_or_2" (formula "20") (term "0"))
                                                         (rule "arrayLengthNotNegative" (formula "50") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                                         (rule "leq_literals" (formula "1") (term "0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthIsAShort" (formula "50") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "lenNonNegative" (formula "50") (term "0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "1"))
                                                         (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0,0,0,0"))
                                                         (rule "ifthenelse_split" (formula "4") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,2,1,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "2") (term "0,1,1,0,0,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "ifthenelse_split" (formula "8") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "9"))
                                                               (rule "applyEqReverse" (formula "53") (term "1,1,1,1,0,1") (ifseqformula "9"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "9"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "9"))
                                                               (rule "applyEqReverse" (formula "11") (term "0,1,0") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "9"))
                                                               (rule "hideAuxiliaryEq" (formula "9"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "eqSymm" (formula "10") (term "1"))
                                                               (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "true_left" (formula "10"))
                                                               (rule "commute_or_2" (formula "35") (term "0"))
                                                               (rule "commute_or_2" (formula "34") (term "0"))
                                                               (rule "commute_or_2" (formula "33") (term "0"))
                                                               (rule "commute_or_2" (formula "32") (term "0"))
                                                               (rule "ifthenelse_split" (formula "3") (term "0"))
                                                               (branch "self.electionID.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "4"))
                                                                  (builtin "One Step Simplification" (formula "47"))
                                                                  (rule "closeTrue" (formula "47"))
                                                               )
                                                               (branch "self.electionID.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                                  (rule "close" (formula "36") (ifseqformula "13"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                               (rule "close" (formula "37") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "44"))
                                                            (rule "close" (formula "37") (ifseqformula "14"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "7"))
                                                         (builtin "One Step Simplification" (formula "7"))
                                                         (rule "inEqSimp_geqRight" (formula "34"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_notGeq" (formula "8") (term "0"))
                                                         (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "8") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "8") (term "0,0"))
                                                         (rule "commute_or_2" (formula "20") (term "0"))
                                                         (rule "arrayLengthIsAShort" (formula "50") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "50") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                                         (rule "leq_literals" (formula "1") (term "0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "lenNonNegative" (formula "50") (term "0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "1"))
                                                         (rule "arrayLengthIsAShort" (formula "51") (term "1,1,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "arrayLengthNotNegative" (formula "51") (term "1,1,0,0,0,0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch "self.chosen.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "2") (term "0,1,1,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,2,1,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "ifthenelse_split" (formula "9") (term "0"))
                                                            (branch "self.encrypted.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "11") (term "0,0,1") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,0,0,1,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "53") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0") (ifseqformula "10"))
                                                               (rule "applyEqReverse" (formula "53") (term "1,1,1,1,0,1") (ifseqformula "10"))
                                                               (rule "hideAuxiliaryEq" (formula "10"))
                                                               (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                               (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "true_left" (formula "10"))
                                                               (rule "inEqSimp_contradInEq0" (formula "51") (term "0,1,0") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "51") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "51"))
                                                               (rule "inEqSimp_contradInEq0" (formula "10") (term "0,1,1,0") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "10") (term "0,0,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "commute_or_2" (formula "35") (term "0"))
                                                               (rule "commute_or_2" (formula "34") (term "0"))
                                                               (rule "commute_or_2" (formula "33") (term "0"))
                                                               (rule "commute_or_2" (formula "32") (term "0"))
                                                               (rule "ifthenelse_split" (formula "4") (term "0"))
                                                               (branch "self.electionID.<created> = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "5"))
                                                                  (builtin "One Step Simplification" (formula "47"))
                                                                  (rule "closeTrue" (formula "47"))
                                                               )
                                                               (branch "self.electionID.<created> = TRUE FALSE"
                                                                  (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                                  (rule "close" (formula "36") (ifseqformula "13"))
                                                               )
                                                            )
                                                            (branch "self.encrypted.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                               (rule "close" (formula "37") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.chosen.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "44"))
                                                            (rule "close" (formula "37") (ifseqformula "14"))
                                                         )
                                                      )
                                                   )
                                                   (branch "self.concatenated.length ≥ 1 FALSE"
                                                      (rule "eqSymm" (formula "29"))
                                                      (rule "inEqSimp_geqRight" (formula "34"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                                      (rule "qeq_literals" (formula "29"))
                                                      (rule "closeFalse" (formula "29"))
                                                   )
                                                )
                                                (branch "self.electionID.length ≥ 1 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "33"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "5"))
                                                   (rule "times_zero_2" (formula "5") (term "1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                   (rule "mul_literals" (formula "5") (term "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "4") (term "0"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "closeFalse" (formula "4"))
                                                )
                                             )
                                             (branch "result_0.length ≥ 1 FALSE"
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "replace_known_right" (formula "31") (term "0,1,1,0,0") (ifseqformula "35"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_notGeq" (formula "31") (term "0"))
                                                (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "31") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "31") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "32") (term "0,0"))
                                                (rule "add_zero_right" (formula "32") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "32") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "true_left" (formula "32"))
                                                (rule "nnf_imp2or" (formula "25") (term "0"))
                                                (rule "nnf_imp2or" (formula "24") (term "0"))
                                                (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                                (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                                (rule "commute_or_2" (formula "8") (term "0"))
                                                (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "commute_or_2" (formula "18") (term "0"))
                                                (rule "ifthenelse_split" (formula "5") (term "0"))
                                                (branch "self.electionID.length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "43") (term "0,1") (ifseqformula "6"))
                                                   (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "6")))
                                                   (rule "ifthenelse_split" (formula "8") (term "0"))
                                                   (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                      (rule "eqSymm" (formula "9"))
                                                      (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "9"))
                                                      (rule "applyEq" (formula "49") (term "1,0") (ifseqformula "9"))
                                                      (rule "commute_or_2" (formula "21") (term "0"))
                                                      (rule "arrayLengthNotNegative" (formula "49") (term "1,0,0,0,0,0"))
                                                      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                                      (rule "leq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthIsAShort" (formula "49") (term "1,0,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "lenNonNegative" (formula "49") (term "0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "1"))
                                                      (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0,0,0,0"))
                                                      (rule "ifthenelse_split" (formula "5") (term "0"))
                                                      (branch "self.chosen.<created> = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "2") (term "0,1,1,0,0,0") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "2") (term "1,2,1,0,0,0") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "ifthenelse_split" (formula "9") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "12") (term "0,0,0,0") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "10"))
                                                            (rule "applyEqReverse" (formula "12") (term "0,1,0") (ifseqformula "10"))
                                                            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
                                                            (rule "true_left" (formula "12"))
                                                            (rule "hideAuxiliaryEq" (formula "10"))
                                                            (rule "eqSymm" (formula "11") (term "1,0,0"))
                                                            (rule "commute_or_2" (formula "34") (term "0"))
                                                            (rule "commute_or_2" (formula "33") (term "0"))
                                                            (rule "commute_or_2" (formula "32") (term "0"))
                                                            (rule "ifthenelse_split" (formula "4") (term "0"))
                                                            (branch "self.electionID.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "5"))
                                                               (builtin "One Step Simplification" (formula "46"))
                                                               (rule "closeTrue" (formula "46"))
                                                            )
                                                            (branch "self.electionID.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "39"))
                                                               (rule "close" (formula "35") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                            (rule "close" (formula "36") (ifseqformula "15"))
                                                         )
                                                      )
                                                      (branch "self.chosen.<created> = TRUE FALSE"
                                                         (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "43"))
                                                         (rule "close" (formula "36") (ifseqformula "15"))
                                                      )
                                                   )
                                                   (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                      (rule "eqSymm" (formula "8"))
                                                      (builtin "One Step Simplification" (formula "8"))
                                                      (rule "inEqSimp_geqRight" (formula "33"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_notGeq" (formula "9") (term "0"))
                                                      (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                                      (rule "add_literals" (formula "9") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "9") (term "0,0"))
                                                      (rule "commute_or_2" (formula "21") (term "0"))
                                                      (rule "arrayLengthIsAShort" (formula "49") (term "1,0,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthNotNegative" (formula "49") (term "1,0,0,0,0,0"))
                                                      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "lenNonNegative" (formula "49") (term "0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "1"))
                                                      (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0,0,0,0"))
                                                      (rule "ifthenelse_split" (formula "6") (term "0"))
                                                      (branch "self.chosen.<created> = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "2") (term "0,1,1,0,0,0") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "2") (term "1,2,1,0,0,0") (ifseqformula "7"))
                                                         (rule "hideAuxiliaryEq" (formula "7"))
                                                         (rule "ifthenelse_split" (formula "10") (term "0"))
                                                         (branch "self.encrypted.<created> = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "13") (term "0,0,0,1,1,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,0,0,1,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "13") (term "1,1,1,1,0,0") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "11"))
                                                            (rule "applyEqReverse" (formula "12") (term "0,0,1") (ifseqformula "11"))
                                                            (rule "hideAuxiliaryEq" (formula "11"))
                                                            (rule "eqSymm" (formula "12") (term "1,0,0"))
                                                            (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "true_left" (formula "11"))
                                                            (rule "inEqSimp_contradInEq0" (formula "11") (term "0,1,1,0") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "11") (term "0,0,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "inEqSimp_contradInEq0" (formula "50") (term "0,1,0") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "50") (term "0,0,1,0"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "commute_or_2" (formula "34") (term "0"))
                                                            (rule "commute_or_2" (formula "33") (term "0"))
                                                            (rule "commute_or_2" (formula "32") (term "0"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch "self.electionID.<created> = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "6"))
                                                               (builtin "One Step Simplification" (formula "46"))
                                                               (rule "closeTrue" (formula "46"))
                                                            )
                                                            (branch "self.electionID.<created> = TRUE FALSE"
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "39"))
                                                               (rule "close" (formula "35") (ifseqformula "14"))
                                                            )
                                                         )
                                                         (branch "self.encrypted.<created> = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                            (rule "close" (formula "36") (ifseqformula "15"))
                                                         )
                                                      )
                                                      (branch "self.chosen.<created> = TRUE FALSE"
                                                         (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "43"))
                                                         (rule "close" (formula "36") (ifseqformula "15"))
                                                      )
                                                   )
                                                )
                                                (branch "self.electionID.length ≥ 1 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "32"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "mul_literals" (formula "6") (term "1,0"))
                                                   (rule "add_zero_right" (formula "6") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                   (rule "mul_literals" (formula "6") (term "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.encrypted[i_51]@heapAfter_checkAndGetBallots) = array2seq(heap, self.encrypted[i_51]) FALSE"
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "22") (inst "iv=iv") (userinteraction))
                                    (rule "andRight" (formula "22") (userinteraction))
                                    (branch "Case 1"
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "eqSymm" (formula "28"))
                                       (rule "eqSymm" (formula "12"))
                                       (rule "eqSymm" (formula "15"))
                                       (rule "eqSymm" (formula "10") (term "1,0"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "2"))
                                       (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "14"))
                                       (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
                                       (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                       (rule "array2seqDef" (formula "23") (term "0,1") (inst "u=u"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "lenOfSeqDef" (formula "23") (term "0"))
                                       (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                                       (rule "mul_literals" (formula "23") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "23") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "0,0,0"))
                                       (rule "array2seqDef" (formula "1") (term "1,0,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "array2seqDef" (formula "28") (term "0,0,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "28") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "28"))
                                       (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "12"))
                                       (rule "array2seqDef" (formula "10") (term "1,0,0,1,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "10") (term "0,0,0,1,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                                       (rule "eqSymm" (formula "10") (term "1,0"))
                                       (rule "array2seqDef" (formula "21") (term "0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                                       (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
                                       (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "12"))
                                       (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "array2seqDef" (formula "23") (term "0,1") (inst "u=u"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "lenOfSeqDef" (formula "23") (term "0"))
                                       (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                                       (rule "times_zero_2" (formula "23") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "23") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "0,0,0"))
                                       (rule "array2seqDef" (formula "1") (term "0,0,1") (inst "u=u"))
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "28") (inst "iv=iv"))
                                       (rule "getOfSeqDef" (formula "28") (term "0,1,0,1"))
                                       (rule "castDel" (formula "28") (term "2,0,1,0,1"))
                                       (rule "castDel" (formula "28") (term "1,0,1,0,1"))
                                       (rule "add_zero_right" (formula "28") (term "0,2,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "28") (term "1,0,1"))
                                       (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0,1"))
                                       (rule "times_zero_2" (formula "28") (term "1,1,1,0,1,1,0,1"))
                                       (rule "add_zero_right" (formula "28") (term "1,1,0,1,1,0,1"))
                                       (rule "lenOfSeqDef" (formula "28") (term "0,0"))
                                       (rule "eqSymm" (formula "28") (term "0"))
                                       (rule "polySimp_elimSub" (formula "28") (term "1,1,0"))
                                       (rule "times_zero_2" (formula "28") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "28") (term "1,1,0"))
                                       (rule "lenOfSeqDef" (formula "28") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimSub" (formula "28") (term "1,1,1,0,0,1"))
                                       (rule "mul_literals" (formula "28") (term "1,1,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "28") (term "1,1,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,1,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "28") (term "0,0,1,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,1,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1,1,0,1"))
                                       (rule "mul_literals" (formula "28") (term "0,1,1,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,1,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "28") (term "0,0,0,1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1"))
                                       (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1"))
                                       (rule "eqSeqDef" (formula "21") (inst "iv=iv"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "getOfSeqDef" (formula "22") (term "1,1,0"))
                                       (rule "castDel" (formula "22") (term "1,1,1,0"))
                                       (rule "castDel" (formula "22") (term "2,1,1,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0"))
                                       (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0"))
                                       (rule "getOfSeqDef" (formula "22") (term "0,1,0"))
                                       (rule "castDel" (formula "22") (term "1,0,1,0"))
                                       (rule "castDel" (formula "22") (term "2,0,1,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0"))
                                       (rule "lenOfSeqDef" (formula "21") (term "1"))
                                       (rule "polySimp_elimSub" (formula "21") (term "1,1"))
                                       (rule "times_zero_2" (formula "21") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "21") (term "1,1"))
                                       (rule "lenOfSeqDef" (formula "21") (term "0"))
                                       (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                                       (rule "times_zero_2" (formula "21") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "21") (term "1,0"))
                                       (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0"))
                                       (rule "times_zero_2" (formula "22") (term "1,1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                                       (rule "apply_eq_monomials" (formula "22") (term "1,0,0,1,0,0") (ifseqformula "21"))
                                       (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,0,1,0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "1,1,1,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "22") (term "1,1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1"))
                                       (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1,0,0"))
                                       (rule "array2seqDef" (formula "13") (term "0,1") (inst "u=u"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "narrowSelectArrayType" (formula "13") (term "2,0,0") (ifseqformula "4") (ifseqformula "27"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "array2seqDef" (formula "29") (term "1,0,0,0,1,0,1") (inst "u=u"))
                                       (rule "array2seqDef" (formula "29") (term "1,0,0,0,0") (inst "u=u"))
                                       (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "pullOutSelect" (formula "3") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_31"))
                                       (rule "applyEq" (formula "29") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "29") (term "1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "29") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "24") (term "1,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "29") (term "1,1,1,1,1,0,1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "29") (term "1,0,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "29") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "24") (term "1,0,0,0,0") (ifseqformula "3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "26")) (ifInst ""  (formula "6")))
                                       (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "29") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "29") (term "1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "29") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "24") (term "1,0,1,0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "29") (term "1,1,1,1,1,0,1") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "29") (term "1,0,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "29") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "24") (term "1,0,0,0,0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "13"))
                                       (rule "pullOutSelect" (formula "28") (term "1,2,0,0,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_22"))
                                       (rule "applyEq" (formula "29") (term "1,2,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "29") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "29") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "6")))
                                       (rule "applyEqReverse" (formula "29") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "29") (term "1,2,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "29") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "29") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "array2seqDef" (formula "12") (term "0,1,1") (inst "u=u"))
                                       (rule "eqSeqDef2" (formula "1") (inst "iv=iv") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "pullOutSelect" (formula "20") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_23"))
                                       (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "20"))
                                       (rule "applyEq" (formula "21") (term "0,1,1,1,0,0,1,0") (ifseqformula "20"))
                                       (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "20"))
                                       (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "16"))
                                       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "25")) (ifInst ""  (formula "4")))
                                       (rule "applyEqReverse" (formula "21") (term "1,1,0,1,0") (ifseqformula "20"))
                                       (rule "applyEqReverse" (formula "19") (term "0,0,0,0") (ifseqformula "20"))
                                       (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0,1,0") (ifseqformula "20"))
                                       (rule "applyEqReverse" (formula "19") (term "0,1,0") (ifseqformula "20"))
                                       (rule "hideAuxiliaryEq" (formula "20"))
                                       (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "pullOutSelect" (formula "26") (term "1,0,1,1,0,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_27"))
                                       (rule "applyEq" (formula "27") (term "1,1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "27") (term "1,1,2,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "27") (term "1,0,1,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                       (rule "applyEqReverse" (formula "27") (term "1,0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "27") (term "1,1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "27") (term "1,1,2,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "27") (term "1,0,1,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "26") (term "0,0,0,1,1,1,0,0,1") (inst "selectSK=arr_210"))
                                       (rule "applyEq" (formula "27") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "27") (term "1,1,1,1,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "27") (term "0,1,1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "27") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "27") (term "0,0,0,1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "22") (term "0,0,0,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "22"))
                                       (rule "pullOutSelect" (formula "27") (term "0,1,1,0,0,0,1,0,1") (inst "selectSK=arr_211"))
                                       (rule "applyEq" (formula "28") (term "1,2,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "28") (term "0,1,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "28") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "nnf_imp2or" (formula "11") (term "0"))
                                       (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "10") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_negated" (formula "2") (term "0"))
                                       (rule "ifthenelse_negated" (formula "1") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                       (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "23") (term "0"))
                                       (rule "nnf_imp2or" (formula "35") (term "0,1"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "10") (term "0"))
                                       (rule "nnf_imp2or" (formula "11") (term "0"))
                                       (rule "nnf_imp2or" (formula "12") (term "0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                                       (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
                                       (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                       (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
                                       (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                       (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                       (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "17") (ifseqformula "7"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "notLeft" (formula "19"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "notLeft" (formula "19"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "narrowSelectArrayType" (formula "13") (term "2,0,0,1,1,0") (ifseqformula "5") (ifseqformula "30"))
                                       (rule "nonNull" (formula "19") (inst "i=i"))
                                       (rule "greater_literals" (formula "19") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "32")))
                                       (rule "sub_literals" (formula "19") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "32"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "18") (inst "i=i"))
                                       (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "31")))
                                       (rule "greater_literals" (formula "18") (term "0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "31"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                       (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "17") (inst "i=i"))
                                       (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "33")))
                                       (rule "greater_literals" (formula "17") (term "0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "33"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                       (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "19") (term "0"))
                                       (rule "nnf_imp2or" (formula "18") (term "0"))
                                       (rule "nnf_imp2or" (formula "17") (term "0"))
                                       (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "23") (ifseqformula "7"))
                                       (rule "replaceKnownSelect_taclet0111000000201_2" (formula "23") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0111000000201_3" (formula "23") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet0111000000201_6" (formula "23") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0111000000201_7" (formula "23") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0111000000201_0" (formula "23") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0111000000201_1" (formula "23") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet0111000000201_4" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0111000000201_5" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "nonNull" (formula "25") (inst "i=i"))
                                       (rule "greater_literals" (formula "25") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "35")))
                                       (rule "sub_literals" (formula "25") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "24") (inst "i=i"))
                                       (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "34")))
                                       (rule "greater_literals" (formula "24") (term "0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                       (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "23") (inst "i=i"))
                                       (rule "greater_literals" (formula "23") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "sub_literals" (formula "23") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_26"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_26"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_26"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_22"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "23") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_29"))
                                       (rule "applyEq" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "27") (term "0") (ifseqformula "23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "39")) (ifInst ""  (formula "6")))
                                       (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                                       (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "23"))
                                       (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0") (ifseqformula "23"))
                                       (rule "hideAuxiliaryEq" (formula "23"))
                                       (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "16"))
                                       (rule "nnf_imp2or" (formula "25") (term "0"))
                                       (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                       (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                       (rule "arrayLengthIsAShort" (formula "15") (term "1"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "arrayLengthNotNegative" (formula "15") (term "1"))
                                       (rule "nnf_imp2or" (formula "25") (term "0"))
                                       (rule "cut_direct" (formula "21") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "commute_or_2" (formula "23") (term "0"))
                                          (rule "nnf_imp2or" (formula "24") (term "0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                          (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "11") (term "0"))
                                          (rule "commute_or_2" (formula "12") (term "0"))
                                          (rule "ifthenelse_split" (formula "22") (term "1"))
                                          (branch "result_0.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "22"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "25") (term "1,1,1,0,0,1,0,0") (ifseqformula "24"))
                                                (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                                (rule "ifthenelse_split" (formula "37") (term "0"))
                                                (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                   (rule "eqSymm" (formula "38"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "44") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "39") (term "0,0,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "44") (term "0,0,0,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "44") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "39") (term "0,1,0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                                                      (rule "closeTrue" (formula "39"))
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "34"))
                                                      (rule "close" (formula "29") (ifseqformula "6"))
                                                   )
                                                )
                                                (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "38"))
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "orRight" (formula "38"))
                                                   (rule "notRight" (formula "38"))
                                                   (rule "replace_known_left" (formula "44") (term "0,1,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "1")))
                                                   (rule "inEqSimp_geqRight" (formula "38"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "2"))
                                                   (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "39") (term "0,0"))
                                                   (rule "leq_literals" (formula "39") (term "0"))
                                                   (builtin "One Step Simplification" (formula "39"))
                                                   (rule "false_right" (formula "39"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "44") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "44") (term "0,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "35"))
                                                      (rule "close" (formula "30") (ifseqformula "7"))
                                                   )
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "23"))
                                                (rule "inEqSimp_geqRight" (formula "28"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                                (rule "qeq_literals" (formula "23"))
                                                (rule "closeFalse" (formula "23"))
                                             )
                                          )
                                          (branch "result_0.length ≥ 1 FALSE"
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "replace_known_right" (formula "23") (term "0,1,1,0") (ifseqformula "27"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "inEqSimp_geqRight" (formula "27"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "ifthenelse_split" (formula "37") (term "0"))
                                             (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "38"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "44") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "39") (term "0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "39") (term "0,1,0") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                                                   (rule "closeTrue" (formula "39"))
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "34"))
                                                   (rule "close" (formula "29") (ifseqformula "7"))
                                                )
                                             )
                                             (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "38"))
                                                (builtin "One Step Simplification" (formula "38"))
                                                (rule "orRight" (formula "38"))
                                                (rule "notRight" (formula "38"))
                                                (rule "replace_known_left" (formula "44") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_geqRight" (formula "38"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "2"))
                                                (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "39") (term "0,0"))
                                                (rule "leq_literals" (formula "39") (term "0"))
                                                (builtin "One Step Simplification" (formula "39"))
                                                (rule "false_right" (formula "39"))
                                                (rule "ifthenelse_split" (formula "5") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "44") (term "0,1,1,0,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "44") (term "1,1,1,1,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "2") (term "0"))
                                                   (builtin "One Step Simplification" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "35"))
                                                   (rule "close" (formula "30") (ifseqformula "8"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "commute_or_2" (formula "23") (term "0"))
                                          (rule "nnf_imp2or" (formula "24") (term "0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "10") (term "0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                          (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "11") (term "0"))
                                          (rule "commute_or_2" (formula "12") (term "0"))
                                          (rule "ifthenelse_split" (formula "22") (term "1"))
                                          (branch "result_0.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "22"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                                (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0,0") (ifseqformula "23"))
                                                (rule "ifthenelse_split" (formula "38") (term "0"))
                                                (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                   (rule "eqSymm" (formula "39"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "45") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "45") (term "0,1,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "40") (term "0,0,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "45") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "40") (term "0,1,0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "1")))
                                                      (rule "closeTrue" (formula "40"))
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "35"))
                                                      (rule "close" (formula "29") (ifseqformula "6"))
                                                   )
                                                )
                                                (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "39"))
                                                   (builtin "One Step Simplification" (formula "39"))
                                                   (rule "orRight" (formula "39"))
                                                   (rule "notRight" (formula "39"))
                                                   (rule "replace_known_left" (formula "45") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "1")))
                                                   (rule "inEqSimp_geqRight" (formula "39"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_contradEq7" (formula "40") (ifseqformula "2"))
                                                   (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "40") (term "0,0"))
                                                   (rule "leq_literals" (formula "40") (term "0"))
                                                   (builtin "One Step Simplification" (formula "40"))
                                                   (rule "false_right" (formula "40"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "45") (term "0,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "45") (term "0,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "45") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "2") (term "0"))
                                                      (builtin "One Step Simplification" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "36"))
                                                      (rule "close" (formula "30") (ifseqformula "7"))
                                                   )
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "23"))
                                                (rule "inEqSimp_geqRight" (formula "28"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                                (rule "qeq_literals" (formula "23"))
                                                (rule "closeFalse" (formula "23"))
                                             )
                                          )
                                          (branch "result_0.length ≥ 1 FALSE"
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "replace_known_right" (formula "23") (term "0,1,1,0") (ifseqformula "27"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "inEqSimp_geqRight" (formula "27"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "ifthenelse_split" (formula "38") (term "0"))
                                             (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "39"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "40") (term "0,1,0") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "40"))
                                                   (rule "orRight" (formula "40"))
                                                   (rule "applyEqReverse" (formula "46") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "46") (term "0,0,0,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "46") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "46") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "46") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "46") (term "0,1,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "40") (term "0,0") (ifseqformula "5"))
                                                   (rule "close" (formula "40") (ifseqformula "1"))
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "35"))
                                                   (rule "close" (formula "29") (ifseqformula "7"))
                                                )
                                             )
                                             (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "39"))
                                                (builtin "One Step Simplification" (formula "39"))
                                                (rule "orRight" (formula "39"))
                                                (rule "notRight" (formula "39"))
                                                (rule "replace_known_left" (formula "45") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_geqRight" (formula "39"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_contradEq7" (formula "40") (ifseqformula "2"))
                                                (rule "mul_literals" (formula "40") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "40") (term "0,0"))
                                                (rule "leq_literals" (formula "40") (term "0"))
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "false_right" (formula "40"))
                                                (rule "ifthenelse_split" (formula "5") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "45") (term "1,1,1,1,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "45") (term "0,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "45") (term "0,1,1,0,0,1") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                                   (rule "qeq_literals" (formula "1") (term "0"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "36"))
                                                   (rule "close" (formula "30") (ifseqformula "8"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "allRight" (formula "23") (inst "sk=iv_45"))
                                       (rule "impRight" (formula "23"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "eqSymm" (formula "12") (term "1,0"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "eqSymm" (formula "3"))
                                       (rule "eqSymm" (formula "30"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "eqSymm" (formula "15"))
                                       (rule "eqSymm" (formula "16"))
                                       (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "26"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "4"))
                                       (rule "inEqSimp_commuteLeq" (formula "1"))
                                       (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                                       (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                       (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                                       (rule "getOfSeqDef" (formula "25") (term "0"))
                                       (rule "castDel" (formula "25") (term "2,0"))
                                       (rule "castDel" (formula "25") (term "1,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,2,1,0"))
                                       (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                                       (rule "times_zero_2" (formula "25") (term "1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                       (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
                                       (rule "eqSymm" (formula "12") (term "1,0"))
                                       (rule "array2seqDef" (formula "23") (term "0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "23") (term "1") (inst "u=u"))
                                       (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "3"))
                                       (rule "array2seqDef" (formula "30") (term "1,0,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "30"))
                                       (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "15"))
                                       (rule "array2seqDef" (formula "2") (term "0,0") (inst "u=u"))
                                       (rule "lenOfSeqDef" (formula "2") (term "0"))
                                       (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                       (rule "times_zero_2" (formula "2") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                       (rule "array2seqDef" (formula "25") (term "0,1") (inst "u=u"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "getOfSeqDef" (formula "25") (term "0"))
                                       (rule "castDel" (formula "25") (term "1,0"))
                                       (rule "castDel" (formula "25") (term "2,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,2,1,0"))
                                       (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                                       (rule "times_zero_2" (formula "25") (term "1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "polySimp_elimOne" (formula "25") (term "0,0,1"))
                                       (rule "array2seqDef" (formula "12") (term "1,0,1,1,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "12") (term "0,0,1,1,0") (inst "u=u"))
                                       (rule "eqSeqDef" (formula "23") (inst "iv=iv"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "lenOfSeqDef" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "24") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "1,1,1,0,0"))
                                       (rule "getOfSeqDef" (formula "24") (term "1,1,0"))
                                       (rule "castDel" (formula "24") (term "2,1,1,0"))
                                       (rule "castDel" (formula "24") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,2,1,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "24") (term "1,1,0,1,1,0"))
                                       (rule "times_zero_2" (formula "24") (term "1,1,1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "24") (term "1,1,0,1,1,0"))
                                       (rule "lenOfSeqDef" (formula "23") (term "1"))
                                       (rule "polySimp_elimSub" (formula "23") (term "1,1"))
                                       (rule "times_zero_2" (formula "23") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "23") (term "1,1"))
                                       (rule "lenOfSeqDef" (formula "23") (term "0"))
                                       (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                                       (rule "times_zero_2" (formula "23") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "23") (term "1,0"))
                                       (rule "getOfSeqDef" (formula "24") (term "0,1,0"))
                                       (rule "castDel" (formula "24") (term "2,0,1,0"))
                                       (rule "castDel" (formula "24") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,2,1,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "24") (term "1,1,1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,1,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0"))
                                       (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "23"))
                                       (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,1,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1"))
                                       (rule "polySimp_elimOne" (formula "23") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,1,0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,1,0,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "0,0,0,1,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                       (rule "array2seqDef" (formula "3") (term "1,0,1") (inst "u=u"))
                                       (rule "array2seqDef" (formula "3") (term "0,0,1") (inst "u=u"))
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "31") (inst "iv=iv"))
                                       (rule "lenOfSeqDef" (formula "31") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimSub" (formula "31") (term "1,1,1,0,0,1"))
                                       (rule "times_zero_2" (formula "31") (term "1,1,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "1,1,1,0,0,1"))
                                       (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                                       (rule "eqSymm" (formula "31") (term "0"))
                                       (rule "polySimp_elimSub" (formula "31") (term "1,1,0"))
                                       (rule "times_zero_2" (formula "31") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "31") (term "1,1,0"))
                                       (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                                       (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                                       (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "31") (term "1,0,1"))
                                       (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "times_zero_2" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "0,0,1,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "31") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,1,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,1,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "0,0,0,1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
                                       (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
                                       (rule "array2seqDef" (formula "15") (term "0,1,1") (inst "u=u"))
                                       (rule "array2seqDef" (formula "15") (term "1,1,1") (inst "u=u"))
                                       (rule "applyEq" (formula "15") (term "1,1,1") (ifseqformula "14"))
                                       (rule "array2seqDef" (formula "15") (term "0,1") (inst "u=u"))
                                       (rule "eqSymm" (formula "15"))
                                       (rule "narrowSelectArrayType" (formula "15") (term "2,0,0") (ifseqformula "6") (ifseqformula "29"))
                                       (rule "eqSymm" (formula "15"))
                                       (rule "pullOutSelect" (formula "5") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_30"))
                                       (rule "applyEq" (formula "32") (term "1,1,1,1,1,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "32") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "32") (term "1,0,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "27") (term "1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "2") (term "1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "27") (term "1,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "32") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "32") (term "1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "2") (term "1,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "32") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                       (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "21"))
                                       (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "29")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "32") (term "1,1,1,1,1,0,1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "32") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "32") (term "1,0,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "27") (term "1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "2") (term "1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "27") (term "1,1,1,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "32") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "32") (term "1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "2") (term "1,0,1,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "32") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "16"))
                                       (rule "array2seqDef" (formula "31") (term "0,0,0,0,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "31") (term "0,0,0,0,1,0,1") (inst "u=u"))
                                       (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_22"))
                                       (rule "applyEq" (formula "25") (term "1,1,0,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "23"))
                                       (rule "applyEqReverse" (formula "25") (term "1,1,0,1,0") (ifseqformula "23"))
                                       (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0,1,0") (ifseqformula "23"))
                                       (rule "applyEqReverse" (formula "24") (term "0,0,0,0") (ifseqformula "23"))
                                       (rule "hideAuxiliaryEq" (formula "23"))
                                       (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "eqSeqDef2" (formula "3") (inst "iv=iv") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "pullOutSelect" (formula "28") (term "1,2,1,0,0,0,0") (inst "selectSK=arr_207"))
                                       (rule "applyEq" (formula "29") (term "0,1,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "29") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "29") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "pullOutSelect" (formula "29") (term "1,1,1,1,0,1") (inst "selectSK=arr_208"))
                                       (rule "applyEq" (formula "30") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "30") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "30") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "30") (term "0,0,0,1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "30") (term "0,1,1,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "pullOutSelect" (formula "30") (term "1,2,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_21"))
                                       (rule "applyEq" (formula "31") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "31") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "31") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "31") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "31") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "31") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "31") (term "1,2,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "2") (term "1,0,0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_26"))
                                       (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                                       (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "pullOutSelect" (formula "25") (term "1,1") (inst "selectSK=arr_209"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "13") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "notLeft" (formula "14"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "28"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "ifthenelse_negated" (formula "2") (term "0"))
                                       (rule "ifthenelse_negated" (formula "3") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                       (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                       (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "26") (term "0"))
                                       (rule "nnf_imp2or" (formula "38") (term "0,1"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "13") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1"))
                                       (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                       (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                       (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "10"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "narrowSelectArrayType" (formula "16") (term "2,0,0,1,1,0") (ifseqformula "8") (ifseqformula "33"))
                                       (rule "nonNull" (formula "22") (inst "i=i"))
                                       (rule "greater_literals" (formula "22") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "34")))
                                       (rule "sub_literals" (formula "22") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "34"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "21") (inst "i=i"))
                                       (rule "greater_literals" (formula "21") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "35")))
                                       (rule "sub_literals" (formula "21") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "35"))
                                       (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                       (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "20") (inst "i=i"))
                                       (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "36")))
                                       (rule "greater_literals" (formula "20") (term "0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "36"))
                                       (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                       (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "22") (term "0"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "26") (ifseqformula "10"))
                                       (rule "replaceKnownSelect_taclet1111000000201_6" (formula "26") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1111000000201_7" (formula "26") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet1111000000201_8" (formula "26") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1111000000201_9" (formula "26") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1111000000201_0" (formula "26") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1111000000201_1" (formula "26") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1111000000201_2" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1111000000201_3" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "notLeft" (formula "28"))
                                       (rule "notLeft" (formula "27"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "notLeft" (formula "27"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "notLeft" (formula "28"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "notLeft" (formula "27"))
                                       (rule "notLeft" (formula "26"))
                                       (rule "nonNull" (formula "28") (inst "i=i"))
                                       (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "37")))
                                       (rule "greater_literals" (formula "28") (term "0"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "27") (inst "i=i"))
                                       (rule "sub_literals" (formula "27") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "38")))
                                       (rule "greater_literals" (formula "27") (term "0"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                       (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "26") (inst "i=i"))
                                       (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "greater_literals" (formula "26") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "notLeft" (formula "26"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_25"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_25"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_25"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_21"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_28"))
                                       (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                                       (rule "applyEq" (formula "30") (term "0") (ifseqformula "26"))
                                       (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "21"))
                                       (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "42")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                                       (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "26"))
                                       (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
                                       (rule "hideAuxiliaryEq" (formula "26"))
                                       (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "19"))
                                       (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "1"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "1"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "cut_direct" (formula "24") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "nnf_imp2or" (formula "29") (term "0"))
                                          (rule "nnf_imp2or" (formula "28") (term "0"))
                                          (rule "commute_or_2" (formula "26") (term "0"))
                                          (rule "ifthenelse_split" (formula "25") (term "1"))
                                          (branch "result_0.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_imp2or" (formula "28") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "commute_or_2" (formula "15") (term "0"))
                                             (rule "commute_or_2" (formula "16") (term "0"))
                                             (rule "ifthenelse_split" (formula "26") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0,0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                                (rule "ifthenelse_split" (formula "40") (term "0"))
                                                (branch "self.encrypted[i_51].length ≥ 1 + iv_45 TRUE"
                                                   (rule "eqSymm" (formula "41"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "7") (term "0,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "7") (term "0,0,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "42") (term "0,0,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,0,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "41"))
                                                      (rule "eqSymm" (formula "41"))
                                                      (rule "ifthenelse_split" (formula "4") (term "0"))
                                                      (branch "self.chosen.<created> = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "47") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                         (rule "applyEqReverse" (formula "47") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                         (rule "applyEqReverse" (formula "47") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                         (rule "applyEqReverse" (formula "47") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0,0"))
                                                         (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "commute_or_2" (formula "32") (term "0"))
                                                         (rule "commute_or" (formula "15") (term "0,0"))
                                                         (rule "commute_or_2" (formula "31") (term "0"))
                                                         (rule "commute_or_2" (formula "30") (term "0"))
                                                         (rule "commute_or" (formula "16") (term "0,0"))
                                                         (rule "commute_or" (formula "17") (term "0,0"))
                                                         (rule "commute_or" (formula "18") (term "0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or" (formula "32") (term "0,0"))
                                                         (rule "commute_or" (formula "31") (term "0,0"))
                                                         (rule "commute_or" (formula "30") (term "0,0"))
                                                         (rule "ifthenelse_to_or_right" (formula "29") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                                         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                                         (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                                         (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                                         (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0"))
                                                         (rule "commute_or" (formula "29") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                                         (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                                         (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0"))
                                                         (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                                         (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                                         (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                                         (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                                         (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "shift_paren_or" (formula "29") (term "0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                                         (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                                         (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0"))
                                                         (rule "commute_or" (formula "29") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                                         (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                                         (rule "cnf_rightDist" (formula "29") (term "0"))
                                                         (rule "distr_forallAnd" (formula "29"))
                                                         (rule "andLeft" (formula "29"))
                                                         (rule "commute_or" (formula "30") (term "0"))
                                                         (rule "shift_paren_or" (formula "29") (term "0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "commute_or" (formula "30") (term "1,1,0"))
                                                         (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "cnf_rightDist" (formula "30") (term "0"))
                                                         (rule "distr_forallAnd" (formula "30"))
                                                         (rule "andLeft" (formula "30"))
                                                         (rule "commute_or_2" (formula "30") (term "0"))
                                                         (rule "shift_paren_or" (formula "31") (term "0"))
                                                         (rule "commute_or_2" (formula "31") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                                         (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                                         (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                                         (rule "leq_literals" (formula "31") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                         (rule "commute_or" (formula "30") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                                         (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                                         (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "10"))
                                                         (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "40"))
                                                         (builtin "One Step Simplification" (formula "22"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "10"))
                                                         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,1") (ifseqformula "11"))
                                                         (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "5"))
                                                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "41")))
                                                         (rule "true_left" (formula "20"))
                                                         (rule "ifthenelse_split" (formula "49") (term "1,1,0,0,1"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")))
                                                            (rule "true_left" (formula "9"))
                                                            (rule "replace_known_left" (formula "49") (term "0,1,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "49"))
                                                            (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "11"))
                                                            (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "7"))
                                                            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "40")))
                                                            (rule "true_left" (formula "21"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch " ¬self.encrypted[i_51] = null ∧ ¬self.encrypted[i_51].<created> = TRUE TRUE"
                                                               (rule "andLeft" (formula "5"))
                                                               (rule "notLeft" (formula "5"))
                                                               (rule "notLeft" (formula "5"))
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "36"))
                                                               (rule "close" (formula "35") (ifseqformula "11"))
                                                            )
                                                            (branch " ¬self.encrypted[i_51] = null ∧ ¬self.encrypted[i_51].<created> = TRUE FALSE"
                                                               (rule "close" (formula "45") (ifseqformula "5"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "49"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "replace_known_right" (formula "50") (term "0,1,0") (ifseqformula "49"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "inEqSimp_geqRight" (formula "49"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "9"))
                                                            (rule "mul_literals" (formula "9") (term "1,0"))
                                                            (rule "add_zero_right" (formula "9") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                            (rule "mul_literals" (formula "9") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "8"))
                                                            (rule "qeq_literals" (formula "9") (term "0"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "closeFalse" (formula "9"))
                                                         )
                                                      )
                                                      (branch "self.chosen.<created> = TRUE FALSE"
                                                         (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "37"))
                                                         (rule "close" (formula "32") (ifseqformula "9"))
                                                      )
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "38"))
                                                      (rule "close" (formula "32") (ifseqformula "9"))
                                                   )
                                                )
                                                (branch "self.encrypted[i_51].length ≥ 1 + iv_45 FALSE"
                                                   (rule "eqSymm" (formula "41"))
                                                   (builtin "One Step Simplification" (formula "41"))
                                                   (rule "orRight" (formula "41"))
                                                   (rule "notRight" (formula "41"))
                                                   (rule "eqSymm" (formula "42"))
                                                   (rule "inEqSimp_geqRight" (formula "41"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_literals" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "39"))
                                                      (rule "close" (formula "33") (ifseqformula "10"))
                                                   )
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "26"))
                                                (rule "inEqSimp_geqRight" (formula "31"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "26"))
                                                (rule "closeFalse" (formula "26"))
                                             )
                                          )
                                          (branch "result_0.length ≥ 1 FALSE"
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "replace_known_right" (formula "26") (term "0,1,1,0") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "inEqSimp_geqRight" (formula "30"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "28") (term "0"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "15") (term "0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "16") (term "0"))
                                             (rule "commute_or_2" (formula "17") (term "0"))
                                             (rule "ifthenelse_split" (formula "40") (term "0"))
                                             (branch "self.encrypted[i_51].length ≥ 1 + iv_45 TRUE"
                                                (rule "eqSymm" (formula "41"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "42") (term "0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "47") (term "0,1,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "47") (term "0,0,0,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "41"))
                                                   (rule "eqSymm" (formula "41"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0,0"))
                                                      (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "commute_or" (formula "29") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0"))
                                                      (rule "add_zero_right" (formula "29") (term "1,1,0"))
                                                      (rule "qeq_literals" (formula "29") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "true_left" (formula "29"))
                                                      (rule "commute_or_2" (formula "31") (term "0"))
                                                      (rule "commute_or" (formula "16") (term "0,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0"))
                                                      (rule "commute_or_2" (formula "29") (term "0"))
                                                      (rule "commute_or" (formula "17") (term "0,0"))
                                                      (rule "commute_or" (formula "18") (term "0,0"))
                                                      (rule "commute_or" (formula "19") (term "0,0"))
                                                      (rule "commute_or" (formula "31") (term "0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or" (formula "29") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "11"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,0") (ifseqformula "12"))
                                                      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "40"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1,1") (ifseqformula "12"))
                                                      (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "6"))
                                                      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "40")))
                                                      (rule "true_left" (formula "22"))
                                                      (rule "ifthenelse_split" (formula "48") (term "1,0"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "4")))
                                                         (rule "true_left" (formula "10"))
                                                         (rule "replace_known_left" (formula "48") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "48"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,1") (ifseqformula "12"))
                                                         (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "39"))
                                                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "8")))
                                                         (rule "true_left" (formula "23"))
                                                         (rule "arrayLengthIsAShort" (formula "30") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "arrayLengthNotNegative" (formula "30") (term "0,1"))
                                                         (rule "ifthenelse_split" (formula "6") (term "0"))
                                                         (branch " ¬self.encrypted[i_51] = null ∧ ¬self.encrypted[i_51].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "6"))
                                                            (rule "notLeft" (formula "6"))
                                                            (rule "notLeft" (formula "6"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "36"))
                                                            (rule "close" (formula "35") (ifseqformula "12"))
                                                         )
                                                         (branch " ¬self.encrypted[i_51] = null ∧ ¬self.encrypted[i_51].<created> = TRUE FALSE"
                                                            (rule "close" (formula "45") (ifseqformula "6"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "48"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "replace_known_right" (formula "49") (term "0,1,1,0,0,1") (ifseqformula "48"))
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "inEqSimp_geqRight" (formula "48"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "10"))
                                                         (rule "times_zero_2" (formula "10") (term "1,0"))
                                                         (rule "add_zero_right" (formula "10") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                         (rule "mul_literals" (formula "10") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "9"))
                                                         (rule "qeq_literals" (formula "10") (term "0"))
                                                         (builtin "One Step Simplification" (formula "10"))
                                                         (rule "closeFalse" (formula "10"))
                                                      )
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "37"))
                                                      (rule "close" (formula "32") (ifseqformula "10"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "38"))
                                                   (rule "close" (formula "32") (ifseqformula "10"))
                                                )
                                             )
                                             (branch "self.encrypted[i_51].length ≥ 1 + iv_45 FALSE"
                                                (rule "eqSymm" (formula "41"))
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "orRight" (formula "41"))
                                                (rule "notRight" (formula "41"))
                                                (rule "eqSymm" (formula "42"))
                                                (rule "inEqSimp_geqRight" (formula "41"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                (rule "ifthenelse_split" (formula "5") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,0,0,1,1,0,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,0,0,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,1,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "48") (term "1,1,1,1,0,1") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_literals" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "39"))
                                                   (rule "close" (formula "33") (ifseqformula "11"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "nnf_imp2or" (formula "29") (term "0"))
                                          (rule "nnf_imp2or" (formula "28") (term "0"))
                                          (rule "commute_or_2" (formula "26") (term "0"))
                                          (rule "ifthenelse_split" (formula "25") (term "1"))
                                          (branch "result_0.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_imp2or" (formula "28") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "commute_or_2" (formula "15") (term "0"))
                                             (rule "commute_or_2" (formula "16") (term "0"))
                                             (rule "ifthenelse_split" (formula "26") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "27") (term "1,1,1,0,0,1,0,0") (ifseqformula "26"))
                                                (rule "ifthenelse_split" (formula "41") (term "0"))
                                                (branch "self.encrypted[i_51].length ≥ 1 + iv_45 TRUE"
                                                   (rule "eqSymm" (formula "42"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "43") (term "0,0,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "7") (term "0,1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "7") (term "0,0,0,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "48") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "42"))
                                                      (rule "eqSymm" (formula "42"))
                                                      (rule "ifthenelse_split" (formula "4") (term "0"))
                                                      (branch "self.chosen.<created> = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                         (rule "applyEqReverse" (formula "48") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                         (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                         (rule "applyEqReverse" (formula "48") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                         (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "commute_or_2" (formula "32") (term "0"))
                                                         (rule "commute_or" (formula "15") (term "0,0"))
                                                         (rule "commute_or_2" (formula "31") (term "0"))
                                                         (rule "commute_or_2" (formula "30") (term "0"))
                                                         (rule "commute_or" (formula "16") (term "0,0"))
                                                         (rule "commute_or" (formula "17") (term "0,0"))
                                                         (rule "commute_or" (formula "18") (term "0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or" (formula "32") (term "0,0"))
                                                         (rule "commute_or" (formula "31") (term "0,0"))
                                                         (rule "commute_or" (formula "30") (term "0,0"))
                                                         (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                                         (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                                         (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                         (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                                         (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                                         (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                                         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                                         (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                         (rule "commute_or" (formula "29") (term "1,1,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                                         (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                                         (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0"))
                                                         (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                                         (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                                         (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                                         (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                                         (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "shift_paren_or" (formula "29") (term "0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                                         (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                                         (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                                         (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                         (rule "commute_or" (formula "29") (term "1,1,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                                         (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                                         (rule "cnf_rightDist" (formula "29") (term "0"))
                                                         (rule "distr_forallAnd" (formula "29"))
                                                         (rule "andLeft" (formula "29"))
                                                         (rule "commute_or" (formula "30") (term "0"))
                                                         (rule "shift_paren_or" (formula "29") (term "0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "commute_or" (formula "30") (term "1,1,0"))
                                                         (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "cnf_rightDist" (formula "30") (term "0"))
                                                         (rule "distr_forallAnd" (formula "30"))
                                                         (rule "andLeft" (formula "30"))
                                                         (rule "commute_or_2" (formula "30") (term "0"))
                                                         (rule "shift_paren_or" (formula "31") (term "0"))
                                                         (rule "commute_or_2" (formula "31") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                                         (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                                         (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                                         (rule "leq_literals" (formula "31") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                         (rule "commute_or" (formula "30") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                                         (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                                         (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "10"))
                                                         (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "41"))
                                                         (builtin "One Step Simplification" (formula "22"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "10"))
                                                         (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "41"))
                                                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "4")))
                                                         (rule "true_left" (formula "19"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "10"))
                                                         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "ifthenelse_split" (formula "50") (term "1,1,0,0,1"))
                                                         (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                            (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")))
                                                            (rule "true_left" (formula "9"))
                                                            (rule "replace_known_left" (formula "50") (term "0,1,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "11"))
                                                            (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "7"))
                                                            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "41")))
                                                            (rule "true_left" (formula "21"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch " ¬self.encrypted[i_51] = null ∧ ¬self.encrypted[i_51].<created> = TRUE TRUE"
                                                               (rule "andLeft" (formula "5"))
                                                               (rule "notLeft" (formula "5"))
                                                               (rule "notLeft" (formula "5"))
                                                               (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "36"))
                                                               (rule "close" (formula "35") (ifseqformula "11"))
                                                            )
                                                            (branch " ¬self.encrypted[i_51] = null ∧ ¬self.encrypted[i_51].<created> = TRUE FALSE"
                                                               (rule "close" (formula "46") (ifseqformula "5"))
                                                            )
                                                         )
                                                         (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                            (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "50"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "replace_known_right" (formula "51") (term "0,1,0") (ifseqformula "50"))
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "inEqSimp_geqRight" (formula "50"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "9"))
                                                            (rule "times_zero_2" (formula "9") (term "1,0"))
                                                            (rule "add_zero_right" (formula "9") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                            (rule "mul_literals" (formula "9") (term "1"))
                                                            (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "9"))
                                                            (rule "qeq_literals" (formula "8") (term "0"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "closeFalse" (formula "8"))
                                                         )
                                                      )
                                                      (branch "self.chosen.<created> = TRUE FALSE"
                                                         (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "38"))
                                                         (rule "close" (formula "32") (ifseqformula "9"))
                                                      )
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "39"))
                                                      (rule "close" (formula "32") (ifseqformula "9"))
                                                   )
                                                )
                                                (branch "self.encrypted[i_51].length ≥ 1 + iv_45 FALSE"
                                                   (rule "eqSymm" (formula "42"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "orRight" (formula "42"))
                                                   (rule "notRight" (formula "42"))
                                                   (rule "eqSymm" (formula "43"))
                                                   (rule "inEqSimp_geqRight" (formula "42"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "49") (term "0,0,0,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "49") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "49") (term "0,1,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "49") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_zero_right" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "40"))
                                                      (rule "close" (formula "33") (ifseqformula "10"))
                                                   )
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "26"))
                                                (rule "inEqSimp_geqRight" (formula "31"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "26"))
                                                (rule "closeFalse" (formula "26"))
                                             )
                                          )
                                          (branch "result_0.length ≥ 1 FALSE"
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "replace_known_right" (formula "26") (term "0,1,1,0") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "inEqSimp_geqRight" (formula "30"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "28") (term "0"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "15") (term "0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "16") (term "0"))
                                             (rule "commute_or_2" (formula "17") (term "0"))
                                             (rule "ifthenelse_split" (formula "41") (term "0"))
                                             (branch "self.encrypted[i_51].length ≥ 1 + iv_45 TRUE"
                                                (rule "eqSymm" (formula "42"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,0,0,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "43") (term "0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,1,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "48") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "48") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "eqSymm" (formula "42"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "48") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0,0"))
                                                      (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "commute_or" (formula "29") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0"))
                                                      (rule "add_zero_right" (formula "29") (term "1,1,0"))
                                                      (rule "qeq_literals" (formula "29") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "true_left" (formula "29"))
                                                      (rule "commute_or_2" (formula "31") (term "0"))
                                                      (rule "commute_or" (formula "16") (term "0,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0"))
                                                      (rule "commute_or_2" (formula "29") (term "0"))
                                                      (rule "commute_or" (formula "17") (term "0,0"))
                                                      (rule "commute_or" (formula "18") (term "0,0"))
                                                      (rule "commute_or" (formula "19") (term "0,0"))
                                                      (rule "commute_or" (formula "31") (term "0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or" (formula "29") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "11"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,0") (ifseqformula "12"))
                                                      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "41"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1,1") (ifseqformula "12"))
                                                      (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "6"))
                                                      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "41")))
                                                      (rule "true_left" (formula "22"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,1") (ifseqformula "12"))
                                                      (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "7"))
                                                      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "40")))
                                                      (rule "true_left" (formula "23"))
                                                      (rule "ifthenelse_split" (formula "49") (term "1,1,0,0,1"))
                                                      (branch "self.encrypted[i_51].length ≥ 1 TRUE"
                                                         (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "4")))
                                                         (rule "true_left" (formula "10"))
                                                         (rule "replace_known_left" (formula "49") (term "0,1,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "ifthenelse_split" (formula "6") (term "0"))
                                                         (branch " ¬self.encrypted[i_51] = null ∧ ¬self.encrypted[i_51].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "6"))
                                                            (rule "notLeft" (formula "6"))
                                                            (rule "notLeft" (formula "6"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "35"))
                                                            (rule "close" (formula "34") (ifseqformula "12"))
                                                         )
                                                         (branch " ¬self.encrypted[i_51] = null ∧ ¬self.encrypted[i_51].<created> = TRUE FALSE"
                                                            (rule "close" (formula "45") (ifseqformula "6"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[i_51].length ≥ 1 FALSE"
                                                         (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "49"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "replace_known_right" (formula "50") (term "0,1,0") (ifseqformula "49"))
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "inEqSimp_geqRight" (formula "49"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "10"))
                                                         (rule "mul_literals" (formula "10") (term "1,0"))
                                                         (rule "add_zero_right" (formula "10") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                         (rule "mul_literals" (formula "10") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "9"))
                                                         (rule "qeq_literals" (formula "10") (term "0"))
                                                         (builtin "One Step Simplification" (formula "10"))
                                                         (rule "closeFalse" (formula "10"))
                                                      )
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "38"))
                                                      (rule "close" (formula "32") (ifseqformula "10"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "39"))
                                                   (rule "close" (formula "32") (ifseqformula "10"))
                                                )
                                             )
                                             (branch "self.encrypted[i_51].length ≥ 1 + iv_45 FALSE"
                                                (rule "eqSymm" (formula "42"))
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "orRight" (formula "42"))
                                                (rule "notRight" (formula "42"))
                                                (rule "eqSymm" (formula "43"))
                                                (rule "inEqSimp_geqRight" (formula "42"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                (rule "ifthenelse_split" (formula "5") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "49") (term "1,1,1,1,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "49") (term "0,1,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "49") (term "0,0,0,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "49") (term "0,0,0,1,1,0,0,1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "40"))
                                                   (rule "close" (formula "33") (ifseqformula "11"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch
                           (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_checkAndGetBallots,
              byte[][]::select(heapAfter_checkAndGetBallots,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))
= array2seq2d(heap,
              byte[][]::select(heap,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))") (userinteraction))
                           (branch "CUT: array2seq2d(heapAfter_checkAndGetBallots, self.sorted@heapAfter_checkAndGetBallots) = array2seq2d(heap, self.sorted) TRUE"
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "1") (userinteraction))
                              (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_checkAndGetBallots,
              byte[][]::select(heapAfter_checkAndGetBallots,
                               self,
                               verif.selectvoting.system.core.MixServer::$encrypted))
= array2seq2d(heap,
              byte[][]::select(heap,
                               self,
                               verif.selectvoting.system.core.MixServer::$encrypted))") (userinteraction))
                              (branch "CUT: array2seq2d(heapAfter_checkAndGetBallots, self.encrypted@heapAfter_checkAndGetBallots) = array2seq2d(heap, self.encrypted) TRUE"
                                 (rule "applyEq" (formula "26") (term "1") (ifseqformula "1") (userinteraction))
                                 (rule "close" (formula "26") (ifseqformula "10") (userinteraction))
                              )
                              (branch "CUT: array2seq2d(heapAfter_checkAndGetBallots, self.encrypted@heapAfter_checkAndGetBallots) = array2seq2d(heap, self.encrypted) FALSE"
                                 (rule "array2seq2dDef" (formula "21") (term "0") (inst "u=u") (userinteraction))
                                 (rule "array2seq2dDef" (formula "21") (term "1") (inst "u=u") (userinteraction))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "21") (inst "iv=iv") (userinteraction))
                                 (rule "andRight" (formula "21") (userinteraction))
                                 (branch "Case 1"
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "eqSymm" (formula "19"))
                                    (rule "eqSymm" (formula "8") (term "1,0"))
                                    (rule "eqSymm" (formula "10"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "lenOfSeqDef" (formula "21") (term "1"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "21") (term "1,1"))
                                    (rule "lenOfSeqDef" (formula "21") (term "0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                    (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                    (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "12"))
                                    (rule "applyEq" (formula "21") (term "0,1,0,0,1") (ifseqformula "12"))
                                    (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                                    (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                                    (rule "eqSymm" (formula "21"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                                    (rule "eqSymm" (formula "21"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                                    (rule "array2seqDef" (formula "19") (term "0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
                                    (rule "array2seqDef" (formula "8") (term "1,1,0") (inst "u=u"))
                                    (rule "eqSymm" (formula "8") (term "1,0"))
                                    (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "10"))
                                    (rule "array2seqDef" (formula "11") (term "0,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
                                    (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "10"))
                                    (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "eqSeqDef" (formula "19") (inst "iv=iv"))
                                    (rule "andLeft" (formula "19"))
                                    (rule "lenOfSeqDef" (formula "19") (term "1"))
                                    (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                    (rule "times_zero_2" (formula "19") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "19") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                                    (rule "castDel" (formula "20") (term "1,0,1,0"))
                                    (rule "castDel" (formula "20") (term "2,0,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                                    (rule "eqSymm" (formula "20") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0"))
                                    (rule "times_zero_2" (formula "20") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,1,1,0,0"))
                                    (rule "lenOfSeqDef" (formula "19") (term "0"))
                                    (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                                    (rule "times_zero_2" (formula "19") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "19") (term "1,0"))
                                    (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                                    (rule "castDel" (formula "20") (term "1,0,1,0"))
                                    (rule "castDel" (formula "20") (term "2,0,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                                    (rule "eqSymm" (formula "20") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "20") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "20") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                                    (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "19"))
                                    (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "20") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "20") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "0,0,1,1,1,0,0"))
                                    (rule "array2seqDef" (formula "8") (term "1,0,1,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "8") (term "0,0,1,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "11") (term "0,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "narrowSelectArrayType" (formula "11") (term "2,0,0") (ifseqformula "2") (ifseqformula "25"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_25"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "4")))
                                    (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "27") (term "1,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_26"))
                                    (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "4")))
                                    (rule "applyEqReverse" (formula "28") (term "1,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "23") (term "0,0,0,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "applyEq" (formula "22") (term "0,0,0") (ifseqformula "12"))
                                    (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "closeTrue" (formula "22"))
                                 )
                                 (branch "Case 2"
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                                    (rule "allRight" (formula "21") (inst "sk=iv_35"))
                                    (rule "impRight" (formula "21"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "eqSymm" (formula "10") (term "1,0"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "eqSymm" (formula "21"))
                                    (rule "eqSymm" (formula "15"))
                                    (rule "eqSymm" (formula "14"))
                                    (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "getOfSeqDef" (formula "23") (term "1"))
                                    (rule "castDel" (formula "23") (term "1,1"))
                                    (rule "castDel" (formula "23") (term "2,1"))
                                    (rule "add_zero_right" (formula "23") (term "0,2,1,1,1"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "polySimp_elimSub" (formula "23") (term "1,0,1"))
                                    (rule "times_zero_2" (formula "23") (term "1,1,0,1"))
                                    (rule "add_zero_right" (formula "23") (term "1,0,1"))
                                    (rule "lenOfSeqDef" (formula "2") (term "1"))
                                    (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                    (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "2") (term "1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "getOfSeqDef" (formula "23") (term "0"))
                                    (rule "castDel" (formula "23") (term "1,0"))
                                    (rule "castDel" (formula "23") (term "2,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,2,1,1,0"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "polySimp_elimSub" (formula "23") (term "1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1"))
                                    (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "14"))
                                    (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
                                    (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                    (rule "applyEq" (formula "23") (term "0,1,0,0,1") (ifseqformula "14"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                                    (rule "eqSymm" (formula "23"))
                                    (rule "polySimp_elimOne" (formula "23") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                                    (rule "eqSymm" (formula "23"))
                                    (rule "polySimp_elimOne" (formula "23") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "array2seqDef" (formula "10") (term "0,0,0,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "10") (term "1,0,0,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                                    (rule "eqSymm" (formula "10") (term "1,0"))
                                    (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "array2seqDef" (formula "13") (term "0,0") (inst "u=u"))
                                    (rule "narrowSelectArrayType" (formula "13") (term "2,0,0") (ifseqformula "4") (ifseqformula "26"))
                                    (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
                                    (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "12"))
                                    (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "21"))
                                    (rule "array2seqDef" (formula "23") (term "1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "23") (term "1,1") (inst "u=u"))
                                    (rule "array2seqDef" (formula "13") (term "0,1,1") (inst "u=u"))
                                    (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "21"))
                                    (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "eqSeqDef" (formula "20") (inst "iv=iv"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "getOfSeqDef" (formula "21") (term "1,1,0"))
                                    (rule "castDel" (formula "21") (term "2,1,1,0"))
                                    (rule "castDel" (formula "21") (term "1,1,1,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,2,1,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "21") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,1,0,0"))
                                    (rule "lenOfSeqDef" (formula "20") (term "1"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,1"))
                                    (rule "mul_literals" (formula "20") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "20") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "21") (term "0,1,0"))
                                    (rule "castDel" (formula "21") (term "1,0,1,0"))
                                    (rule "castDel" (formula "21") (term "2,0,1,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0"))
                                    (rule "lenOfSeqDef" (formula "20") (term "0"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,0"))
                                    (rule "times_zero_2" (formula "20") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
                                    (rule "apply_eq_monomials" (formula "21") (term "1,0,0,1,0,0") (ifseqformula "20"))
                                    (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "21") (term "1,1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "20") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0,0,1,1,1,0,0"))
                                    (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "pullOutSelect" (formula "27") (term "1,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_25"))
                                    (rule "applyEq" (formula "23") (term "1,1,2,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "23") (term "1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "28") (term "1,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "23") (term "1,1,2,1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "23") (term "1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "23") (term "0,0,0,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "12"))
                                    (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "12"))
                                    (rule "applyEq" (formula "22") (term "0,0,0") (ifseqformula "12"))
                                    (rule "pullOutSelect" (formula "3") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_24"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "25")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "pullOutSelect" (formula "20") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_20"))
                                    (rule "applyEq" (formula "21") (term "0,1,1,1,0,0,1,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "20"))
                                    (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")))
                                    (rule "applyEqReverse" (formula "21") (term "1,1,0,1,0") (ifseqformula "20"))
                                    (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0,1,0") (ifseqformula "20"))
                                    (rule "applyEqReverse" (formula "19") (term "0,0,0,0") (ifseqformula "20"))
                                    (rule "applyEqReverse" (formula "19") (term "0,1,0") (ifseqformula "20"))
                                    (rule "hideAuxiliaryEq" (formula "20"))
                                    (rule "pullOutSelect" (formula "22") (term "1,2,1,0") (inst "selectSK=arr_197"))
                                    (rule "applyEq" (formula "23") (term "0,1,1,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "11") (term "0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                    (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "10") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
                                    (rule "eqSymm" (formula "10"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "10") (term "1") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "notLeft" (formula "12"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "notLeft" (formula "10"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                    (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "13") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "26")) (ifInst ""  (formula "27")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                                    (rule "andLeft" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                    (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                    (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "10") (term "0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0"))
                                    (rule "nnf_imp2or" (formula "12") (term "0"))
                                    (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "17") (ifseqformula "7"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "notLeft" (formula "18"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "notLeft" (formula "18"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "notLeft" (formula "18"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "notLeft" (formula "18"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "narrowSelectArrayType" (formula "13") (term "2,0,0,1,1,0") (ifseqformula "5") (ifseqformula "30"))
                                    (rule "nonNull" (formula "19") (inst "i=i"))
                                    (rule "greater_literals" (formula "19") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "31")))
                                    (rule "sub_literals" (formula "19") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "31"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "18") (inst "i=i"))
                                    (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "32")))
                                    (rule "greater_literals" (formula "18") (term "0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "32"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                    (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "17") (inst "i=i"))
                                    (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "33")))
                                    (rule "greater_literals" (formula "17") (term "0"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "33"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                    (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_imp2or" (formula "18") (term "0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "23") (ifseqformula "7"))
                                    (rule "replaceKnownSelect_taclet110100000201_0" (formula "23") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000201_1" (formula "23") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000201_2" (formula "23") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000201_3" (formula "23") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet110100000201_4" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100000201_5" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "25"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "23"))
                                    (rule "notLeft" (formula "23"))
                                    (rule "nonNull" (formula "25") (inst "i=i"))
                                    (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "greater_literals" (formula "25") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "notLeft" (formula "25"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "24") (inst "i=i"))
                                    (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "37")))
                                    (rule "greater_literals" (formula "24") (term "0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                    (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "23") (inst "i=i"))
                                    (rule "greater_literals" (formula "23") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "38")))
                                    (rule "sub_literals" (formula "23") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                    (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_19"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_23"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_23"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_23"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_19"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_24"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "25"))
                                    (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                                    (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
                                    (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "25"))
                                    (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                                    (rule "hideAuxiliaryEq" (formula "25"))
                                    (rule "commute_or_2" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "24") (term "0"))
                                    (rule "nnf_imp2or" (formula "23") (term "0"))
                                    (rule "nnf_imp2or" (formula "25") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                    (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                    (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                    (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                    (rule "arrayLengthNotNegative" (formula "15") (term "1"))
                                    (rule "arrayLengthIsAShort" (formula "15") (term "1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "cut_direct" (formula "21") (term "0"))
                                    (branch "CUT: result_0.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "ifthenelse_split" (formula "36") (term "1"))
                                       (branch "self.chosen.length ≥ 1 + iv_35 TRUE"
                                          (rule "replace_known_left" (formula "37") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "37"))
                                          (rule "eqSeqDef" (formula "37") (inst "iv=iv"))
                                          (rule "lenOfSeqDef" (formula "37") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,1,0"))
                                          (rule "times_zero_2" (formula "37") (term "1,1,1,0"))
                                          (rule "add_zero_right" (formula "37") (term "1,1,0"))
                                          (rule "lenOfSeqDef" (formula "37") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,1,1,0,0,1"))
                                          (rule "mul_literals" (formula "37") (term "1,1,1,1,0,0,1"))
                                          (rule "add_zero_right" (formula "37") (term "1,1,1,0,0,1"))
                                          (rule "getOfSeqDef" (formula "37") (term "0,1,0,1"))
                                          (rule "castDel" (formula "37") (term "1,0,1,0,1"))
                                          (rule "castDel" (formula "37") (term "2,0,1,0,1"))
                                          (rule "add_zero_right" (formula "37") (term "0,2,1,0,1,0,1"))
                                          (rule "eqSymm" (formula "37") (term "1,0,1"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,1,0,1,1,0,1"))
                                          (rule "times_zero_2" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                          (rule "add_zero_right" (formula "37") (term "1,1,0,1,1,0,1"))
                                          (rule "lenOfSeqDef" (formula "37") (term "0,0"))
                                          (rule "eqSymm" (formula "37") (term "0"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,1,0"))
                                          (rule "times_zero_2" (formula "37") (term "1,1,1,0"))
                                          (rule "add_zero_right" (formula "37") (term "1,1,0"))
                                          (rule "getOfSeqDef" (formula "37") (term "0,1,0,1"))
                                          (rule "castDel" (formula "37") (term "1,0,1,0,1"))
                                          (rule "castDel" (formula "37") (term "2,0,1,0,1"))
                                          (rule "add_zero_right" (formula "37") (term "0,2,1,0,1,0,1"))
                                          (rule "polySimp_elimSub" (formula "37") (term "1,1,0,0,1,0,1"))
                                          (rule "mul_literals" (formula "37") (term "1,1,1,0,0,1,0,1"))
                                          (rule "add_zero_right" (formula "37") (term "1,1,0,0,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1,1,0,0,1"))
                                          (rule "add_zero_right" (formula "37") (term "0,0,1,1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,1,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,1,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1,0"))
                                          (rule "add_zero_right" (formula "37") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                                          (rule "add_zero_right" (formula "37") (term "0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,1,1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,1,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,1,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,1,0,1,1,0,1"))
                                          (rule "mul_literals" (formula "37") (term "0,1,1,0,1,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,0,1"))
                                          (rule "mul_literals" (formula "37") (term "0,1,1,0,0,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1"))
                                          (rule "mul_literals" (formula "37") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,1,1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "0,0,1,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "37") (term "0,0,1,1,1,0,0,1"))
                                          (rule "commute_or_2" (formula "11") (term "0"))
                                          (rule "commute_or_2" (formula "12") (term "0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "commute_or_2" (formula "14") (term "0"))
                                          (rule "ifthenelse_split" (formula "23") (term "1"))
                                          (branch "result_0.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch "self.chosen.length ≥ 1 TRUE"
                                                (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "4"))
                                                (rule "leq_literals" (formula "17") (term "0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "ifthenelse_split" (formula "23") (term "0"))
                                                (branch "self.concatenated.length ≥ 1 TRUE"
                                                   (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0,0") (ifseqformula "23"))
                                                   (rule "nnf_imp2or" (formula "37") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "37") (term "0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "37") (term "1,0,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1"))
                                                   (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
                                                   (rule "andLeft" (formula "5"))
                                                   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                                                   (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "7"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "6"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0,1") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "38") (term "0,1,1,0") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "38") (term "0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "38") (term "1,1,1,1,0,1") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "38") (term "0,0,0,1,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "38"))
                                                      (rule "allRight" (formula "38") (inst "sk=iv_39"))
                                                      (rule "orRight" (formula "38"))
                                                      (rule "orRight" (formula "38"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "eqSymm" (formula "39"))
                                                      (rule "inEqSimp_leqRight" (formula "37"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,1") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "38"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "39") (term "0,1"))
                                                      (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "39") (term "1,0,1"))
                                                      (rule "mul_literals" (formula "39") (term "0,1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "39") (term "1,1,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "39") (term "0,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                                                      (rule "pullOutSelect" (formula "39") (term "1,0") (inst "selectSK=arr_201"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "eqSymm" (formula "40"))
                                                      (rule "commute_or_2" (formula "29") (term "0"))
                                                      (rule "commute_or_2" (formula "28") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0"))
                                                      (rule "commute_or" (formula "14") (term "0,0"))
                                                      (rule "commute_or" (formula "15") (term "0,0"))
                                                      (rule "commute_or" (formula "16") (term "0,0"))
                                                      (rule "commute_or" (formula "17") (term "0,0"))
                                                      (rule "commute_or" (formula "27") (term "0,0"))
                                                      (rule "commute_or" (formula "29") (term "0,0"))
                                                      (rule "commute_or" (formula "28") (term "0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "9"))
                                                      (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "37"))
                                                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                                                      (rule "true_left" (formula "18"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "1,0") (ifseqformula "9"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "10"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "11"))
                                                      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "38"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "ifthenelse_to_or_left" (formula "30") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "30") (term "1,0,0,0,0"))
                                                      (rule "eqSymm" (formula "30") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "30") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "30") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "30") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,1,0"))
                                                      (rule "commute_or" (formula "30") (term "1,1,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,1,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,1,1,0"))
                                                      (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0,1,1,0"))
                                                      (rule "add_literals" (formula "30") (term "1,1,0,0,1,1,0"))
                                                      (rule "qeq_literals" (formula "30") (term "1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "shift_paren_or" (formula "30") (term "1,1,0"))
                                                      (rule "commute_or" (formula "30") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "30") (term "1,1,0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "30") (term "1,1,1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,1,1,0"))
                                                      (rule "add_literals" (formula "30") (term "1,0,1,1,1,0"))
                                                      (rule "times_zero_1" (formula "30") (term "0,1,1,1,0"))
                                                      (rule "leq_literals" (formula "30") (term "1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "shift_paren_or" (formula "30") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "ifthenelse_to_or_left" (formula "30") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "30") (term "1,1,0,0,0"))
                                                      (rule "eqSymm" (formula "30") (term "1,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,1,0"))
                                                      (rule "commute_or" (formula "30") (term "1,1,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                                                      (rule "cnf_rightDist" (formula "30") (term "0"))
                                                      (rule "distr_forallAnd" (formula "30"))
                                                      (rule "andLeft" (formula "30"))
                                                      (rule "commute_or" (formula "31") (term "0"))
                                                      (rule "shift_paren_or" (formula "30") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "commute_or" (formula "31") (term "1,1,0"))
                                                      (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "cnf_rightDist" (formula "31") (term "0"))
                                                      (rule "distr_forallAnd" (formula "31"))
                                                      (rule "andLeft" (formula "31"))
                                                      (rule "commute_or_2" (formula "31") (term "0"))
                                                      (rule "shift_paren_or" (formula "32") (term "0"))
                                                      (rule "commute_or_2" (formula "32") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0"))
                                                      (rule "add_literals" (formula "32") (term "1,0,1,0"))
                                                      (rule "times_zero_1" (formula "32") (term "0,1,0"))
                                                      (rule "leq_literals" (formula "32") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "shift_paren_or" (formula "31") (term "0,0"))
                                                      (rule "commute_or" (formula "31") (term "0,0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                                                      (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                                                      (rule "qeq_literals" (formula "31") (term "1,0,0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "ifthenelse_split" (formula "4") (term "0"))
                                                      (branch "self.encrypted[iv_35].length ≥ 1 TRUE"
                                                         (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "5"))
                                                         (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "5")))
                                                         (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "true_left" (formula "29"))
                                                         (rule "arrayLengthNotNegative" (formula "30") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "29"))
                                                         (rule "leq_literals" (formula "30") (term "0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "ifthenelse_split" (formula "3") (term "0"))
                                                         (branch " ¬self.encrypted[iv_35] = null ∧ ¬self.encrypted[iv_35].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "3"))
                                                            (rule "notLeft" (formula "4"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "35"))
                                                            (rule "close" (formula "36") (ifseqformula "12"))
                                                         )
                                                         (branch " ¬self.encrypted[iv_35] = null ∧ ¬self.encrypted[iv_35].<created> = TRUE FALSE"
                                                            (rule "close" (formula "45") (ifseqformula "3"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[iv_35].length ≥ 1 FALSE"
                                                         (rule "inEqSimp_geqRight" (formula "34"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "5"))
                                                         (rule "mul_literals" (formula "5") (term "1,0"))
                                                         (rule "add_zero_right" (formula "5") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                         (rule "mul_literals" (formula "5") (term "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                         (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "34"))
                                                      (rule "close" (formula "28") (ifseqformula "6"))
                                                   )
                                                )
                                                (branch "self.concatenated.length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "23"))
                                                   (rule "inEqSimp_geqRight" (formula "28"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                                   (rule "qeq_literals" (formula "23"))
                                                   (rule "closeFalse" (formula "23"))
                                                )
                                             )
                                             (branch "self.chosen.length ≥ 1 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "29"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "5"))
                                                (rule "mul_literals" (formula "5") (term "1,0"))
                                                (rule "add_zero_right" (formula "5") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                (rule "mul_literals" (formula "5") (term "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "4") (term "0"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "closeFalse" (formula "4"))
                                             )
                                          )
                                          (branch "result_0.length ≥ 1 FALSE"
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "replace_known_right" (formula "24") (term "0,1,1,0") (ifseqformula "28"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "inEqSimp_geqRight" (formula "28"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0"))
                                             (rule "ifthenelse_split" (formula "5") (term "0"))
                                             (branch "self.chosen.length ≥ 1 TRUE"
                                                (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "5"))
                                                (rule "leq_literals" (formula "18") (term "0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "nnf_imp2or" (formula "37") (term "0,1"))
                                                (rule "nnf_notAnd" (formula "37") (term "0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "37") (term "1,0,0,0,1"))
                                                (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                                (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "8"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "applyEq" (formula "6") (term "0,0,1,0,0,1,0,0") (ifseqformula "7"))
                                                (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "38") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "38") (term "0,0,0,1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "38") (term "0,1,1,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "allRight" (formula "38") (inst "sk=iv_38"))
                                                   (rule "orRight" (formula "38"))
                                                   (rule "orRight" (formula "38"))
                                                   (rule "applyEqReverse" (formula "40") (term "1,1,1") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,1") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "39") (term "0,1,1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "39"))
                                                   (rule "inEqSimp_leqRight" (formula "37"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "replace_known_left" (formula "39") (term "0,0,1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                                                   (rule "inEqSimp_geqRight" (formula "38"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "39") (term "0,1"))
                                                   (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,1"))
                                                   (rule "polySimp_mulComm0" (formula "39") (term "1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "39") (term "1,0,1"))
                                                   (rule "mul_literals" (formula "39") (term "0,1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "39") (term "1,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "39") (term "0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "39") (term "1,0") (inst "selectSK=arr_200"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "eqSymm" (formula "40"))
                                                   (rule "commute_or_2" (formula "29") (term "0"))
                                                   (rule "commute_or_2" (formula "28") (term "0"))
                                                   (rule "commute_or_2" (formula "30") (term "0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "commute_or" (formula "17") (term "0,0"))
                                                   (rule "commute_or" (formula "18") (term "0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                                   (rule "add_zero_right" (formula "27") (term "1,1,0"))
                                                   (rule "qeq_literals" (formula "27") (term "1,0"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "true_left" (formula "27"))
                                                   (rule "commute_or" (formula "28") (term "0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "10"))
                                                   (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "36"))
                                                   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,0") (ifseqformula "10"))
                                                   (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "37"))
                                                   (builtin "One Step Simplification" (formula "19"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "10"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "11"))
                                                   (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "37"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.encrypted[iv_35].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "4")))
                                                      (rule "arrayLengthNotNegative" (formula "30") (term "0,1"))
                                                      (rule "arrayLengthIsAShort" (formula "31") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                                      (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                                      (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "7"))
                                                      (rule "true_left" (formula "7"))
                                                      (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                                      (rule "leq_literals" (formula "7"))
                                                      (rule "true_left" (formula "7"))
                                                      (rule "cut_direct" (formula "31") (term "0"))
                                                      (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "true_left" (formula "32"))
                                                         (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "31"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                                         (rule "qeq_literals" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                                         (rule "leq_literals" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch " ¬self.encrypted[iv_35] = null ∧ ¬self.encrypted[iv_35].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "34"))
                                                            (rule "close" (formula "35") (ifseqformula "12"))
                                                         )
                                                         (branch " ¬self.encrypted[iv_35] = null ∧ ¬self.encrypted[iv_35].<created> = TRUE FALSE"
                                                            (rule "close" (formula "44") (ifseqformula "2"))
                                                         )
                                                      )
                                                      (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "inEqSimp_leqRight" (formula "35"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                         (rule "qeq_literals" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                                         (rule "add_zero_right" (formula "1") (term "0"))
                                                         (rule "qeq_literals" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                   )
                                                   (branch "self.encrypted[iv_35].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "33"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "4"))
                                                      (rule "times_zero_2" (formula "4") (term "1,0"))
                                                      (rule "add_zero_right" (formula "4") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                      (rule "mul_literals" (formula "4") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "5"))
                                                      (rule "qeq_literals" (formula "4") (term "0"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "closeFalse" (formula "4"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "34"))
                                                   (rule "close" (formula "28") (ifseqformula "7"))
                                                )
                                             )
                                             (branch "self.chosen.length ≥ 1 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "29"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "6"))
                                                (rule "times_zero_2" (formula "6") (term "1,0"))
                                                (rule "add_zero_right" (formula "6") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                (rule "mul_literals" (formula "6") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "6") (term "0"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "closeFalse" (formula "6"))
                                             )
                                          )
                                       )
                                       (branch "self.chosen.length ≥ 1 + iv_35 FALSE"
                                          (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "36")))
                                          (rule "closeTrue" (formula "37"))
                                       )
                                    )
                                    (branch "CUT: result_0.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "ifthenelse_split" (formula "37") (term "1"))
                                       (branch "self.chosen.length ≥ 1 + iv_35 TRUE"
                                          (rule "replace_known_left" (formula "38") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "38") (inst "iv=iv"))
                                          (rule "getOfSeqDef" (formula "38") (term "1,1,0,1"))
                                          (rule "castDel" (formula "38") (term "1,1,1,0,1"))
                                          (rule "castDel" (formula "38") (term "2,1,1,0,1"))
                                          (rule "add_zero_right" (formula "38") (term "0,2,1,1,1,0,1"))
                                          (rule "polySimp_elimSub" (formula "38") (term "1,1,0,1,1,0,1"))
                                          (rule "times_zero_2" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                          (rule "add_zero_right" (formula "38") (term "1,1,0,1,1,0,1"))
                                          (rule "lenOfSeqDef" (formula "38") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "38") (term "1,1,0"))
                                          (rule "times_zero_2" (formula "38") (term "1,1,1,0"))
                                          (rule "add_zero_right" (formula "38") (term "1,1,0"))
                                          (rule "getOfSeqDef" (formula "38") (term "0,1,0,1"))
                                          (rule "castDel" (formula "38") (term "2,0,1,0,1"))
                                          (rule "castDel" (formula "38") (term "1,0,1,0,1"))
                                          (rule "add_zero_right" (formula "38") (term "0,2,1,0,1,0,1"))
                                          (rule "eqSymm" (formula "38") (term "1,0,1"))
                                          (rule "polySimp_elimSub" (formula "38") (term "1,1,0,1,1,0,1"))
                                          (rule "times_zero_2" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                          (rule "add_zero_right" (formula "38") (term "1,1,0,1,1,0,1"))
                                          (rule "lenOfSeqDef" (formula "38") (term "0,0"))
                                          (rule "eqSymm" (formula "38") (term "0"))
                                          (rule "polySimp_elimSub" (formula "38") (term "1,1,0"))
                                          (rule "mul_literals" (formula "38") (term "1,1,1,0"))
                                          (rule "add_zero_right" (formula "38") (term "1,1,0"))
                                          (rule "lenOfSeqDef" (formula "38") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimSub" (formula "38") (term "1,1,1,0,0,1"))
                                          (rule "times_zero_2" (formula "38") (term "1,1,1,1,0,0,1"))
                                          (rule "add_zero_right" (formula "38") (term "1,1,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1"))
                                          (rule "eqSymm" (formula "38") (term "1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,1,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                          (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                                          (rule "eqSymm" (formula "38") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0,1,1,0,0,1"))
                                          (rule "add_zero_right" (formula "38") (term "0,0,1,1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1"))
                                          (rule "eqSymm" (formula "38") (term "1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,1,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                          (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                                          (rule "eqSymm" (formula "38") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,1,1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1"))
                                          (rule "eqSymm" (formula "38") (term "1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,1,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,1,0,1,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                          (rule "mul_literals" (formula "38") (term "0,1,1,0,1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,0"))
                                          (rule "eqSymm" (formula "38") (term "0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,1,0,0,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,1,0,0,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "38") (term "0,0,0,1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1"))
                                          (rule "eqSymm" (formula "38") (term "1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,1,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,1,0,1,1,0,1"))
                                          (rule "mul_literals" (formula "38") (term "0,1,1,0,1,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,1,1,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,0"))
                                          (rule "eqSymm" (formula "38") (term "0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1"))
                                          (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1"))
                                          (rule "commute_or_2" (formula "11") (term "0"))
                                          (rule "commute_or_2" (formula "12") (term "0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "commute_or_2" (formula "14") (term "0"))
                                          (rule "ifthenelse_split" (formula "23") (term "1"))
                                          (branch "result_0.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch "self.chosen.length ≥ 1 TRUE"
                                                (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "4"))
                                                (rule "leq_literals" (formula "17") (term "0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "ifthenelse_split" (formula "23") (term "0"))
                                                (branch "self.concatenated.length ≥ 1 TRUE"
                                                   (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0,0") (ifseqformula "23"))
                                                   (rule "nnf_imp2or" (formula "38") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                                   (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                                   (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                                                   (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
                                                   (rule "andLeft" (formula "5"))
                                                   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                                                   (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
                                                   (builtin "One Step Simplification" (formula "6"))
                                                   (rule "true_left" (formula "6"))
                                                   (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "self.encrypted.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "39") (term "0,0,0,1,0") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0,1") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "39") (term "0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "39") (term "1,1,1,1,0,1") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "39") (term "0,1,1,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "39"))
                                                      (rule "allRight" (formula "39") (inst "sk=iv_37"))
                                                      (rule "orRight" (formula "39"))
                                                      (rule "orRight" (formula "39"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "eqSymm" (formula "40"))
                                                      (rule "inEqSimp_leqRight" (formula "38"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "40") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "39"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0"))
                                                      (rule "eqSymm" (formula "40"))
                                                      (rule "polySimp_addComm1" (formula "40") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "40"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0"))
                                                      (rule "eqSymm" (formula "40"))
                                                      (rule "polySimp_mulComm0" (formula "40") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "40") (term "1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,1"))
                                                      (rule "mul_literals" (formula "40") (term "0,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "40") (term "1,1,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "40") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
                                                      (rule "mul_literals" (formula "40") (term "0,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
                                                      (rule "eqSymm" (formula "40"))
                                                      (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=arr_199"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "eqSymm" (formula "41"))
                                                      (rule "commute_or_2" (formula "29") (term "0"))
                                                      (rule "commute_or_2" (formula "28") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0"))
                                                      (rule "commute_or" (formula "14") (term "0,0"))
                                                      (rule "commute_or" (formula "15") (term "0,0"))
                                                      (rule "commute_or" (formula "16") (term "0,0"))
                                                      (rule "commute_or" (formula "17") (term "0,0"))
                                                      (rule "commute_or" (formula "27") (term "0,0"))
                                                      (rule "commute_or" (formula "29") (term "0,0"))
                                                      (rule "commute_or" (formula "28") (term "0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "9"))
                                                      (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "38")))
                                                      (rule "true_left" (formula "18"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "9"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "10"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "11"))
                                                      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "39"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "ifthenelse_to_or_right" (formula "30") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "30") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "30") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "30") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0"))
                                                      (rule "commute_or" (formula "30") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,1,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,1,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,1,1,0"))
                                                      (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0,1,1,0"))
                                                      (rule "add_zero_right" (formula "30") (term "1,1,0,0,1,1,0"))
                                                      (rule "qeq_literals" (formula "30") (term "1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "shift_paren_or" (formula "30") (term "1,1,0"))
                                                      (rule "commute_or" (formula "30") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "30") (term "1,1,0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "30") (term "1,1,1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,1,1,0"))
                                                      (rule "add_literals" (formula "30") (term "1,0,1,1,1,0"))
                                                      (rule "times_zero_1" (formula "30") (term "0,1,1,1,0"))
                                                      (rule "leq_literals" (formula "30") (term "1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "shift_paren_or" (formula "30") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "ifthenelse_to_or_left" (formula "30") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "30") (term "1,1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,1,0"))
                                                      (rule "commute_or" (formula "30") (term "1,1,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                                                      (rule "cnf_rightDist" (formula "30") (term "0"))
                                                      (rule "distr_forallAnd" (formula "30"))
                                                      (rule "andLeft" (formula "30"))
                                                      (rule "commute_or" (formula "31") (term "0"))
                                                      (rule "shift_paren_or" (formula "30") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "commute_or" (formula "31") (term "1,1,0"))
                                                      (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or" (formula "30") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "cnf_rightDist" (formula "31") (term "0"))
                                                      (rule "distr_forallAnd" (formula "31"))
                                                      (rule "andLeft" (formula "31"))
                                                      (rule "commute_or_2" (formula "31") (term "0"))
                                                      (rule "shift_paren_or" (formula "32") (term "0"))
                                                      (rule "commute_or_2" (formula "32") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0"))
                                                      (rule "add_literals" (formula "32") (term "1,0,1,0"))
                                                      (rule "times_zero_1" (formula "32") (term "0,1,0"))
                                                      (rule "leq_literals" (formula "32") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "shift_paren_or" (formula "31") (term "0,0"))
                                                      (rule "commute_or" (formula "31") (term "0,0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                                                      (rule "add_literals" (formula "31") (term "1,1,0,0"))
                                                      (rule "qeq_literals" (formula "31") (term "1,0,0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "ifthenelse_split" (formula "4") (term "0"))
                                                      (branch "self.encrypted[iv_35].length ≥ 1 TRUE"
                                                         (rule "replace_known_left" (formula "45") (term "0,1") (ifseqformula "5"))
                                                         (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "5")))
                                                         (rule "arrayLengthNotNegative" (formula "30") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "29"))
                                                         (rule "leq_literals" (formula "30") (term "0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "arrayLengthIsAShort" (formula "30") (term "1"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "arrayLengthIsAShort" (formula "30") (term "0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "arrayLengthNotNegative" (formula "30") (term "0"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                         (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "29"))
                                                         (rule "leq_literals" (formula "30") (term "0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "ifthenelse_split" (formula "3") (term "0"))
                                                         (branch " ¬self.encrypted[iv_35] = null ∧ ¬self.encrypted[iv_35].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "3"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "36"))
                                                            (rule "close" (formula "35") (ifseqformula "12"))
                                                         )
                                                         (branch " ¬self.encrypted[iv_35] = null ∧ ¬self.encrypted[iv_35].<created> = TRUE FALSE"
                                                            (rule "close" (formula "46") (ifseqformula "3"))
                                                         )
                                                      )
                                                      (branch "self.encrypted[iv_35].length ≥ 1 FALSE"
                                                         (rule "inEqSimp_geqRight" (formula "34"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "5"))
                                                         (rule "times_zero_2" (formula "5") (term "1,0"))
                                                         (rule "add_zero_right" (formula "5") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                         (rule "mul_literals" (formula "5") (term "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                         (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                   (branch "self.encrypted.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "35"))
                                                      (rule "close" (formula "28") (ifseqformula "6"))
                                                   )
                                                )
                                                (branch "self.concatenated.length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "23"))
                                                   (rule "inEqSimp_geqRight" (formula "28"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                                   (rule "qeq_literals" (formula "23"))
                                                   (rule "closeFalse" (formula "23"))
                                                )
                                             )
                                             (branch "self.chosen.length ≥ 1 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "29"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "5"))
                                                (rule "times_zero_2" (formula "5") (term "1,0"))
                                                (rule "add_zero_right" (formula "5") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                (rule "mul_literals" (formula "5") (term "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "4") (term "0"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "closeFalse" (formula "4"))
                                             )
                                          )
                                          (branch "result_0.length ≥ 1 FALSE"
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "replace_known_right" (formula "24") (term "0,1,1,0") (ifseqformula "28"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "inEqSimp_geqRight" (formula "28"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0"))
                                             (rule "ifthenelse_split" (formula "5") (term "0"))
                                             (branch "self.chosen.length ≥ 1 TRUE"
                                                (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "5"))
                                                (rule "leq_literals" (formula "18") (term "0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "nnf_imp2or" (formula "38") (term "0,1"))
                                                (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                                (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                                                (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                                (rule "applyEq" (formula "7") (term "0,0,1,0,0,1,0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "8"))
                                                (builtin "One Step Simplification" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "39") (term "0,0,0,1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "39") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "39") (term "0,1,1,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "39"))
                                                   (rule "allRight" (formula "39") (inst "sk=iv_36"))
                                                   (rule "orRight" (formula "39"))
                                                   (rule "orRight" (formula "39"))
                                                   (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,1") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "40") (term "0,0,0,1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "40"))
                                                   (rule "inEqSimp_leqRight" (formula "38"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "replace_known_left" (formula "40") (term "0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "1")))
                                                   (rule "inEqSimp_geqRight" (formula "39"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "40") (term "0,1"))
                                                   (rule "polySimp_addComm1" (formula "40") (term "0,0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,1"))
                                                   (rule "polySimp_mulComm0" (formula "40") (term "1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "40") (term "1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,1"))
                                                   (rule "mul_literals" (formula "40") (term "0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "40") (term "1,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "40") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "40") (term "0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=arr_198"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "eqSymm" (formula "41"))
                                                   (rule "commute_or_2" (formula "29") (term "0"))
                                                   (rule "commute_or_2" (formula "28") (term "0"))
                                                   (rule "commute_or_2" (formula "30") (term "0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "commute_or" (formula "17") (term "0,0"))
                                                   (rule "commute_or" (formula "18") (term "0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                                   (rule "add_zero_right" (formula "27") (term "1,1,0"))
                                                   (rule "qeq_literals" (formula "27") (term "1,0"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "true_left" (formula "27"))
                                                   (rule "commute_or" (formula "28") (term "0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "10"))
                                                   (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "6"))
                                                   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "37")))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "1,0") (ifseqformula "10"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "11"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "12"))
                                                   (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "38"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.encrypted[iv_35].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "5")))
                                                      (rule "arrayLengthNotNegative" (formula "30") (term "0,1"))
                                                      (rule "arrayLengthIsAShort" (formula "31") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                      (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "8"))
                                                      (rule "applyEq" (formula "9") (term "0") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "cut_direct" (formula "31") (term "0"))
                                                      (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "true_left" (formula "32"))
                                                         (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "31"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                                         (rule "qeq_literals" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                                         (rule "leq_literals" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "ifthenelse_split" (formula "3") (term "0"))
                                                         (branch " ¬self.encrypted[iv_35] = null ∧ ¬self.encrypted[iv_35].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "3"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "35"))
                                                            (rule "close" (formula "34") (ifseqformula "13"))
                                                         )
                                                         (branch " ¬self.encrypted[iv_35] = null ∧ ¬self.encrypted[iv_35].<created> = TRUE FALSE"
                                                            (rule "close" (formula "45") (ifseqformula "3"))
                                                         )
                                                      )
                                                      (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "inEqSimp_leqRight" (formula "35"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "1") (term "0,0"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                         (rule "qeq_literals" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                                         (rule "add_zero_right" (formula "1") (term "0"))
                                                         (rule "qeq_literals" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                   )
                                                   (branch "self.encrypted[iv_35].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "33"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "5"))
                                                      (rule "times_zero_2" (formula "5") (term "1,0"))
                                                      (rule "add_zero_right" (formula "5") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "35"))
                                                   (rule "close" (formula "28") (ifseqformula "7"))
                                                )
                                             )
                                             (branch "self.chosen.length ≥ 1 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "29"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "6"))
                                                (rule "mul_literals" (formula "6") (term "1,0"))
                                                (rule "add_zero_right" (formula "6") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                (rule "mul_literals" (formula "6") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "6") (term "0"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "closeFalse" (formula "6"))
                                             )
                                          )
                                       )
                                       (branch "self.chosen.length ≥ 1 + iv_35 FALSE"
                                          (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "37")))
                                          (rule "closeTrue" (formula "38"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: array2seq2d(heapAfter_checkAndGetBallots, self.sorted@heapAfter_checkAndGetBallots) = array2seq2d(heap, self.sorted) FALSE"
                              (rule "array2seq2dDef" (formula "20") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "20") (term "1") (inst "u=u") (userinteraction))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "20") (inst "iv=iv") (userinteraction))
                              (rule "andRight" (formula "20") (userinteraction))
                              (branch "Case 1"
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "15"))
                                 (rule "eqSymm" (formula "7") (term "1,0"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "eqSymm" (formula "9"))
                                 (rule "eqSymm" (formula "10"))
                                 (rule "eqSymm" (formula "18"))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "lenOfSeqDef" (formula "20") (term "0"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "polySimp_elimSub" (formula "20") (term "1,1"))
                                 (rule "times_zero_2" (formula "20") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "20") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "20") (term "0"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "polySimp_elimSub" (formula "20") (term "1,1"))
                                 (rule "times_zero_2" (formula "20") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "20") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                 (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                                 (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "20") (term "0,1,0,0,1") (ifseqformula "12"))
                                 (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "12"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "polySimp_elimOne" (formula "20") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "polySimp_elimOne" (formula "20") (term "0,0,1"))
                                 (rule "array2seqDef" (formula "7") (term "1,0,0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "7") (term "1,0"))
                                 (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "9"))
                                 (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                                 (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "9"))
                                 (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "1") (ifseqformula "23"))
                                 (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "10"))
                                 (rule "array2seqDef" (formula "18") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                                 (rule "eqSeqDef" (formula "18") (inst "iv=iv"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "lenOfSeqDef" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "19") (term "1,1,1,0,0"))
                                 (rule "times_zero_2" (formula "19") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "19") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "19") (term "1,1,0"))
                                 (rule "castDel" (formula "19") (term "1,1,1,0"))
                                 (rule "castDel" (formula "19") (term "2,1,1,0"))
                                 (rule "add_zero_right" (formula "19") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "19") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "19") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "19") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "18") (term "1"))
                                 (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                                 (rule "times_zero_2" (formula "18") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "18") (term "1,1"))
                                 (rule "getOfSeqDef" (formula "19") (term "0,1,0"))
                                 (rule "castDel" (formula "19") (term "2,0,1,0"))
                                 (rule "castDel" (formula "19") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "19") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "19") (term "1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,0"))
                                 (rule "lenOfSeqDef" (formula "18") (term "0"))
                                 (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                 (rule "times_zero_2" (formula "18") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "18") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "19") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
                                 (rule "apply_eq_monomials" (formula "19") (term "1,0,0,1,0,0") (ifseqformula "18"))
                                 (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "19") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "18") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "0,0,1,1,1,0,0"))
                                 (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "pullOutSelect" (formula "24") (term "1,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_28"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "3")))
                                 (rule "applyEqReverse" (formula "25") (term "1,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "24") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_27"))
                                 (rule "applyEq" (formula "20") (term "0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "3")))
                                 (rule "applyEqReverse" (formula "25") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "20") (term "0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "20") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "closeTrue" (formula "19"))
                              )
                              (branch "Case 2"
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "15"))
                                 (rule "allRight" (formula "20") (inst "sk=iv_40"))
                                 (rule "impRight" (formula "20"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "eqSymm" (formula "9") (term "1,0"))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "getOfSeqDef" (formula "22") (term "1"))
                                 (rule "castDel" (formula "22") (term "2,1"))
                                 (rule "castDel" (formula "22") (term "1,1"))
                                 (rule "add_zero_right" (formula "22") (term "0,2,1,1,1"))
                                 (rule "replace_known_left" (formula "22") (term "0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,0,1"))
                                 (rule "times_zero_2" (formula "22") (term "1,1,0,1"))
                                 (rule "add_zero_right" (formula "22") (term "1,0,1"))
                                 (rule "lenOfSeqDef" (formula "2") (term "1"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "getOfSeqDef" (formula "22") (term "0"))
                                 (rule "castDel" (formula "22") (term "1,0"))
                                 (rule "castDel" (formula "22") (term "2,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,2,1,1,0"))
                                 (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,0,0"))
                                 (rule "times_zero_2" (formula "22") (term "1,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "22") (term "0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                                 (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "22") (term "0,1,0,0,1") (ifseqformula "14"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "polySimp_elimOne" (formula "22") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "polySimp_elimOne" (formula "22") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                 (rule "array2seqDef" (formula "20") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "20") (term "1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "9") (term "1,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "9") (term "1,0"))
                                 (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "array2seqDef" (formula "12") (term "0,0") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "12") (term "2,0,0") (ifseqformula "3") (ifseqformula "25"))
                                 (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "array2seqDef" (formula "22") (term "1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "22") (term "1,1") (inst "u=u"))
                                 (rule "eqSeqDef" (formula "20") (inst "iv=iv"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "lenOfSeqDef" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "21") (term "0,1,0"))
                                 (rule "castDel" (formula "21") (term "2,0,1,0"))
                                 (rule "castDel" (formula "21") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "21") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "20") (term "1"))
                                 (rule "polySimp_elimSub" (formula "20") (term "1,1"))
                                 (rule "mul_literals" (formula "20") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "20") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "20") (term "0"))
                                 (rule "polySimp_elimSub" (formula "20") (term "1,0"))
                                 (rule "times_zero_2" (formula "20") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "1,0"))
                                 (rule "getOfSeqDef" (formula "21") (term "0,1,0"))
                                 (rule "castDel" (formula "21") (term "2,0,1,0"))
                                 (rule "castDel" (formula "21") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "21") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "21") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "21") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,1,0"))
                                 (rule "apply_eq_monomials" (formula "21") (term "1,0,0,1,0,0") (ifseqformula "20"))
                                 (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "20") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "21") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "21") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "9") (term "0,0,1,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "9") (term "1,0,1,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "12") (term "0,1,1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "12") (term "1,1,1") (inst "u=u"))
                                 (rule "applyEq" (formula "12") (term "1,1,1") (ifseqformula "11"))
                                 (rule "pullOutSelect" (formula "28") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_26"))
                                 (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "24") (term "1,1,2,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "24") (term "1,0,1,1,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
                                 (rule "applyEqReverse" (formula "29") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "24") (term "1,1,2,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "24") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "24") (term "1,0,1,1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "14"))
                                 (rule "pullOutSelect" (formula "28") (term "1,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_27"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
                                 (rule "applyEqReverse" (formula "29") (term "1,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "pullOutSelect" (formula "18") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_21"))
                                 (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "18"))
                                 (rule "applyEq" (formula "20") (term "1,1,0,1,0") (ifseqformula "18"))
                                 (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "18"))
                                 (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "15"))
                                 (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
                                 (rule "applyEqReverse" (formula "19") (term "0,1,0") (ifseqformula "18"))
                                 (rule "applyEqReverse" (formula "19") (term "0,0,0,0") (ifseqformula "18"))
                                 (rule "applyEqReverse" (formula "20") (term "1,1,0,1,0") (ifseqformula "18"))
                                 (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "18"))
                                 (rule "hideAuxiliaryEq" (formula "18"))
                                 (rule "pullOutSelect" (formula "21") (term "1,2,1,0") (inst "selectSK=arr_202"))
                                 (rule "applyEq" (formula "22") (term "0,1,1,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_imp2or" (formula "10") (term "0"))
                                 (rule "nnf_imp2or" (formula "20") (term "0"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                 (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                 (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0"))
                                 (rule "nnf_imp2or" (formula "10") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "16") (ifseqformula "6"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "29"))
                                 (rule "nonNull" (formula "18") (inst "i=i"))
                                 (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "30")))
                                 (rule "greater_literals" (formula "18") (term "0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "30"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "17") (inst "i=i"))
                                 (rule "greater_literals" (formula "17") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "31")))
                                 (rule "sub_literals" (formula "17") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "31"))
                                 (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                 (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "16") (inst "i=i"))
                                 (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "32")))
                                 (rule "greater_literals" (formula "16") (term "0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "32"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "18") (term "0"))
                                 (rule "nnf_imp2or" (formula "17") (term "0"))
                                 (rule "nnf_imp2or" (formula "16") (term "0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "6"))
                                 (rule "replaceKnownSelect_taclet11100000201_2" (formula "22") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100000201_3" (formula "22") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet11100000201_0" (formula "22") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100000201_1" (formula "22") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet11100000201_4" (formula "22") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100000201_5" (formula "22") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "nonNull" (formula "24") (inst "i=i"))
                                 (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "greater_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "23") (inst "i=i"))
                                 (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "36")))
                                 (rule "greater_literals" (formula "23") (term "0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                 (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "22") (inst "i=i"))
                                 (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "37")))
                                 (rule "greater_literals" (formula "22") (term "0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_20"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_24"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_24"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_24"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_20"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_25"))
                                 (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "24"))
                                 (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "38")) (ifInst ""  (formula "5")))
                                 (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                                 (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "24"))
                                 (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
                                 (rule "hideAuxiliaryEq" (formula "24"))
                                 (rule "nnf_imp2or" (formula "23") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "nnf_imp2or" (formula "22") (term "0"))
                                 (rule "nnf_imp2or" (formula "24") (term "0"))
                                 (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "9") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                 (rule "commute_or_2" (formula "10") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                                 (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                                 (rule "arrayLengthIsAShort" (formula "14") (term "1"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "arrayLengthNotNegative" (formula "14") (term "1"))
                                 (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "cut_direct" (formula "20") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "ifthenelse_split" (formula "35") (term "1"))
                                    (branch "self.chosen.length ≥ 1 + iv_40 TRUE"
                                       (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "36") (inst "iv=iv"))
                                       (rule "lenOfSeqDef" (formula "36") (term "0,0"))
                                       (rule "eqSymm" (formula "36") (term "0"))
                                       (rule "polySimp_elimSub" (formula "36") (term "1,1,0"))
                                       (rule "times_zero_2" (formula "36") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "36") (term "1,1,0"))
                                       (rule "getOfSeqDef" (formula "36") (term "0,1,0,1"))
                                       (rule "castDel" (formula "36") (term "2,0,1,0,1"))
                                       (rule "castDel" (formula "36") (term "1,0,1,0,1"))
                                       (rule "add_zero_right" (formula "36") (term "0,2,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "36") (term "1,0,1"))
                                       (rule "polySimp_elimSub" (formula "36") (term "1,1,0,1,1,0,1"))
                                       (rule "times_zero_2" (formula "36") (term "1,1,1,0,1,1,0,1"))
                                       (rule "add_zero_right" (formula "36") (term "1,1,0,1,1,0,1"))
                                       (rule "lenOfSeqDef" (formula "36") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimSub" (formula "36") (term "1,1,1,0,0,1"))
                                       (rule "mul_literals" (formula "36") (term "1,1,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "36") (term "1,1,1,0,0,1"))
                                       (rule "lenOfSeqDef" (formula "36") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "36") (term "1,0,0"))
                                       (rule "times_zero_2" (formula "36") (term "1,1,0,0"))
                                       (rule "add_zero_right" (formula "36") (term "1,0,0"))
                                       (rule "getOfSeqDef" (formula "36") (term "0,1,0,1"))
                                       (rule "castDel" (formula "36") (term "2,0,1,0,1"))
                                       (rule "castDel" (formula "36") (term "1,0,1,0,1"))
                                       (rule "add_zero_right" (formula "36") (term "0,2,1,0,1,0,1"))
                                       (rule "polySimp_elimSub" (formula "36") (term "1,1,0,0,1,0,1"))
                                       (rule "mul_literals" (formula "36") (term "1,1,1,0,0,1,0,1"))
                                       (rule "add_zero_right" (formula "36") (term "1,1,0,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "36") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "36") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,1,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "36") (term "0,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "36") (term "0,0,1,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "36") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "36") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,1,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "36") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,1,1,0,1"))
                                       (rule "mul_literals" (formula "36") (term "0,1,1,0,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,1,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "36") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1"))
                                       (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1"))
                                       (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,1,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0,0,1,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "36") (term "0,0,1,1,1,0,0,1"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "ifthenelse_split" (formula "22") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "self.chosen.length ≥ 1 TRUE"
                                             (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "4"))
                                             (rule "leq_literals" (formula "16") (term "0"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "nnf_imp2or" (formula "36") (term "0,1"))
                                             (rule "ifthenelse_split" (formula "22") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0,0") (ifseqformula "23"))
                                                (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                                (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
                                                (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "36") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "self.sorted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "37") (term "0,1,1,0") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "37") (term "1,1,1,1,0,1") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,0,1") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "37") (term "0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "37") (term "0,0,0,1,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "allRight" (formula "37") (inst "sk=iv_44"))
                                                   (rule "orRight" (formula "37"))
                                                   (rule "orRight" (formula "37"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "eqSymm" (formula "38"))
                                                   (rule "inEqSimp_geqRight" (formula "37"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "37"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "replace_known_left" (formula "38") (term "0,0,1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "1")))
                                                   (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0"))
                                                   (rule "eqSymm" (formula "38"))
                                                   (rule "polySimp_addComm1" (formula "38") (term "0,0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "38"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,0"))
                                                   (rule "eqSymm" (formula "38"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,1"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                                                   (rule "eqSymm" (formula "38"))
                                                   (rule "pullOutSelect" (formula "38") (term "1,0") (inst "selectSK=arr_206"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "eqSymm" (formula "39"))
                                                   (rule "commute_or_2" (formula "28") (term "0"))
                                                   (rule "commute_or_2" (formula "27") (term "0"))
                                                   (rule "commute_or_2" (formula "29") (term "0"))
                                                   (rule "commute_or" (formula "13") (term "0,0"))
                                                   (rule "commute_or" (formula "14") (term "0,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0"))
                                                   (rule "commute_or" (formula "28") (term "0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0"))
                                                   (rule "ifthenelse_to_or_right" (formula "26") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0"))
                                                   (rule "commute_or_2" (formula "26") (term "0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                   (rule "commute_or" (formula "26") (term "1,1,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0,1,1,0"))
                                                   (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0,0,1,1,0"))
                                                   (rule "add_literals" (formula "26") (term "1,1,0,0,1,1,0"))
                                                   (rule "qeq_literals" (formula "26") (term "1,0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "shift_paren_or" (formula "26") (term "1,1,0"))
                                                   (rule "commute_or" (formula "26") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "26") (term "1,1,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "26") (term "1,1,1,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,1,1,0"))
                                                   (rule "add_literals" (formula "26") (term "1,0,1,1,1,0"))
                                                   (rule "times_zero_1" (formula "26") (term "0,1,1,1,0"))
                                                   (rule "leq_literals" (formula "26") (term "1,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "shift_paren_or" (formula "26") (term "0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,0") (ifseqformula "8"))
                                                   (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "37")))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1") (ifseqformula "8"))
                                                   (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "36"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "8"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1") (ifseqformula "9"))
                                                   (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "37"))
                                                   (builtin "One Step Simplification" (formula "20"))
                                                   (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0"))
                                                   (rule "commute_or_2" (formula "29") (term "0"))
                                                   (rule "commute_or" (formula "29") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                                   (rule "cnf_rightDist" (formula "29") (term "0"))
                                                   (rule "distr_forallAnd" (formula "29"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "commute_or" (formula "30") (term "0"))
                                                   (rule "shift_paren_or" (formula "29") (term "0"))
                                                   (rule "commute_or_2" (formula "29") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "commute_or" (formula "30") (term "1,1,0"))
                                                   (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "cnf_rightDist" (formula "30") (term "0"))
                                                   (rule "distr_forallAnd" (formula "30"))
                                                   (rule "andLeft" (formula "30"))
                                                   (rule "commute_or_2" (formula "30") (term "0"))
                                                   (rule "shift_paren_or" (formula "31") (term "0"))
                                                   (rule "commute_or_2" (formula "31") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                                   (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                                   (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                                   (rule "leq_literals" (formula "31") (term "1,0"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                   (rule "commute_or" (formula "30") (term "0,0,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                                   (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.sorted[iv_40].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "5")))
                                                      (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                                      (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "29"))
                                                      (rule "leq_literals" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "true_left" (formula "28"))
                                                      (rule "arrayLengthIsAShort" (formula "29") (term "1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "true_left" (formula "29"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch " ¬self.sorted[iv_40] = null ∧ ¬self.sorted[iv_40].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "34"))
                                                         (rule "close" (formula "35") (ifseqformula "10"))
                                                      )
                                                      (branch " ¬self.sorted[iv_40] = null ∧ ¬self.sorted[iv_40].<created> = TRUE FALSE"
                                                         (rule "close" (formula "44") (ifseqformula "2"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_40].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "33"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1,0"))
                                                      (rule "add_zero_right" (formula "5") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                                      (rule "qeq_literals" (formula "4") (term "0"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "closeFalse" (formula "4"))
                                                   )
                                                )
                                                (branch "self.sorted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "27") (ifseqformula "34"))
                                                   (rule "close" (formula "27") (ifseqformula "5"))
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "22"))
                                                (rule "inEqSimp_geqRight" (formula "27"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                                (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                                (rule "qeq_literals" (formula "22"))
                                                (rule "closeFalse" (formula "22"))
                                             )
                                          )
                                          (branch "self.chosen.length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "28"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "5"))
                                             (rule "times_zero_2" (formula "5") (term "1,0"))
                                             (rule "add_zero_right" (formula "5") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "4") (term "0"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "replace_known_right" (formula "23") (term "0,1,1,0") (ifseqformula "27"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_geqRight" (formula "27"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0"))
                                          (rule "ifthenelse_split" (formula "5") (term "0"))
                                          (branch "self.chosen.length ≥ 1 TRUE"
                                             (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "17") (term "0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "nnf_imp2or" (formula "36") (term "0,1"))
                                             (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
                                             (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,1"))
                                             (rule "add_literals" (formula "36") (term "0,0,0,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
                                             (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
                                             (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
                                             (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
                                             (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
                                             (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.sorted.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "37") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "37") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "37") (term "0,1,1,0") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "37") (term "0,0,0,1,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "37"))
                                                (rule "allRight" (formula "37") (inst "sk=iv_43"))
                                                (rule "orRight" (formula "37"))
                                                (rule "orRight" (formula "37"))
                                                (rule "applyEqReverse" (formula "39") (term "1,1,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,1") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "eqSymm" (formula "38"))
                                                (rule "inEqSimp_geqRight" (formula "37"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "37"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "replace_known_left" (formula "38") (term "0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_homoInEq0" (formula "38") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,1"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                                                (rule "pullOutSelect" (formula "38") (term "1,0") (inst "selectSK=arr_205"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "39"))
                                                (rule "commute_or_2" (formula "28") (term "0"))
                                                (rule "commute_or_2" (formula "27") (term "0"))
                                                (rule "commute_or_2" (formula "29") (term "0"))
                                                (rule "commute_or" (formula "14") (term "0,0"))
                                                (rule "commute_or" (formula "15") (term "0,0"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or" (formula "17") (term "0,0"))
                                                (rule "commute_or" (formula "26") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                                                (rule "add_literals" (formula "26") (term "1,1,0"))
                                                (rule "qeq_literals" (formula "26") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "commute_or" (formula "27") (term "0,0"))
                                                (rule "commute_or" (formula "26") (term "0,0"))
                                                (rule "commute_or" (formula "28") (term "0,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "36"))
                                                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "6")))
                                                (rule "true_left" (formula "20"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "35"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "36"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.sorted[iv_40].length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "42") (term "0,1") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "5")))
                                                   (rule "arrayLengthIsAShort" (formula "29") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "arrayLengthNotNegative" (formula "29") (term "0,1"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch " ¬self.sorted[iv_40] = null ∧ ¬self.sorted[iv_40].<created> = TRUE TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "notLeft" (formula "3"))
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "34"))
                                                      (rule "close" (formula "35") (ifseqformula "11"))
                                                   )
                                                   (branch " ¬self.sorted[iv_40] = null ∧ ¬self.sorted[iv_40].<created> = TRUE FALSE"
                                                      (rule "close" (formula "44") (ifseqformula "2"))
                                                   )
                                                )
                                                (branch "self.sorted[iv_40].length ≥ 1 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "32"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "5"))
                                                   (rule "times_zero_2" (formula "5") (term "1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                   (rule "mul_literals" (formula "5") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                             (branch "self.sorted.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "27") (ifseqformula "34"))
                                                (rule "close" (formula "27") (ifseqformula "6"))
                                             )
                                          )
                                          (branch "self.chosen.length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "28"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "6"))
                                             (rule "times_zero_2" (formula "6") (term "1,0"))
                                             (rule "add_zero_right" (formula "6") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                             (rule "mul_literals" (formula "6") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "closeFalse" (formula "5"))
                                          )
                                       )
                                    )
                                    (branch "self.chosen.length ≥ 1 + iv_40 FALSE"
                                       (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "35")))
                                       (rule "closeTrue" (formula "36"))
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ifthenelse_split" (formula "36") (term "1"))
                                    (branch "self.chosen.length ≥ 1 + iv_40 TRUE"
                                       (rule "replace_known_left" (formula "37") (term "0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "37") (inst "iv=iv"))
                                       (rule "lenOfSeqDef" (formula "37") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimSub" (formula "37") (term "1,1,1,0,0,1"))
                                       (rule "times_zero_2" (formula "37") (term "1,1,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "1,1,1,0,0,1"))
                                       (rule "lenOfSeqDef" (formula "37") (term "0,0"))
                                       (rule "eqSymm" (formula "37") (term "0"))
                                       (rule "polySimp_elimSub" (formula "37") (term "1,1,0"))
                                       (rule "times_zero_2" (formula "37") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "37") (term "1,1,0"))
                                       (rule "getOfSeqDef" (formula "37") (term "1,1,0,1"))
                                       (rule "castDel" (formula "37") (term "1,1,1,0,1"))
                                       (rule "castDel" (formula "37") (term "2,1,1,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "0,2,1,1,1,0,1"))
                                       (rule "polySimp_elimSub" (formula "37") (term "1,1,0,1,1,0,1"))
                                       (rule "times_zero_2" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "1,1,0,1,1,0,1"))
                                       (rule "getOfSeqDef" (formula "37") (term "0,1,0,1"))
                                       (rule "castDel" (formula "37") (term "2,0,1,0,1"))
                                       (rule "castDel" (formula "37") (term "1,0,1,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "0,2,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "37") (term "1,0,1"))
                                       (rule "polySimp_elimSub" (formula "37") (term "1,1,0,1,1,0,1"))
                                       (rule "times_zero_2" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "1,1,0,1,1,0,1"))
                                       (rule "lenOfSeqDef" (formula "37") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "37") (term "1,0,0"))
                                       (rule "times_zero_2" (formula "37") (term "1,1,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,1,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "37") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,1,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "37") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,1,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,1,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1"))
                                       (rule "mul_literals" (formula "37") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "37") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,1,0,1,1,0,1"))
                                       (rule "mul_literals" (formula "37") (term "0,1,1,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,1,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "0,0,1,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "37") (term "0,0,1,1,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "37") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,1,0,1,1,0,1"))
                                       (rule "mul_literals" (formula "37") (term "0,1,1,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,1,1,0,1"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "ifthenelse_split" (formula "22") (term "1"))
                                       (branch "result_0.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "self.chosen.length ≥ 1 TRUE"
                                             (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "4"))
                                             (rule "leq_literals" (formula "16") (term "0"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "nnf_imp2or" (formula "37") (term "0,1"))
                                             (rule "ifthenelse_split" (formula "22") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                                (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0,0") (ifseqformula "22"))
                                                (rule "nnf_notAnd" (formula "37") (term "0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "37") (term "1,0,0,0,1"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "self.sorted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "38") (term "0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "38") (term "0,1,1,0") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "38") (term "1,1,1,1,0,1") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "38") (term "0,0,0,1,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "38"))
                                                   (rule "allRight" (formula "38") (inst "sk=iv_42"))
                                                   (rule "orRight" (formula "38"))
                                                   (rule "orRight" (formula "38"))
                                                   (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,1") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "39") (term "0,1,1") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "eqSymm" (formula "39"))
                                                   (rule "inEqSimp_leqRight" (formula "37"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "replace_known_left" (formula "39") (term "0,0,1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                                                   (rule "inEqSimp_geqRight" (formula "38"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                                                   (rule "eqSymm" (formula "39"))
                                                   (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "39"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                                                   (rule "eqSymm" (formula "39"))
                                                   (rule "polySimp_mulComm0" (formula "39") (term "1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "39") (term "1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1"))
                                                   (rule "mul_literals" (formula "39") (term "0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "39") (term "1,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "39") (term "0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                                                   (rule "eqSymm" (formula "39"))
                                                   (rule "pullOutSelect" (formula "39") (term "1,0") (inst "selectSK=arr_204"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "eqSymm" (formula "40"))
                                                   (rule "commute_or_2" (formula "28") (term "0"))
                                                   (rule "commute_or_2" (formula "27") (term "0"))
                                                   (rule "commute_or_2" (formula "29") (term "0"))
                                                   (rule "commute_or" (formula "13") (term "0,0"))
                                                   (rule "commute_or" (formula "14") (term "0,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0"))
                                                   (rule "commute_or" (formula "28") (term "0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0"))
                                                   (rule "ifthenelse_to_or_right" (formula "26") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0"))
                                                   (rule "commute_or_2" (formula "26") (term "0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                   (rule "commute_or" (formula "26") (term "1,1,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0,1,1,0"))
                                                   (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0,0,1,1,0"))
                                                   (rule "add_literals" (formula "26") (term "1,1,0,0,1,1,0"))
                                                   (rule "qeq_literals" (formula "26") (term "1,0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "shift_paren_or" (formula "26") (term "1,1,0"))
                                                   (rule "commute_or" (formula "26") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "26") (term "1,1,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "26") (term "1,1,1,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,1,1,0"))
                                                   (rule "add_literals" (formula "26") (term "1,0,1,1,1,0"))
                                                   (rule "times_zero_1" (formula "26") (term "0,1,1,1,0"))
                                                   (rule "leq_literals" (formula "26") (term "1,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "shift_paren_or" (formula "26") (term "0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1") (ifseqformula "8"))
                                                   (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "37"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "8"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "9"))
                                                   (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "6"))
                                                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "40")))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1") (ifseqformula "9"))
                                                   (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "38"))
                                                   (builtin "One Step Simplification" (formula "20"))
                                                   (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0"))
                                                   (rule "commute_or_2" (formula "29") (term "0"))
                                                   (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                   (rule "commute_or" (formula "29") (term "1,1,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                                   (rule "cnf_rightDist" (formula "29") (term "0"))
                                                   (rule "distr_forallAnd" (formula "29"))
                                                   (rule "andLeft" (formula "29"))
                                                   (rule "commute_or" (formula "30") (term "0"))
                                                   (rule "shift_paren_or" (formula "29") (term "0"))
                                                   (rule "commute_or_2" (formula "29") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "commute_or" (formula "30") (term "1,1,0"))
                                                   (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "cnf_rightDist" (formula "30") (term "0"))
                                                   (rule "distr_forallAnd" (formula "30"))
                                                   (rule "andLeft" (formula "30"))
                                                   (rule "commute_or_2" (formula "30") (term "0"))
                                                   (rule "shift_paren_or" (formula "31") (term "0"))
                                                   (rule "commute_or_2" (formula "31") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                                   (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                                   (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                                   (rule "leq_literals" (formula "31") (term "1,0"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                   (rule "commute_or" (formula "30") (term "0,0,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                                   (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.sorted[iv_40].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "4")))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch " ¬self.sorted[iv_40] = null ∧ ¬self.sorted[iv_40].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "34"))
                                                         (rule "close" (formula "35") (ifseqformula "10"))
                                                      )
                                                      (branch " ¬self.sorted[iv_40] = null ∧ ¬self.sorted[iv_40].<created> = TRUE FALSE"
                                                         (rule "close" (formula "45") (ifseqformula "2"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_40].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "33"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "4"))
                                                      (rule "times_zero_2" (formula "4") (term "1,0"))
                                                      (rule "add_zero_right" (formula "4") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                      (rule "mul_literals" (formula "4") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "5"))
                                                      (rule "qeq_literals" (formula "4") (term "0"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "closeFalse" (formula "4"))
                                                   )
                                                )
                                                (branch "self.sorted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "27") (ifseqformula "35"))
                                                   (rule "close" (formula "27") (ifseqformula "5"))
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "22"))
                                                (rule "inEqSimp_geqRight" (formula "27"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                                (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                                (rule "qeq_literals" (formula "22"))
                                                (rule "closeFalse" (formula "22"))
                                             )
                                          )
                                          (branch "self.chosen.length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "28"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "5"))
                                             (rule "times_zero_2" (formula "5") (term "1,0"))
                                             (rule "add_zero_right" (formula "5") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "closeFalse" (formula "5"))
                                          )
                                       )
                                       (branch "result_0.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "replace_known_right" (formula "23") (term "0,1,1,0") (ifseqformula "27"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_geqRight" (formula "27"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0"))
                                          (rule "ifthenelse_split" (formula "5") (term "0"))
                                          (branch "self.chosen.length ≥ 1 TRUE"
                                             (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "17") (term "0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "nnf_imp2or" (formula "37") (term "0,1"))
                                             (rule "nnf_notAnd" (formula "37") (term "0,0,1"))
                                             (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1"))
                                             (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0,1"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1"))
                                             (rule "mul_literals" (formula "37") (term "1,0,0,0,1"))
                                             (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1"))
                                             (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1"))
                                             (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.sorted.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "38") (term "0,1,1,0") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "38") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "38") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "38") (term "0,0,0,1,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "38"))
                                                (rule "allRight" (formula "38") (inst "sk=iv_41"))
                                                (rule "orRight" (formula "38"))
                                                (rule "orRight" (formula "38"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "eqSymm" (formula "39"))
                                                (rule "inEqSimp_geqRight" (formula "38"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "38"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_homoInEq0" (formula "39") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0,1"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                                                (rule "pullOutSelect" (formula "39") (term "1,0") (inst "selectSK=arr_203"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "40"))
                                                (rule "commute_or_2" (formula "28") (term "0"))
                                                (rule "commute_or_2" (formula "27") (term "0"))
                                                (rule "commute_or_2" (formula "29") (term "0"))
                                                (rule "commute_or" (formula "14") (term "0,0"))
                                                (rule "commute_or" (formula "15") (term "0,0"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or" (formula "17") (term "0,0"))
                                                (rule "commute_or" (formula "26") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                                                (rule "add_literals" (formula "26") (term "1,1,0"))
                                                (rule "qeq_literals" (formula "26") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "commute_or" (formula "27") (term "0,0"))
                                                (rule "commute_or" (formula "26") (term "0,0"))
                                                (rule "commute_or" (formula "28") (term "0,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "37"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "39"))
                                                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "7")))
                                                (rule "true_left" (formula "20"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "37"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "self.sorted[iv_40].length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "43") (term "0,1") (ifseqformula "5"))
                                                   (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "5")))
                                                   (rule "arrayLengthIsAShort" (formula "29") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "arrayLengthNotNegative" (formula "29") (term "0,1"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch " ¬self.sorted[iv_40] = null ∧ ¬self.sorted[iv_40].<created> = TRUE TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "notLeft" (formula "3"))
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "34"))
                                                      (rule "close" (formula "35") (ifseqformula "11"))
                                                   )
                                                   (branch " ¬self.sorted[iv_40] = null ∧ ¬self.sorted[iv_40].<created> = TRUE FALSE"
                                                      (rule "close" (formula "45") (ifseqformula "2"))
                                                   )
                                                )
                                                (branch "self.sorted[iv_40].length ≥ 1 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "32"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "5"))
                                                   (rule "times_zero_2" (formula "5") (term "1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                   (rule "mul_literals" (formula "5") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                             (branch "self.sorted.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "27") (ifseqformula "35"))
                                                (rule "close" (formula "27") (ifseqformula "6"))
                                             )
                                          )
                                          (branch "self.chosen.length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "28"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "6"))
                                             (rule "times_zero_2" (formula "6") (term "1,0"))
                                             (rule "add_zero_right" (formula "6") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                             (rule "mul_literals" (formula "6") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "closeFalse" (formula "5"))
                                          )
                                       )
                                    )
                                    (branch "self.chosen.length ≥ 1 + iv_40 FALSE"
                                       (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "36")))
                                       (rule "closeTrue" (formula "37"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch
                        (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndGetBallots,
            byte[]::select(heapAfter_checkAndGetBallots,
                           self,
                           verif.selectvoting.system.core.MixServer::$concatenated))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$concatenated))") (userinteraction))
                        (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.concatenated@heapAfter_checkAndGetBallots) = array2seq(heap, self.concatenated) TRUE"
                           (rule "applyEq" (formula "25") (term "0") (ifseqformula "1") (userinteraction))
                           (rule "applyEq" (formula "25") (term "0") (ifseqformula "10") (userinteraction))
                           (rule "cut" (inst "cutFormula=  length(byte[][]::select(heap,
                          self,
                          verif.selectvoting.system.core.MixServer::$sorted))
= length(byte[][]::select(heapAfter_checkAndGetBallots,
                          self,
                          verif.selectvoting.system.core.MixServer::$sorted))") (userinteraction))
                           (branch "CUT: self.sorted.length = self.sorted@heapAfter_checkAndGetBallots.length TRUE"
                              (rule "applyEqReverse" (formula "26") (term "0,0,1") (ifseqformula "1") (userinteraction))
                              (rule "cut" (inst "cutFormula=  array2seq2d(heap,
              byte[][]::select(heap,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))
= array2seq2d(heapAfter_checkAndGetBallots,
              byte[][]::select(heapAfter_checkAndGetBallots,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))") (userinteraction))
                              (branch "CUT: array2seq2d(heap, self.sorted) = array2seq2d(heapAfter_checkAndGetBallots, self.sorted@heapAfter_checkAndGetBallots) TRUE"
                                 (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "1") (userinteraction))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "closeTrue" (formula "27") (userinteraction))
                              )
                              (branch "CUT: array2seq2d(heap, self.sorted) = array2seq2d(heapAfter_checkAndGetBallots, self.sorted@heapAfter_checkAndGetBallots) FALSE"
                                 (rule "array2seq2dDef" (formula "22") (term "0") (inst "u=u") (userinteraction))
                                 (rule "array2seq2dDef" (formula "22") (term "1") (inst "u=u") (userinteraction))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "22") (inst "iv=iv") (userinteraction))
                                 (rule "andRight" (formula "22") (userinteraction))
                                 (branch "Case 1"
                                    (rule "lenOfSeqDef" (formula "22") (term "0") (userinteraction))
                                    (rule "lenOfSeqDef" (formula "22") (term "1") (userinteraction))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                                    (rule "eqSymm" (formula "9") (term "1,0"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "eqSymm" (formula "20"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "eqSymm" (formula "14"))
                                    (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "polySimp_elimSub" (formula "22") (term "1,1"))
                                    (rule "times_zero_2" (formula "22") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "22") (term "1,1"))
                                    (rule "polySimp_elimSub" (formula "22") (term "1,0"))
                                    (rule "times_zero_2" (formula "22") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "22") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                    (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "14"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "14"))
                                    (rule "apply_eq_monomials" (formula "22") (term "1,0,0,0") (ifseqformula "1"))
                                    (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "22") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "1,1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,1,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "1,0,0,0"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "14"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "applyEq" (formula "1") (term "1") (ifseqformula "14"))
                                    (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                                    (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "22") (term "0,1,0,0,0") (ifseqformula "14"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "13"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "13"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "14"))
                                    (rule "applyEq" (formula "22") (term "0,1,0,0,0") (ifseqformula "14"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "applyEq" (formula "1") (term "1") (ifseqformula "13"))
                                    (rule "applyEq" (formula "27") (term "1") (ifseqformula "11"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                                    (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                                    (rule "array2seqDef" (formula "9") (term "1,0,0,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "9") (term "1,1,0") (inst "u=u"))
                                    (rule "eqSymm" (formula "9") (term "1,0"))
                                    (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "applyEq" (formula "2") (term "1") (ifseqformula "11"))
                                    (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
                                    (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "11"))
                                    (rule "array2seqDef" (formula "12") (term "0,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "12") (term "0,0") (inst "u=u"))
                                    (rule "narrowSelectArrayType" (formula "12") (term "2,0,0") (ifseqformula "3") (ifseqformula "25"))
                                    (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "array2seqDef" (formula "20") (term "0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "20") (term "1") (inst "u=u"))
                                    (rule "array2seqDef" (formula "27") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "11"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "array2seqDef" (formula "9") (term "0,0,1,1,0") (inst "u=u"))
                                    (rule "eqSeqDef" (formula "20") (inst "iv=iv"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "getOfSeqDef" (formula "21") (term "1,1,0"))
                                    (rule "castDel" (formula "21") (term "1,1,1,0"))
                                    (rule "castDel" (formula "21") (term "2,1,1,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,2,1,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "21") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,1,0,0"))
                                    (rule "lenOfSeqDef" (formula "20") (term "1"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,1"))
                                    (rule "mul_literals" (formula "20") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "20") (term "1,1"))
                                    (rule "lenOfSeqDef" (formula "20") (term "0"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,0"))
                                    (rule "times_zero_2" (formula "20") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,0"))
                                    (rule "getOfSeqDef" (formula "21") (term "0,1,0"))
                                    (rule "castDel" (formula "21") (term "1,0,1,0"))
                                    (rule "castDel" (formula "21") (term "2,0,1,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
                                    (rule "apply_eq_monomials" (formula "21") (term "1,0,0,1,0,0") (ifseqformula "20"))
                                    (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "21") (term "1,1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "20") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "28") (inst "iv=iv"))
                                    (rule "lenOfSeqDefEQ" (formula "28") (term "1,0") (ifseqformula "2"))
                                    (rule "eqSymm" (formula "28") (term "0"))
                                    (rule "polySimp_elimSub" (formula "28") (term "1,0,0"))
                                    (rule "times_zero_2" (formula "28") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1"))
                                    (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "eqSeqDef2" (formula "2") (inst "iv=iv") (ifseqformula "11"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "lenOfSeqDef" (formula "3") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "3") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "3") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "1,1,1,0,0"))
                                    (rule "lenOfSeqDef" (formula "2") (term "1"))
                                    (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                    (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "2") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "3") (term "0,1,0"))
                                    (rule "castDel" (formula "3") (term "1,0,1,0"))
                                    (rule "castDel" (formula "3") (term "2,0,1,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,2,1,0,1,0"))
                                    (rule "eqSymm" (formula "3") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "2") (term "0"))
                                    (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                    (rule "times_zero_2" (formula "2") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "2") (term "1,0"))
                                    (rule "getOfSeqDef" (formula "3") (term "0,1,0"))
                                    (rule "castDel" (formula "3") (term "2,0,1,0"))
                                    (rule "castDel" (formula "3") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,2,1,0,1,0"))
                                    (rule "eqSymm" (formula "3") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "3") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "3") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,0"))
                                    (rule "apply_eq_monomials" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                    (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "3") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "3") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0,0,1,1,1,0,0"))
                                    (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_22"))
                                    (rule "applyEq" (formula "28") (term "1,1,1,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "28") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "27") (term "1,1,1,0,1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "27") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "27") (term "1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "closeTrue" (formula "21"))
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "22") (inst "sk=iv_28") (userinteraction))
                                    (rule "lenOfSeqDef" (formula "22") (term "1,1,0") (userinteraction))
                                    (rule "impRight" (formula "22") (userinteraction))
                                    (rule "getOfSeqDef" (formula "23") (term "0") (userinteraction))
                                    (rule "getOfSeqDef" (formula "23") (term "1") (userinteraction))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                    (rule "castDel" (formula "23") (term "1,0"))
                                    (rule "castDel" (formula "23") (term "2,0"))
                                    (rule "castDel" (formula "23") (term "1,1"))
                                    (rule "castDel" (formula "23") (term "2,1"))
                                    (rule "add_zero_right" (formula "23") (term "0,2,1,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,2,1,1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "eqSymm" (formula "3"))
                                    (rule "eqSymm" (formula "11") (term "1,0"))
                                    (rule "eqSymm" (formula "16"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "eqSymm" (formula "15"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "eqSymm" (formula "14"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                                    (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                    (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "2") (term "1,1"))
                                    (rule "polySimp_elimSub" (formula "24") (term "1,0,0"))
                                    (rule "times_zero_2" (formula "24") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_elimSub" (formula "24") (term "1,0,1"))
                                    (rule "times_zero_2" (formula "24") (term "1,1,0,1"))
                                    (rule "add_zero_right" (formula "24") (term "1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1"))
                                    (rule "applyEq" (formula "29") (term "1") (ifseqformula "13"))
                                    (rule "applyEq" (formula "2") (term "0,1,0,0,0,1,0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "2") (term "1,0,1,0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "29") (term "0,0,0") (ifseqformula "16"))
                                    (rule "apply_eq_monomials" (formula "24") (term "1,0,0,0") (ifseqformula "3"))
                                    (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "24") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "24") (term "1,1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "24") (term "1,1,0,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "1,0,0,0"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "applyEq" (formula "2") (term "0,1,0,0,0,1,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
                                    (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "2") (term "1,0,1,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "29") (term "0,0,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "24") (term "0,1,0,0,0") (ifseqformula "16"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "applyEq" (formula "24") (term "0,1,0,0,0") (ifseqformula "16"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "applyEq" (formula "3") (term "1") (ifseqformula "16"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "4"))
                                    (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
                                    (rule "eqSymm" (formula "11") (term "1,0"))
                                    (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "applyEq" (formula "13") (term "0") (ifseqformula "4"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "array2seqDef" (formula "14") (term "0,0") (inst "u=u"))
                                    (rule "narrowSelectArrayType" (formula "14") (term "2,0,0") (ifseqformula "5") (ifseqformula "27"))
                                    (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "14"))
                                    (rule "array2seqDef" (formula "22") (term "0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "22") (term "1") (inst "u=u"))
                                    (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "applyEq" (formula "29") (term "0") (ifseqformula "4"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "array2seqDef" (formula "24") (term "1,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "4"))
                                    (rule "array2seqDef" (formula "11") (term "1,0,1,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "11") (term "0,0,1,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "array2seqDef" (formula "14") (term "1,1,1") (inst "u=u"))
                                    (rule "array2seqDef" (formula "14") (term "0,1,1") (inst "u=u"))
                                    (rule "eqSeqDef" (formula "22") (inst "iv=iv"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "lenOfSeqDef" (formula "22") (term "0"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "polySimp_elimSub" (formula "22") (term "1,1"))
                                    (rule "times_zero_2" (formula "22") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "22") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                                    (rule "castDel" (formula "23") (term "1,0,1,0"))
                                    (rule "castDel" (formula "23") (term "2,0,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                                    (rule "eqSymm" (formula "23") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "23") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "23") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "23") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,1,1,0,0"))
                                    (rule "lenOfSeqDef" (formula "22") (term "0"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "polySimp_elimSub" (formula "22") (term "1,1"))
                                    (rule "mul_literals" (formula "22") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "22") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                                    (rule "castDel" (formula "23") (term "1,0,1,0"))
                                    (rule "castDel" (formula "23") (term "2,0,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                                    (rule "eqSymm" (formula "23") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "23") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "23") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "23") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,1,0"))
                                    (rule "apply_eq_monomials" (formula "23") (term "1,0,0,1,0,0") (ifseqformula "22"))
                                    (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "1,1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "23") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "23") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "3") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_23"))
                                    (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "26") (term "1,1,1,1") (ifseqformula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "28")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "30") (term "1,1,1,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "25") (term "1,1,1,1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "lenOfSeqDef" (formula "3") (term "0"))
                                    (rule "eqSymm" (formula "3"))
                                    (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                    (rule "times_zero_2" (formula "3") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "3") (term "1,1"))
                                    (rule "lenOfSeqDef" (formula "4") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0"))
                                    (rule "times_zero_2" (formula "4") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "1,1,1,0,0"))
                                    (rule "getOfSeqDef" (formula "4") (term "1,1,0"))
                                    (rule "castDel" (formula "4") (term "1,1,1,0"))
                                    (rule "castDel" (formula "4") (term "2,1,1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,2,1,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "4") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                                    (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                                    (rule "castDel" (formula "4") (term "1,0,1,0"))
                                    (rule "castDel" (formula "4") (term "2,0,1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                                    (rule "polySimp_elimSub" (formula "4") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_2" (formula "4") (term "1,1,1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "4") (term "1,1,0,0,1,0"))
                                    (rule "lenOfSeqDef" (formula "3") (term "0"))
                                    (rule "eqSymm" (formula "3"))
                                    (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                    (rule "times_zero_2" (formula "3") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "3") (term "1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                                    (rule "apply_eq_monomials" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                                    (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "13") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_19"))
                                    (rule "applyEq" (formula "31") (term "1,2,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "14") (term "1,2,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "4") (term "1,1,0,1,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "24") (term "1,1,0,1,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "31") (term "0,1,0") (ifseqformula "13"))
                                    (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "13"))
                                    (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "28")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "14") (term "0,1,0") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "31") (term "1,2,0") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "14") (term "1,2,0") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "23") (term "0,0,0,0") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "4") (term "1,1,0,1,0") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "applyEqReverse" (formula "23") (term "1,1,0,1,0") (ifseqformula "12"))
                                    (rule "applyEqReverse" (formula "30") (term "0,1,0") (ifseqformula "12"))
                                    (rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "12"))
                                    (rule "hideAuxiliaryEq" (formula "12"))
                                    (rule "applyEq" (formula "3") (term "1,1,1,0,0") (ifseqformula "21"))
                                    (rule "array2seqDef" (formula "24") (term "1,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "28") (inst "iv=iv"))
                                    (rule "lenOfSeqDef" (formula "28") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "28") (term "1,0,0"))
                                    (rule "times_zero_2" (formula "28") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "1,0,0"))
                                    (rule "lenOfSeqDef" (formula "28") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimSub" (formula "28") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "28") (term "1,1,1,1,0,0,1"))
                                    (rule "add_zero_right" (formula "28") (term "1,1,1,0,0,1"))
                                    (rule "getOfSeqDef" (formula "28") (term "0,1,0,1"))
                                    (rule "castDel" (formula "28") (term "1,0,1,0,1"))
                                    (rule "castDel" (formula "28") (term "2,0,1,0,1"))
                                    (rule "add_zero_right" (formula "28") (term "0,2,1,0,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0,1,0,1"))
                                    (rule "times_zero_2" (formula "28") (term "1,1,1,0,0,1,0,1"))
                                    (rule "add_zero_right" (formula "28") (term "1,1,0,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,1,0,0,1"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,1,1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "20"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,1,1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "0,0,1,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "28") (term "0,0,1,1,1,0,0,1"))
                                    (rule "applyEq" (formula "28") (term "1,1,1,0,0,1") (ifseqformula "20"))
                                    (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "pullOutSelect" (formula "22") (term "1,2,1,0") (inst "selectSK=arr_190"))
                                    (rule "applyEq" (formula "23") (term "0,1,1,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "11") (term "0"))
                                    (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "10") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "notLeft" (formula "12"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "notLeft" (formula "12"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "notLeft" (formula "10"))
                                    (rule "notLeft" (formula "10"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "4") (term "1,1,1,0") (ifseqformula "5") (ifseqformula "28"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                    (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "23") (term "0"))
                                    (rule "nnf_imp2or" (formula "35") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "4") (term "0"))
                                    (rule "nnf_imp2or" (formula "10") (term "0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0"))
                                    (rule "nnf_imp2or" (formula "12") (term "0"))
                                    (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                    (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                                    (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                    (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                    (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                    (rule "arrayLengthIsAShort" (formula "15") (term "1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "arrayLengthNotNegative" (formula "15") (term "1"))
                                    (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                    (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                    (rule "ifthenelse_split" (formula "3") (term "0"))
                                    (branch "self.chosen.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "4")))
                                       (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "3"))
                                       (rule "leq_literals" (formula "17") (term "0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "eqSeqDef" (formula "31") (inst "iv=iv"))
                                       (rule "getOfSeqDef" (formula "31") (term "1,1,0,1"))
                                       (rule "castDel" (formula "31") (term "2,1,1,0,1"))
                                       (rule "castDel" (formula "31") (term "1,1,1,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "0,2,1,1,1,0,1"))
                                       (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "times_zero_2" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "lenOfSeqDef" (formula "31") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "31") (term "1,1,0"))
                                       (rule "times_zero_2" (formula "31") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "31") (term "1,1,0"))
                                       (rule "lenOfSeqDef" (formula "31") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimSub" (formula "31") (term "1,1,1,0,0,1"))
                                       (rule "times_zero_2" (formula "31") (term "1,1,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "1,1,1,0,0,1"))
                                       (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                                       (rule "eqSymm" (formula "31") (term "0"))
                                       (rule "polySimp_elimSub" (formula "31") (term "1,1,0"))
                                       (rule "times_zero_2" (formula "31") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "31") (term "1,1,0"))
                                       (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                                       (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                                       (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "31") (term "1,0,1"))
                                       (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "times_zero_2" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "31") (term "0,0,1,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "31") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "31") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "31") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,1,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "31") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,1,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,1,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "0,0,0,1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "31") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
                                       (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "31") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0,1"))
                                       (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "cut_direct" (formula "22") (term "0"))
                                       (branch "CUT: result_0.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "25") (ifseqformula "8"))
                                          (rule "replaceKnownSelect_taclet110010000201_0" (formula "25") (term "1,1,0,0,0,0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet110010000201_1" (formula "25") (term "1,1,0,0,0,0,0,0"))
                                          (rule "replaceKnownSelect_taclet110010000201_2" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet110010000201_3" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "27"))
                                          (rule "notLeft" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "26"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "nonNull" (formula "27") (inst "i=i"))
                                          (rule "sub_literals" (formula "27") (term "2,1,0,1,1"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "greater_literals" (formula "27") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "notLeft" (formula "27"))
                                          (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                          (rule "nonNull" (formula "26") (inst "i=i"))
                                          (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "greater_literals" (formula "26") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "notLeft" (formula "26"))
                                          (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                          (rule "nonNull" (formula "25") (inst "i=i"))
                                          (rule "greater_literals" (formula "25") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "37")))
                                          (rule "sub_literals" (formula "25") (term "2,1,0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                          (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                          (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_18"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "narrowSelectArrayType" (formula "14") (term "2,0,0,1,1,0") (ifseqformula "6") (ifseqformula "34"))
                                          (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_22"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_22"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_22"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_18"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_23"))
                                          (rule "applyEq" (formula "30") (term "0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                                          (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "42")) (ifInst ""  (formula "7")))
                                          (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
                                          (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "27"))
                                          (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                                          (rule "hideAuxiliaryEq" (formula "27"))
                                          (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_24"))
                                          (rule "applyEq" (formula "29") (term "0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                                          (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "41")) (ifInst ""  (formula "7")))
                                          (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "26"))
                                          (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                                          (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
                                          (rule "hideAuxiliaryEq" (formula "26"))
                                          (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "16"))
                                          (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "8"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "notLeft" (formula "19"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "notLeft" (formula "20"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "notLeft" (formula "20"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "notLeft" (formula "20"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "notLeft" (formula "18"))
                                          (rule "notLeft" (formula "18"))
                                          (rule "nonNull" (formula "20") (inst "i=i"))
                                          (rule "greater_literals" (formula "20") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "35")))
                                          (rule "sub_literals" (formula "20") (term "2,1,0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "35"))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                          (rule "nonNull" (formula "19") (inst "i=i"))
                                          (rule "greater_literals" (formula "19") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "34")))
                                          (rule "sub_literals" (formula "19") (term "2,1,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "34"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "nonNull" (formula "18") (inst "i=i"))
                                          (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                                          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "36")))
                                          (rule "greater_literals" (formula "18") (term "0"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "36"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "39") (term "0,1"))
                                          (rule "ifthenelse_split" (formula "25") (term "1"))
                                          (branch "result_0.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "27") (term "0,1,1,0,0") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "replace_known_left" (formula "5") (term "0,1,1,0,0") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "replace_known_left" (formula "45") (term "0,0,0") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "25")))
                                             (rule "eqSymm" (formula "45") (term "0"))
                                             (rule "nnf_imp2or" (formula "28") (term "0"))
                                             (rule "nnf_imp2or" (formula "30") (term "0"))
                                             (rule "nnf_imp2or" (formula "29") (term "0"))
                                             (rule "commute_or_2" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "20") (term "0"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "19") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "18") (term "0"))
                                             (rule "ifthenelse_split" (formula "26") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "5") (term "1,1,1,0,0,1,0") (ifseqformula "26"))
                                                (rule "eqSymm" (formula "5") (term "1,0"))
                                                (rule "applyEq" (formula "45") (term "1,1,1,0,0,1,0,1") (ifseqformula "26"))
                                                (rule "applyEq" (formula "5") (term "1,1,1,0,0,1,0") (ifseqformula "26"))
                                                (rule "eqSymm" (formula "5") (term "1,0"))
                                                (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                                (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                                (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "40") (term "0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1"))
                                                (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "40") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "40") (term "1,0,0,0,1"))
                                                (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                                (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                                (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch "self.sorted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "41") (term "0,0,0,1,0") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0,1") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "41") (term "0,0,0,1,1,0,0,1") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "41") (term "1,1,1,1,0,1") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "41") (term "0,1,1,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "41"))
                                                   (rule "allRight" (formula "41") (inst "sk=iv_33"))
                                                   (rule "orRight" (formula "41"))
                                                   (rule "orRight" (formula "41"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "eqSymm" (formula "42"))
                                                   (rule "inEqSimp_leqRight" (formula "40"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "replace_known_left" (formula "42") (term "0,0,1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "1")))
                                                   (rule "inEqSimp_geqRight" (formula "41"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "42") (term "0,1"))
                                                   (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "42") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,1"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "42") (term "1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,1"))
                                                   (rule "mul_literals" (formula "42") (term "0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "42") (term "1,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "42") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "42") (term "0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "42") (term "1,0") (inst "selectSK=arr_195"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "eqSymm" (formula "43"))
                                                   (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "true_left" (formula "17"))
                                                   (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,1,0"))
                                                   (rule "commute_or_2" (formula "18") (term "0"))
                                                   (rule "commute_or_2" (formula "31") (term "0"))
                                                   (rule "commute_or_2" (formula "8") (term "0"))
                                                   (rule "commute_or" (formula "14") (term "0,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "commute_or_2" (formula "32") (term "0"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "9"))
                                                   (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "42")))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "9"))
                                                   (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "40"))
                                                   (builtin "One Step Simplification" (formula "19"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "9"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "10"))
                                                   (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "43"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "commute_or_2" (formula "37") (term "0"))
                                                   (rule "commute_or_2" (formula "36") (term "0"))
                                                   (rule "commute_or_2" (formula "27") (term "0"))
                                                   (rule "commute_or_2" (formula "26") (term "0"))
                                                   (rule "commute_or_2" (formula "25") (term "0"))
                                                   (rule "commute_or" (formula "19") (term "0,0"))
                                                   (rule "commute_or" (formula "34") (term "0,0"))
                                                   (rule "commute_or" (formula "9") (term "0,0"))
                                                   (rule "commute_or" (formula "35") (term "0,0"))
                                                   (rule "commute_or" (formula "37") (term "0,0"))
                                                   (rule "commute_or" (formula "36") (term "0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0"))
                                                   (rule "commute_or" (formula "25") (term "0,0"))
                                                   (rule "arrayLengthNotNegative" (formula "30") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "29"))
                                                   (rule "leq_literals" (formula "30") (term "0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "cut_direct" (formula "49") (term "0"))
                                                   (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_checkAndGetBallots, self.sorted))).length = result_0.length TRUE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "allRight" (formula "50") (inst "sk=iv_34"))
                                                      (rule "orRight" (formula "50"))
                                                      (rule "orRight" (formula "50"))
                                                      (rule "inEqSimp_geqRight" (formula "51"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "51"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "52") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "inEqSimp_homoInEq0" (formula "52") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "52") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "52") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "52") (term "0,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0"))
                                                      (rule "replace_known_left" (formula "52") (term "0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "pullOutSelect" (formula "52") (term "0") (inst "selectSK=arr_196"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                                      (rule "eqSymm" (formula "53"))
                                                      (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                      (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "14") (ifseqformula "46"))
                                                      (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "29") (ifseqformula "46"))
                                                      (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                                      (rule "eqSymm" (formula "35") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "35"))
                                                      (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "35") (term "0,0"))
                                                      (rule "commute_or_2" (formula "35") (term "0"))
                                                      (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                      (rule "commute_or" (formula "35") (term "1,1,0"))
                                                      (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "13") (term "1,0,0,0,0"))
                                                      (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "13"))
                                                      (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "13") (term "0,0"))
                                                      (rule "commute_or_2" (formula "13") (term "0"))
                                                      (rule "arrayLengthIsAShort" (formula "34") (term "0"))
                                                      (builtin "One Step Simplification" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "arrayLengthNotNegative" (formula "34") (term "0"))
                                                      (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                                      (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "33"))
                                                      (rule "leq_literals" (formula "34") (term "0"))
                                                      (builtin "One Step Simplification" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                                      (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "13") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                                      (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                                      (rule "ifthenelse_split" (formula "7") (term "0"))
                                                      (branch "self.sorted[iv_28].length ≥ 1 TRUE"
                                                         (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "8"))
                                                         (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "8")))
                                                         (rule "commute_or" (formula "36") (term "0,0,1,1,0"))
                                                         (rule "commute_or" (formula "14") (term "0,0,1,1,0"))
                                                         (rule "ifthenelse_split" (formula "6") (term "0"))
                                                         (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "6"))
                                                            (rule "notLeft" (formula "7"))
                                                            (rule "notLeft" (formula "6"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "40"))
                                                            (rule "close" (formula "41") (ifseqformula "15"))
                                                         )
                                                         (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE FALSE"
                                                            (rule "close" (formula "50") (ifseqformula "6"))
                                                         )
                                                      )
                                                      (branch "self.sorted[iv_28].length ≥ 1 FALSE"
                                                         (rule "inEqSimp_geqRight" (formula "39"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "8"))
                                                         (rule "times_zero_2" (formula "8") (term "1,0"))
                                                         (rule "add_zero_right" (formula "8") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                                         (rule "mul_literals" (formula "8") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "9"))
                                                         (rule "qeq_literals" (formula "8") (term "0"))
                                                         (builtin "One Step Simplification" (formula "8"))
                                                         (rule "closeFalse" (formula "8"))
                                                      )
                                                   )
                                                   (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_checkAndGetBallots, self.sorted))).length = result_0.length FALSE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "false_right" (formula "50"))
                                                      (rule "ifthenelse_to_or_left" (formula "31") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "31") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "eqSymm" (formula "31") (term "1,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "31") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "31") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "31") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "31") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "31") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "31") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "31") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "31") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "31") (term "0,0"))
                                                      (rule "commute_or_2" (formula "31") (term "0"))
                                                      (rule "commute_or" (formula "31") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "31") (term "0,1,0"))
                                                      (rule "commute_or_2" (formula "31") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "31") (term "0,0,1,0"))
                                                      (rule "commute_or" (formula "31") (term "0,0,1,1,0"))
                                                      (rule "ifthenelse_to_or_left" (formula "9") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (rule "eqSymm" (formula "9") (term "1,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "9") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "9") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "9") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "9") (term "0,0"))
                                                      (rule "commute_or_2" (formula "9") (term "0"))
                                                      (rule "commute_or_2" (formula "9") (term "0,1,0"))
                                                      (rule "commute_or" (formula "9") (term "1,1,0"))
                                                      (rule "arrayLengthIsAShort" (formula "30") (term "0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "true_left" (formula "30"))
                                                      (rule "arrayLengthNotNegative" (formula "30") (term "0"))
                                                      (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                      (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "29"))
                                                      (rule "leq_literals" (formula "30") (term "0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "true_left" (formula "30"))
                                                      (rule "cnf_rightDist" (formula "31") (term "1,1,0"))
                                                      (rule "commute_or" (formula "9") (term "0,0,1,0"))
                                                      (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                      (rule "commute_or_2" (formula "31") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,1,1,0"))
                                                      (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,1,0"))
                                                      (rule "qeq_literals" (formula "31") (term "1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "shift_paren_or" (formula "31") (term "1,1,0"))
                                                      (rule "commute_or" (formula "31") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "31") (term "1,1,0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "31") (term "1,1,1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,1,1,0"))
                                                      (rule "add_literals" (formula "31") (term "1,0,1,1,1,0"))
                                                      (rule "times_zero_1" (formula "31") (term "0,1,1,1,0"))
                                                      (rule "leq_literals" (formula "31") (term "1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "shift_paren_or" (formula "31") (term "0"))
                                                      (rule "commute_or_2" (formula "31") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "shift_paren_or" (formula "31") (term "0,0"))
                                                      (rule "commute_or" (formula "31") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "commute_or" (formula "9") (term "0,0,1,1,0"))
                                                      (rule "ifthenelse_split" (formula "3") (term "0"))
                                                      (branch "self.sorted[iv_28].length ≥ 1 TRUE"
                                                         (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "4")))
                                                         (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
                                                         (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,1,0"))
                                                         (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "10"))
                                                         (rule "shift_paren_or" (formula "10") (term "1,1,0"))
                                                         (rule "commute_or" (formula "10") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,1,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,1,0"))
                                                         (rule "add_literals" (formula "10") (term "1,0,1,1,1,0"))
                                                         (rule "times_zero_1" (formula "10") (term "0,1,1,1,0"))
                                                         (rule "leq_literals" (formula "10") (term "1,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "10"))
                                                         (rule "shift_paren_or" (formula "10") (term "0"))
                                                         (rule "commute_or_2" (formula "10") (term "0,0"))
                                                         (builtin "One Step Simplification" (formula "10"))
                                                         (rule "shift_paren_or" (formula "10") (term "0,0"))
                                                         (rule "commute_or" (formula "10") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "10"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "37"))
                                                            (rule "close" (formula "36") (ifseqformula "11"))
                                                         )
                                                         (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE FALSE"
                                                            (rule "close" (formula "46") (ifseqformula "2"))
                                                         )
                                                      )
                                                      (branch "self.sorted[iv_28].length ≥ 1 FALSE"
                                                         (rule "inEqSimp_geqRight" (formula "35"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "4"))
                                                         (rule "times_zero_2" (formula "4") (term "1,0"))
                                                         (rule "add_zero_right" (formula "4") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                         (rule "mul_literals" (formula "4") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "5"))
                                                         (rule "qeq_literals" (formula "4") (term "0"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "closeFalse" (formula "4"))
                                                      )
                                                   )
                                                )
                                                (branch "self.sorted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "38"))
                                                   (rule "close" (formula "31") (ifseqformula "6"))
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "26"))
                                                (rule "inEqSimp_geqRight" (formula "31"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "46") (term "1,1,0,0,1") (ifseqformula "27"))
                                                (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "26"))
                                                (rule "closeFalse" (formula "26"))
                                             )
                                          )
                                          (branch "result_0.length ≥ 1 FALSE"
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "replace_known_right" (formula "26") (term "0,1,1,0,0") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "replace_known_right" (formula "5") (term "0,1,1,0,0") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "replace_known_right" (formula "45") (term "0,1,1,0,0,1") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "30")))
                                             (rule "eqSymm" (formula "45") (term "0"))
                                             (rule "inEqSimp_geqRight" (formula "30"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                                             (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "6") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "43") (term "0,0,1"))
                                             (rule "add_zero_right" (formula "43") (term "1,1,0,0,1"))
                                             (rule "qeq_literals" (formula "43") (term "1,0,0,1"))
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "nnf_imp2or" (formula "26") (term "0"))
                                             (rule "nnf_imp2or" (formula "28") (term "0"))
                                             (rule "nnf_imp2or" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "20") (term "0"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "19") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "18") (term "0"))
                                             (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                             (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                             (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                             (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                             (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                                             (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                             (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1"))
                                             (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                             (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                             (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.sorted.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "39") (term "1,1,1,1,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "39") (term "0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "39") (term "0,1,1,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "39") (term "0,0,0,1,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "39"))
                                                (rule "allRight" (formula "39") (inst "sk=iv_32"))
                                                (rule "orRight" (formula "39"))
                                                (rule "orRight" (formula "39"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "eqSymm" (formula "40"))
                                                (rule "inEqSimp_geqRight" (formula "39"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "39"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "replace_known_left" (formula "40") (term "0,0,1") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_homoInEq0" (formula "40") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "40") (term "0,0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "40") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "40") (term "1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,1"))
                                                (rule "mul_literals" (formula "40") (term "0,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "40") (term "1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "40") (term "1,0,0"))
                                                (rule "mul_literals" (formula "40") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
                                                (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=arr_194"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "41"))
                                                (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,1,0"))
                                                (rule "commute_or_2" (formula "18") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "41"))
                                                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "6")))
                                                (rule "true_left" (formula "22"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "39"))
                                                (builtin "One Step Simplification" (formula "20"))
                                                (rule "commute_or" (formula "15") (term "0,0"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or" (formula "17") (term "0,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "41"))
                                                (builtin "One Step Simplification" (formula "22"))
                                                (rule "commute_or_2" (formula "33") (term "0"))
                                                (rule "commute_or_2" (formula "35") (term "0"))
                                                (rule "commute_or_2" (formula "34") (term "0"))
                                                (rule "commute_or_2" (formula "27") (term "0"))
                                                (rule "commute_or_2" (formula "26") (term "0"))
                                                (rule "commute_or_2" (formula "25") (term "0"))
                                                (rule "commute_or" (formula "19") (term "0,0"))
                                                (rule "commute_or" (formula "33") (term "0,0"))
                                                (rule "commute_or" (formula "35") (term "0,0"))
                                                (rule "commute_or" (formula "34") (term "0,0"))
                                                (rule "commute_or" (formula "27") (term "0,0"))
                                                (rule "commute_or" (formula "26") (term "0,0"))
                                                (rule "commute_or" (formula "25") (term "0,0"))
                                                (rule "arrayLengthNotNegative" (formula "29") (term "0,1"))
                                                (rule "arrayLengthIsAShort" (formula "30") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                                (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
                                                (rule "applyEq" (formula "7") (term "0") (ifseqformula "5"))
                                                (rule "leq_literals" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "cut_direct" (formula "30") (term "0"))
                                                (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "30"))
                                                   (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                                   (rule "leq_literals" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                                   (rule "qeq_literals" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "lenNonNegative" (formula "47") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1"))
                                                   (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "48"))
                                                   (rule "add_zero_right" (formula "1") (term "1"))
                                                   (rule "inEqSimp_contradEq7" (formula "48") (ifseqformula "1"))
                                                   (rule "times_zero_1" (formula "48") (term "1,0,0"))
                                                   (rule "add_literals" (formula "48") (term "0,0"))
                                                   (rule "leq_literals" (formula "48") (term "0"))
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "false_right" (formula "48"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch "self.sorted[iv_28].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "6"))
                                                      (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "6")))
                                                      (rule "ifthenelse_split" (formula "3") (term "0"))
                                                      (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "3"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "36"))
                                                         (rule "close" (formula "35") (ifseqformula "12"))
                                                      )
                                                      (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE FALSE"
                                                         (rule "close" (formula "45") (ifseqformula "3"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_28].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "34"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "6"))
                                                      (rule "times_zero_2" (formula "6") (term "1,0"))
                                                      (rule "add_zero_right" (formula "6") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                      (rule "mul_literals" (formula "6") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "closeFalse" (formula "5"))
                                                   )
                                                )
                                                (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_leqRight" (formula "34"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                   (rule "qeq_literals" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "30"))
                                                   (rule "add_zero_right" (formula "1") (term "0"))
                                                   (rule "qeq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch "self.sorted.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "36"))
                                                (rule "close" (formula "29") (ifseqformula "6"))
                                             )
                                          )
                                       )
                                       (branch "CUT: result_0.<created> = TRUE FALSE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "25") (ifseqformula "8"))
                                          (rule "replaceKnownSelect_taclet110010000201_0" (formula "25") (term "1,1,0,0,0,0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet110010000201_1" (formula "25") (term "1,1,0,0,0,0,0,0"))
                                          (rule "replaceKnownSelect_taclet110010000201_2" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet110010000201_3" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "27"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "27"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "27"))
                                          (rule "notLeft" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "nonNull" (formula "27") (inst "i=i"))
                                          (rule "greater_literals" (formula "27") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "sub_literals" (formula "27") (term "2,1,0,1"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "notLeft" (formula "27"))
                                          (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                          (rule "nonNull" (formula "26") (inst "i=i"))
                                          (rule "greater_literals" (formula "26") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "sub_literals" (formula "26") (term "2,1,0,1"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "notLeft" (formula "26"))
                                          (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                          (rule "nonNull" (formula "25") (inst "i=i"))
                                          (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                                          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "38")))
                                          (rule "greater_literals" (formula "25") (term "0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                          (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                          (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_17"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "narrowSelectArrayType" (formula "14") (term "2,0,0,1,1,0") (ifseqformula "6") (ifseqformula "34"))
                                          (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_21"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_21"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_21"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_17"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_22"))
                                          (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "30") (term "0") (ifseqformula "27"))
                                          (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "43")) (ifInst ""  (formula "7")))
                                          (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                                          (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "27"))
                                          (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
                                          (rule "hideAuxiliaryEq" (formula "27"))
                                          (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_23"))
                                          (rule "applyEq" (formula "29") (term "0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                                          (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "42")) (ifInst ""  (formula "7")))
                                          (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
                                          (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "26"))
                                          (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                                          (rule "hideAuxiliaryEq" (formula "26"))
                                          (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "16"))
                                          (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "8"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "notLeft" (formula "19"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "notLeft" (formula "20"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "notLeft" (formula "20"))
                                          (rule "notLeft" (formula "19"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "andLeft" (formula "18"))
                                          (rule "notLeft" (formula "18"))
                                          (rule "notLeft" (formula "18"))
                                          (rule "nonNull" (formula "20") (inst "i=i"))
                                          (rule "greater_literals" (formula "20") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "36")))
                                          (rule "sub_literals" (formula "20") (term "2,1,0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "36"))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                          (rule "nonNull" (formula "19") (inst "i=i"))
                                          (rule "sub_literals" (formula "19") (term "2,1,0,1,1"))
                                          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "35")))
                                          (rule "greater_literals" (formula "19") (term "0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "35"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                          (rule "nonNull" (formula "18") (inst "i=i"))
                                          (rule "greater_literals" (formula "18") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "37")))
                                          (rule "sub_literals" (formula "18") (term "2,1,0"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "37"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "40") (term "0,1"))
                                          (rule "ifthenelse_split" (formula "25") (term "1"))
                                          (branch "result_0.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "5") (term "0,1,1,0,0") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "replace_known_left" (formula "27") (term "0,1,1,0,0") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "replace_known_left" (formula "46") (term "0,0,0") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "25")))
                                             (rule "eqSymm" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "28") (term "0"))
                                             (rule "nnf_imp2or" (formula "30") (term "0"))
                                             (rule "nnf_imp2or" (formula "29") (term "0"))
                                             (rule "commute_or_2" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "20") (term "0"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "19") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "18") (term "0"))
                                             (rule "ifthenelse_split" (formula "26") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "27") (term "1,1,1,0,0,1,0") (ifseqformula "26"))
                                                (rule "applyEq" (formula "46") (term "1,1,1,0,0,1,0,1") (ifseqformula "26"))
                                                (rule "applyEq" (formula "5") (term "1,1,1,0,0,1,0") (ifseqformula "26"))
                                                (rule "eqSymm" (formula "5") (term "1,0"))
                                                (rule "applyEq" (formula "5") (term "1,1,1,0,0,1,0") (ifseqformula "26"))
                                                (rule "eqSymm" (formula "5") (term "1,0"))
                                                (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                                (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "41") (term "0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,1"))
                                                (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "41") (term "1,0,0,0,1"))
                                                (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                                (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                                (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                                (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                                (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch "self.sorted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "42") (term "0,0,0,1,0") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "42") (term "0,1,1,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "allRight" (formula "42") (inst "sk=iv_30"))
                                                   (rule "orRight" (formula "42"))
                                                   (rule "orRight" (formula "42"))
                                                   (rule "applyEqReverse" (formula "44") (term "1,1,1") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,1") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "43") (term "0,0,0,1") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "43") (term "0,1,1") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "eqSymm" (formula "43"))
                                                   (rule "inEqSimp_leqRight" (formula "41"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "replace_known_left" (formula "43") (term "0,0,1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "1")))
                                                   (rule "inEqSimp_geqRight" (formula "42"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "43") (term "0,0"))
                                                   (rule "eqSymm" (formula "43"))
                                                   (rule "polySimp_addComm1" (formula "43") (term "0,0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "43") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "43") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "43"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                                   (rule "pullOutSelect" (formula "43") (term "1,0") (inst "selectSK=arr_192"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "eqSymm" (formula "44"))
                                                   (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,1,0"))
                                                   (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "18"))
                                                   (rule "true_left" (formula "18"))
                                                   (rule "commute_or_2" (formula "18") (term "0"))
                                                   (rule "commute_or_2" (formula "31") (term "0"))
                                                   (rule "commute_or_2" (formula "8") (term "0"))
                                                   (rule "commute_or" (formula "14") (term "0,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "commute_or_2" (formula "32") (term "0"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "9"))
                                                   (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "43")))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "9"))
                                                   (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "41"))
                                                   (builtin "One Step Simplification" (formula "19"))
                                                   (rule "commute_or_2" (formula "35") (term "0"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "9"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "10"))
                                                   (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "44"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "commute_or_2" (formula "36") (term "0"))
                                                   (rule "commute_or_2" (formula "27") (term "0"))
                                                   (rule "commute_or_2" (formula "26") (term "0"))
                                                   (rule "commute_or_2" (formula "25") (term "0"))
                                                   (rule "commute_or" (formula "19") (term "0,0"))
                                                   (rule "commute_or" (formula "34") (term "0,0"))
                                                   (rule "commute_or" (formula "9") (term "0,0"))
                                                   (rule "commute_or" (formula "35") (term "0,0"))
                                                   (rule "commute_or" (formula "37") (term "0,0"))
                                                   (rule "commute_or" (formula "36") (term "0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0"))
                                                   (rule "commute_or" (formula "25") (term "0,0"))
                                                   (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "arrayLengthNotNegative" (formula "29") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "30"))
                                                   (rule "leq_literals" (formula "29") (term "0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "lenNonNegative" (formula "50") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1"))
                                                   (rule "cut_direct" (formula "51") (term "0"))
                                                   (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_checkAndGetBallots, self.sorted))).length = result_0.length TRUE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "allRight" (formula "52") (inst "sk=iv_31"))
                                                      (rule "orRight" (formula "52"))
                                                      (rule "orRight" (formula "52"))
                                                      (rule "inEqSimp_leqRight" (formula "52"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "54") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "54"))
                                                      (rule "inEqSimp_geqRight" (formula "53"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "54") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "54") (term "0,0,0"))
                                                      (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "54") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "54") (term "0,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0"))
                                                      (rule "replace_known_left" (formula "54") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "54"))
                                                      (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "33"))
                                                      (rule "leq_literals" (formula "4") (term "0"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "true_left" (formula "4"))
                                                      (rule "pullOutSelect" (formula "53") (term "0") (inst "selectSK=arr_193"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                                      (rule "eqSymm" (formula "54"))
                                                      (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                      (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "14") (ifseqformula "47"))
                                                      (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "29") (ifseqformula "47"))
                                                      (rule "arrayLengthIsAShort" (formula "34") (term "0"))
                                                      (builtin "One Step Simplification" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "ifthenelse_to_or_left" (formula "35") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "35") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "35"))
                                                      (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "35") (term "0,0"))
                                                      (rule "commute_or_2" (formula "35") (term "0"))
                                                      (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                      (rule "commute_or" (formula "35") (term "1,1,0"))
                                                      (rule "arrayLengthNotNegative" (formula "34") (term "0"))
                                                      (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                                      (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "33"))
                                                      (rule "leq_literals" (formula "34") (term "0"))
                                                      (builtin "One Step Simplification" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "13") (term "1,0,0,0,0"))
                                                      (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "13"))
                                                      (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "35") (term "0,0,1,0"))
                                                      (rule "commute_or" (formula "13") (term "0,0"))
                                                      (rule "commute_or_2" (formula "13") (term "0"))
                                                      (rule "commute_or_2" (formula "35") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "13") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                                      (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                                      (rule "ifthenelse_split" (formula "7") (term "0"))
                                                      (branch "self.sorted[iv_28].length ≥ 1 TRUE"
                                                         (rule "replace_known_left" (formula "50") (term "0,1") (ifseqformula "8"))
                                                         (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "8")))
                                                         (rule "commute_or" (formula "36") (term "0,0,1,1,0"))
                                                         (rule "commute_or" (formula "14") (term "0,0,1,1,0"))
                                                         (rule "ifthenelse_split" (formula "6") (term "0"))
                                                         (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "6"))
                                                            (rule "notLeft" (formula "6"))
                                                            (rule "notLeft" (formula "6"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "41"))
                                                            (rule "close" (formula "40") (ifseqformula "15"))
                                                         )
                                                         (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE FALSE"
                                                            (rule "close" (formula "51") (ifseqformula "6"))
                                                         )
                                                      )
                                                      (branch "self.sorted[iv_28].length ≥ 1 FALSE"
                                                         (rule "inEqSimp_geqRight" (formula "39"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "8"))
                                                         (rule "times_zero_2" (formula "8") (term "1,0"))
                                                         (rule "add_zero_right" (formula "8") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                                         (rule "mul_literals" (formula "8") (term "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "8"))
                                                         (rule "qeq_literals" (formula "9") (term "0"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "closeFalse" (formula "9"))
                                                      )
                                                   )
                                                   (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_checkAndGetBallots, self.sorted))).length = result_0.length FALSE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "false_right" (formula "52"))
                                                      (rule "arrayLengthNotNegative" (formula "31") (term "0"))
                                                      (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                      (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "30"))
                                                      (rule "leq_literals" (formula "31") (term "0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthIsAShort" (formula "31") (term "0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "ifthenelse_to_or_left" (formula "32") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "32") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "eqSymm" (formula "32") (term "1,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "32") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "32") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "32") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "32") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "32") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "32") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "32") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "32") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "32") (term "0,0"))
                                                      (rule "commute_or_2" (formula "32") (term "0"))
                                                      (rule "commute_or" (formula "32") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "32") (term "0,1,0"))
                                                      (rule "commute_or_2" (formula "32") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "32") (term "0,0,1,0"))
                                                      (rule "ifthenelse_to_or_left" (formula "10") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "eqSymm" (formula "10") (term "1,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "10") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "10") (term "0,0"))
                                                      (rule "commute_or_2" (formula "10") (term "0"))
                                                      (rule "commute_or" (formula "10") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "10") (term "0,1,0"))
                                                      (rule "commute_or" (formula "32") (term "0,0,1,1,0"))
                                                      (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "10") (term "0,0,1,0"))
                                                      (rule "commute_or" (formula "10") (term "0,0,1,1,0"))
                                                      (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "32") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0,1,1,0"))
                                                      (rule "add_zero_right" (formula "32") (term "1,1,0,0,1,1,0"))
                                                      (rule "qeq_literals" (formula "32") (term "1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "shift_paren_or" (formula "32") (term "1,1,0"))
                                                      (rule "commute_or" (formula "32") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "32") (term "1,1,0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "32") (term "1,1,1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,1,1,0"))
                                                      (rule "add_literals" (formula "32") (term "1,0,1,1,1,0"))
                                                      (rule "times_zero_1" (formula "32") (term "0,1,1,1,0"))
                                                      (rule "leq_literals" (formula "32") (term "1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "shift_paren_or" (formula "32") (term "0"))
                                                      (rule "commute_or_2" (formula "32") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                      (rule "commute_or" (formula "32") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "cnf_rightDist" (formula "10") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "10") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,1,1,0"))
                                                      (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,1,0"))
                                                      (rule "qeq_literals" (formula "10") (term "1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "shift_paren_or" (formula "10") (term "1,1,0"))
                                                      (rule "commute_or" (formula "10") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,1,0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,1,0"))
                                                      (rule "add_literals" (formula "10") (term "1,0,1,1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "0,1,1,1,0"))
                                                      (rule "leq_literals" (formula "10") (term "1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "shift_paren_or" (formula "10") (term "0"))
                                                      (rule "commute_or_2" (formula "10") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "shift_paren_or" (formula "10") (term "0,0"))
                                                      (rule "commute_or" (formula "10") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "ifthenelse_split" (formula "4") (term "0"))
                                                      (branch "self.sorted[iv_28].length ≥ 1 TRUE"
                                                         (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "5"))
                                                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "5")))
                                                         (rule "ifthenelse_split" (formula "3") (term "0"))
                                                         (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "3"))
                                                            (rule "notLeft" (formula "4"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "37"))
                                                            (rule "close" (formula "38") (ifseqformula "12"))
                                                         )
                                                         (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE FALSE"
                                                            (rule "close" (formula "48") (ifseqformula "3"))
                                                         )
                                                      )
                                                      (branch "self.sorted[iv_28].length ≥ 1 FALSE"
                                                         (rule "inEqSimp_geqRight" (formula "36"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "5"))
                                                         (rule "times_zero_2" (formula "5") (term "1,0"))
                                                         (rule "add_zero_right" (formula "5") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                         (rule "mul_literals" (formula "5") (term "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                         (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                )
                                                (branch "self.sorted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "39"))
                                                   (rule "close" (formula "31") (ifseqformula "6"))
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "26"))
                                                (rule "inEqSimp_geqRight" (formula "31"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "47") (term "1,1,0,0,1") (ifseqformula "27"))
                                                (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "26"))
                                                (rule "closeFalse" (formula "26"))
                                             )
                                          )
                                          (branch "result_0.length ≥ 1 FALSE"
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "replace_known_right" (formula "26") (term "0,1,1,0,0") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "replace_known_right" (formula "5") (term "0,1,1,0,0") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "replace_known_right" (formula "46") (term "0,1,1,0,0,1") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "30")))
                                             (rule "eqSymm" (formula "46") (term "0"))
                                             (rule "inEqSimp_geqRight" (formula "30"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                                             (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "6") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "44") (term "0,0,1"))
                                             (rule "add_zero_right" (formula "44") (term "1,1,0,0,1"))
                                             (rule "qeq_literals" (formula "44") (term "1,0,0,1"))
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "nnf_imp2or" (formula "26") (term "0"))
                                             (rule "nnf_imp2or" (formula "28") (term "0"))
                                             (rule "nnf_imp2or" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "20") (term "0"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "19") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "18") (term "0"))
                                             (rule "nnf_notAnd" (formula "39") (term "0,0,1"))
                                             (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
                                             (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
                                             (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
                                             (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1"))
                                             (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1"))
                                             (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,1"))
                                             (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1"))
                                             (rule "mul_literals" (formula "39") (term "1,0,0,0,1"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                             (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                             (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.sorted.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "40") (term "0,0,0,1,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "40") (term "1,1,1,1,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "40") (term "0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "40") (term "0,1,1,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "allRight" (formula "40") (inst "sk=iv_29"))
                                                (rule "orRight" (formula "40"))
                                                (rule "orRight" (formula "40"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "eqSymm" (formula "41"))
                                                (rule "inEqSimp_leqRight" (formula "39"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "replace_known_left" (formula "41") (term "0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_geqRight" (formula "40"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_homoInEq0" (formula "41") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0,0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "41") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,0,1"))
                                                (rule "mul_literals" (formula "41") (term "0,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "41") (term "1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                                                (rule "mul_literals" (formula "41") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                                (rule "pullOutSelect" (formula "41") (term "1,0") (inst "selectSK=arr_191"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "42"))
                                                (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,1,0"))
                                                (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "commute_or_2" (formula "18") (term "0"))
                                                (rule "commute_or" (formula "14") (term "0,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "10"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "6"))
                                                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "42")))
                                                (rule "true_left" (formula "22"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "40"))
                                                (builtin "One Step Simplification" (formula "20"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or" (formula "17") (term "0,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "42"))
                                                (builtin "One Step Simplification" (formula "22"))
                                                (rule "commute_or_2" (formula "33") (term "0"))
                                                (rule "commute_or_2" (formula "35") (term "0"))
                                                (rule "commute_or_2" (formula "34") (term "0"))
                                                (rule "commute_or_2" (formula "27") (term "0"))
                                                (rule "commute_or_2" (formula "26") (term "0"))
                                                (rule "commute_or_2" (formula "25") (term "0"))
                                                (rule "commute_or" (formula "19") (term "0,0"))
                                                (rule "commute_or" (formula "33") (term "0,0"))
                                                (rule "commute_or" (formula "35") (term "0,0"))
                                                (rule "commute_or" (formula "34") (term "0,0"))
                                                (rule "commute_or" (formula "27") (term "0,0"))
                                                (rule "commute_or" (formula "26") (term "0,0"))
                                                (rule "commute_or" (formula "25") (term "0,0"))
                                                (rule "arrayLengthIsAShort" (formula "29") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "true_left" (formula "29"))
                                                (rule "arrayLengthNotNegative" (formula "29") (term "0,1"))
                                                (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                                (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
                                                (rule "applyEq" (formula "7") (term "0") (ifseqformula "5"))
                                                (rule "leq_literals" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "cut_direct" (formula "30") (term "0"))
                                                (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "30"))
                                                   (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                                   (rule "qeq_literals" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                                   (rule "leq_literals" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "lenNonNegative" (formula "48") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1"))
                                                   (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "49"))
                                                   (rule "add_zero_right" (formula "1") (term "1"))
                                                   (rule "inEqSimp_contradEq7" (formula "49") (ifseqformula "1"))
                                                   (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                                   (rule "add_literals" (formula "49") (term "0,0"))
                                                   (rule "leq_literals" (formula "49") (term "0"))
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "false_right" (formula "49"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.sorted[iv_28].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "5")))
                                                      (rule "ifthenelse_split" (formula "3") (term "0"))
                                                      (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "3"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "36"))
                                                         (rule "close" (formula "35") (ifseqformula "12"))
                                                      )
                                                      (branch " ¬self.sorted[iv_28] = null ∧ ¬self.sorted[iv_28].<created> = TRUE FALSE"
                                                         (rule "close" (formula "46") (ifseqformula "3"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_28].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "34"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1,0"))
                                                      (rule "add_zero_right" (formula "5") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "inEqSimp_leqRight" (formula "34"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                                   (rule "add_zero_right" (formula "1") (term "0"))
                                                   (rule "qeq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch "self.sorted.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "37"))
                                                (rule "close" (formula "29") (ifseqformula "6"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "self.chosen.length ≥ 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "26"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "times_zero_2" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                 )
                              )
                           )
                           (branch "CUT: self.sorted.length = self.sorted@heapAfter_checkAndGetBallots.length FALSE"
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                              (rule "eqSymm" (formula "26"))
                              (rule "eqSymm" (formula "13"))
                              (rule "eqSymm" (formula "8") (term "1,0"))
                              (rule "eqSymm" (formula "10"))
                              (rule "eqSymm" (formula "11"))
                              (rule "eqSymm" (formula "21"))
                              (rule "eqSymm" (formula "19"))
                              (rule "eqSymm" (formula "12"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "13"))
                              (rule "applyEq" (formula "26") (term "0,0,1") (ifseqformula "13"))
                              (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
                              (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "12"))
                              (rule "applyEq" (formula "26") (term "0,0,1") (ifseqformula "12"))
                              (rule "applyEq" (formula "26") (term "1") (ifseqformula "10"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                              (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                              (rule "array2seqDef" (formula "8") (term "1,1,0") (inst "u=u"))
                              (rule "eqSymm" (formula "8") (term "1,0"))
                              (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "10"))
                              (rule "applyEq" (formula "1") (term "1") (ifseqformula "10"))
                              (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
                              (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "10"))
                              (rule "array2seqDef" (formula "11") (term "0,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "11"))
                              (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "19"))
                              (rule "array2seqDef" (formula "26") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "26"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "eqSymm" (formula "26"))
                              (rule "array2seqDef" (formula "8") (term "1,0,1,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "8") (term "0,0,1,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "11") (term "0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "11"))
                              (rule "narrowSelectArrayType" (formula "11") (term "2,0,0") (ifseqformula "2") (ifseqformula "24"))
                              (rule "eqSymm" (formula "11"))
                              (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "19"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "26") (inst "iv=iv"))
                              (rule "lenOfSeqDefEQ" (formula "26") (term "1,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "26") (term "0"))
                              (rule "polySimp_elimSub" (formula "26") (term "1,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "26") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1"))
                              (rule "eqSeqDef2" (formula "1") (inst "iv=iv") (ifseqformula "10"))
                              (rule "andLeft" (formula "1"))
                              (rule "lenOfSeqDef" (formula "1") (term "1"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                              (rule "times_zero_2" (formula "1") (term "1,1,1"))
                              (rule "add_zero_right" (formula "1") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "1") (term "0"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                              (rule "times_zero_2" (formula "1") (term "1,1,0"))
                              (rule "add_zero_right" (formula "1") (term "1,0"))
                              (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                              (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                              (rule "castDel" (formula "2") (term "1,0,1,0"))
                              (rule "castDel" (formula "2") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                              (rule "castDel" (formula "2") (term "1,0,1,0"))
                              (rule "castDel" (formula "2") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                              (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                              (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "eqSeqDef" (formula "19") (inst "iv=iv"))
                              (rule "andLeft" (formula "19"))
                              (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "20") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDef" (formula "19") (term "0"))
                              (rule "eqSymm" (formula "19"))
                              (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                              (rule "times_zero_2" (formula "19") (term "1,1,1"))
                              (rule "add_zero_right" (formula "19") (term "1,1"))
                              (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                              (rule "castDel" (formula "20") (term "2,0,1,0"))
                              (rule "castDel" (formula "20") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "20") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "19") (term "0"))
                              (rule "eqSymm" (formula "19"))
                              (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                              (rule "mul_literals" (formula "19") (term "1,1,1"))
                              (rule "add_zero_right" (formula "19") (term "1,1"))
                              (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                              (rule "castDel" (formula "20") (term "1,0,1,0"))
                              (rule "castDel" (formula "20") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "20") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1"))
                              (rule "add_zero_right" (formula "19") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "20") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "20") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0"))
                              (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "20") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "20") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0,0,1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "22") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_20"))
                              (rule "applyEq" (formula "28") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "0,0,0,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "0,0,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "1,1,1,0,1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "23") (term "0,0") (ifseqformula "1"))
                              (rule "close" (formula "23") (ifseqformula "14"))
                           )
                        )
                        (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.concatenated@heapAfter_checkAndGetBallots) = array2seq(heap, self.concatenated) FALSE"
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "20") (inst "iv=iv") (userinteraction))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "15"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "eqSymm" (formula "9"))
                           (rule "eqSymm" (formula "10"))
                           (rule "eqSymm" (formula "25"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "12"))
                           (rule "eqSymm" (formula "18"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
                           (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                           (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "20") (term "0,0,1,0,1") (inst "u=u"))
                           (rule "getOfSeqDef" (formula "20") (term "0,1,0,1"))
                           (rule "castDel" (formula "20") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "20") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "20") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "20") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "20") (term "0,1,0,1"))
                           (rule "castDel" (formula "20") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "20") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "20") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0,1"))
                           (rule "array2seqDef" (formula "20") (term "0,0,0") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "20") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0"))
                           (rule "array2seqDef" (formula "20") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "20") (term "0"))
                           (rule "lenOfSeqDef" (formula "20") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,0,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "20") (term "0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,1,0"))
                           (rule "array2seqDef" (formula "7") (term "1,0,0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "9"))
                           (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                           (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "9"))
                           (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "10"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "25") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "18") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "20") (term "0,1,1,1,0,0,1") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "20") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "20") (term "1,1,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "10") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "10"))
                           (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "1") (ifseqformula "23"))
                           (rule "eqSymm" (formula "10"))
                           (rule "array2seqDef" (formula "25") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "25") (term "0"))
                           (rule "lenOfSeqDef" (formula "25") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "25") (term "1,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "25") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0"))
                           (rule "array2seqDef" (formula "25") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "25") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "25") (term "0,1,0,1"))
                           (rule "castDel" (formula "25") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "25") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,1"))
                           (rule "eqSeqDef" (formula "18") (inst "iv=iv"))
                           (rule "andLeft" (formula "18"))
                           (rule "getOfSeqDef" (formula "19") (term "0,1,0"))
                           (rule "castDel" (formula "19") (term "1,0,1,0"))
                           (rule "castDel" (formula "19") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "19") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "19") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "18") (term "0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                           (rule "times_zero_2" (formula "18") (term "1,1,1"))
                           (rule "add_zero_right" (formula "18") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "19") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "19") (term "0,1,0"))
                           (rule "castDel" (formula "19") (term "1,0,1,0"))
                           (rule "castDel" (formula "19") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "19") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "19") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "18") (term "0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                           (rule "mul_literals" (formula "18") (term "1,1,1"))
                           (rule "add_zero_right" (formula "18") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
                           (rule "apply_eq_monomials" (formula "19") (term "1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,0,1"))
                           (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,0,1"))
                           (rule "apply_eq_monomials" (formula "19") (term "1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                           (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "pullOutSelect" (formula "20") (term "1,1,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_17"))
                           (rule "applyEq" (formula "26") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "18") (term "0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "26") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "26") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "18") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "19") (term "1,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "19") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "26") (term "1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "21") (term "1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "18") (term "0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "26") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "18") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "19") (term "1,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "19") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "21") (term "0,1,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "allRight" (formula "21") (inst "sk=iv_14"))
                           (rule "impRight" (formula "21"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "28") (term "1,1,0,1,0,1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "22") (term "0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "1")))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "22") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "22") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                           (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "19"))
                           (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "pullOutSelect" (formula "27") (term "1,1,1,0,1,1,1,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_19"))
                           (rule "applyEq" (formula "28") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "1,1,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "0,0,0,0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "28") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "28") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "28") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "28") (term "1,1,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "28") (term "0,0,0,0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "28") (term "0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "applyEq" (formula "27") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "13"))
                           (rule "applyEq" (formula "27") (term "0,0,0,1,1,0,1") (ifseqformula "13"))
                           (rule "applyEq" (formula "27") (term "0,0,0,1,0") (ifseqformula "13"))
                           (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "pullOutSelect" (formula "21") (term "1,0") (inst "selectSK=arr_176"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "22"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "25")) (ifInst ""  (formula "4")))
                           (rule "eqSymm" (formula "9"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "applyEq" (formula "9") (term "1") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "11"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "11"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "11"))
                           (rule "notLeft" (formula "10"))
                           (rule "notLeft" (formula "9"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "narrowSelectArrayType" (formula "30") (term "1,0") (ifseqformula "4") (ifseqformula "28"))
                           (rule "eqSymm" (formula "30"))
                           (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "18") (ifseqformula "28"))
                           (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "4") (ifseqformula "28"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "12") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "27")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                           (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "22") (term "0"))
                           (rule "nnf_imp2or" (formula "34") (term "0,1"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_notAnd" (formula "22") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                           (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "34") (term "0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0,1"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "16") (ifseqformula "6"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "18"))
                           (rule "notLeft" (formula "17"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "17"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "18"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "17"))
                           (rule "notLeft" (formula "16"))
                           (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "29"))
                           (rule "nonNull" (formula "18") (inst "i=i"))
                           (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "30")))
                           (rule "greater_literals" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "30"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "17") (inst "i=i"))
                           (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "31")))
                           (rule "greater_literals" (formula "17") (term "0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "31"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "16") (inst "i=i"))
                           (rule "greater_literals" (formula "16") (term "0,1"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "32")))
                           (rule "sub_literals" (formula "16") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "32"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                           (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "18") (term "0"))
                           (rule "nnf_imp2or" (formula "17") (term "0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "25") (ifseqformula "6"))
                           (rule "replaceKnownSelect_taclet110000201_2" (formula "25") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet110000201_3" (formula "25") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet110000201_0" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet110000201_1" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "andLeft" (formula "25"))
                           (rule "notLeft" (formula "26"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "notLeft" (formula "27"))
                           (rule "andLeft" (formula "25"))
                           (rule "notLeft" (formula "27"))
                           (rule "notLeft" (formula "26"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "nonNull" (formula "27") (inst "i=i"))
                           (rule "greater_literals" (formula "27") (term "0,1"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "sub_literals" (formula "27") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "andLeft" (formula "27"))
                           (rule "notLeft" (formula "27"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "26") (inst "i=i"))
                           (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "greater_literals" (formula "26") (term "0,1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "notLeft" (formula "26"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "25") (inst "i=i"))
                           (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "41")))
                           (rule "greater_literals" (formula "25") (term "0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_14"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_18"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_18"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_18"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_14"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_19"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                           (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "42")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "27"))
                           (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                           (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
                           (rule "hideAuxiliaryEq" (formula "27"))
                           (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_20"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "26"))
                           (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                           (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "41")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "26"))
                           (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
                           (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                           (rule "hideAuxiliaryEq" (formula "26"))
                           (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "14"))
                           (rule "arrayLengthIsAShort" (formula "14") (term "1"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                           (rule "arrayLengthNotNegative" (formula "15") (term "1"))
                           (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                           (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "nnf_imp2or" (formula "17") (term "0"))
                           (rule "cut_direct" (formula "23") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "18") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "24") (term "0"))
                              (rule "nnf_imp2or" (formula "26") (term "0"))
                              (rule "nnf_imp2or" (formula "25") (term "0"))
                              (rule "nnf_notAnd" (formula "17") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                              (rule "commute_or_2" (formula "22") (term "0"))
                              (rule "ifthenelse_split" (formula "21") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "41") (term "0,0,0") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "eqSymm" (formula "41") (term "0"))
                                 (rule "commute_or_2" (formula "9") (term "0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0"))
                                 (rule "ifthenelse_split" (formula "22") (term "0"))
                                 (branch "self.concatenated.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "42") (term "1,1,1,0,0,1,0,1") (ifseqformula "23"))
                                    (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0,0") (ifseqformula "23"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "applyEq" (formula "36") (term "0,0,0") (ifseqformula "22"))
                                    (rule "eqSymm" (formula "36"))
                                    (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "applyEq" (formula "36") (term "0,0,0") (ifseqformula "22"))
                                    (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "eqSymm" (formula "36"))
                                    (rule "commute_or_2" (formula "11") (term "0"))
                                    (rule "commute_or_2" (formula "12") (term "0"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "self.concatenated.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "closeTrue" (formula "37"))
                                    )
                                    (branch "self.concatenated.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "27") (ifseqformula "35"))
                                       (rule "close" (formula "27") (ifseqformula "4"))
                                    )
                                 )
                                 (branch "self.concatenated.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "22"))
                                    (rule "inEqSimp_geqRight" (formula "27"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "23"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "times_zero_2" (formula "4") (term "1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "22"))
                                    (rule "closeFalse" (formula "22"))
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "41") (term "0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "eqSymm" (formula "41") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "26"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "18") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "24") (term "0"))
                              (rule "nnf_imp2or" (formula "26") (term "0"))
                              (rule "nnf_imp2or" (formula "25") (term "0"))
                              (rule "commute_or_2" (formula "23") (term "0"))
                              (rule "nnf_notAnd" (formula "17") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                              (rule "ifthenelse_split" (formula "21") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "42") (term "0,0,0") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "eqSymm" (formula "42") (term "0"))
                                 (rule "commute_or_2" (formula "9") (term "0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0"))
                                 (rule "ifthenelse_split" (formula "22") (term "0"))
                                 (branch "self.concatenated.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "43") (term "1,1,1,0,0,1,0,1") (ifseqformula "23"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0,0") (ifseqformula "22"))
                                    (rule "applyEq" (formula "37") (term "0,0,0") (ifseqformula "22"))
                                    (rule "eqSymm" (formula "37"))
                                    (rule "replace_known_left" (formula "37") (term "0,1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "applyEq" (formula "37") (term "0,0,0") (ifseqformula "22"))
                                    (rule "replace_known_left" (formula "37") (term "0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "eqSymm" (formula "37"))
                                    (rule "commute_or_2" (formula "11") (term "0"))
                                    (rule "commute_or_2" (formula "12") (term "0"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "self.concatenated.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "closeTrue" (formula "38"))
                                    )
                                    (branch "self.concatenated.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "27") (ifseqformula "36"))
                                       (rule "close" (formula "27") (ifseqformula "4"))
                                    )
                                 )
                                 (branch "self.concatenated.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "22"))
                                    (rule "inEqSimp_geqRight" (formula "27"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "23"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "times_zero_2" (formula "4") (term "1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0"))
                                    (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "22"))
                                    (rule "closeFalse" (formula "22"))
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "42") (term "0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "eqSymm" (formula "42") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "26"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                        )
                     )
                  )
                  (branch
                     (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndGetBallots,
            byte[]::select(heapAfter_checkAndGetBallots,
                           self,
                           verif.selectvoting.system.core.MixServer::$unsigned))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$unsigned))") (userinteraction))
                     (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.unsigned@heapAfter_checkAndGetBallots) = array2seq(heap, self.unsigned) TRUE"
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "1") (userinteraction))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "11") (userinteraction))
                        (rule "cut" (inst "cutFormula=  array2seq(heap,
            byte[]::select(heap,
                           null,
                           verif.selectvoting.system.core.Tag::$BALLOTS))
= array2seq(heapAfter_checkAndGetBallots,
            byte[]::select(heapAfter_checkAndGetBallots,
                           null,
                           verif.selectvoting.system.core.Tag::$BALLOTS))") (userinteraction))
                        (branch "CUT: array2seq(heap, verif.selectvoting.system.core.Tag.BALLOTS) = array2seq(heapAfter_checkAndGetBallots, verif.selectvoting.system.core.Tag.BALLOTS@heapAfter_checkAndGetBallots) TRUE"
                           (rule "applyEqReverse" (formula "26") (term "0,1") (ifseqformula "1") (userinteraction))
                           (rule "cut" (inst "cutFormula=  array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$electionID))
= array2seq(heapAfter_checkAndGetBallots,
            byte[]::select(heapAfter_checkAndGetBallots,
                           self,
                           verif.selectvoting.system.core.MixServer::$electionID))") (userinteraction))
                           (branch "CUT: array2seq(heap, self.electionID) = array2seq(heapAfter_checkAndGetBallots, self.electionID@heapAfter_checkAndGetBallots) TRUE"
                              (rule "applyEqReverse" (formula "27") (term "0,1,1") (ifseqformula "1") (userinteraction))
                              (rule "cut" (inst "cutFormula=  array2seq(heapAfter_checkAndGetBallots,
            byte[]::select(heapAfter_checkAndGetBallots,
                           self,
                           verif.selectvoting.system.core.MixServer::$concatenated))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$concatenated))") (userinteraction))
                              (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.concatenated@heapAfter_checkAndGetBallots) = array2seq(heap, self.concatenated) TRUE"
                                 (rule "applyEq" (formula "28") (term "1,1,1") (ifseqformula "1") (userinteraction))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "closeTrue" (formula "28") (userinteraction))
                              )
                              (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.concatenated@heapAfter_checkAndGetBallots) = array2seq(heap, self.concatenated) FALSE"
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "23") (inst "iv=iv") (userinteraction))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                 (rule "eqSymm" (formula "10") (term "1,0"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "eqSymm" (formula "28"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1"))
                                 (rule "applyEq" (formula "28") (term "1") (ifseqformula "13"))
                                 (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
                                 (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "array2seqDef" (formula "23") (term "0,0,0") (inst "u=u"))
                                 (rule "lenOfSeqDef" (formula "23") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "23") (term "1,0,0"))
                                 (rule "times_zero_2" (formula "23") (term "1,1,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "0,0,0,0"))
                                 (rule "array2seqDef" (formula "23") (term "0,0,1,0,1") (inst "u=u"))
                                 (rule "getOfSeqDef" (formula "23") (term "0,1,0,1"))
                                 (rule "castDel" (formula "23") (term "2,0,1,0,1"))
                                 (rule "castDel" (formula "23") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0,1"))
                                 (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0,1"))
                                 (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0,1"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0,1"))
                                 (rule "array2seqDef" (formula "23") (term "0,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "23") (term "0"))
                                 (rule "lenOfSeqDef" (formula "23") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "23") (term "1,0,0"))
                                 (rule "times_zero_2" (formula "23") (term "1,1,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
                                 (rule "eqSymm" (formula "23") (term "0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "0,0,1,0"))
                                 (rule "array2seqDef" (formula "23") (term "0,1,1,0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "23") (term "1,0,1"))
                                 (rule "getOfSeqDef" (formula "23") (term "0,1,0,1"))
                                 (rule "castDel" (formula "23") (term "2,0,1,0,1"))
                                 (rule "castDel" (formula "23") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0,1"))
                                 (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0,1"))
                                 (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "23") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0,1"))
                                 (rule "array2seqDef" (formula "10") (term "0,0,0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "10") (term "1,0,0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "10") (term "1,0"))
                                 (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "array2seqDef" (formula "13") (term "0,0") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "13") (term "2,0,0") (ifseqformula "4") (ifseqformula "26"))
                                 (rule "array2seqDef" (formula "13") (term "0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "13") (term "1") (ifseqformula "3"))
                                 (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "applyEq" (formula "10") (term "0,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
                                 (rule "array2seqDef" (formula "28") (term "0,0") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "28") (term "2,0,0") (ifseqformula "4") (ifseqformula "26"))
                                 (rule "array2seqDef" (formula "28") (term "0,1,0") (inst "u=u"))
                                 (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "1"))
                                 (rule "array2seqDef" (formula "28") (term "1,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "21") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "2") (term "2,1") (ifseqformula "4") (ifseqformula "26"))
                                 (rule "array2seqDef" (formula "28") (term "1") (inst "u=u"))
                                 (rule "applyEq" (formula "28") (term "1") (ifseqformula "13"))
                                 (rule "array2seqDef" (formula "23") (term "0,1,1,1,0,0,1") (inst "u=u"))
                                 (rule "lenOfSeqDef" (formula "23") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "23") (term "1,1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "23") (term "1,1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "23") (term "1,1,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "23") (term "0,0,1,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "23") (term "0,0,1,1,1,0,0,1"))
                                 (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "array2seqDef" (formula "10") (term "0,0,1,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "10") (term "1,0"))
                                 (rule "array2seqDef" (formula "28") (term "0,1,0") (inst "u=u"))
                                 (rule "eqSeqDef" (formula "21") (inst "iv=iv"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "lenOfSeqDef" (formula "21") (term "1"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,1"))
                                 (rule "mul_literals" (formula "21") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "21") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "21") (term "0"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                                 (rule "times_zero_2" (formula "21") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,0"))
                                 (rule "getOfSeqDef" (formula "22") (term "1,1,0"))
                                 (rule "castDel" (formula "22") (term "2,1,1,0"))
                                 (rule "castDel" (formula "22") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "22") (term "0,1,0"))
                                 (rule "castDel" (formula "22") (term "1,0,1,0"))
                                 (rule "castDel" (formula "22") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                                 (rule "apply_eq_monomials" (formula "22") (term "1,0,0,1,0,0") (ifseqformula "21"))
                                 (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                 (rule "eqSeqDef" (formula "2") (inst "iv=iv"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "getOfSeqDef" (formula "3") (term "0,1,0"))
                                 (rule "castDel" (formula "3") (term "2,0,1,0"))
                                 (rule "castDel" (formula "3") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "2") (term "1"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "2") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "3") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,1,1,0,0"))
                                 (rule "times_zero_2" (formula "3") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,1,1,0,0"))
                                 (rule "lenOfSeqDef" (formula "2") (term "0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,0"))
                                 (rule "getOfSeqDef" (formula "3") (term "0,1,0"))
                                 (rule "castDel" (formula "3") (term "2,0,1,0"))
                                 (rule "castDel" (formula "3") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,1,0"))
                                 (rule "apply_eq_monomials" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "array2seqDef" (formula "4") (term "1,1,1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "4") (term "0,1,1") (inst "u=u"))
                                 (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "getOfSeqDef" (formula "14") (term "0,1,0"))
                                 (rule "castDel" (formula "14") (term "1,0,1,0"))
                                 (rule "castDel" (formula "14") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "14") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "13") (term "0"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                                 (rule "mul_literals" (formula "13") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "13") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "14") (term "0,1,0"))
                                 (rule "castDel" (formula "14") (term "2,0,1,0"))
                                 (rule "castDel" (formula "14") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "14") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "13") (term "0"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                                 (rule "mul_literals" (formula "13") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "13") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "14") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "14") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
                                 (rule "apply_eq_monomials" (formula "14") (term "1,0,0,1,0,0") (ifseqformula "13"))
                                 (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "14") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "14") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "14") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,0,0"))
                                 (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "lenOfSeqDef" (formula "1") (term "0"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                 (rule "times_zero_2" (formula "1") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "1") (term "1,1"))
                                 (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                 (rule "castDel" (formula "2") (term "1,0,1,0"))
                                 (rule "castDel" (formula "2") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                                 (rule "lenOfSeqDef" (formula "1") (term "0"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                 (rule "times_zero_2" (formula "1") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "1") (term "1,1"))
                                 (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                 (rule "castDel" (formula "2") (term "1,0,1,0"))
                                 (rule "castDel" (formula "2") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                                 (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,0,0"))
                                 (rule "eqSeqDef" (formula "12") (term "1,0") (inst "iv=iv"))
                                 (rule "getOfSeqDef" (formula "12") (term "1,1,0,1,1,0"))
                                 (rule "castDel" (formula "12") (term "2,1,1,0,1,1,0"))
                                 (rule "castDel" (formula "12") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "12") (term "1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0"))
                                 (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "1,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,1,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,0,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1,0"))
                                 (rule "pullOutSelect" (formula "26") (term "0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_16"))
                                 (rule "applyEq" (formula "32") (term "1,2,1,1,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "27") (term "0,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "27") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "25") (term "1,1,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "27") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "32") (term "0,1,1,1,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "27") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "27") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "27") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "32") (term "1,2,1,1,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "allRight" (formula "27") (inst "sk=iv_13"))
                                 (rule "impRight" (formula "27"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEqReverse" (formula "27") (term "1,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "26") (term "0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "34") (term "0,1,1,1,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "26") (term "0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,0,1,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "2") (term "0,1,1,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "29") (term "1,1,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "1")))
                                 (rule "inEqSimp_homoInEq0" (formula "2"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
                                 (rule "eqSymm" (formula "28"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                                 (rule "eqSymm" (formula "28"))
                                 (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "25"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0"))
                                 (rule "eqSymm" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                 (rule "eqSymm" (formula "28"))
                                 (rule "pullOutSelect" (formula "7") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_13"))
                                 (rule "applyEq" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "34") (term "1,2,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "17") (term "0,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "18") (term "1,1,0,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "17") (term "0,0,0,0") (ifseqformula "7"))
                                 (rule "simplifySelectOfAnonEQ" (formula "7") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "31")) (ifInst ""  (formula "10")))
                                 (rule "applyEqReverse" (formula "8") (term "1,2,0") (ifseqformula "7"))
                                 (rule "applyEqReverse" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "7"))
                                 (rule "applyEqReverse" (formula "34") (term "1,2,0") (ifseqformula "7"))
                                 (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "7"))
                                 (rule "applyEqReverse" (formula "34") (term "0,1,0") (ifseqformula "7"))
                                 (rule "applyEqReverse" (formula "17") (term "0,1,0") (ifseqformula "7"))
                                 (rule "applyEqReverse" (formula "18") (term "1,1,0,1,0") (ifseqformula "7"))
                                 (rule "applyEqReverse" (formula "17") (term "0,0,0,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "eqSymm" (formula "7"))
                                 (rule "eqSymm" (formula "32"))
                                 (rule "pullOutSelect" (formula "5") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_4"))
                                 (rule "applyEq" (formula "7") (term "0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "7") (term "1,1,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                 (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "22"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "0,1,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "7") (term "0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "7") (term "1,1,0,1,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_13"))
                                 (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "32") (term "1,2,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "14") (term "1,2,0,0,0,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "14") (term "1,2,0,0,0,0,1,0,1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "7") (term "1,2,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "5") (term "1,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "32") (term "0,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,1,0,1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "7") (term "0,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "14") (term "1,2,0,0,0,0,1,0,0,1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "29")) (ifInst ""  (formula "9")))
                                 (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEqReverse" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "31") (term "1,2,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "13") (term "1,2,0,0,0,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "13") (term "1,2,0,0,0,0,1,0,1,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "6") (term "1,2,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "13") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "1,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "31") (term "0,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "13") (term "0,1,0,0,0,0,1,0,1,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "6") (term "0,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "13") (term "1,2,0,0,0,0,1,0,0,1,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "13") (term "0,1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "30") (inst "iv=iv"))
                                 (rule "lenOfSeqDef" (formula "30") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "30") (term "1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "30") (term "1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "1,1,1,0,0,1"))
                                 (rule "getOfSeqDef" (formula "30") (term "0,1,0,1"))
                                 (rule "castDel" (formula "30") (term "1,0,1,0,1"))
                                 (rule "castDel" (formula "30") (term "2,0,1,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "0,2,1,0,1,0,1"))
                                 (rule "eqSymm" (formula "30") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "30") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "30") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "1,1,0,1,1,0,1"))
                                 (rule "lenOfSeqDef" (formula "30") (term "0,0"))
                                 (rule "eqSymm" (formula "30") (term "0"))
                                 (rule "polySimp_elimSub" (formula "30") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "30") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "30") (term "1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "30") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "30") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "30") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1"))
                                 (rule "eqSeqDef2" (formula "5") (inst "iv=iv") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "pullOutSelect" (formula "24") (term "1,0") (inst "selectSK=arr_175"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "11") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                 (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "28")) (ifInst ""  (formula "6")))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0"))
                                 (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "notLeft" (formula "12"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "33") (term "1,0") (ifseqformula "6") (ifseqformula "31"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "narrowSelectArrayType" (formula "17") (term "1,1,1,0") (ifseqformula "6") (ifseqformula "32"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "6") (ifseqformula "31"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "21") (ifseqformula "31"))
                                 (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                 (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                 (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "14") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "29")) (ifInst ""  (formula "28")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "32")))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                 (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "25") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                 (rule "arrayLengthIsAShort" (formula "17") (term "1"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                 (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "arrayLengthNotNegative" (formula "17") (term "1"))
                                 (rule "cut_direct" (formula "24") (term "0"))
                                 (branch "CUT: result_0.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "nnf_imp2or" (formula "5") (term "0"))
                                    (rule "nnf_imp2or" (formula "4") (term "0"))
                                    (rule "nnf_imp2or" (formula "14") (term "0"))
                                    (rule "ifthenelse_split" (formula "25") (term "1"))
                                    (branch "result_0.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_left" (formula "27") (term "0,1,1,1,0,0,0") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "nnf_imp2or" (formula "39") (term "0,1"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "11") (term "0"))
                                       (rule "nnf_imp2or" (formula "12") (term "0"))
                                       (rule "nnf_imp2or" (formula "13") (term "0"))
                                       (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "39") (term "0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
                                       (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
                                       (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,1"))
                                       (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "39") (term "1,0,0,0,1"))
                                       (rule "nnf_imp2or" (formula "14") (term "0,1,1,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "8"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "narrowSelectArrayType" (formula "4") (term "1,1,1,0") (ifseqformula "6") (ifseqformula "34"))
                                       (rule "nonNull" (formula "22") (inst "i=i"))
                                       (rule "greater_literals" (formula "22") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "36")))
                                       (rule "sub_literals" (formula "22") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "36"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "21") (inst "i=i"))
                                       (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "35")))
                                       (rule "greater_literals" (formula "21") (term "0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "35"))
                                       (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                       (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "20") (inst "i=i"))
                                       (rule "greater_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "37")))
                                       (rule "sub_literals" (formula "20") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "37"))
                                       (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                       (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "30") (ifseqformula "8"))
                                       (rule "replaceKnownSelect_taclet10001000201_6" (formula "30") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet10001000201_7" (formula "30") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet10001000201_2" (formula "30") (term "0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet10001000201_0" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet10001000201_3" (formula "30") (term "0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet10001000201_1" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "nonNull" (formula "32") (inst "i=i"))
                                       (rule "greater_literals" (formula "32") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "sub_literals" (formula "32") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "31") (inst "i=i"))
                                       (rule "greater_literals" (formula "31") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "sub_literals" (formula "31") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "30") (inst "i=i"))
                                       (rule "greater_literals" (formula "30") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "sub_literals" (formula "30") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_17"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_17"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_17"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_18"))
                                       (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                       (rule "applyEq" (formula "36") (term "0") (ifseqformula "32"))
                                       (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "48")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                                       (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
                                       (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "32"))
                                       (rule "hideAuxiliaryEq" (formula "32"))
                                       (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_19"))
                                       (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "35") (term "0") (ifseqformula "31"))
                                       (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                                       (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "31"))
                                       (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
                                       (rule "hideAuxiliaryEq" (formula "31"))
                                       (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "17"))
                                       (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_18"))
                                       (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "34") (term "0") (ifseqformula "30"))
                                       (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                       (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "30"))
                                       (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                                       (rule "hideAuxiliaryEq" (formula "30"))
                                       (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "19"))
                                       (rule "nnf_imp2or" (formula "22") (term "0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0,1,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,1,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1,0"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "ifthenelse_split" (formula "28") (term "0"))
                                       (branch "self.concatenated.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "43") (term "0,0,0") (ifseqformula "29"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "replace_known_left" (formula "43") (term "0,1") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "47") (term "1,1,1,0,0,1,0,1") (ifseqformula "28"))
                                          (rule "applyEq" (formula "47") (term "1,1,1,0,0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "42") (term "0,0,0") (ifseqformula "28"))
                                          (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "eqSymm" (formula "42"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "nnf_imp2or" (formula "32") (term "0"))
                                          (rule "nnf_imp2or" (formula "31") (term "0"))
                                          (rule "nnf_imp2or" (formula "30") (term "0"))
                                          (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "16") (term "0"))
                                          (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "11") (term "0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "12") (term "0"))
                                          (rule "ifthenelse_split" (formula "44") (term "1,0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "replace_known_left" (formula "45") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "ifthenelse_to_or_right" (formula "15") (term "0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,0"))
                                             (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,0"))
                                             (rule "add_zero_left" (formula "15") (term "0,0,0,0,1,0"))
                                             (rule "commute_or_2" (formula "5") (term "0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "closeTrue" (formula "41"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "39"))
                                                (rule "close" (formula "31") (ifseqformula "7"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "replace_known_right" (formula "16") (term "0,1,1,0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "replace_known_right" (formula "45") (term "0,1,1,0,0,1") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "inEqSimp_geqRight" (formula "44"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "45") (term "0,0,1"))
                                             (rule "add_literals" (formula "45") (term "1,1,0,0,1"))
                                             (rule "qeq_literals" (formula "45") (term "1,0,0,1"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "ifthenelse_to_or_right" (formula "15") (term "0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,0"))
                                             (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,0"))
                                             (rule "add_zero_left" (formula "15") (term "0,0,0,0,1,0"))
                                             (rule "commute_or_2" (formula "5") (term "0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "closeTrue" (formula "41"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "39"))
                                                (rule "close" (formula "31") (ifseqformula "7"))
                                             )
                                          )
                                       )
                                       (branch "self.concatenated.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "28"))
                                          (rule "inEqSimp_geqRight" (formula "33"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "4") (term "0") (ifseqformula "29"))
                                          (rule "inEqSimp_homoInEq1" (formula "4"))
                                          (rule "times_zero_2" (formula "4") (term "1,0"))
                                          (rule "add_zero_right" (formula "4") (term "0"))
                                          (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "qeq_literals" (formula "28"))
                                          (rule "closeFalse" (formula "28"))
                                       )
                                    )
                                    (branch "result_0.length ≥ 1 FALSE"
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "replace_known_right" (formula "26") (term "0,1,1,1,0,0,0") (ifseqformula "28"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "add_zero_right" (formula "26") (term "1,1,0,0,0"))
                                       (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "28"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "inEqSimp_geqRight" (formula "28"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "times_zero_2" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                 )
                                 (branch "CUT: result_0.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "nnf_imp2or" (formula "5") (term "0"))
                                    (rule "nnf_imp2or" (formula "4") (term "0"))
                                    (rule "nnf_imp2or" (formula "14") (term "0"))
                                    (rule "ifthenelse_split" (formula "25") (term "1"))
                                    (branch "result_0.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_left" (formula "27") (term "0,1,1,1,0,0,0") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "nnf_imp2or" (formula "40") (term "0,1"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "11") (term "0"))
                                       (rule "nnf_imp2or" (formula "12") (term "0"))
                                       (rule "nnf_imp2or" (formula "13") (term "0"))
                                       (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "40") (term "0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1"))
                                       (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1"))
                                       (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1"))
                                       (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,1"))
                                       (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "40") (term "1,0,0,0,1"))
                                       (rule "nnf_imp2or" (formula "14") (term "0,1,1,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "8"))
                                       (rule "replaceKnownSelect_taclet10001000201_6" (formula "28") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet10001000201_7" (formula "28") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet10001000201_2" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet10001000201_0" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet10001000201_3" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet10001000201_1" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "notLeft" (formula "29"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "notLeft" (formula "28"))
                                       (rule "notLeft" (formula "28"))
                                       (rule "narrowSelectArrayType" (formula "4") (term "1,1,1,0") (ifseqformula "6") (ifseqformula "34"))
                                       (rule "nonNull" (formula "30") (inst "i=i"))
                                       (rule "greater_literals" (formula "30") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "sub_literals" (formula "30") (term "2,1,0,1"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "29") (inst "i=i"))
                                       (rule "sub_literals" (formula "29") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "greater_literals" (formula "29") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "notLeft" (formula "29"))
                                       (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "28") (inst "i=i"))
                                       (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "greater_literals" (formula "28") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "notLeft" (formula "28"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_16"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_16"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_16"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_17"))
                                       (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "34") (term "0") (ifseqformula "30"))
                                       (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                       (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                                       (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "30"))
                                       (rule "hideAuxiliaryEq" (formula "30"))
                                       (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_18"))
                                       (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                       (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "29"))
                                       (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                       (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                                       (rule "hideAuxiliaryEq" (formula "29"))
                                       (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "17"))
                                       (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_17"))
                                       (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "32") (term "0") (ifseqformula "28"))
                                       (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "45")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                       (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                                       (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "28"))
                                       (rule "hideAuxiliaryEq" (formula "28"))
                                       (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "19"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "8"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "nonNull" (formula "22") (inst "i=i"))
                                       (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "39")))
                                       (rule "greater_literals" (formula "22") (term "0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "39"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "21") (inst "i=i"))
                                       (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "38")))
                                       (rule "greater_literals" (formula "21") (term "0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "38"))
                                       (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                       (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "20") (inst "i=i"))
                                       (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "40")))
                                       (rule "greater_literals" (formula "20") (term "0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "40"))
                                       (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                       (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0,1,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,1,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,1,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1,0"))
                                       (rule "nnf_imp2or" (formula "32") (term "0"))
                                       (rule "ifthenelse_split" (formula "28") (term "0"))
                                       (branch "self.concatenated.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "43") (term "0,0,0") (ifseqformula "28"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "replace_known_left" (formula "43") (term "0,1") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "applyEq" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "48") (term "1,1,1,0,0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "48") (term "1,1,1,0,0,1,0,1") (ifseqformula "28"))
                                          (rule "applyEq" (formula "43") (term "0,0,0") (ifseqformula "28"))
                                          (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "nnf_imp2or" (formula "31") (term "0"))
                                          (rule "nnf_imp2or" (formula "30") (term "0"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "nnf_imp2or" (formula "22") (term "0"))
                                          (rule "nnf_imp2or" (formula "21") (term "0"))
                                          (rule "nnf_imp2or" (formula "20") (term "0"))
                                          (rule "commute_or_2" (formula "16") (term "0"))
                                          (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "11") (term "0"))
                                          (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                          (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "commute_or_2" (formula "12") (term "0"))
                                          (rule "ifthenelse_split" (formula "46") (term "1,0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "replace_known_left" (formula "47") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "ifthenelse_to_or_right" (formula "15") (term "0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,0"))
                                             (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,0"))
                                             (rule "add_zero_left" (formula "15") (term "0,0,0,0,1,0"))
                                             (rule "commute_or_2" (formula "5") (term "0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "closeTrue" (formula "43"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "41"))
                                                (rule "close" (formula "32") (ifseqformula "7"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "replace_known_right" (formula "16") (term "0,1,1,0") (ifseqformula "46"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "replace_known_right" (formula "47") (term "0,1,1,0,0,1") (ifseqformula "46"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "inEqSimp_geqRight" (formula "46"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "47") (term "0,0,1"))
                                             (rule "add_literals" (formula "47") (term "1,1,0,0,1"))
                                             (rule "qeq_literals" (formula "47") (term "1,0,0,1"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "ifthenelse_to_or_right" (formula "15") (term "0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,0"))
                                             (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,0"))
                                             (rule "add_zero_left" (formula "15") (term "0,0,0,0,1,0"))
                                             (rule "commute_or_2" (formula "5") (term "0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "closeTrue" (formula "43"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "41"))
                                                (rule "close" (formula "32") (ifseqformula "7"))
                                             )
                                          )
                                       )
                                       (branch "self.concatenated.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "28"))
                                          (rule "inEqSimp_geqRight" (formula "33"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                          (rule "qeq_literals" (formula "28"))
                                          (rule "closeFalse" (formula "28"))
                                       )
                                    )
                                    (branch "result_0.length ≥ 1 FALSE"
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "replace_known_right" (formula "26") (term "0,1,1,1,0,0,0") (ifseqformula "28"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "add_zero_right" (formula "26") (term "1,1,0,0,0"))
                                       (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "28"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "inEqSimp_geqRight" (formula "28"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "times_zero_2" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                              )
                           )
                           (branch "CUT: array2seq(heap, self.electionID) = array2seq(heapAfter_checkAndGetBallots, self.electionID@heapAfter_checkAndGetBallots) FALSE"
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "22") (inst "iv=iv") (userinteraction))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                              (rule "eqSymm" (formula "27"))
                              (rule "eqSymm" (formula "22") (term "1,0,1"))
                              (rule "eqSymm" (formula "14"))
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "20"))
                              (rule "eqSymm" (formula "9") (term "1,0"))
                              (rule "eqSymm" (formula "11"))
                              (rule "eqSymm" (formula "12"))
                              (rule "eqSymm" (formula "22") (term "0"))
                              (rule "eqSymm" (formula "13"))
                              (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
                              (rule "applyEq" (formula "27") (term "1") (ifseqformula "12"))
                              (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                              (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                              (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "2"))
                              (rule "array2seqDef" (formula "27") (term "0,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "27") (term "1,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "27") (term "0,0") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "27") (term "2,0,0") (ifseqformula "3") (ifseqformula "25"))
                              (rule "array2seqDef" (formula "22") (term "0,0,1,0,1") (inst "u=u"))
                              (rule "getOfSeqDef" (formula "22") (term "0,1,0,1"))
                              (rule "castDel" (formula "22") (term "1,0,1,0,1"))
                              (rule "castDel" (formula "22") (term "2,0,1,0,1"))
                              (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                              (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0,1"))
                              (rule "array2seqDef" (formula "22") (term "0,1,1,0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "22") (term "1,0,1"))
                              (rule "getOfSeqDef" (formula "22") (term "0,1,0,1"))
                              (rule "castDel" (formula "22") (term "2,0,1,0,1"))
                              (rule "castDel" (formula "22") (term "1,0,1,0,1"))
                              (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                              (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "22") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0,1"))
                              (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "1") (term "2,1") (ifseqformula "3") (ifseqformula "25"))
                              (rule "array2seqDef" (formula "20") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "20"))
                              (rule "array2seqDef" (formula "9") (term "1,1,0") (inst "u=u"))
                              (rule "eqSymm" (formula "9") (term "1,0"))
                              (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "11"))
                              (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
                              (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "11"))
                              (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "12"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "2"))
                              (rule "eqSymm" (formula "12"))
                              (rule "array2seqDef" (formula "22") (term "0,1,0") (inst "u=u"))
                              (rule "eqSymm" (formula "22") (term "0"))
                              (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,0,0"))
                              (rule "times_zero_2" (formula "22") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "22") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0"))
                              (rule "array2seqDef" (formula "27") (term "1") (inst "u=u"))
                              (rule "applyEq" (formula "27") (term "1") (ifseqformula "2"))
                              (rule "array2seqDef" (formula "22") (term "0,1,1,1,0,0,1") (inst "u=u"))
                              (rule "lenOfSeqDef" (formula "22") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "22") (term "1,1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "22") (term "1,1,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "22") (term "0,0,1,1,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1,0,0,1"))
                              (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "2"))
                              (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                              (rule "andLeft" (formula "1"))
                              (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                              (rule "castDel" (formula "2") (term "1,0,1,0"))
                              (rule "castDel" (formula "2") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "1") (term "0"))
                              (rule "eqSymm" (formula "1"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                              (rule "mul_literals" (formula "1") (term "1,1,1"))
                              (rule "add_zero_right" (formula "1") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "2") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                              (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                              (rule "castDel" (formula "2") (term "1,0,1,0"))
                              (rule "castDel" (formula "2") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "1") (term "0"))
                              (rule "eqSymm" (formula "1"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                              (rule "times_zero_2" (formula "1") (term "1,1,1"))
                              (rule "add_zero_right" (formula "1") (term "1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                              (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                              (rule "applyEq" (formula "2") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                              (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                              (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "21"))
                              (rule "array2seqDef" (formula "10") (term "0,0,1,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "10") (term "1,0,1,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "13") (term "0,0") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "13") (term "2,0,0") (ifseqformula "4") (ifseqformula "26"))
                              (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "13"))
                              (rule "array2seqDef" (formula "23") (term "0,1,0") (inst "u=u"))
                              (rule "eqSymm" (formula "23") (term "0"))
                              (rule "lenOfSeqDef" (formula "23") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "23") (term "1,0,0"))
                              (rule "times_zero_2" (formula "23") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "23") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                              (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "0,0,0,0"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "28") (inst "iv=iv"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "0,1,0,0,1"))
                              (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
                              (rule "andLeft" (formula "3"))
                              (rule "lenOfSeqDef" (formula "3") (term "0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "1,1,1"))
                              (rule "add_zero_right" (formula "3") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "4") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "4") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "1,1,1,0,0"))
                              (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                              (rule "castDel" (formula "4") (term "1,0,1,0"))
                              (rule "castDel" (formula "4") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "4") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "4") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "3") (term "0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "1,1,1"))
                              (rule "add_zero_right" (formula "3") (term "1,1"))
                              (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                              (rule "castDel" (formula "4") (term "1,0,1,0"))
                              (rule "castDel" (formula "4") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "4") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "4") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                              (rule "add_zero_right" (formula "3") (term "0,0,0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "4") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                              (rule "add_zero_right" (formula "3") (term "0,0,0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "4") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                              (rule "apply_eq_monomials" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                              (rule "applyEq" (formula "4") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "4") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                              (rule "apply_eq_monomials" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "4") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "24") (term "1,1,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_12"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "25") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,1,0,1,0,0,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "1,2,0,1,0,0,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "25") (term "1,1,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "25") (term "0,1,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "allRight" (formula "25") (inst "sk=iv_12"))
                              (rule "impRight" (formula "25"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "32") (term "0,1,0,1,0,0,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "32") (term "1,2,0,1,0,0,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "32") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "32") (term "0,1,0,1,0,0,1,0,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "32") (term "1,2,0,1,0,0,1,0,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "32") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_homoInEq0" (formula "2"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0"))
                              (rule "eqSymm" (formula "26"))
                              (rule "polySimp_addComm1" (formula "26") (term "0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "26") (term "0,0,0"))
                              (rule "eqSymm" (formula "26"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                              (rule "eqSeqDef" (formula "24") (inst "iv=iv"))
                              (rule "andLeft" (formula "24"))
                              (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                              (rule "castDel" (formula "25") (term "1,0,1,0"))
                              (rule "castDel" (formula "25") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "24") (term "1"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1"))
                              (rule "mul_literals" (formula "24") (term "1,1,1"))
                              (rule "add_zero_right" (formula "24") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDef" (formula "24") (term "0"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,0"))
                              (rule "mul_literals" (formula "24") (term "1,1,0"))
                              (rule "add_zero_right" (formula "24") (term "1,0"))
                              (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                              (rule "castDel" (formula "25") (term "1,0,1,0"))
                              (rule "castDel" (formula "25") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1"))
                              (rule "add_zero_right" (formula "24") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                              (rule "apply_eq_monomials" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "1,1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,1,0,0"))
                              (rule "eqSeqDef2" (formula "15") (inst "iv=iv") (ifseqformula "15"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "array2seqDef" (formula "15") (term "0,1,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "31") (term "0,1,0") (inst "u=u"))
                              (rule "eqSymm" (formula "31") (term "0"))
                              (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                              (rule "eqSymm" (formula "31") (term "0"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,1,0"))
                              (rule "times_zero_2" (formula "31") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "0,0,1,0"))
                              (rule "array2seqDef" (formula "31") (term "0,1,1,0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "31") (term "1,0,1"))
                              (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                              (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                              (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                              (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                              (rule "eqSymm" (formula "31") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0,1"))
                              (rule "times_zero_2" (formula "31") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0,1"))
                              (rule "pullOutSelect" (formula "4") (term "0,1,1,1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_3"))
                              (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "5") (term "1,1,0,1,0") (ifseqformula "4"))
                              (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1,0,1,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "pullOutSelect" (formula "14") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_12"))
                              (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "31") (term "0,0,0,1,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "31") (term "1,1,1,1,0,1") (ifseqformula "14"))
                              (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "31") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "14"))
                              (rule "applyEq" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "5") (term "1,1,0,1,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "31") (term "0,1,1,0") (ifseqformula "14"))
                              (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "28")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "15") (term "1,2,0") (ifseqformula "14"))
                              (rule "applyEqReverse" (formula "15") (term "0,1,0") (ifseqformula "14"))
                              (rule "applyEqReverse" (formula "31") (term "0,0,0,1,0") (ifseqformula "14"))
                              (rule "applyEqReverse" (formula "31") (term "1,1,1,1,0,1") (ifseqformula "14"))
                              (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "14"))
                              (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "14"))
                              (rule "applyEqReverse" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "14"))
                              (rule "applyEqReverse" (formula "5") (term "1,1,0,1,0") (ifseqformula "14"))
                              (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "13"))
                              (rule "hideAuxiliaryEq" (formula "13"))
                              (rule "pullOutSelect" (formula "29") (term "1,2,1,1,0,0,1,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_15"))
                              (rule "applyEq" (formula "22") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "23") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "23") (term "1,1,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,1,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "30") (term "1,2,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "22") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "23") (term "1,1,0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "30") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "30") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "24") (term "1,0") (inst "selectSK=arr_174"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "eqSymm" (formula "25"))
                              (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "nnf_imp2or" (formula "12") (term "0"))
                              (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "11") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "notLeft" (formula "13"))
                              (rule "andLeft" (formula "11"))
                              (rule "notLeft" (formula "13"))
                              (rule "andLeft" (formula "11"))
                              (rule "notLeft" (formula "13"))
                              (rule "notLeft" (formula "12"))
                              (rule "notLeft" (formula "11"))
                              (rule "narrowSelectArrayType" (formula "5") (term "1,1,1,0") (ifseqformula "6") (ifseqformula "30"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                              (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                              (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "4") (term "0"))
                              (rule "nnf_imp2or" (formula "24") (term "0"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                              (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "nnf_imp2or" (formula "37") (term "0,1"))
                              (rule "arrayLengthIsAShort" (formula "16") (term "1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                              (rule "arrayLengthNotNegative" (formula "16") (term "1"))
                              (rule "cut_direct" (formula "23") (term "0"))
                              (branch "CUT: result_0.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "5") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "37") (term "0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "37") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "37") (term "1,0,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "26") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet1001000201_0" (formula "26") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1001000201_1" (formula "26") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet1001000201_4" (formula "26") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet1001000201_6" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1001000201_5" (formula "26") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1001000201_7" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "38") (term "1,0") (ifseqformula "6") (ifseqformula "32"))
                                 (rule "eqSymm" (formula "38"))
                                 (rule "narrowSelectArrayType" (formula "14") (term "2,0,0,1,1,0") (ifseqformula "6") (ifseqformula "32"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "6") (ifseqformula "32"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "20") (ifseqformula "32"))
                                 (rule "nonNull" (formula "28") (inst "i=i"))
                                 (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "greater_literals" (formula "28") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "27") (inst "i=i"))
                                 (rule "greater_literals" (formula "27") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "sub_literals" (formula "27") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "26") (inst "i=i"))
                                 (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "greater_literals" (formula "26") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_16"))
                                 (rule "applyEq" (formula "32") (term "0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                 (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "44")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "28"))
                                 (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                 (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                                 (rule "hideAuxiliaryEq" (formula "28"))
                                 (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_17"))
                                 (rule "applyEq" (formula "31") (term "0") (ifseqformula "27"))
                                 (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                                 (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "43")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "27"))
                                 (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                                 (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
                                 (rule "hideAuxiliaryEq" (formula "27"))
                                 (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "16"))
                                 (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_16"))
                                 (rule "applyEq" (formula "30") (term "0") (ifseqformula "26"))
                                 (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                                 (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "42")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "26"))
                                 (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
                                 (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                                 (rule "hideAuxiliaryEq" (formula "26"))
                                 (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "18"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "19") (ifseqformula "8"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "nonNull" (formula "21") (inst "i=i"))
                                 (rule "greater_literals" (formula "21") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "35")))
                                 (rule "sub_literals" (formula "21") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "20") (inst "i=i"))
                                 (rule "greater_literals" (formula "20") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "36")))
                                 (rule "sub_literals" (formula "20") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "36"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                 (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "19") (inst "i=i"))
                                 (rule "sub_literals" (formula "19") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "37")))
                                 (rule "greater_literals" (formula "19") (term "0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "37"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                 (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "30") (term "0"))
                                 (rule "nnf_imp2or" (formula "29") (term "0"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "self.electionID.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "41") (term "0,1") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "4")))
                                    (rule "nnf_imp2or" (formula "29") (term "0"))
                                    (rule "nnf_imp2or" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "commute_or_2" (formula "5") (term "0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "commute_or_2" (formula "28") (term "0"))
                                    (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                    (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                    (rule "ifthenelse_split" (formula "27") (term "1"))
                                    (branch "result_0.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "6") (term "0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "ifthenelse_split" (formula "44") (term "1,0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "7") (term "0,1,1,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "arrayLengthNotNegative" (formula "45") (term "1,0,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "45") (term "1,0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "45") (term "1,0,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "46") (term "1,0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "ifthenelse_split" (formula "27") (term "0"))
                                          (branch "self.concatenated.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "47") (term "1,1,1,0,0,1,0,1") (ifseqformula "28"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "46") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "27"))
                                             (rule "applyEq" (formula "46") (term "1,1,1,0,0,0") (ifseqformula "27"))
                                             (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0,0") (ifseqformula "27"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "arrayLengthNotNegative" (formula "49") (term "1,1,1,0,1,1,0,1"))
                                             (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                                             (rule "leq_literals" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "arrayLengthIsAShort" (formula "50") (term "1,1,1,0,1,1,0,1"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "commute_or_2" (formula "35") (term "0"))
                                             (rule "commute_or" (formula "8") (term "0,0"))
                                             (rule "commute_or_2" (formula "34") (term "0"))
                                             (rule "commute_or_2" (formula "33") (term "0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch "self.electionID.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "46"))
                                                (rule "closeTrue" (formula "46"))
                                             )
                                             (branch "self.electionID.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                (rule "close" (formula "36") (ifseqformula "10"))
                                             )
                                          )
                                          (branch "self.concatenated.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "27"))
                                             (rule "inEqSimp_geqRight" (formula "32"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "qeq_literals" (formula "27"))
                                             (rule "closeFalse" (formula "27"))
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "6") (term "0,1,1,0") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "inEqSimp_geqRight" (formula "44"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "45") (term "1,0,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "45") (term "1,0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "45") (term "1,0,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "46") (term "1,0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "ifthenelse_split" (formula "27") (term "0"))
                                          (branch "self.concatenated.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "47") (term "1,1,1,0,0,1,0,1") (ifseqformula "28"))
                                             (rule "applyEq" (formula "47") (term "1,1,1,0,0,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "46") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "27"))
                                             (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0,0") (ifseqformula "27"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,0") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "arrayLengthNotNegative" (formula "50") (term "1,1,1,0,1,1,0,1"))
                                             (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "4"))
                                             (rule "applyEq" (formula "11") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "add_zero_right" (formula "11") (term "1,1,0,0,1,0,0"))
                                             (rule "eqSymm" (formula "11") (term "1,0,0"))
                                             (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0,0"))
                                             (rule "eqSymm" (formula "9") (term "1,0,0"))
                                             (rule "applyEq" (formula "50") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                             (rule "add_zero_right" (formula "50") (term "1,1,0,1,1,0,1"))
                                             (rule "commute_or_2" (formula "35") (term "0"))
                                             (rule "commute_or" (formula "8") (term "0,0"))
                                             (rule "commute_or_2" (formula "34") (term "0"))
                                             (rule "commute_or_2" (formula "33") (term "0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch "self.electionID.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "46"))
                                                (rule "closeTrue" (formula "46"))
                                             )
                                             (branch "self.electionID.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                (rule "close" (formula "36") (ifseqformula "10"))
                                             )
                                          )
                                          (branch "self.concatenated.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "27"))
                                             (rule "inEqSimp_geqRight" (formula "32"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "qeq_literals" (formula "27"))
                                             (rule "closeFalse" (formula "27"))
                                          )
                                       )
                                    )
                                    (branch "result_0.length ≥ 1 FALSE"
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "replace_known_right" (formula "28") (term "0,1,1,0") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_geqRight" (formula "32"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "28") (term "0"))
                                       (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "28") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                       (rule "commute_or_2" (formula "7") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "ifthenelse_split" (formula "44") (term "1,0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "8") (term "0,1,1,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "commute_or_2" (formula "17") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "45") (term "1,0,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "45") (term "1,0,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "46") (term "1,0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "46") (term "1,0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "46") (term "1,1,1,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "47") (term "1,1,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "lenNonNegative" (formula "47") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "41"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,1") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "41"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "51") (term "1,1,1,0,1,1,0,1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "42"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "arrayLengthNotNegative" (formula "52") (term "1,1,1,0,1,1,0,1"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "commute_or_2" (formula "37") (term "0"))
                                          (rule "commute_or" (formula "11") (term "0,0"))
                                          (rule "commute_or_2" (formula "36") (term "0"))
                                          (rule "commute_or" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                          (rule "add_zero_right" (formula "34") (term "1,1,0"))
                                          (rule "qeq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "commute_or_2" (formula "34") (term "0"))
                                          (rule "ifthenelse_split" (formula "7") (term "0"))
                                          (branch "self.electionID.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "8"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "closeTrue" (formula "47"))
                                          )
                                          (branch "self.electionID.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "41"))
                                             (rule "close" (formula "37") (ifseqformula "13"))
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "7") (term "0,1,1,0") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "inEqSimp_geqRight" (formula "44"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "commute_or_2" (formula "17") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "45") (term "1,0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "45") (term "1,0,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "45") (term "1,0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "45") (term "1,0,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "46") (term "1,1,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "46") (term "1,1,1,0,0,0"))
                                          (rule "lenNonNegative" (formula "47") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "41"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,1") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "41"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "51") (term "1,1,1,0,1,1,0,1"))
                                          (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "6"))
                                          (rule "applyEq" (formula "14") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                          (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "14") (term "1,0,0"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                          (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "12") (term "1,0,0"))
                                          (rule "applyEq" (formula "51") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                          (rule "add_zero_right" (formula "51") (term "1,1,0,1,1,0,1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "42"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "commute_or_2" (formula "37") (term "0"))
                                          (rule "commute_or" (formula "11") (term "0,0"))
                                          (rule "commute_or_2" (formula "36") (term "0"))
                                          (rule "commute_or" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                          (rule "add_zero_right" (formula "34") (term "1,1,0"))
                                          (rule "qeq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "commute_or_2" (formula "34") (term "0"))
                                          (rule "ifthenelse_split" (formula "7") (term "0"))
                                          (branch "self.electionID.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "8"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "closeTrue" (formula "47"))
                                          )
                                          (branch "self.electionID.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "41"))
                                             (rule "close" (formula "37") (ifseqformula "13"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "self.electionID.length ≥ 1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "3") (term "0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                              )
                              (branch "CUT: result_0.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "5") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "38") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "19") (ifseqformula "8"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "14") (term "2,0,0,1,1,0") (ifseqformula "6") (ifseqformula "32"))
                                 (rule "narrowSelectArrayType" (formula "39") (term "1,0") (ifseqformula "6") (ifseqformula "32"))
                                 (rule "eqSymm" (formula "39"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "6") (ifseqformula "32"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "22") (ifseqformula "32"))
                                 (rule "nonNull" (formula "21") (inst "i=i"))
                                 (rule "greater_literals" (formula "21") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "34")))
                                 (rule "sub_literals" (formula "21") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "34"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "20") (inst "i=i"))
                                 (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "35")))
                                 (rule "greater_literals" (formula "20") (term "0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                 (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "19") (inst "i=i"))
                                 (rule "sub_literals" (formula "19") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "36")))
                                 (rule "greater_literals" (formula "19") (term "0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "36"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                 (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "21") (term "0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "8"))
                                 (rule "replaceKnownSelect_taclet1001000201_0" (formula "28") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1001000201_1" (formula "28") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet1001000201_4" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet1001000201_6" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1001000201_5" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1001000201_7" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "nonNull" (formula "30") (inst "i=i"))
                                 (rule "greater_literals" (formula "30") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "sub_literals" (formula "30") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "29") (inst "i=i"))
                                 (rule "greater_literals" (formula "29") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "sub_literals" (formula "29") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "28") (inst "i=i"))
                                 (rule "greater_literals" (formula "28") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "sub_literals" (formula "28") (term "2,1,0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_14"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_14"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_14"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_15"))
                                 (rule "applyEq" (formula "34") (term "0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                 (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "30"))
                                 (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                                 (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                                 (rule "hideAuxiliaryEq" (formula "30"))
                                 (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_16"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                 (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                 (rule "hideAuxiliaryEq" (formula "29"))
                                 (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "16"))
                                 (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_15"))
                                 (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "32") (term "0") (ifseqformula "28"))
                                 (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "45")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                 (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                                 (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "28"))
                                 (rule "hideAuxiliaryEq" (formula "28"))
                                 (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "18"))
                                 (rule "nnf_imp2or" (formula "20") (term "0"))
                                 (rule "nnf_imp2or" (formula "19") (term "0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "self.electionID.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "41") (term "0,1") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "4")))
                                    (rule "nnf_imp2or" (formula "30") (term "0"))
                                    (rule "commute_or_2" (formula "5") (term "0"))
                                    (rule "nnf_imp2or" (formula "29") (term "0"))
                                    (rule "nnf_imp2or" (formula "28") (term "0"))
                                    (rule "commute_or_2" (formula "27") (term "0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "24") (term "1"))
                                    (branch "result_0.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "commute_or_2" (formula "6") (term "0"))
                                       (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                       (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "ifthenelse_split" (formula "45") (term "1,0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "7") (term "0,1,1,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "arrayLengthIsAShort" (formula "46") (term "1,0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "47") (term "1,0,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "ifthenelse_split" (formula "27") (term "0"))
                                          (branch "self.concatenated.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "47") (term "1,1,1,0,0,1,0,1") (ifseqformula "27"))
                                             (rule "applyEq" (formula "47") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "27"))
                                             (rule "applyEq" (formula "47") (term "1,1,1,0,0,0") (ifseqformula "27"))
                                             (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0,0") (ifseqformula "27"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthNotNegative" (formula "50") (term "1,1,1,0,1,1,0,1"))
                                             (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                                             (rule "leq_literals" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "50") (term "1,1,1,0,1,1,0,1"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "commute_or" (formula "8") (term "0,0"))
                                             (rule "commute_or_2" (formula "35") (term "0"))
                                             (rule "commute_or_2" (formula "34") (term "0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch "self.electionID.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "closeTrue" (formula "47"))
                                             )
                                             (branch "self.electionID.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                (rule "close" (formula "36") (ifseqformula "10"))
                                             )
                                          )
                                          (branch "self.concatenated.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "27"))
                                             (rule "inEqSimp_geqRight" (formula "32"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "qeq_literals" (formula "27"))
                                             (rule "closeFalse" (formula "27"))
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "6") (term "0,1,1,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "46") (term "1,0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "46") (term "1,0,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "ifthenelse_split" (formula "27") (term "0"))
                                          (branch "self.concatenated.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "48") (term "1,1,1,0,0,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "48") (term "1,1,1,0,0,1,0,1") (ifseqformula "28"))
                                             (rule "applyEq" (formula "48") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "28"))
                                             (rule "applyEq" (formula "29") (term "1,1,1,0,0,1,0,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "42"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "arrayLengthIsAShort" (formula "50") (term "1,1,1,0,1,1,0,1"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "arrayLengthNotNegative" (formula "51") (term "1,1,1,0,1,1,0,1"))
                                             (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "4"))
                                             (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,0"))
                                             (rule "eqSymm" (formula "10") (term "1,0,0"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                                             (rule "eqSymm" (formula "9") (term "1,0,0"))
                                             (rule "applyEq" (formula "51") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                             (rule "add_zero_right" (formula "51") (term "1,1,0,1,1,0,1"))
                                             (rule "commute_or" (formula "8") (term "0,0"))
                                             (rule "commute_or_2" (formula "35") (term "0"))
                                             (rule "commute_or_2" (formula "34") (term "0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch "self.electionID.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "closeTrue" (formula "47"))
                                             )
                                             (branch "self.electionID.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                (rule "close" (formula "36") (ifseqformula "10"))
                                             )
                                          )
                                          (branch "self.concatenated.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "27"))
                                             (rule "inEqSimp_geqRight" (formula "32"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "qeq_literals" (formula "27"))
                                             (rule "closeFalse" (formula "27"))
                                          )
                                       )
                                    )
                                    (branch "result_0.length ≥ 1 FALSE"
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "replace_known_right" (formula "25") (term "0,1,1,0") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_geqRight" (formula "29"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                       (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "7") (term "0"))
                                       (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "commute_or_2" (formula "16") (term "0"))
                                       (rule "ifthenelse_split" (formula "45") (term "1,0"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "8") (term "0,1,1,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "arrayLengthIsAShort" (formula "46") (term "1,0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "47") (term "1,0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "47") (term "1,0,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "47") (term "1,1,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "47") (term "1,1,1,0,0,0"))
                                          (rule "lenNonNegative" (formula "48") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1,0") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "43"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "1,1") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "43"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "arrayLengthNotNegative" (formula "52") (term "1,1,1,0,1,1,0,1"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "52") (term "1,1,1,0,1,1,0,1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "43"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "commute_or" (formula "11") (term "0,0"))
                                          (rule "commute_or" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                          (rule "add_zero_right" (formula "34") (term "1,1,0"))
                                          (rule "qeq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "commute_or_2" (formula "36") (term "0"))
                                          (rule "ifthenelse_split" (formula "7") (term "0"))
                                          (branch "self.electionID.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "8"))
                                             (builtin "One Step Simplification" (formula "48"))
                                             (rule "closeTrue" (formula "48"))
                                          )
                                          (branch "self.electionID.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "41"))
                                             (rule "close" (formula "37") (ifseqformula "13"))
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "7") (term "0,1,1,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "46") (term "1,0,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "46") (term "1,0,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "47") (term "1,0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "47") (term "1,1,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "47") (term "1,1,1,0,0,0"))
                                          (rule "lenNonNegative" (formula "48") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "42"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,1") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "42"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "12"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "52") (term "1,1,1,0,1,1,0,1"))
                                          (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "6"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                          (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "13") (term "1,0,0"))
                                          (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                          (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,0"))
                                          (rule "eqSymm" (formula "12") (term "1,0,0"))
                                          (rule "applyEq" (formula "52") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                          (rule "add_literals" (formula "52") (term "1,1,0,1,1,0,1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1") (ifseqformula "13"))
                                          (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "43"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "commute_or" (formula "11") (term "0,0"))
                                          (rule "commute_or" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                          (rule "add_zero_right" (formula "34") (term "1,1,0"))
                                          (rule "qeq_literals" (formula "34") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "commute_or_2" (formula "36") (term "0"))
                                          (rule "ifthenelse_split" (formula "7") (term "0"))
                                          (branch "self.electionID.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "8"))
                                             (builtin "One Step Simplification" (formula "48"))
                                             (rule "closeTrue" (formula "48"))
                                          )
                                          (branch "self.electionID.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "41"))
                                             (rule "close" (formula "37") (ifseqformula "13"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "self.electionID.length ≥ 1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "30"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "times_zero_2" (formula "4") (term "1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: array2seq(heap, verif.selectvoting.system.core.Tag.BALLOTS) = array2seq(heapAfter_checkAndGetBallots, verif.selectvoting.system.core.Tag.BALLOTS@heapAfter_checkAndGetBallots) FALSE"
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "21") (inst "iv=iv") (userinteraction))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "8") (term "1,0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "21") (term "0"))
                           (rule "eqSymm" (formula "26"))
                           (rule "eqSymm" (formula "12"))
                           (rule "eqSymm" (formula "21") (term "1,0,1"))
                           (rule "eqSymm" (formula "19"))
                           (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1"))
                           (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "26") (term "1") (ifseqformula "11"))
                           (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
                           (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "1"))
                           (rule "array2seqDef" (formula "8") (term "1,0,0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "8") (term "0,0,0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "8") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "8") (term "1,0"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "10"))
                           (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "11"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                           (rule "applyEq" (formula "11") (term "1") (ifseqformula "1"))
                           (rule "array2seqDef" (formula "21") (term "0,0,0") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "21") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "21") (term "1,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "21") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                           (rule "add_zero_right" (formula "21") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0"))
                           (rule "array2seqDef" (formula "21") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "21") (term "0"))
                           (rule "lenOfSeqDef" (formula "21") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "21") (term "1,0,0"))
                           (rule "times_zero_2" (formula "21") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "21") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                           (rule "add_zero_right" (formula "21") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "21") (term "0"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,0,1,0"))
                           (rule "array2seqDef" (formula "26") (term "0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "26") (term "1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "26") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "21") (term "0,0,1,0,1") (inst "u=u"))
                           (rule "getOfSeqDef" (formula "21") (term "0,1,0,1"))
                           (rule "castDel" (formula "21") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "21") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "21") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "21") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "21") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "21") (term "0,1,0,1"))
                           (rule "castDel" (formula "21") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "21") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "21") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0,1"))
                           (rule "narrowSelectArrayType" (formula "21") (term "1,0,1,0,1") (ifseqformula "2") (ifseqformula "24"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "21") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,1,1,0,1"))
                           (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "19"))
                           (rule "array2seqDef" (formula "26") (term "1") (inst "u=u"))
                           (rule "applyEq" (formula "26") (term "1") (ifseqformula "11"))
                           (rule "array2seqDef" (formula "21") (term "0,1,1,1,0,0,1") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "21") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "21") (term "1,1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "21") (term "1,1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "21") (term "1,1,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "21") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,0,1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "1"))
                           (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "11"))
                           (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "19"))
                           (rule "array2seqDef" (formula "26") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "26"))
                           (rule "array2seqDef" (formula "1") (term "1,1,1") (inst "u=u"))
                           (rule "applyEq" (formula "1") (term "1,1,1") (ifseqformula "10"))
                           (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "array2seqDef" (formula "1") (term "0,1,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "1") (term "0,1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "1") (term "2,0,1") (ifseqformula "2") (ifseqformula "23"))
                           (rule "eqSeqDef" (formula "10") (inst "iv=iv"))
                           (rule "andLeft" (formula "10"))
                           (rule "lenOfSeqDef" (formula "10") (term "0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "polySimp_elimSub" (formula "10") (term "1,1"))
                           (rule "times_zero_2" (formula "10") (term "1,1,1"))
                           (rule "add_zero_right" (formula "10") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "11") (term "0,1,0"))
                           (rule "castDel" (formula "11") (term "2,0,1,0"))
                           (rule "castDel" (formula "11") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "10") (term "0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "polySimp_elimSub" (formula "10") (term "1,1"))
                           (rule "times_zero_2" (formula "10") (term "1,1,1"))
                           (rule "add_zero_right" (formula "10") (term "1,1"))
                           (rule "getOfSeqDef" (formula "11") (term "0,1,0"))
                           (rule "castDel" (formula "11") (term "1,0,1,0"))
                           (rule "castDel" (formula "11") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "apply_eq_monomials" (formula "11") (term "1,0,0,1,0,0") (ifseqformula "10"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,0,1"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "10"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,0,1"))
                           (rule "apply_eq_monomials" (formula "11") (term "1,0,0,1,0,0") (ifseqformula "10"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "eqSeqDef" (formula "19") (inst "iv=iv"))
                           (rule "andLeft" (formula "19"))
                           (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "20") (term "1,1,0"))
                           (rule "castDel" (formula "20") (term "2,1,1,0"))
                           (rule "castDel" (formula "20") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "19") (term "1"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "1,1,1"))
                           (rule "add_zero_right" (formula "19") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "19") (term "0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                           (rule "mul_literals" (formula "19") (term "1,1,0"))
                           (rule "add_zero_right" (formula "19") (term "1,0"))
                           (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                           (rule "castDel" (formula "20") (term "1,0,1,0"))
                           (rule "castDel" (formula "20") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                           (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "27") (inst "iv=iv"))
                           (rule "lenOfSeqDef" (formula "27") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "27") (term "1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "27") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "27") (term "1,1,1,0,0,1"))
                           (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                           (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                           (rule "eqSymm" (formula "27") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0,1"))
                           (rule "times_zero_2" (formula "27") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0,1"))
                           (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                           (rule "eqSymm" (formula "27") (term "0"))
                           (rule "polySimp_elimSub" (formula "27") (term "1,1,0"))
                           (rule "times_zero_2" (formula "27") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "27") (term "1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "27") (term "0,0,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "27") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1,1,0,0,1"))
                           (rule "pullOutSelect" (formula "22") (term "0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_2"))
                           (rule "applyEq" (formula "28") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "1,2,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "0,1,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "28") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "28") (term "1,2,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "28") (term "0,1,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "28") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "allRight" (formula "23") (inst "sk=iv_11"))
                           (rule "impRight" (formula "23"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "25") (term "1,1,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "24") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                           (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_11"))
                           (rule "applyEq" (formula "30") (term "0,1,1,1,1,0,0,1") (ifseqformula "3"))
                           (rule "applyEq" (formula "30") (term "0,1,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "30") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "3"))
                           (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "30") (term "0,0,0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "14") (term "1,1,0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "30") (term "1,1,1,1,0,1") (ifseqformula "3"))
                           (rule "applyEq" (formula "30") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "27")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,1,1,1,0,0,1") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "13") (term "0,0,0,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "30") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "30") (term "0,0,0,1,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "13") (term "0,1,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "applyEqReverse" (formula "13") (term "1,1,0,1,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "29") (term "1,1,1,1,0,1") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "pullOutSelect" (formula "20") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_14"))
                           (rule "applyEq" (formula "29") (term "0,1,1,1,0,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "29") (term "1,2,1,1,0,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "21") (term "0,0,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "29") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "29") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "22") (term "1,1,0,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "22") (term "0,1,1,1,0,0,1,0") (ifseqformula "20"))
                           (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "21") (term "0,1,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "1,2,1,1,0,0,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "21") (term "0,0,0,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "22") (term "1,1,0,1,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0,1,0") (ifseqformula "20"))
                           (rule "hideAuxiliaryEq" (formula "20"))
                           (rule "pullOutSelect" (formula "28") (term "1,2,0,1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_11"))
                           (rule "applyEq" (formula "29") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "29") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "29") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "29") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSeqDef2" (formula "3") (inst "iv=iv") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=arr_173"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "16") (ifseqformula "26"))
                           (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "4") (ifseqformula "26"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "26")) (ifInst ""  (formula "4")))
                           (rule "eqSymm" (formula "9"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0"))
                           (rule "applyEq" (formula "9") (term "1") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "11"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "11"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "9"))
                           (rule "notLeft" (formula "9"))
                           (rule "narrowSelectArrayType" (formula "15") (term "1,1,1,0") (ifseqformula "4") (ifseqformula "30"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "12") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "27")) (ifInst ""  (formula "26")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "23") (term "0"))
                           (rule "nnf_imp2or" (formula "35") (term "0,1"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                           (rule "nnf_imp2or" (formula "14") (term "0"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_notAnd" (formula "23") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                           (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                           (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                           (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                           (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
                           (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "arrayLengthIsAShort" (formula "15") (term "1"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "arrayLengthNotNegative" (formula "15") (term "1"))
                           (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                           (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                           (rule "nnf_notAnd" (formula "14") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                           (rule "cut_direct" (formula "22") (term "0"))
                           (branch "CUT: result_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "6"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "19"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "19"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "19"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "19"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "31"))
                              (rule "nonNull" (formula "20") (inst "i=i"))
                              (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "33")))
                              (rule "greater_literals" (formula "20") (term "0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "33"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "19") (inst "i=i"))
                              (rule "greater_literals" (formula "19") (term "0,1"))
                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "32")))
                              (rule "sub_literals" (formula "19") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "32"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                              (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "18") (inst "i=i"))
                              (rule "greater_literals" (formula "18") (term "0,1"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "34")))
                              (rule "sub_literals" (formula "18") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "34"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                              (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "20") (term "0"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "27") (ifseqformula "6"))
                              (rule "replaceKnownSelect_taclet101000201_6" (formula "27") (term "0,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet101000201_7" (formula "27") (term "0,0,1"))
                              (rule "replaceKnownSelect_taclet101000201_4" (formula "27") (term "0,0,1,0,0,0,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet101000201_2" (formula "27") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet101000201_5" (formula "27") (term "0,0,1,0,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet101000201_3" (formula "27") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "28"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "28"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "28"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "29"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "nonNull" (formula "29") (inst "i=i"))
                              (rule "greater_literals" (formula "29") (term "0,1"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "sub_literals" (formula "29") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "andLeft" (formula "29"))
                              (rule "notLeft" (formula "29"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "28") (inst "i=i"))
                              (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "greater_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "27") (inst "i=i"))
                              (rule "greater_literals" (formula "27") (term "0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "sub_literals" (formula "27") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_13"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_13"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_13"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_14"))
                              (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                              (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                              (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "29"))
                              (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                              (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                              (rule "hideAuxiliaryEq" (formula "29"))
                              (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_15"))
                              (rule "applyEq" (formula "32") (term "0") (ifseqformula "28"))
                              (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                              (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "28"))
                              (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                              (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                              (rule "hideAuxiliaryEq" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "15"))
                              (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_14"))
                              (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "27"))
                              (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "43")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                              (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
                              (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "27"))
                              (rule "hideAuxiliaryEq" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "17"))
                              (rule "nnf_imp2or" (formula "19") (term "0"))
                              (rule "nnf_imp2or" (formula "18") (term "0"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                              (rule "ifthenelse_split" (formula "24") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "26") (term "0,1,1,0,0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "nnf_imp2or" (formula "29") (term "0"))
                                 (rule "nnf_imp2or" (formula "28") (term "0"))
                                 (rule "nnf_imp2or" (formula "27") (term "0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0"))
                                 (rule "ifthenelse_split" (formula "42") (term "1,0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "15") (term "0,1,1,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "replace_known_left" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "39") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "5")))
                                       (rule "commute_or_2" (formula "11") (term "0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "ifthenelse_split" (formula "25") (term "0"))
                                       (branch "self.concatenated.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "44") (term "1,1,1,0,0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "44") (term "1,1,1,0,0,1,0,1") (ifseqformula "25"))
                                          (rule "applyEq" (formula "26") (term "1,1,1,0,0,1,0") (ifseqformula "25"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "40"))
                                             (rule "closeTrue" (formula "40"))
                                          )
                                          (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "43"))
                                             (rule "close" (formula "30") (ifseqformula "6"))
                                          )
                                       )
                                       (branch "self.concatenated.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "25"))
                                          (rule "inEqSimp_geqRight" (formula "30"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "qeq_literals" (formula "25"))
                                          (rule "closeFalse" (formula "25"))
                                       )
                                    )
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "29"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "14") (term "0,1,1,0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "replace_known_right" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "inEqSimp_geqRight" (formula "42"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "43") (term "0,0,1"))
                                    (rule "add_zero_right" (formula "43") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "43") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "39") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "5")))
                                       (rule "commute_or_2" (formula "11") (term "0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "ifthenelse_split" (formula "25") (term "0"))
                                       (branch "self.concatenated.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "45") (term "1,1,1,0,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "26") (term "1,1,1,0,0,1,0") (ifseqformula "25"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "40"))
                                             (rule "closeTrue" (formula "40"))
                                          )
                                          (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "43"))
                                             (rule "close" (formula "30") (ifseqformula "6"))
                                          )
                                       )
                                       (branch "self.concatenated.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "25"))
                                          (rule "inEqSimp_geqRight" (formula "30"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "qeq_literals" (formula "25"))
                                          (rule "closeFalse" (formula "25"))
                                       )
                                    )
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "29"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "times_zero_2" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "replace_known_right" (formula "25") (term "0,1,1,0,0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "26") (term "0,0"))
                                 (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "26") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "nnf_imp2or" (formula "28") (term "0"))
                                 (rule "nnf_imp2or" (formula "27") (term "0"))
                                 (rule "nnf_imp2or" (formula "26") (term "0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "ifthenelse_split" (formula "41") (term "1,0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "16") (term "0,1,1,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "replace_known_left" (formula "42") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "ifthenelse_split" (formula "5") (term "0"))
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "38") (term "0,1") (ifseqformula "6"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "6")))
                                       (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "ifthenelse_split" (formula "3") (term "0"))
                                       (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "closeTrue" (formula "39"))
                                       )
                                       (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "42"))
                                          (rule "close" (formula "29") (ifseqformula "7"))
                                       )
                                    )
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "28"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "6"))
                                       (rule "times_zero_2" (formula "6") (term "1,0"))
                                       (rule "add_zero_right" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "6") (term "0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "closeFalse" (formula "6"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "15") (term "0,1,1,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "replace_known_right" (formula "42") (term "0,1,1,0,0,1") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "inEqSimp_geqRight" (formula "41"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "42") (term "0,0,1"))
                                    (rule "add_zero_right" (formula "42") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "42") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                    (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                    (rule "ifthenelse_split" (formula "5") (term "0"))
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "38") (term "0,1") (ifseqformula "6"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "6")))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "ifthenelse_split" (formula "3") (term "0"))
                                       (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "closeTrue" (formula "39"))
                                       )
                                       (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "42"))
                                          (rule "close" (formula "29") (ifseqformula "7"))
                                       )
                                    )
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "28"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "6"))
                                       (rule "times_zero_2" (formula "6") (term "1,0"))
                                       (rule "add_zero_right" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                              )
                           )
                           (branch "CUT: result_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "6"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "20"))
                              (rule "notLeft" (formula "19"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "20"))
                              (rule "notLeft" (formula "19"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "31"))
                              (rule "nonNull" (formula "20") (inst "i=i"))
                              (rule "greater_literals" (formula "20") (term "0,1"))
                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "34")))
                              (rule "sub_literals" (formula "20") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "34"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "19") (inst "i=i"))
                              (rule "greater_literals" (formula "19") (term "0,1"))
                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "33")))
                              (rule "sub_literals" (formula "19") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "33"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                              (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "18") (inst "i=i"))
                              (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "35")))
                              (rule "greater_literals" (formula "18") (term "0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "35"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                              (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "20") (term "0"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "27") (ifseqformula "6"))
                              (rule "replaceKnownSelect_taclet101000201_6" (formula "27") (term "0,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet101000201_7" (formula "27") (term "0,0,1"))
                              (rule "replaceKnownSelect_taclet101000201_2" (formula "27") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet101000201_4" (formula "27") (term "0,0,1,0,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet101000201_3" (formula "27") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet101000201_5" (formula "27") (term "0,0,1,0,0,0,0,0,0,0"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "28"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "29"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "29"))
                              (rule "notLeft" (formula "28"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "28"))
                              (rule "notLeft" (formula "27"))
                              (rule "nonNull" (formula "29") (inst "i=i"))
                              (rule "greater_literals" (formula "29") (term "0,1"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "sub_literals" (formula "29") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "andLeft" (formula "29"))
                              (rule "notLeft" (formula "29"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "28") (inst "i=i"))
                              (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "greater_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "27") (inst "i=i"))
                              (rule "sub_literals" (formula "27") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "greater_literals" (formula "27") (term "0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_12"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_12"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_12"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_13"))
                              (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                              (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "46")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                              (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                              (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "29"))
                              (rule "hideAuxiliaryEq" (formula "29"))
                              (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_14"))
                              (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "32") (term "0") (ifseqformula "28"))
                              (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                              (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                              (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "28"))
                              (rule "hideAuxiliaryEq" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "15"))
                              (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_13"))
                              (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "27"))
                              (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                              (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
                              (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "27"))
                              (rule "hideAuxiliaryEq" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "17"))
                              (rule "nnf_imp2or" (formula "19") (term "0"))
                              (rule "nnf_imp2or" (formula "18") (term "0"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                              (rule "ifthenelse_split" (formula "24") (term "1"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "26") (term "0,1,1,0,0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "nnf_imp2or" (formula "29") (term "0"))
                                 (rule "nnf_imp2or" (formula "28") (term "0"))
                                 (rule "nnf_imp2or" (formula "27") (term "0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0"))
                                 (rule "ifthenelse_split" (formula "43") (term "1,0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "15") (term "0,1,1,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "replace_known_left" (formula "44") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "40") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "5")))
                                       (rule "commute_or_2" (formula "11") (term "0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "ifthenelse_split" (formula "25") (term "0"))
                                       (branch "self.concatenated.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "45") (term "1,1,1,0,0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "45") (term "1,1,1,0,0,1,0,1") (ifseqformula "25"))
                                          (rule "applyEq" (formula "26") (term "1,1,1,0,0,1,0") (ifseqformula "25"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "closeTrue" (formula "41"))
                                          )
                                          (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "44"))
                                             (rule "close" (formula "30") (ifseqformula "6"))
                                          )
                                       )
                                       (branch "self.concatenated.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "25"))
                                          (rule "inEqSimp_geqRight" (formula "30"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "qeq_literals" (formula "25"))
                                          (rule "closeFalse" (formula "25"))
                                       )
                                    )
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "29"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "times_zero_2" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "14") (term "0,1,1,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "replace_known_right" (formula "44") (term "0,1,1,0,0,1") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "inEqSimp_geqRight" (formula "43"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "44") (term "0,0,1"))
                                    (rule "add_zero_right" (formula "44") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "44") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "40") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "5")))
                                       (rule "commute_or_2" (formula "11") (term "0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "ifthenelse_split" (formula "25") (term "0"))
                                       (branch "self.concatenated.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "27") (term "1,1,1,0,0,1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "46") (term "1,1,1,0,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "closeTrue" (formula "41"))
                                          )
                                          (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "44"))
                                             (rule "close" (formula "30") (ifseqformula "6"))
                                          )
                                       )
                                       (branch "self.concatenated.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "25"))
                                          (rule "inEqSimp_geqRight" (formula "30"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "qeq_literals" (formula "25"))
                                          (rule "closeFalse" (formula "25"))
                                       )
                                    )
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "29"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "replace_known_right" (formula "25") (term "0,1,1,0,0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "26") (term "0,0"))
                                 (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "26") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "nnf_imp2or" (formula "28") (term "0"))
                                 (rule "nnf_imp2or" (formula "27") (term "0"))
                                 (rule "nnf_imp2or" (formula "26") (term "0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "ifthenelse_split" (formula "42") (term "1,0"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "16") (term "0,1,1,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "replace_known_left" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                    (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "5") (term "0"))
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "39") (term "0,0") (ifseqformula "6"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "6")))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "ifthenelse_split" (formula "3") (term "0"))
                                       (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "closeTrue" (formula "40"))
                                       )
                                       (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "43"))
                                          (rule "close" (formula "29") (ifseqformula "7"))
                                       )
                                    )
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "28"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1,0"))
                                       (rule "add_zero_right" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "6") (term "0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "closeFalse" (formula "6"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "15") (term "0,1,1,0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "replace_known_right" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "inEqSimp_geqRight" (formula "42"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "43") (term "0,0,1"))
                                    (rule "add_zero_right" (formula "43") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "43") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                    (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "5") (term "0"))
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "39") (term "0,1") (ifseqformula "6"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "6")))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "ifthenelse_split" (formula "3") (term "0"))
                                       (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "closeTrue" (formula "40"))
                                       )
                                       (branch " verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "43"))
                                          (rule "close" (formula "29") (ifseqformula "7"))
                                       )
                                    )
                                    (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "28"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "6"))
                                       (rule "times_zero_2" (formula "6") (term "1,0"))
                                       (rule "add_zero_right" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "6") (term "0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "closeFalse" (formula "6"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: array2seq(heapAfter_checkAndGetBallots, self.unsigned@heapAfter_checkAndGetBallots) = array2seq(heap, self.unsigned) FALSE"
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "20") (inst "iv=iv") (userinteraction))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "15"))
                        (rule "eqSymm" (formula "7") (term "1,0"))
                        (rule "eqSymm" (formula "9"))
                        (rule "eqSymm" (formula "10"))
                        (rule "eqSymm" (formula "12"))
                        (rule "eqSymm" (formula "11"))
                        (rule "eqSymm" (formula "25"))
                        (rule "eqSymm" (formula "18"))
                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "21"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
                        (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                        (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                        (rule "array2seqDef" (formula "20") (term "0,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "20") (term "0"))
                        (rule "lenOfSeqDef" (formula "20") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "20") (term "1,0,0"))
                        (rule "times_zero_2" (formula "20") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "20") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0"))
                        (rule "array2seqDef" (formula "20") (term "0,0,1,0,1") (inst "u=u"))
                        (rule "getOfSeqDef" (formula "20") (term "0,1,0,1"))
                        (rule "castDel" (formula "20") (term "1,0,1,0,1"))
                        (rule "castDel" (formula "20") (term "2,0,1,0,1"))
                        (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "20") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0,1"))
                        (rule "array2seqDef" (formula "20") (term "0,1,1,0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "20") (term "1,0,1"))
                        (rule "getOfSeqDef" (formula "20") (term "0,1,0,1"))
                        (rule "castDel" (formula "20") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "20") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "20") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1"))
                        (rule "eqSymm" (formula "20") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0,1"))
                        (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "7") (term "1,0"))
                        (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "9"))
                        (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                        (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "1") (ifseqformula "23"))
                        (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "10"))
                        (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "25") (term "1,1,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "25") (term "0,1,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "25") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "25"))
                        (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "18"))
                        (rule "array2seqDef" (formula "20") (term "0,1,1,1,0,0,1") (inst "u=u"))
                        (rule "lenOfSeqDef" (formula "20") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "20") (term "1,1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "20") (term "1,1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "20") (term "1,1,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "20") (term "0,0,1,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,0,1,1,1,0,0,1"))
                        (rule "array2seqDef" (formula "20") (term "0,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "20") (term "0"))
                        (rule "lenOfSeqDef" (formula "20") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "20") (term "1,0,0"))
                        (rule "times_zero_2" (formula "20") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "20") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0"))
                        (rule "array2seqDef" (formula "7") (term "0,0,1,1,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "10") (term "0,1,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
                        (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "25") (inst "iv=iv"))
                        (rule "getOfSeqDef" (formula "25") (term "0,1,0,1"))
                        (rule "castDel" (formula "25") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "25") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1"))
                        (rule "eqSymm" (formula "25") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "25") (term "1,1,1,0,1,1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0,1"))
                        (rule "lenOfSeqDef" (formula "25") (term "0,0"))
                        (rule "eqSymm" (formula "25") (term "0"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,0"))
                        (rule "times_zero_2" (formula "25") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "25") (term "1,1,0"))
                        (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "25") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "25") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,1,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1"))
                        (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "18"))
                        (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "eqSeqDef" (formula "17") (inst "iv=iv"))
                        (rule "andLeft" (formula "17"))
                        (rule "lenOfSeqDef" (formula "17") (term "1"))
                        (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                        (rule "times_zero_2" (formula "17") (term "1,1,1"))
                        (rule "add_zero_right" (formula "17") (term "1,1"))
                        (rule "lenOfSeqDef" (formula "18") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "18") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                        (rule "getOfSeqDef" (formula "18") (term "1,1,0"))
                        (rule "castDel" (formula "18") (term "1,1,1,0"))
                        (rule "castDel" (formula "18") (term "2,1,1,0"))
                        (rule "add_zero_right" (formula "18") (term "0,2,1,1,1,0"))
                        (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                        (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                        (rule "getOfSeqDef" (formula "18") (term "0,1,0"))
                        (rule "castDel" (formula "18") (term "1,0,1,0"))
                        (rule "castDel" (formula "18") (term "2,0,1,0"))
                        (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,1,0"))
                        (rule "times_zero_2" (formula "18") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0"))
                        (rule "lenOfSeqDef" (formula "17") (term "0"))
                        (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                        (rule "times_zero_2" (formula "17") (term "1,1,0"))
                        (rule "add_zero_right" (formula "17") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1"))
                        (rule "add_zero_right" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                        (rule "apply_eq_monomials" (formula "18") (term "1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "polySimp_rightDist" (formula "18") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,0,0"))
                        (rule "pullOutSelect" (formula "20") (term "0,1,1,1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_10"))
                        (rule "applyEq" (formula "21") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "26") (term "1,1,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "21") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "26") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "26") (term "0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "26") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "26") (term "0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "21") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "21") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "26") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "21") (term "1,1,0,1,0,1") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "3")))
                        (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "21") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "26") (term "1,1,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "21") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "26") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "26") (term "0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "21") (term "0,0,0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "allRight" (formula "21") (inst "sk=iv_10"))
                        (rule "impRight" (formula "21"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "28") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "3"))
                        (rule "applyEqReverse" (formula "2") (term "0,0,0,1,1") (ifseqformula "3"))
                        (rule "applyEqReverse" (formula "23") (term "1,1,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "22") (term "0,0,1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "1")))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "22") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                        (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "pullOutSelect" (formula "26") (term "0,1,1,1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_13"))
                        (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "20") (term "1,1,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "27") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "27") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "27") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                        (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "20") (term "1,1,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "27") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "27") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "26") (term "0,1,0,1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_10"))
                        (rule "applyEq" (formula "27") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "27") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "27") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                        (rule "applyEqReverse" (formula "27") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "27") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "27") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "27") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "26") (term "1,2,0,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_1"))
                        (rule "applyEq" (formula "27") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "27") (term "1,2,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "27") (term "0,1,0,0,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "27") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "27") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "27") (term "1,2,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "27") (term "0,1,0,0,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "21") (term "1,0") (inst "selectSK=arr_172"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "22"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "notLeft" (formula "11"))
                        (rule "andLeft" (formula "9"))
                        (rule "notLeft" (formula "11"))
                        (rule "notLeft" (formula "10"))
                        (rule "andLeft" (formula "9"))
                        (rule "notLeft" (formula "9"))
                        (rule "notLeft" (formula "9"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "narrowSelectArrayType" (formula "29") (term "1,0") (ifseqformula "4") (ifseqformula "28"))
                        (rule "eqSymm" (formula "29"))
                        (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "17") (ifseqformula "28"))
                        (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "4") (ifseqformula "28"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                        (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                        (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_imp2or" (formula "34") (term "0,1"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_imp2or" (formula "11") (term "0"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "34") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1"))
                        (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "34") (term "1,0,0,0,1"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                        (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                        (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                        (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                        (rule "arrayLengthIsAShort" (formula "14") (term "1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "arrayLengthNotNegative" (formula "14") (term "1"))
                        (rule "cut_direct" (formula "21") (term "0"))
                        (branch "CUT: result_0.<created> = TRUE TRUE"
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "17") (ifseqformula "6"))
                           (rule "andLeft" (formula "17"))
                           (rule "notLeft" (formula "18"))
                           (rule "andLeft" (formula "17"))
                           (rule "notLeft" (formula "18"))
                           (rule "andLeft" (formula "17"))
                           (rule "notLeft" (formula "18"))
                           (rule "andLeft" (formula "17"))
                           (rule "notLeft" (formula "18"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "notLeft" (formula "17"))
                           (rule "notLeft" (formula "17"))
                           (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "30"))
                           (rule "nonNull" (formula "19") (inst "i=i"))
                           (rule "greater_literals" (formula "19") (term "0,1"))
                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "32")))
                           (rule "sub_literals" (formula "19") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "32"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "18") (inst "i=i"))
                           (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "31")))
                           (rule "greater_literals" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "31"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                           (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "17") (inst "i=i"))
                           (rule "greater_literals" (formula "17") (term "0,1"))
                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "33")))
                           (rule "sub_literals" (formula "17") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "33"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "19") (term "0"))
                           (rule "nnf_imp2or" (formula "18") (term "0"))
                           (rule "nnf_imp2or" (formula "17") (term "0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "18") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "17") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                           (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "23") (ifseqformula "6"))
                           (rule "replaceKnownSelect_taclet11000201_4" (formula "23") (term "0,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11000201_5" (formula "23") (term "0,0,1"))
                           (rule "replaceKnownSelect_taclet11000201_0" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet11000201_2" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11000201_1" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11000201_3" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "24"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "24"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "24"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "25"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "23"))
                           (rule "notLeft" (formula "23"))
                           (rule "nonNull" (formula "25") (inst "i=i"))
                           (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "greater_literals" (formula "25") (term "0,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "24") (inst "i=i"))
                           (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "greater_literals" (formula "24") (term "0,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "24"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "23") (inst "i=i"))
                           (rule "greater_literals" (formula "23") (term "0,1"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "sub_literals" (formula "23") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "23"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_11"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_11"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_11"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_12"))
                           (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "25"))
                           (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "41")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                           (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "25"))
                           (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
                           (rule "hideAuxiliaryEq" (formula "25"))
                           (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_13"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "24"))
                           (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                           (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "40")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "24"))
                           (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                           (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
                           (rule "hideAuxiliaryEq" (formula "24"))
                           (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "14"))
                           (rule "pullOutSelect" (formula "23") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_12"))
                           (rule "applyEq" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "23"))
                           (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "39")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                           (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0") (ifseqformula "23"))
                           (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "23"))
                           (rule "hideAuxiliaryEq" (formula "23"))
                           (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "16"))
                           (rule "commute_or_2" (formula "22") (term "0"))
                           (rule "nnf_imp2or" (formula "25") (term "0"))
                           (rule "commute_or_2" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "nnf_imp2or" (formula "23") (term "0"))
                           (rule "ifthenelse_split" (formula "21") (term "1"))
                           (branch "result_0.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "commute_or_2" (formula "11") (term "0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "24") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0"))
                              (rule "ifthenelse_split" (formula "41") (term "1,0"))
                              (branch "self.unsigned.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_left" (formula "37") (term "0,1") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "4")))
                                 (rule "replace_known_left" (formula "42") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "commute_or_2" (formula "13") (term "0"))
                                 (rule "ifthenelse_split" (formula "23") (term "0"))
                                 (branch "self.concatenated.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "43") (term "1,1,1,0,0,1,0,1") (ifseqformula "24"))
                                    (rule "applyEq" (formula "25") (term "1,1,1,0,0,1,0,0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "42") (term "1,1,1,0,0,0") (ifseqformula "23"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "self.unsigned.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "closeTrue" (formula "38"))
                                    )
                                    (branch "self.unsigned.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "37"))
                                       (rule "close" (formula "28") (ifseqformula "5"))
                                    )
                                 )
                                 (branch "self.concatenated.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "23"))
                                    (rule "inEqSimp_geqRight" (formula "28"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                    (rule "qeq_literals" (formula "23"))
                                    (rule "closeFalse" (formula "23"))
                                 )
                              )
                              (branch "self.unsigned.length ≥ 1 FALSE"
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "42") (term "0,1,1,0,0,1") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "inEqSimp_geqRight" (formula "41"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                           (branch "result_0.length ≥ 1 FALSE"
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_geqRight" (formula "26"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0"))
                              (rule "commute_or_2" (formula "12") (term "0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "24") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                              (rule "commute_or_2" (formula "11") (term "0"))
                              (rule "ifthenelse_split" (formula "41") (term "1,0"))
                              (branch "self.unsigned.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_left" (formula "37") (term "0,1") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "5")))
                                 (rule "replace_known_left" (formula "42") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "commute_or_2" (formula "14") (term "0"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "self.unsigned.<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "closeTrue" (formula "38"))
                                 )
                                 (branch "self.unsigned.<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "37"))
                                    (rule "close" (formula "28") (ifseqformula "6"))
                                 )
                              )
                              (branch "self.unsigned.length ≥ 1 FALSE"
                                 (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "42") (term "0,1,1,0,0,1") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "inEqSimp_geqRight" (formula "41"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                        )
                        (branch "CUT: result_0.<created> = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "17") (ifseqformula "6"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "notLeft" (formula "19"))
                           (rule "notLeft" (formula "18"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "notLeft" (formula "19"))
                           (rule "notLeft" (formula "18"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "notLeft" (formula "17"))
                           (rule "notLeft" (formula "17"))
                           (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "30"))
                           (rule "nonNull" (formula "19") (inst "i=i"))
                           (rule "greater_literals" (formula "19") (term "0,1"))
                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "33")))
                           (rule "sub_literals" (formula "19") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "33"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "18") (inst "i=i"))
                           (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "32")))
                           (rule "greater_literals" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "32"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                           (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "17") (inst "i=i"))
                           (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "34")))
                           (rule "greater_literals" (formula "17") (term "0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "34"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "19") (term "0"))
                           (rule "nnf_imp2or" (formula "18") (term "0"))
                           (rule "nnf_imp2or" (formula "17") (term "0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "18") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "17") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                           (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                           (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "23") (ifseqformula "6"))
                           (rule "replaceKnownSelect_taclet11000201_4" (formula "23") (term "0,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11000201_5" (formula "23") (term "0,0,1"))
                           (rule "replaceKnownSelect_taclet11000201_0" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet11000201_2" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11000201_1" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11000201_3" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "24"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "25"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "25"))
                           (rule "notLeft" (formula "24"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "24"))
                           (rule "notLeft" (formula "23"))
                           (rule "nonNull" (formula "25") (inst "i=i"))
                           (rule "greater_literals" (formula "25") (term "0,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "sub_literals" (formula "25") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "24") (inst "i=i"))
                           (rule "greater_literals" (formula "24") (term "0,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "sub_literals" (formula "24") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "24"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "23") (inst "i=i"))
                           (rule "greater_literals" (formula "23") (term "0,1"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "sub_literals" (formula "23") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "23"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_10"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_10"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_10"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_11"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "25"))
                           (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                           (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "42")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "25"))
                           (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                           (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
                           (rule "hideAuxiliaryEq" (formula "25"))
                           (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_12"))
                           (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "24"))
                           (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "41")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
                           (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
                           (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "24"))
                           (rule "hideAuxiliaryEq" (formula "24"))
                           (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "14"))
                           (rule "pullOutSelect" (formula "23") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_11"))
                           (rule "applyEq" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "23"))
                           (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "40")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0") (ifseqformula "23"))
                           (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0") (ifseqformula "23"))
                           (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "23"))
                           (rule "hideAuxiliaryEq" (formula "23"))
                           (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "16"))
                           (rule "commute_or_2" (formula "22") (term "0"))
                           (rule "nnf_imp2or" (formula "25") (term "0"))
                           (rule "commute_or_2" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "nnf_imp2or" (formula "23") (term "0"))
                           (rule "ifthenelse_split" (formula "21") (term "1"))
                           (branch "result_0.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "commute_or_2" (formula "11") (term "0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "24") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0"))
                              (rule "ifthenelse_split" (formula "42") (term "1,0"))
                              (branch "self.unsigned.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_left" (formula "38") (term "0,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "4")))
                                 (rule "replace_known_left" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "commute_or_2" (formula "13") (term "0"))
                                 (rule "ifthenelse_split" (formula "23") (term "0"))
                                 (branch "self.concatenated.length ≥ 1 TRUE"
                                    (rule "applyEq" (formula "25") (term "1,1,1,0,0,1,0,0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "43") (term "1,1,1,0,0,1,0,1") (ifseqformula "23"))
                                    (rule "applyEq" (formula "43") (term "1,1,1,0,0,0") (ifseqformula "23"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "self.unsigned.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "closeTrue" (formula "39"))
                                    )
                                    (branch "self.unsigned.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "38"))
                                       (rule "close" (formula "28") (ifseqformula "5"))
                                    )
                                 )
                                 (branch "self.concatenated.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "23"))
                                    (rule "inEqSimp_geqRight" (formula "28"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                    (rule "qeq_literals" (formula "23"))
                                    (rule "closeFalse" (formula "23"))
                                 )
                              )
                              (branch "self.unsigned.length ≥ 1 FALSE"
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "inEqSimp_geqRight" (formula "42"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                           (branch "result_0.length ≥ 1 FALSE"
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_geqRight" (formula "26"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0"))
                              (rule "commute_or_2" (formula "12") (term "0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "24") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "11") (term "0"))
                              (rule "ifthenelse_split" (formula "42") (term "1,0"))
                              (branch "self.unsigned.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_left" (formula "38") (term "0,1") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "5")))
                                 (rule "replace_known_left" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "commute_or_2" (formula "14") (term "0"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "self.unsigned.<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "closeTrue" (formula "39"))
                                 )
                                 (branch "self.unsigned.<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "38"))
                                    (rule "close" (formula "28") (ifseqformula "6"))
                                 )
                              )
                              (branch "self.unsigned.length ≥ 1 FALSE"
                                 (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "inEqSimp_geqRight" (formula "42"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                           )
                        )
                     )
                  )
               )
               (branch "Case 2"
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "15"))
                  (rule "eqSymm" (formula "11"))
                  (rule "eqSymm" (formula "10"))
                  (rule "eqSymm" (formula "12"))
                  (rule "eqSymm" (formula "9"))
                  (rule "eqSymm" (formula "24"))
                  (rule "eqSymm" (formula "18"))
                  (rule "eqSymm" (formula "7") (term "1,0"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                  (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
                  (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                  (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                  (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                  (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "1") (ifseqformula "22"))
                  (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "10"))
                  (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "9"))
                  (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
                  (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "18"))
                  (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                  (rule "eqSymm" (formula "7") (term "1,0"))
                  (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "18"))
                  (rule "array2seqDef" (formula "7") (term "0,0,1,1,0") (inst "u=u"))
                  (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
                  (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "eqSeqDef" (formula "16") (inst "iv=iv"))
                  (rule "andLeft" (formula "16"))
                  (rule "lenOfSeqDef" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0"))
                  (rule "times_zero_2" (formula "17") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "1,1,1,0,0"))
                  (rule "getOfSeqDef" (formula "17") (term "0,1,0"))
                  (rule "castDel" (formula "17") (term "2,0,1,0"))
                  (rule "castDel" (formula "17") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0"))
                  (rule "eqSymm" (formula "17") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "16") (term "1"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                  (rule "times_zero_2" (formula "16") (term "1,1,1"))
                  (rule "add_zero_right" (formula "16") (term "1,1"))
                  (rule "lenOfSeqDef" (formula "16") (term "0"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                  (rule "mul_literals" (formula "16") (term "1,1,0"))
                  (rule "add_zero_right" (formula "16") (term "1,0"))
                  (rule "getOfSeqDef" (formula "17") (term "0,1,0"))
                  (rule "castDel" (formula "17") (term "2,0,1,0"))
                  (rule "castDel" (formula "17") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0"))
                  (rule "eqSymm" (formula "17") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1"))
                  (rule "add_zero_right" (formula "16") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "17") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "17") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                  (rule "apply_eq_monomials" (formula "17") (term "1,0,0,1,0,0") (ifseqformula "16"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "17") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "17") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                  (rule "pullOutSelect" (formula "23") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_10"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "23"))
                  (rule "applyEq" (formula "23") (term "1") (ifseqformula "9"))
                  (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_11"))
                  (rule "applyEq" (formula "18") (term "1,1,0,1,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "17") (term "0,0,0,0") (ifseqformula "16"))
                  (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "21")) (ifInst ""  (formula "2")))
                  (rule "applyEqReverse" (formula "17") (term "0,1,0") (ifseqformula "16"))
                  (rule "applyEqReverse" (formula "18") (term "1,1,0,1,0") (ifseqformula "16"))
                  (rule "applyEqReverse" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
                  (rule "applyEqReverse" (formula "17") (term "0,0,0,0") (ifseqformula "16"))
                  (rule "hideAuxiliaryEq" (formula "16"))
                  (rule "pullOutSelect" (formula "23") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_10"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "closeTrue" (formula "24"))
               )
            )
            (branch "Case 2"
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "15"))
               (rule "eqSymm" (formula "11"))
               (rule "eqSymm" (formula "10"))
               (rule "eqSymm" (formula "12"))
               (rule "eqSymm" (formula "9"))
               (rule "eqSymm" (formula "24"))
               (rule "eqSymm" (formula "18"))
               (rule "eqSymm" (formula "7") (term "1,0"))
               (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "23"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "20"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
               (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
               (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
               (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
               (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
               (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
               (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
               (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "1") (ifseqformula "22"))
               (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
               (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "10"))
               (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "9"))
               (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
               (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "18"))
               (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
               (rule "eqSymm" (formula "7") (term "1,0"))
               (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "18"))
               (rule "array2seqDef" (formula "7") (term "0,0,1,1,0") (inst "u=u"))
               (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
               (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "eqSeqDef" (formula "16") (inst "iv=iv"))
               (rule "andLeft" (formula "16"))
               (rule "lenOfSeqDef" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0"))
               (rule "times_zero_2" (formula "17") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "17") (term "1,1,1,0,0"))
               (rule "getOfSeqDef" (formula "17") (term "0,1,0"))
               (rule "castDel" (formula "17") (term "2,0,1,0"))
               (rule "castDel" (formula "17") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0"))
               (rule "eqSymm" (formula "17") (term "1,0"))
               (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0"))
               (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0"))
               (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0"))
               (rule "lenOfSeqDef" (formula "16") (term "1"))
               (rule "polySimp_elimSub" (formula "16") (term "1,1"))
               (rule "times_zero_2" (formula "16") (term "1,1,1"))
               (rule "add_zero_right" (formula "16") (term "1,1"))
               (rule "lenOfSeqDef" (formula "16") (term "0"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0"))
               (rule "mul_literals" (formula "16") (term "1,1,0"))
               (rule "add_zero_right" (formula "16") (term "1,0"))
               (rule "getOfSeqDef" (formula "17") (term "0,1,0"))
               (rule "castDel" (formula "17") (term "2,0,1,0"))
               (rule "castDel" (formula "17") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0"))
               (rule "eqSymm" (formula "17") (term "1,0"))
               (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0"))
               (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0"))
               (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
               (rule "eqSymm" (formula "17") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
               (rule "eqSymm" (formula "17") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
               (rule "apply_eq_monomials" (formula "17") (term "1,0,0,1,0,0") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "17") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "17") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "17") (term "1,1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "17") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
               (rule "eqSymm" (formula "17") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
               (rule "eqSymm" (formula "17") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
               (rule "pullOutSelect" (formula "23") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_10"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "3")))
               (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "23"))
               (rule "applyEq" (formula "23") (term "1") (ifseqformula "10"))
               (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_12"))
               (rule "applyEq" (formula "18") (term "1,1,0,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "17") (term "0,0,0,0") (ifseqformula "16"))
               (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "21")) (ifInst ""  (formula "2")))
               (rule "applyEqReverse" (formula "17") (term "0,1,0") (ifseqformula "16"))
               (rule "applyEqReverse" (formula "18") (term "1,1,0,1,0") (ifseqformula "16"))
               (rule "applyEqReverse" (formula "18") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
               (rule "applyEqReverse" (formula "17") (term "0,0,0,0") (ifseqformula "16"))
               (rule "hideAuxiliaryEq" (formula "16"))
               (rule "pullOutSelect" (formula "23") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_11"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "3")))
               (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "1"))
               (rule "close" (formula "24") (ifseqformula "10"))
            )
         )
         (branch "Case 2"
            (rule "wellFormedAnonEQ" (formula "16") (ifseqformula "9"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "13"))
            (rule "notLeft" (formula "14"))
            (rule "eqSymm" (formula "12"))
            (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "18"))
         )
      )
   )
   (branch "Exceptional Post (checkAndGetBallots)"
      (builtin "One Step Simplification" (formula "9"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "andLeft" (formula "9"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1,0") (ifseqformula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "12"))
      (rule "notLeft" (formula "10"))
      (rule "eqSymm" (formula "17") (term "1,0,0,1,0,1"))
      (rule "eqSymm" (formula "11") (term "0,1"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "nonNull" (formula "17") (term "1,1,1,1,0,0,0,1") (inst "i=i"))
      (rule "sub_literals" (formula "17") (term "2,1,0,1,1,1,1,1,1,0,0,0,1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "greater_literals" (formula "17") (term "0,1,1,1,1,1,0,0,0,1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "nnf_imp2or" (formula "17") (term "0,1,1,1,1,1,0,0,0,1"))
      (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (inst "i=i"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "eqSymm" (formula "12"))
      (rule "eqSymm" (formula "11"))
      (rule "eqSymm" (formula "10"))
      (rule "eqSymm" (formula "9"))
      (rule "eqSymm" (formula "7") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
      (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
      (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
      (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
      (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
      (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
      (rule "narrowSelectArrayType" (formula "10") (term "2,0,0") (ifseqformula "1") (ifseqformula "21"))
      (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "10"))
      (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "9"))
      (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
      (rule "array2seqDef" (formula "7") (term "1,0,0,1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
      (rule "eqSymm" (formula "7") (term "1,0"))
      (rule "array2seqDef" (formula "10") (term "0,1,1") (inst "u=u"))
      (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
      (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "11") (ifseqformula "3"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "notLeft" (formula "11"))
      (rule "narrowSelectArrayType" (formula "7") (term "2,0,0,1,1,0") (ifseqformula "1") (ifseqformula "24"))
      (rule "nonNull" (formula "13") (inst "i=i"))
      (rule "greater_literals" (formula "13") (term "0,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "sub_literals" (formula "13") (term "2,1,0,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "notLeft" (formula "13"))
      (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "19"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "12") (inst "i=i"))
      (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "greater_literals" (formula "12") (term "0,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "notLeft" (formula "12"))
      (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "19"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
      (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "11") (inst "i=i"))
      (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "greater_literals" (formula "11") (term "0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "11"))
      (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "19"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "10"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "nnf_imp2or" (formula "12") (term "0"))
      (rule "nnf_imp2or" (formula "11") (term "0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "12") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
      (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "6") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "30")) (ifInst ""  (formula "1")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "24")) (ifInst ""  (formula "23")))
      (rule "eqSymm" (formula "6"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
      (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
      (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "6") (term "0"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_imp2or" (formula "8") (term "0"))
      (rule "nnf_notAnd" (formula "6") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "6") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "6") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "19")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
      (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
      (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "6") (term "0"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_imp2or" (formula "8") (term "0"))
      (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "19") (ifseqformula "3"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "21"))
      (rule "notLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "19"))
      (rule "notLeft" (formula "19"))
      (rule "nonNull" (formula "21") (inst "i=i"))
      (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "greater_literals" (formula "21") (term "0,1"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "notLeft" (formula "21"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "20") (inst "i=i"))
      (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "greater_literals" (formula "20") (term "0,1"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "notLeft" (formula "20"))
      (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "19") (inst "i=i"))
      (rule "sub_literals" (formula "19") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "greater_literals" (formula "19") (term "0,1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "19"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "21") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_1"))
      (rule "applyEq" (formula "26") (term "0") (ifseqformula "21"))
      (rule "applyEq" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
      (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "17"))
      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "37")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "22") (term "1,0,0,1,0") (ifseqformula "21"))
      (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "21"))
      (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
      (rule "hideAuxiliaryEq" (formula "21"))
      (rule "pullOutSelect" (formula "20") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_1"))
      (rule "applyEq" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
      (rule "applyEq" (formula "25") (term "0") (ifseqformula "20"))
      (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "17"))
      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "36")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0") (ifseqformula "20"))
      (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
      (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "20"))
      (rule "hideAuxiliaryEq" (formula "20"))
      (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "11"))
      (rule "pullOutSelect" (formula "19") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_1"))
      (rule "applyEq" (formula "24") (term "0") (ifseqformula "19"))
      (rule "applyEq" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
      (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "17"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "35")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "20") (term "1,0,0,1,0") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
      (rule "hideAuxiliaryEq" (formula "19"))
      (rule "applyEq" (formula "19") (term "1,1,1,0,0") (ifseqformula "12"))
      (rule "nnf_notAnd" (formula "6") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "6") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "6") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "commute_or_2" (formula "6") (term "0"))
      (rule "methodCallParamThrow" (formula "33") (term "1"))
      (rule "nnf_imp2or" (formula "18") (term "0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "nnf_imp2or" (formula "17") (term "0"))
      (rule "nnf_imp2or" (formula "16") (term "0"))
      (rule "commute_or_2" (formula "11") (term "0"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "nnf_notAnd" (formula "18") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
      (rule "mul_literals" (formula "18") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "17") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "16") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0"))
      (rule "arrayLengthNotNegative" (formula "9") (term "0"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
      (rule "arrayLengthIsAShort" (formula "10") (term "0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "arrayLengthNotNegative" (formula "8") (term "1"))
      (rule "arrayLengthIsAShort" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthIsAShort" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthNotNegative" (formula "8") (term "0"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
      (rule "commute_or" (formula "6") (term "0,0"))
      (rule "commute_or_2" (formula "19") (term "0"))
      (rule "commute_or" (formula "13") (term "0,0"))
      (rule "commute_or" (formula "12") (term "0,0"))
      (rule "commute_or" (formula "11") (term "0,0"))
      (rule "commute_or_2" (formula "18") (term "0"))
      (rule "commute_or_2" (formula "17") (term "0"))
      (rule "commute_or" (formula "19") (term "0,0"))
      (rule "commute_or" (formula "18") (term "0,0"))
      (rule "commute_or" (formula "17") (term "0,0"))
      (rule "tryCatchThrow" (formula "34") (term "1"))
      (rule "ifElseUnfold" (formula "34") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_2"))
      (rule "equality_comparison_simple" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "replace_known_right" (formula "34") (term "0,0,1,0") (ifseqformula "30"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "ifElseSplit" (formula "34"))
      (branch "if x_2 true"
         (builtin "One Step Simplification" (formula "35"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_2 false"
         (builtin "One Step Simplification" (formula "35"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifElseSplit" (formula "34"))
         (branch "if exc_0 instanceof java.lang.Throwable true"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "34") (term "1") (newnames "e_1"))
            (rule "reference_type_cast" (formula "34") (term "1"))
            (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
               (builtin "One Step Simplification" (formula "35"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "34") (term "1"))
               (builtin "One Step Simplification" (formula "34"))
               (rule "emptyModality" (formula "34") (term "1"))
               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "30")) (ifInst ""  (formula "30")) (ifInst ""  (formula "20")))
               (rule "eqSymm" (formula "34") (term "1,0,0,1"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "34") (term "0") (ifseqformula "3"))
               (rule "replaceKnownSelect_taclet11_0" (formula "34") (term "0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet11_1" (formula "34") (term "0,0,1,0"))
               (rule "replaceKnownSelect_taclet11_2" (formula "34") (term "0,0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet11_3" (formula "34") (term "0,0,1,0,0"))
               (rule "replaceKnownSelect_taclet11_4" (formula "34") (term "0,0,1,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet11_5" (formula "34") (term "0,0,1,0,0,0"))
               (rule "replaceKnownSelect_taclet11_12" (formula "34") (term "1,1,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet11_6" (formula "34") (term "0,0,1,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet11_13" (formula "34") (term "1,1,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet11_7" (formula "34") (term "0,0,1,0,0,0,0"))
               (rule "replaceKnownSelect_taclet11_14" (formula "34") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet11_16" (formula "34") (term "1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet11_15" (formula "34") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet11_17" (formula "34") (term "1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet11_10" (formula "34") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet11_8" (formula "34") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet11_11" (formula "34") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet11_9" (formula "34") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "34") (term "0,1,0,0,0") (ifseqformula "27"))
               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "24")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")))
               (rule "nonNull" (formula "34") (term "0,0,0") (inst "i=i"))
               (rule "greater_literals" (formula "34") (term "0,1,0,0,0"))
               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "21")))
               (rule "sub_literals" (formula "34") (term "2,1,0,0,0,0"))
               (builtin "One Step Simplification" (formula "34"))
               (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,0,0"))
               (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,0,0,0") (ifseqformula "10"))
               (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,0,0"))
               (rule "nonNull" (formula "34") (term "1,0,0") (inst "i=i"))
               (rule "greater_literals" (formula "34") (term "0,1,1,0,0"))
               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "22")))
               (rule "sub_literals" (formula "34") (term "2,1,0,1,0,0"))
               (builtin "One Step Simplification" (formula "34"))
               (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0,0"))
               (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,1,0,0") (ifseqformula "8"))
               (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0"))
               (rule "nonNull" (formula "34") (term "1,0") (inst "i=i"))
               (rule "sub_literals" (formula "34") (term "2,1,0,1,1,1,0"))
               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "23")))
               (rule "greater_literals" (formula "34") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "34"))
               (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0"))
               (rule "nnf_imp2or" (formula "34") (term "0,1,0"))
               (rule "nnf_imp2or" (formula "34") (term "0,0,0,0"))
               (rule "nnf_imp2or" (formula "34") (term "0,1,0,0"))
               (rule "nnf_notAnd" (formula "34") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "34") (term "0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "34") (term "1,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
               (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "34") (term "0,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0,0"))
               (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "34") (term "0,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "34") (term "1,0,0,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0"))
               (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1,0,0"))
               (rule "andRight" (formula "34"))
               (branch "Case 1"
                  (rule "andRight" (formula "34"))
                  (branch "Case 1"
                     (rule "andRight" (formula "34"))
                     (branch "Case 1"
                        (rule "allRight" (formula "34") (inst "sk=i_5"))
                        (rule "orRight" (formula "34"))
                        (rule "orRight" (formula "34"))
                        (rule "notRight" (formula "36"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "25")))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "18") (ifseqformula "25"))
                        (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "5") (ifseqformula "25"))
                        (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                        (rule "ifEqualsNull" (formula "3"))
                        (rule "cnf_rightDist" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "commute_or" (formula "3"))
                        (rule "cnf_rightDist" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or" (formula "4"))
                        (rule "cnf_rightDist" (formula "3"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "commute_or" (formula "3"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cut_direct" (formula "25") (term "1,0"))
                        (branch "CUT: java.lang.RuntimeException::instance(exc_0) = TRUE TRUE"
                           (rule "instanceof_not_compatible_5" (formula "26") (term "1") (ifseqformula "25"))
                           (rule "instanceof_not_compatible_5" (formula "26") (term "0,0") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "36")) (ifInst ""  (formula "36")))
                           (rule "true_left" (formula "26"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "cut_direct" (formula "22") (term "0"))
                           (branch "CUT: exc_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "7"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "0") (ifseqformula "8"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                              (rule "allLeft" (formula "26") (inst "t=i_5"))
                              (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "26") (term "0,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "8"))
                              (rule "andLeft" (formula "26"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                              (rule "add_literals" (formula "26") (term "1,1,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0"))
                              (rule "add_literals" (formula "26") (term "0"))
                              (rule "leq_literals" (formula "26"))
                              (rule "closeFalse" (formula "26"))
                           )
                           (branch "CUT: exc_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "0") (ifseqformula "7"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "8"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                              (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "allLeft" (formula "26") (inst "t=i_5"))
                              (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "8"))
                              (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "26") (term "0,0,1"))
                              (rule "leq_literals" (formula "26") (term "0,1"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "26") (term "0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "closeFalse" (formula "26"))
                           )
                        )
                        (branch "CUT: java.lang.RuntimeException::instance(exc_0) = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "cut_direct" (formula "22") (term "0"))
                           (branch "CUT: exc_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "7"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "8"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                              (rule "allLeft" (formula "26") (inst "t=i_5"))
                              (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "26") (term "0,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "8"))
                              (rule "andLeft" (formula "26"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                              (rule "add_literals" (formula "26") (term "1,1,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0"))
                              (rule "add_literals" (formula "26") (term "0"))
                              (rule "leq_literals" (formula "26"))
                              (rule "closeFalse" (formula "26"))
                           )
                           (branch "CUT: exc_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "7"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "8"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                              (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "allLeft" (formula "26") (inst "t=i_5"))
                              (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "26") (term "0,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "8"))
                              (rule "andLeft" (formula "26"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                              (rule "add_literals" (formula "26") (term "1,1,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0"))
                              (rule "add_literals" (formula "26") (term "0"))
                              (rule "leq_literals" (formula "26"))
                              (rule "closeFalse" (formula "26"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "34") (inst "sk=i_4"))
                        (rule "orRight" (formula "34"))
                        (rule "orRight" (formula "34"))
                        (rule "notRight" (formula "36"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "26")))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "18") (ifseqformula "26"))
                        (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "5") (ifseqformula "26"))
                        (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                        (rule "ifEqualsNull" (formula "3"))
                        (rule "cnf_rightDist" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "commute_or" (formula "3"))
                        (rule "cnf_rightDist" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or" (formula "4"))
                        (rule "cnf_rightDist" (formula "3"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "commute_or" (formula "3"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "cut_direct" (formula "27") (term "1,0"))
                        (branch "CUT: java.lang.RuntimeException::instance(exc_0) = TRUE TRUE"
                           (rule "instanceof_not_compatible_5" (formula "28") (term "1") (ifseqformula "27"))
                           (rule "instanceof_not_compatible_5" (formula "28") (term "0,0") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "38")) (ifInst ""  (formula "38")))
                           (rule "true_left" (formula "28"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cut_direct" (formula "22") (term "0"))
                           (branch "CUT: exc_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "7"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "8"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                              (rule "allLeft" (formula "27") (inst "t=i_4"))
                              (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "27") (term "0,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "8"))
                              (rule "andLeft" (formula "27"))
                              (rule "inEqSimp_homoInEq1" (formula "27"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                              (rule "add_literals" (formula "27") (term "1,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0"))
                              (rule "add_literals" (formula "27") (term "0"))
                              (rule "leq_literals" (formula "27"))
                              (rule "closeFalse" (formula "27"))
                           )
                           (branch "CUT: exc_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "0") (ifseqformula "7"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "8"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                              (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "allLeft" (formula "27") (inst "t=i_4"))
                              (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "8"))
                              (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                              (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "27") (term "0,0,1"))
                              (rule "leq_literals" (formula "27") (term "0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "27"))
                              (rule "qeq_literals" (formula "9") (term "0"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "closeFalse" (formula "9"))
                           )
                        )
                        (branch "CUT: java.lang.RuntimeException::instance(exc_0) = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cut_direct" (formula "22") (term "0"))
                           (branch "CUT: exc_0.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "7"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "8"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                              (rule "allLeft" (formula "27") (inst "t=i_4"))
                              (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "8"))
                              (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                              (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                              (rule "add_literals" (formula "27") (term "0,0,1"))
                              (rule "leq_literals" (formula "27") (term "0,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "27"))
                              (rule "qeq_literals" (formula "9") (term "0"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "closeFalse" (formula "9"))
                           )
                           (branch "CUT: exc_0.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "7"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "8"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                              (rule "allLeft" (formula "27") (inst "t=i_4"))
                              (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "27") (term "0,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "8"))
                              (rule "andLeft" (formula "27"))
                              (rule "inEqSimp_homoInEq1" (formula "27"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                              (rule "add_literals" (formula "27") (term "1,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0"))
                              (rule "add_literals" (formula "27") (term "0"))
                              (rule "leq_literals" (formula "27"))
                              (rule "closeFalse" (formula "27"))
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "34") (inst "sk=i_3"))
                     (rule "orRight" (formula "34"))
                     (rule "orRight" (formula "34"))
                     (rule "notRight" (formula "36"))
                     (rule "inEqSimp_leqRight" (formula "35"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "36"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "27")))
                     (rule "ifthenelse_negated" (formula "3") (term "0"))
                     (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "18") (ifseqformula "27"))
                     (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "5") (ifseqformula "27"))
                     (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                     (rule "ifEqualsNull" (formula "3"))
                     (rule "cnf_rightDist" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "commute_or" (formula "3"))
                     (rule "cnf_rightDist" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or" (formula "4"))
                     (rule "cnf_rightDist" (formula "3"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "commute_or" (formula "3"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "30"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "cut_direct" (formula "28") (term "0,0"))
                     (branch "CUT: java.lang.Error::instance(exc_0) = TRUE TRUE"
                        (rule "instanceof_not_compatible_5" (formula "29") (term "1") (ifseqformula "28"))
                        (rule "instanceof_not_compatible_5" (formula "29") (term "1,0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "39")) (ifInst ""  (formula "39")))
                        (rule "true_left" (formula "29"))
                        (rule "cut_direct" (formula "24") (term "0"))
                        (branch "CUT: exc_0.<created> = TRUE TRUE"
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,1") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "9"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "10"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "11"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                           (rule "allLeft" (formula "28") (inst "t=i_3"))
                           (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "28") (term "0,0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "8"))
                           (rule "andLeft" (formula "28"))
                           (rule "inEqSimp_homoInEq1" (formula "28"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_literals" (formula "28") (term "0"))
                           (rule "leq_literals" (formula "28"))
                           (rule "closeFalse" (formula "28"))
                        )
                        (branch "CUT: exc_0.<created> = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,1") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "36"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "9"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "10"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "11"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                           (rule "allLeft" (formula "28") (inst "t=i_3"))
                           (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1"))
                           (rule "leq_literals" (formula "28") (term "0,1"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "28") (term "0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "closeFalse" (formula "28"))
                        )
                     )
                     (branch "CUT: java.lang.Error::instance(exc_0) = TRUE FALSE"
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "cut_direct" (formula "24") (term "0"))
                        (branch "CUT: exc_0.<created> = TRUE TRUE"
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,1") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "9"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "10"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "11"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                           (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "allLeft" (formula "28") (inst "t=i_3"))
                           (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                           (rule "add_literals" (formula "28") (term "0,0,1"))
                           (rule "leq_literals" (formula "28") (term "0,1"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "28") (term "0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "closeFalse" (formula "28"))
                        )
                        (branch "CUT: exc_0.<created> = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,1") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "9"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "10"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "11"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,0,0,0"))
                           (rule "allLeft" (formula "28") (inst "t=i_3"))
                           (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "28") (term "0,0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "8"))
                           (rule "andLeft" (formula "28"))
                           (rule "inEqSimp_homoInEq1" (formula "28"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_literals" (formula "28") (term "0"))
                           (rule "leq_literals" (formula "28"))
                           (rule "closeFalse" (formula "28"))
                        )
                     )
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "34") (inst "sk=f_1"))
                  (rule "allRight" (formula "34") (inst "sk=o_1"))
                  (rule "orRight" (formula "34"))
                  (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_1_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                  (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "closeTrue" (formula "36"))
               )
            )
            (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
               (builtin "One Step Simplification" (formula "34"))
               (rule "closeTrue" (formula "34"))
            )
         )
         (branch "if exc_0 instanceof java.lang.Throwable false"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Pre (checkAndGetBallots)"
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "10")) (ifInst ""  (formula "1")) (ifInst ""  (formula "10")))
      (rule "andRight" (formula "11") (userinteraction))
      (branch "Case 1"
         (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (inst "i=i") (userinteraction))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "11")))
         (rule "closeFalse" (formula "6") (userinteraction))
      )
      (branch "Case 2"
         (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "10")))
         (rule "closeFalse" (formula "4"))
      )
   )
)
)

}
